<?xml version='1.0' encoding='UTF-8'?>
<hotspot_log version='160 1' process='67969' time_ms='1572060942859'>
<vm_version>
<name>
OpenJDK 64-Bit Server VM
</name>
<release>
14-internal+0-adhoc.xiaomingcong.openjdk10
</release>
<info>
OpenJDK 64-Bit Server VM (slowdebug 14-internal+0-adhoc.xiaomingcong.openjdk10) for bsd-amd64 JRE (14-internal+0-adhoc.xiaomingcong.openjdk10), built on Oct 26 2019 10:56:42 by &quot;xiaomingcong&quot; with clang 4.2.1 Compatible Apple LLVM 11.0.0 (clang-1100.0.33.8)
</info>
</vm_version>
<vm_arguments>
<args>
-XX:+PrintCompilation -XX:+PrintInlining -XX:+PrintOptoAssembly -Didea.launcher.port=56943 -Didea.launcher.bin.path=/Applications/IntelliJ IDEA CE.app/Contents/bin -Dfile.encoding=UTF-8 </args>
<command>
com.intellij.rt.execution.application.AppMainV2 jvmLearning.chapter11.Test
</command>
<launcher>
SUN_STANDARD
</launcher>
<properties>
java.vm.specification.name=Java Virtual Machine Specification
java.vm.version=14-internal+0-adhoc.xiaomingcong.openjdk10
java.vm.name=OpenJDK 64-Bit Server VM
jdk.debug=slowdebug
sun.boot.library.path=/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/lib
java.library.path=/Users/xiaomingcong/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:.
java.home=/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk
java.class.path=/Users/xiaomingcong/eclipse-workspace/FileReadTest/target/classes:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/java.base:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/java.compiler:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/java.datatransfer:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/java.desktop:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/java.instrument:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/java.logging:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/java.management:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/java.management.rmi:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/java.naming:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/java.net.http:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/java.prefs:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/java.rmi:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/java.scripting:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/java.se:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/java.security.jgss:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/java.security.sasl:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/java.smartcardio:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/java.sql:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/java.sql.rowset:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/java.transaction.xa:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/java.xml:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/java.xml.crypto:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/jdk.accessibility:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/jdk.aot:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/jdk.attach:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/jdk.charsets:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/jdk.compiler:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/jdk.crypto.cryptoki:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/jdk.crypto.ec:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/jdk.dynalink:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/jdk.editpad:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/jdk.hotspot.agent:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/jdk.httpserver:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/jdk.internal.ed:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/jdk.internal.jvmstat:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/jdk.internal.le:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/jdk.internal.opt:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/jdk.internal.vm.ci:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/jdk.internal.vm.compiler:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/jdk.internal.vm.compiler.management:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/jdk.jartool:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/jdk.javadoc:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/jdk.jcmd:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/jdk.jconsole:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/jdk.jdeps:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/jdk.jdi:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/jdk.jdwp.agent:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/jdk.jfr:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/jdk.jlink:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/jdk.jshell:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/jdk.jsobject:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/jdk.jstatd:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/jdk.localedata:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/jdk.management:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/jdk.management.agent:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/jdk.management.jfr:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/jdk.naming.dns:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/jdk.naming.rmi:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/jdk.net:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/jdk.nio.mapmode:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/jdk.pack:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/jdk.rmic:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/jdk.scripting.nashorn:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/jdk.scripting.nashorn.shell:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/jdk.sctp:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/jdk.security.auth:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/jdk.security.jgss:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/jdk.unsupported:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/jdk.unsupported.desktop:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/jdk.xml.dom:/Users/xiaomingcong/openjdk10/build/macosx-x86_64-server-slowdebug/jdk/modules/jdk.zipfs:/Applications/IntelliJ IDEA CE.app/Contents/lib/idea_rt.jar
jdk.boot.class.path.append=
java.vm.info=mixed mode, sharing
java.vm.specification.vendor=Oracle Corporation
java.vm.specification.version=14
java.vm.vendor=Oracle Corporation
idea.launcher.port=56943
idea.launcher.bin.path=/Applications/IntelliJ IDEA CE.app/Contents/bin
file.encoding=UTF-8
sun.java.command=com.intellij.rt.execution.application.AppMainV2 jvmLearning.chapter11.Test
sun.java.launcher=SUN_STANDARD
</properties>
</vm_arguments>
<tty>
<writer thread='9219'/>
<blob name='MethodHandlesAdapterBlob' size='182000'>
<sect index='1' size='182000' free='179994'/>
</blob>
<writer thread='42499'/>
    238    1       3       java.lang.Object::&lt;init&gt; (1 bytes)
    270    2       3       java.lang.String::isLatin1 (19 bytes)
    303    3       3       java.lang.String::charAt (25 bytes)
                              @ 1   java.lang.String::isLatin1 (19 bytes)
                              @ 12   java.lang.StringLatin1::charAt (28 bytes)
                                @ 15  java/lang/StringIndexOutOfBoundsException::&lt;init&gt; (not loaded)   not inlineable
                              @ 21  java/lang/StringUTF16::charAt (not loaded)   not inlineable
    306    4       3       java.lang.StringLatin1::charAt (28 bytes)
                              @ 15  java/lang/StringIndexOutOfBoundsException::&lt;init&gt; (not loaded)   not inlineable
    308    5       3       java.lang.String::hashCode (60 bytes)
                              @ 17   java.lang.String::isLatin1 (19 bytes)
                              @ 27   java.lang.StringLatin1::hashCode (42 bytes)   callee is too large
                              @ 37  java/lang/StringUTF16::hashCode (not loaded)   not inlineable
<writer thread='9219'/>
    360    6     n 0       java.lang.invoke.MethodHandle::linkToStatic(LLLLLLL)L (native)   (static)
<writer thread='42499'/>
    387    7       3       java.lang.String::coder (15 bytes)
<writer thread='9219'/>
    394    8     n 0       java.lang.invoke.MethodHandle::linkToStatic(LLL)L (native)   (static)
<writer thread='42499'/>
    395    9       3       java.lang.StringLatin1::hashCode (42 bytes)
    396   10       3       java.lang.String::length (11 bytes)
                              @ 6   java.lang.String::coder (15 bytes)
<writer thread='9219'/>
    397   12     n 0       java.lang.Object::hashCode (native)   
<writer thread='42499'/>
    397   11       1       java.lang.Enum::ordinal (5 bytes)
<writer thread='9219'/>
    399   13     n 0       java.lang.invoke.MethodHandle::invokeBasic(LLLLLL)L (native)   
<writer thread='42499'/>
    399   14       3       java.util.Objects::requireNonNull (14 bytes)
                              @ 8   java.lang.NullPointerException::&lt;init&gt; (5 bytes)   don&apos;t inline Throwable constructors
<writer thread='9219'/>
    400   15     n 0       java.lang.invoke.MethodHandle::linkToSpecial(LLLLLLLL)L (native)   (static)
    400   16     n 0       java.lang.System::arraycopy (native)   (static)
<writer thread='42499'/>
    401   17       1       java.lang.Class::getClassLoader0 (5 bytes)
<writer thread='9219'/>
    402   18     n 0       java.lang.Class::isPrimitive (native)   
<writer thread='42499'/>
    402   19       3       java.lang.StringLatin1::indexOf (61 bytes)
                              @ 1   java.lang.StringLatin1::canEncode (13 bytes)
<writer thread='43011'/>
    412   20       4       java.lang.Object::&lt;init&gt; (1 bytes)

============================= C2-compiled nmethod ==============================
<opto_assembly compile_id='20'>
----------------------- MetaData before Compile_id = 20 ------------------------
{method}
 - this oop:          0x000000012699a588
 - method holder:     &apos;java/lang/Object&apos;
 - constants:         0x000000012699a138 constant pool [92] {0x000000012699a138} for &apos;java/lang/Object&apos; cache=0x0000000126ab44a8
 - access:            0x81000001  public 
 - name:              &apos;&lt;init&gt;&apos;
 - signature:         &apos;()V&apos;
 - max stack:         1
 - max locals:        1
 - size of params:    1
 - method size:       13
 - intrinsic id:      300 _Object_init
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x000000010c0a1de0
 - adapters:          AHE@0x00007f992d81a1e0: 0xb0000000 i2c: 0x000000010c19a760 c2i: 0x000000010c19a81d c2iUV: 0x000000010c19a7e4 c2iNCI: 0x000000010c19a85a
 - compiled entry     0x000000010c7d21e0
 - code size:         1
 - code start:        0x000000012699a568
 - code end (excl):   0x000000012699a569
 - method data:       0x0000000126bac438
 - checked ex length: 0
 - linenumber start:  0x000000012699a569
 - localvar length:   1
 - localvar start:    0x000000012699a572
 - compiled code: nmethod    413    1       3       java.lang.Object::&lt;init&gt; (1 bytes)

------------------------ OptoAssembly for Compile_id = 20 -----------------------
#
#  void ( java/lang/Object:NotNull * )
#
#r018 rsi:rsi   : parm 0: java/lang/Object:NotNull *
# -- Old rsp -- Framesize: 32 --
#r583 rsp+28: in_preserve
#r582 rsp+24: return address
#r581 rsp+20: in_preserve
#r580 rsp+16: saved fp register
#r579 rsp+12: pad2, stack alignment
#r578 rsp+ 8: pad2, stack alignment
#r577 rsp+ 4: Fixed slot 1
#r576 rsp+ 0: Fixed slot 0
#
000     N14: #	out( B1 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( N14 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (96 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

02c     addq    rsp, 16	# Destroy frame
	popq    rbp
	movq    rscratch1, poll_offset[r15_thread] #polling_page_address
	testl   rax, [rscratch1]	# Safepoint: poll for GC

03b     ret

--------------------------------------------------------------------------------
</opto_assembly>
<writer thread='9219'/>
    414   21     n 0       java.lang.invoke.MethodHandle::invokeBasic(LL)L (native)   
<writer thread='43011'/>
    414    1       3       java.lang.Object::&lt;init&gt; (1 bytes)   made not entrant
<writer thread='9219'/>
    415   22     n 0       java.lang.invoke.MethodHandle::linkToSpecial(LLLL)L (native)   (static)
<writer thread='42499'/>
    415   23       3       jdk.internal.org.objectweb.asm.SymbolTable::get (13 bytes)
    416   24       3       java.lang.Math::min (11 bytes)
<writer thread='43011'/>
    416   25       4       java.lang.String::charAt (25 bytes)
<writer thread='42499'/>
    417   26       3       jdk.internal.org.objectweb.asm.ByteVector::putUTF8 (144 bytes)
                              @ 1   java.lang.String::length (11 bytes)
                                @ 6   java.lang.String::coder (15 bytes)
                              @ 17   java.lang.IllegalArgumentException::&lt;init&gt; (6 bytes)   don&apos;t inline Throwable constructors
                              @ 43   jdk.internal.org.objectweb.asm.ByteVector::enlarge (51 bytes)   callee is too large
                              @ 85   java.lang.String::charAt (25 bytes)
                                @ 1   java.lang.String::isLatin1 (19 bytes)
                                @ 12   java.lang.StringLatin1::charAt (28 bytes)
                                  @ 15  java/lang/StringIndexOutOfBoundsException::&lt;init&gt; (not loaded)   not inlineable
                                @ 21   java.lang.StringUTF16::charAt (11 bytes)
                                  @ 2   java.lang.StringUTF16::checkIndex (9 bytes)
                                    @ 2   java.lang.StringUTF16::length (5 bytes)
                                    @ 5   java.lang.String::checkIndex (48 bytes)   callee is too large
<writer thread='43011'/>

============================= C2-compiled nmethod ==============================
<opto_assembly compile_id='25'>
----------------------- MetaData before Compile_id = 25 ------------------------
{method}
 - this oop:          0x00000001269a0150
 - method holder:     &apos;java/lang/String&apos;
 - constants:         0x000000012699b360 constant pool [1059]/operands[28] {0x000000012699b360} for &apos;java/lang/String&apos; cache=0x0000000126aba220
 - access:            0x81000001  public 
 - name:              &apos;charAt&apos;
 - signature:         &apos;(I)C&apos;
 - max stack:         3
 - max locals:        2
 - size of params:    2
 - method size:       13
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x000000010c0a1de0
 - adapters:          AHE@0x00007f99308e1840: 0xba000000 i2c: 0x000000010c0e89e0 c2i: 0x000000010c0e8ac6 c2iUV: 0x000000010c0e8a8d c2iNCI: 0x000000010c0e8b03
 - compiled entry     0x000000010c7d2a60
 - code size:         25
 - code start:        0x00000001269a0110
 - code end (excl):   0x00000001269a0129
 - method data:       0x0000000126c4f3a8
 - checked ex length: 0
 - linenumber start:  0x00000001269a0129
 - localvar length:   2
 - localvar start:    0x00000001269a0136
 - compiled code: nmethod    420    3       3       java.lang.String::charAt (25 bytes)

------------------------ OptoAssembly for Compile_id = 25 -----------------------
#
#  char ( java/lang/String:NotNull:exact *, int )
#
#r018 rsi:rsi   : parm 0: java/lang/String:NotNull:exact *
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 48 --
#r583 rsp+44: in_preserve
#r582 rsp+40: return address
#r581 rsp+36: in_preserve
#r580 rsp+32: saved fp register
#r579 rsp+28: pad2, stack alignment
#r578 rsp+24: pad2, stack alignment
#r577 rsp+20: Fixed slot 1
#r576 rsp+16: Fixed slot 0
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N67: #	out( B1 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B5 B2 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (240 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

02c     movsbl  R10, [RSI + #20 (8-bit)]	# byte ! Field: java/lang/String.coder (constant)
031     testl   R10, R10
034     jne,s   B5  P=0.000000 C=6314.000000

036     B2: #	out( B7 B3 ) &lt;- in( B1 )  Freq: 1
036     movl    RBP, [RSI + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value (constant)
039     movl    R10, [R12 + RBP &lt;&lt; 3 + #12] (compressed oop addressing)	# range
03e     NullCheck RBP

03e     B3: #	out( B6 B4 ) &lt;- in( B2 )  Freq: 0.999999
03e     cmpl    RDX, R10	# unsigned
041     jnb,us  B6  P=0.000000 C=5767.000000

043     B4: #	out( N67 ) &lt;- in( B3 )  Freq: 0.999998
043     decode_heap_oop_not_null R10,RBP
047     movzbl  RAX, [R10 + #16 + RDX]	# ubyte
04d     addq    rsp, 32	# Destroy frame
	popq    rbp
	movq    rscratch1, poll_offset[r15_thread] #polling_page_address
	testl   rax, [rscratch1]	# Safepoint: poll for GC

05c     ret

05d     B5: #	out( N67 ) &lt;- in( B1 )  Freq: 5e-07
05d     movq    RBP, RSI	# spill
060     movl    [rsp + #0], RDX	# spill
063     movl    [rsp + #4], R10	# spill
068     movl    RSI, #-187	# int
        nop 	# 2 bytes pad for loops and calls
06f     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.String::isLatin1 @ bci:10  L[0]=_ STK[0]=rsp + #4
        # java.lang.String::charAt @ bci:1  L[0]=RBP L[1]=rsp + #0
        # OopMap {rbp=Oop off=116/0x74}
074     ud2	# ShouldNotReachHere

088     B6: #	out( N67 ) &lt;- in( B3 )  Freq: 4.76836e-07
088     movl    RSI, #-27	# int
08d     movl    [rsp + #4], RDX	# spill
        nop 	# 2 bytes pad for loops and calls
093     call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.StringLatin1::charAt @ bci:1  L[0]=RBP L[1]=rsp + #4 STK[0]=rsp + #4
        # java.lang.String::charAt @ bci:12  L[0]=_ L[1]=_
        # OopMap {rbp=NarrowOop off=152/0x98}
098     ud2	# ShouldNotReachHere

0ac     B7: #	out( N67 ) &lt;- in( B2 )  Freq: 1.01328e-06
0ac     movl    RSI, #-10	# int
0b1     movl    [rsp + #4], RDX	# spill
        nop 	# 2 bytes pad for loops and calls
0b7     call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.StringLatin1::charAt @ bci:1  L[0]=RBP L[1]=rsp + #4 STK[0]=rsp + #4
        # java.lang.String::charAt @ bci:12  L[0]=_ L[1]=_
        # OopMap {rbp=NarrowOop off=188/0xbc}
0bc     ud2	# ShouldNotReachHere

--------------------------------------------------------------------------------
</opto_assembly>
<writer thread='42499'/>
                                  @ 7   java.lang.StringUTF16::getChar (60 bytes)   intrinsic
<writer thread='9219'/>
    423   30     n 0       jdk.internal.misc.Unsafe::getReferenceVolatile (native)   
<writer thread='42499'/>

<writer thread='43011'/>
    423    3       3       java.lang.String::charAt (25 bytes)   made not entrant
                              @ 1   java.lang.String::isLatin1 (19 bytes)   inline (hot)
                              @ 12   java.lang.StringLatin1::charAt (28 bytes)   inline (hot)
<writer thread='42499'/>
                              @ 127   jdk.internal.org.objectweb.asm.ByteVector::encodeUtf8 (337 bytes)   callee is too large
    432   28       3       java.util.concurrent.ConcurrentHashMap::tabAt (22 bytes)
                              @ 15   jdk.internal.misc.Unsafe::getReferenceAcquire (7 bytes)
                                @ 3   jdk.internal.misc.Unsafe::getReferenceVolatile (0 bytes)   intrinsic
    434   29       3       jdk.internal.misc.Unsafe::getReferenceAcquire (7 bytes)
                              @ 3   jdk.internal.misc.Unsafe::getReferenceVolatile (0 bytes)   intrinsic
    435   27       3       jdk.internal.org.objectweb.asm.SymbolTable::hash (10 bytes)
                              @ 4   java.lang.String::hashCode (60 bytes)   callee is too large
    441   31       3       java.lang.StringLatin1::canEncode (13 bytes)
<writer thread='9219'/>
    448   32     n 0       java.lang.invoke.MethodHandle::linkToSpecial(LLL)L (native)   (static)
<writer thread='43011'/>
    448   33       4       java.lang.String::isLatin1 (19 bytes)
<writer thread='42499'/>
    449   34       3       java.lang.invoke.MemberName::testFlags (16 bytes)
<writer thread='43011'/>

============================= C2-compiled nmethod ==============================
<opto_assembly compile_id='33'>
----------------------- MetaData before Compile_id = 33 ------------------------
{method}
 - this oop:          0x00000001269a5df8
 - method holder:     &apos;java/lang/String&apos;
 - constants:         0x000000012699b360 constant pool [1059]/operands[28] {0x000000012699b360} for &apos;java/lang/String&apos; cache=0x0000000126aba220
 - access:            0x81000000  
 - name:              &apos;isLatin1&apos;
 - signature:         &apos;()Z&apos;
 - max stack:         2
 - max locals:        1
 - size of params:    1
 - method size:       13
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x000000010c0a1de0
 - adapters:          AHE@0x00007f99308e1660: 0xb0000000 i2c: 0x000000010c0e9ee0 c2i: 0x000000010c0e9fc3 c2iUV: 0x000000010c0e9f8a c2iNCI: 0x000000010c0ea000
 - compiled entry     0x000000010c7d2560
 - code size:         19
 - code start:        0x00000001269a5dd0
 - code end (excl):   0x00000001269a5de3
 - method data:       0x0000000126c058a8
 - checked ex length: 0
 - linenumber start:  0x00000001269a5de3
 - localvar length:   1
 - localvar start:    0x00000001269a5dea
 - compiled code: nmethod    450    2       3       java.lang.String::isLatin1 (19 bytes)

------------------------ OptoAssembly for Compile_id = 33 -----------------------
#
#  bool ( java/lang/String:NotNull:exact * )
#
#r018 rsi:rsi   : parm 0: java/lang/String:NotNull:exact *
# -- Old rsp -- Framesize: 32 --
#r583 rsp+28: in_preserve
#r582 rsp+24: return address
#r581 rsp+20: in_preserve
#r580 rsp+16: saved fp register
#r579 rsp+12: pad2, stack alignment
#r578 rsp+ 8: pad2, stack alignment
#r577 rsp+ 4: Fixed slot 1
#r576 rsp+ 0: Fixed slot 0
#
000     N30: #	out( B1 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B3 B2 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (112 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

02c     movsbl  R11, [RSI + #20 (8-bit)]	# byte ! Field: java/lang/String.coder (constant)
031     testl   R11, R11
034     jne,s   B3  P=0.000000 C=6456.000000

036     B2: #	out( N30 ) &lt;- in( B1 )  Freq: 1
036     movl    RAX, #1	# int
03b     addq    rsp, 16	# Destroy frame
	popq    rbp
	movq    rscratch1, poll_offset[r15_thread] #polling_page_address
	testl   rax, [rscratch1]	# Safepoint: poll for GC

04a     ret

04b     B3: #	out( N30 ) &lt;- in( B1 )  Freq: 5e-07
04b     movl    RSI, #-187	# int
050     movl    RBP, R11	# spill
053     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.String::isLatin1 @ bci:10  L[0]=_ STK[0]=RBP
        # OopMap {off=88/0x58}
058     ud2	# ShouldNotReachHere

--------------------------------------------------------------------------------
</opto_assembly>
<writer thread='42499'/>
    451   35       3       jdk.internal.org.objectweb.asm.Symbol::&lt;init&gt; (38 bytes)
<writer thread='43011'/>
    451    2       3       java.lang.String::isLatin1 (19 bytes)   made not entrant
<writer thread='42499'/>
                              @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
    452   38       3       jdk.internal.org.objectweb.asm.ByteVector::putShort (52 bytes)
                              @ 18   jdk.internal.org.objectweb.asm.ByteVector::enlarge (51 bytes)   callee is too large
    454   36       3       jdk.internal.org.objectweb.asm.SymbolTable::put (150 bytes)
    459   37       3       java.lang.AbstractStringBuilder::ensureCapacityInternal (39 bytes)
                              @ 24   java.lang.AbstractStringBuilder::newCapacity (55 bytes)   callee is too large
                              @ 32   java.util.Arrays::copyOf (19 bytes)
                                @ 11   java.lang.Math::min (11 bytes)
                                @ 14   java.lang.System::arraycopy (0 bytes)   intrinsic
<writer thread='9219'/>
    470   39     n 0       java.lang.invoke.MethodHandle::linkToSpecial(LLL)V (native)   (static)
<writer thread='42499'/>
    470   40       3       java.lang.String::&lt;init&gt; (15 bytes)
                              @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
    471   41       3       jdk.internal.org.objectweb.asm.ByteVector::putByte (39 bytes)
                              @ 18   jdk.internal.org.objectweb.asm.ByteVector::enlarge (51 bytes)   callee is too large
<writer thread='9219'/>
    472   46     n 0       java.lang.invoke.MethodHandle::linkToStatic(LL)L (native)   (static)
<writer thread='42499'/>
    473   44       3       jdk.internal.org.objectweb.asm.SymbolTable::addConstantUtf8 (98 bytes)
                              @ 2   jdk.internal.org.objectweb.asm.SymbolTable::hash (10 bytes)
<writer thread='9219'/>
    473   49     n 0       java.lang.invoke.MethodHandle::invokeBasic(L)L (native)   
<writer thread='42499'/>
                                @ 4   java.lang.String::hashCode (60 bytes)   callee is too large
                              @ 8   jdk.internal.org.objectweb.asm.SymbolTable::get (13 bytes)
                              @ 37   java.lang.String::equals (50 bytes)   callee is too large
                              @ 61   jdk.internal.org.objectweb.asm.ByteVector::putByte (39 bytes)   callee is too large
                              @ 65   jdk.internal.org.objectweb.asm.ByteVector::putUTF8 (144 bytes)   callee is too large
                              @ 88   jdk.internal.org.objectweb.asm.SymbolTable$Entry::&lt;init&gt; (17 bytes)
                                @ 7   jdk.internal.org.objectweb.asm.Symbol::&lt;init&gt; (38 bytes)   callee is too large
                              @ 91   jdk.internal.org.objectweb.asm.SymbolTable::put (150 bytes)   callee is too large
    479   42       3       jdk.internal.org.objectweb.asm.SymbolTable$Entry::&lt;init&gt; (17 bytes)
                              @ 7   jdk.internal.org.objectweb.asm.Symbol::&lt;init&gt; (38 bytes)   callee is too large
    481   47       3       java.lang.String::indexOf (29 bytes)
                              @ 1   java.lang.String::isLatin1 (19 bytes)
                              @ 13   java.lang.StringLatin1::indexOf (61 bytes)   callee is too large
                              @ 25   java.lang.StringUTF16::indexOf (43 bytes)   callee is too large
    483   45       3       java.lang.String::equals (50 bytes)
                              @ 44   java.lang.StringLatin1::equals (36 bytes)   callee is too large
    486   51       3       java.util.concurrent.ConcurrentHashMap::spread (10 bytes)
    486   53       3       java.lang.StringBuilder::append (8 bytes)
                              @ 2   java.lang.AbstractStringBuilder::append (77 bytes)   callee is too large
    488   52       3       java.lang.invoke.MemberName::isInvocable (8 bytes)
                              @ 4   java.lang.invoke.MemberName::testAnyFlags (15 bytes)
                                @ 3   java.lang.invoke.MemberName::testFlags (16 bytes)
    489   54       3       sun.nio.fs.UnixPath::checkNotNul (16 bytes)
                              @ 11  java/nio/file/InvalidPathException::&lt;init&gt; (not loaded)   not inlineable
    490   56       3       java.io.BufferedInputStream::getBufIfOpen (21 bytes)
                              @ 15  java/io/IOException::&lt;init&gt; (not loaded)   not inlineable
    492   57       3       java.lang.AbstractStringBuilder::isLatin1 (19 bytes)
    493   55  s    3       java.io.BufferedInputStream::read (49 bytes)
                              @ 12   java.io.BufferedInputStream::fill (203 bytes)   callee is too large
                              @ 29   java.io.BufferedInputStream::getBufIfOpen (21 bytes)
                                @ 15  java/io/IOException::&lt;init&gt; (not loaded)   not inlineable
<writer thread='9219'/>
    496   67     n 0       java.lang.invoke.MethodHandle::linkToSpecial(LLLL)I (native)   (static)
<writer thread='42499'/>
    496   64       3       java.lang.String::codePointAt (50 bytes)
<writer thread='40963'/>
    496   58       3       java.lang.Character::charCount (12 bytes)
<writer thread='42499'/>
                              @ 1   java.lang.String::isLatin1 (19 bytes)
<writer thread='40195'/>
    497   66       3       java.util.HashMap::hash (20 bytes)
<writer thread='42499'/>
                              @ 13   java.lang.String::checkIndex (48 bytes)   callee is too large
                              @ 37  
<writer thread='40195'/>
                     
<writer thread='42499'/>
 java.lang.String::
<writer thread='40195'/>
         @ 9   java.lang.Object::hashCode
<writer thread='42499'/>
checkIndex
<writer thread='40195'/>
 (0 bytes)   no static binding
<writer thread='42499'/>
 (48 bytes)   callee is too large
<writer thread='40195'/>

<writer thread='42499'/>

                              @ 46   java.lang.StringUTF16::codePointAt (8 bytes)
<writer thread='40963'/>
    497   62       3       java.net.URI::match (56 bytes)
<writer thread='42499'/>
                                @ 4   java.lang.StringUTF16::codePointAt (86 bytes)   callee is too large
<writer thread='40195'/>
    498   68       3       java.lang.StringLatin1::equals (36 bytes)
<writer thread='40963'/>
    500   59       3       java.lang.AbstractStringBuilder::append (77 bytes)
                              @ 7   java.lang.AbstractStringBuilder::ensureCapacityInternal (39 bytes)   callee is too large
             
<writer thread='42499'/>
    500   65       3       java.io.DataInputStream::readUnsignedShort (39 bytes)
<writer thread='40963'/>
                 @ 11   java.lang.AbstractStringBuilder::isLatin1 (19 bytes)
<writer thread='40195'/>
    500   61       3       sun.nio.fs.UnixUriUtils::match (50 bytes)
<writer thread='42499'/>
                              @ 4   java.io.InputStream::read (0 bytes)   no static binding
             
<writer thread='40963'/>
                              @ 18  
<writer thread='42499'/>
                 @ 12   java.io.InputStream::read (0 bytes)   no static binding
<writer thread='40963'/>
 java.lang.StringLatin1::canEncode (13 bytes)
<writer thread='42499'/>
                              @ 26  java/io/EOFException::&lt;init&gt; (not loaded)   not inlineable
<writer thread='40963'/>
                              @ 46   java.lang.AbstractStringBuilder::isLatin1 (19 bytes)
                              @ 53   java.lang.AbstractStringBuilder::inflate (42 bytes)   callee is too large
                              @ 72   java.lang.StringUTF16::putCharSB (12 bytes)
                                @ 2   java.lang.StringUTF16::checkIndex (9 bytes)
                                  @ 2   java.lang.StringUTF16::length (5 bytes)
                                  @ 5   java.lang.String::checkIndex (48 bytes)   callee is too large
                                @ 8   java.lang.StringUTF16::putChar (54 bytes)   intrinsic
<writer thread='42499'/>
    502   60       3       java.lang.String::indexOf (7 bytes)
                              @ 3   java.lang.String::indexOf (29 bytes)
                                @ 1   java.lang.String::isLatin1 (19 bytes)
<writer thread='40195'/>
    502   48       1       sun.invoke.util.Wrapper::basicTypeChar (5 bytes)
<writer thread='42499'/>
                                @ 13   java.lang.StringLatin1::indexOf (61 bytes)   callee is too large
                                @ 25   java.lang.StringUTF16::
<writer thread='40195'/>
    503   43       1       java.lang.invoke.MethodType::returnType (5 bytes)
<writer thread='42499'/>
indexOf (43 bytes)   callee is too large
<writer thread='40195'/>
    503   63       3       java.lang.String::checkIndex (48 bytes)
                              @ 17   java.lang.StringBuilder::&lt;init&gt; (7 bytes)
                                @ 3   java.lang.AbstractStringBuilder::&lt;init&gt; (39 bytes)   callee is too large
                              @ 23   java.lang.StringBuilder::append (8 bytes)
                                @ 2   java.lang.AbstractStringBuilder::append (45 bytes)   callee is too large
                              @ 27   java.lang.StringBuilder::append (8 bytes)
                                @ 2   java.lang.AbstractStringBuilder::append (55 bytes)   callee is too large
                              @ 33   java.lang.StringBuilder::append (8 bytes)
                                @ 2   java.lang.AbstractStringBuilder::append (45 bytes)   callee is too large
                              @ 37   java.lang.StringBuilder::
<writer thread='42499'/>
    505   50       1       java.lang.invoke.MemberName::getDeclaringClass (5 bytes)
<writer thread='40195'/>
append (8 bytes)
                                @ 2   java.lang.AbstractStringBuilder::append (55 bytes)   callee is too large
                              @ 40   java.lang.StringBuilder::toString (35 bytes)
                                @ 1   java.lang.AbstractStringBuilder::isLatin1 (19 bytes)
                                @ 16   java.lang.StringLatin1::newString (17 bytes)
                                  @ 9   java.util.Arrays::copyOfRange (64 bytes)   callee is too large
                                  @ 13   java.lang.String::&lt;init&gt; (15 bytes)
                                    @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
                                @ 31   java.lang.StringUTF16::newString (50 bytes)   callee is too large
                              @ 43  java/lang/StringIndexOutOfBoundsException::&lt;init&gt; (not loaded)   not inlineable
<writer thread='42499'/>
    529   69       3       java.lang.invoke.MethodTypeForm::canonicalize (233 bytes)
<writer thread='9219'/>
    529   70     n 0       java.lang.invoke.MethodHandle::linkToVirtual(LL)V (native)   (static)
<writer thread='42499'/>
                              @ 10   java.lang.Class::isPrimitive (0 bytes)   intrinsic
                              @ 53   sun.invoke.util.Wrapper::asPrimitiveType (20 bytes)
                                @ 1   sun.invoke.util.Wrapper::findWrapperType (25 bytes)
                                  @ 4   sun.invoke.util.Wrapper::hashWrap (63 bytes)   callee is too large
                                @ 10   sun.invoke.util.Wrapper::primitiveType (5 bytes)
                                @ 14   sun.invoke.util.Wrapper::forceType (72 bytes)   callee is too large
<writer thread='40963'/>
    530   71       3       java.lang.String::getBytes (44 bytes)
<writer thread='42499'/>
                              @ 149   sun.invoke.util.Wrapper::asWrapperType (18 bytes)
<writer thread='40963'/>
                              @ 1   java.lang.String::coder (15 bytes)
<writer thread='42499'/>
                                @ 1   java.lang.Class::isPrimitive (0 bytes)   intrinsic
                                @ 8   sun.invoke.util.Wrapper::forPrimitiveType (49 bytes)   callee is too large
<writer thread='40963'/>
                              @ 22   java.lang.System::arraycopy (0 bytes)   intrinsic
<writer thread='42499'/>
                                @ 12   sun.invoke.util.Wrapper::wrapperType (52 bytes)   callee is too large
<writer thread='40963'/>
                              @ 40   java.lang.StringLatin1::inflate (10 bytes)
                                @ 6   java.lang.StringUTF16::inflate (42 bytes)   callee is too large
<writer thread='40195'/>
    532   72       3       java.util.Objects::equals (23 bytes)
<writer thread='9219'/>
    532   73     n 0       java.lang.invoke.MethodHandle::linkToStatic(LLL)I (native)   (static)
<writer thread='40195'/>
                              @ 11   java.lang.Object::equals (11 bytes)   no static binding
<writer thread='40963'/>
    533   74       3       java.lang.StringLatin1::replace (198 bytes)
<writer thread='9219'/>
    533   77     n 0       java.lang.Class::isArray (native)   
<writer thread='40963'/>
                              @ 1   java.lang.StringLatin1::canEncode (13 bytes)
<writer thread='40195'/>
    534   75       3       java.lang.AbstractStringBuilder::putStringAt (29 bytes)
<writer thread='40963'/>
                              @ 41  
<writer thread='40195'/>
             
<writer thread='40963'/>
 java.lang.StringLatin1::
<writer thread='40195'/>
                 @ 1  
<writer thread='40963'/>
canEncode
<writer thread='40195'/>
 java.lang.AbstractStringBuilder::
<writer thread='40963'/>
 (13 bytes)
<writer thread='40195'/>
getCoder (15 bytes)
                              @ 5   java.lang.String::coder (15 bytes)
<writer thread='40963'/>
                              @ 49   java.lang.StringConcatHelper::newArray (26 bytes)   force inline by annotation
<writer thread='40195'/>
                              @ 12   java.lang.AbstractStringBuilder::inflate (42 bytes)   callee is too large
<writer thread='40963'/>
                                @ 19   jdk.internal.misc.Unsafe::allocateUninitializedArray (55 bytes)   callee is too large
<writer thread='40195'/>
                              @ 25   java.lang.String::getBytes (44 bytes)   callee is too large
<writer thread='40963'/>
                              @ 123   java.lang.String::&lt;init&gt; (15 bytes)
                                @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
                              @ 128   java.lang.StringUTF16::newBytesFor (61 bytes)   callee is too large
                              @ 140   java.lang.StringLatin1::inflate (10 bytes)
                                @ 6   java.lang.StringUTF16::inflate (42 bytes)   callee is too large
                              @ 176   java.lang.StringUTF16::putChar (54 bytes)   intrinsic
                              @ 192   java.lang.String::&lt;init&gt; (15 bytes)
                                @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
<writer thread='40195'/>
    537   78       3       java.lang.invoke.MethodType::parameterType (7 bytes)
    538   76       3       java.lang.AbstractStringBuilder::getCoder (15 bytes)
    544   79       3       java.lang.invoke.MethodType::hashCode (53 bytes)
<writer thread='42499'/>
    545   80       3       java.lang.invoke.MethodType::checkPtype (19 bytes)
<writer thread='40195'/>
                              @ 6   java.lang.Object::hashCode (0 bytes)   native method
                              @ 40   java.lang.Object::hashCode (0 bytes)   native method
<writer thread='42499'/>
                              @ 1   java.util.Objects::requireNonNull (14 bytes)
<writer thread='40963'/>
    545   81       3       java.lang.Class::getClassLoader (28 bytes)
<writer thread='42499'/>
                                @ 8   java.lang.NullPointerException::&lt;init&gt; (5 bytes)   don&apos;t inline Throwable constructors
<writer thread='40963'/>
                              @ 1   java.lang.Class::getClassLoader0 (5 bytes)
<writer thread='42499'/>
                              @ 14   java.lang.invoke.MethodHandleStatics::newIllegalArgumentException (9 bytes)
<writer thread='40963'/>
                              @ 11  
<writer thread='42499'/>
                                @ 5  
<writer thread='40963'/>
 java.lang.System::getSecurityManager
<writer thread='42499'/>
 java.lang.IllegalArgumentException::
<writer thread='40963'/>
 (12 bytes)
<writer thread='42499'/>
&lt;init&gt; (6 bytes)   don&apos;t inline Throwable constructors
<writer thread='40963'/>
                                @ 0   java.lang.System::allowSecurityManager (13 bytes)
                              @ 20   jdk.internal.reflect.Reflection::getCallerClass (0 bytes)   native method
                              @ 23   java.lang.ClassLoader::checkClassLoaderPermission (29 bytes)
                                @ 0   java.lang.System::getSecurityManager (12 bytes)
                                  @ 0   java.lang.System::allowSecurityManager (13 bytes)
<writer thread='40195'/>
    547   82       3       java.lang.invoke.MethodType$ConcurrentWeakInternSet::expungeStaleElements (27 bytes)
               !m             @ 4   java.lang.ref.ReferenceQueue::poll (28 bytes)
<writer thread='40963'/>
                                @ 9   java.lang.ClassLoader::getClassLoader (11 bytes)
                                  @ 7   java.lang.Class::getClassLoader0 (5 bytes)
<writer thread='40195'/>
                                @ 17   java.lang.ref.ReferenceQueue::reallyPoll (65 bytes)   callee is too large
<writer thread='40963'/>
                                @ 15   java.lang.ClassLoader::needsClassLoaderPermissionCheck (27 bytes)
<writer thread='42499'/>
    548   83   !   3       java.lang.ref.ReferenceQueue::poll (28 bytes)
<writer thread='40963'/>
                                  @ 15   java.lang.ClassLoader::isAncestor (20 bytes)
<writer thread='40195'/>
                              @ 17   java.util.concurrent.ConcurrentHashMap::remove (8 bytes)
<writer thread='42499'/>
                              @ 17   java.lang.ref.ReferenceQueue::reallyPoll (65 bytes)   callee is too large
<writer thread='40963'/>
                                @ 25   java.lang.SecurityManager::checkPermission (5 bytes)   not inlineable
<writer thread='40195'/>
               !m               @ 4   java.util.concurrent.ConcurrentHashMap::replaceNode (437 bytes)   callee is too large
<writer thread='42499'/>
    568   84       3       java.lang.AbstractStringBuilder::newCapacity (55 bytes)
<writer thread='40195'/>
    568   85       3       java.lang.String::substring (58 bytes)
<writer thread='40963'/>
    568   86       3       java.lang.String::checkBoundsBeginEnd (63 bytes)
<writer thread='42499'/>
                              @ 47   java.lang.AbstractStringBuilder::hugeCapacity (41 bytes)   callee is too large
<writer thread='40195'/>
                              @ 1   java.lang.String::length (11 bytes)
<writer thread='40963'/>
                              @ 22  
<writer thread='40195'/>
                                @ 6   java.lang.String::coder (15 bytes)
<writer thread='40963'/>
 java.lang.StringBuilder::&lt;init&gt; (7 bytes)
                                @ 3   java.lang.AbstractStringBuilder::&lt;init&gt; (39 bytes)   callee is too large
<writer thread='40195'/>
                              @ 8   java.lang.String::checkBoundsBeginEnd (63 bytes)   callee is too large
<writer thread='40963'/>
                              @ 28   java.lang.StringBuilder::
<writer thread='40195'/>
             
<writer thread='40963'/>
append (8 bytes)
<writer thread='40195'/>
                 @ 28   java.lang.String::isLatin1 (19 bytes)
<writer thread='40963'/>
                                @ 2   java.lang.AbstractStringBuilder::append (45 bytes)   callee is too large
                              @ 32   java.lang.StringBuilder::append (8 bytes)
<writer thread='40195'/>
                              @ 41  
<writer thread='40963'/>
             
<writer thread='40195'/>
 java.lang.StringLatin1::newString
<writer thread='40963'/>
                   @ 2  
<writer thread='40195'/>
 (17 bytes)
<writer thread='40963'/>
 java.lang.AbstractStringBuilder::append (55 bytes)   callee is too large
<writer thread='40195'/>
                                @ 9   java.util.Arrays::
<writer thread='40963'/>
                              
<writer thread='40195'/>
copyOfRange
<writer thread='40963'/>
@ 38   java.lang.StringBuilder::
<writer thread='40195'/>
 (64 bytes)   callee is too large
<writer thread='40963'/>
append (8 bytes)
<writer thread='40195'/>
                          
<writer thread='40963'/>
             
<writer thread='40195'/>
      
<writer thread='40963'/>
                   @ 2  
<writer thread='40195'/>
@ 13   java.lang.String::
<writer thread='40963'/>
 java.lang.AbstractStringBuilder::
<writer thread='40195'/>
&lt;init&gt;
<writer thread='40963'/>
append
<writer thread='40195'/>
 (15 bytes)
<writer thread='40963'/>
 (45 bytes)   callee is too large
<writer thread='40195'/>
                                  @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
<writer thread='40963'/>
                              @ 42   java.lang.StringBuilder::append (8 bytes)
                                @ 2   java.lang.AbstractStringBuilder::append (55 bytes)   callee is too large
<writer thread='40195'/>
                              @ 54   java.lang.StringUTF16::
<writer thread='40963'/>
                              @ 48  
<writer thread='40195'/>
newString (50 bytes)   callee is too large
<writer thread='40963'/>
 java.lang.StringBuilder::append (8 bytes)
                                @ 2   java.lang.AbstractStringBuilder::append (45 bytes)   callee is too large
                              @ 52   java.lang.StringBuilder::append (8 bytes)
                                @ 2   java.lang.AbstractStringBuilder::append (55 bytes)   callee is too large
                              @ 55   java.lang.StringBuilder::toString (35 bytes)
                                @ 1   java.lang.AbstractStringBuilder::isLatin1 (19 bytes)
<writer thread='42499'/>
    572   88       3       java.util.Arrays::copyOfRange (64 bytes)
<writer thread='40963'/>
                                @ 16   java.lang.StringLatin1::newString (17 bytes)
<writer thread='42499'/>
                              @ 16   java.lang.StringBuilder::&lt;init&gt; (7 bytes)
<writer thread='40963'/>
                                  @ 9   java.util.Arrays::copyOfRange (64 bytes)   callee is too large
<writer thread='42499'/>
                                @ 3   java.lang.AbstractStringBuilder::&lt;init&gt; (39 bytes)   callee is too large
<writer thread='40963'/>
                                  @ 13   java.lang.String::&lt;init&gt; (15 bytes)
<writer thread='42499'/>
                              @ 20   java.lang.StringBuilder::append (8 bytes)
<writer thread='40963'/>
                                    @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
<writer thread='42499'/>
                                @ 2   java.lang.AbstractStringBuilder::append (55 bytes)   callee is too large
                              @ 26   java.lang.StringBuilder::append (8 bytes)
                   
<writer thread='40963'/>
                          
<writer thread='42499'/>
             @ 2  
<writer thread='40963'/>
      @ 31  
<writer thread='42499'/>
 java.lang.AbstractStringBuilder::append
<writer thread='40963'/>
 java.lang.StringUTF16::newString
<writer thread='42499'/>
 (45 bytes)   callee is too large
<writer thread='40963'/>
 (50 bytes)   callee is too large
<writer thread='42499'/>
                              @ 30   java.lang.StringBuilder::append (8 bytes)
<writer thread='40963'/>
                              @ 58  java/lang/StringIndexOutOfBoundsException::&lt;init&gt; (not loaded)   not inlineable
<writer thread='42499'/>
                                @ 2   java.lang.AbstractStringBuilder::append (55 bytes)   callee is too large
                              @ 33   java.lang.StringBuilder::toString (35 bytes)
                                @ 1   java.lang.AbstractStringBuilder::isLatin1 (19 bytes)
                                @ 16   java.lang.StringLatin1::newString (17 bytes)
                                  @ 9   java.util.Arrays::copyOfRange (64 bytes)   callee is too large
                                  @ 13   java.lang.String::&lt;init&gt; (15 bytes)
                                    @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
<writer thread='43011'/>
    574   92       4       java.lang.StringLatin1::indexOf (61 bytes)
<writer thread='42499'/>
                                @ 31   java.lang.StringUTF16::newString (50 bytes)   callee is too large
                              @ 36   java.lang.IllegalArgumentException::&lt;init&gt; (6 bytes)   don&apos;t inline Throwable constructors
                              @ 55   java.lang.Math::min (11 bytes)
<writer thread='40195'/>
    575   94       3       java.lang.StringLatin1::lastIndexOf (40 bytes)
<writer thread='42499'/>
                              @ 58   java.lang.System::arraycopy (0 bytes)   intrinsic
<writer thread='40195'/>
                              @ 1   java.lang.StringLatin1::canEncode (13 bytes)
                              @ 14   java.lang.Math::min (11 bytes)
    577   87       3       java.lang.StringLatin1::newString (17 bytes)
                              @ 9   java.util.Arrays::copyOfRange (64 bytes)   callee is too large
                              @ 13   java.lang.String::&lt;init&gt; (15 bytes)
                                @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
<writer thread='40963'/>
    579   95       1       java.io.File::getPrefixLength (5 bytes)
<writer thread='40195'/>
    579   96       1       java.io.File::getPath (5 bytes)
<writer thread='40963'/>
    579   90       3       java.lang.StringBuilder::append (8 bytes)
                              @ 2   java.lang.AbstractStringBuilder::append (45 bytes)   callee is too large
<writer thread='40195'/>
    580   91       3       java.lang.AbstractStringBuilder::append (45 bytes)
                              @ 5   java.lang.AbstractStringBuilder::appendNull (83 bytes)   callee is too large
                              @ 10   java.lang.String::length (11 bytes)
<writer thread='42499'/>
    580   93       3       java.lang.String::isEmpty (14 bytes)
<writer thread='40195'/>
                                @ 6   java.lang.String::coder (15 bytes)
<writer thread='40963'/>
    580   89       3       java.lang.Class::getName (18 bytes)
<writer thread='40195'/>
                              @ 21   java.lang.AbstractStringBuilder::ensureCapacityInternal (39 bytes)   callee is too large
                              @ 30   java.lang.AbstractStringBuilder::putStringAt (29 bytes)
             
<writer thread='40963'/>
                     
<writer thread='40195'/>
                   @ 1   java.lang.AbstractStringBuilder::getCoder
<writer thread='40963'/>
         @ 14   java.lang.Class::initClassName (0 bytes)   native method
<writer thread='40195'/>
 (15 bytes)
                                @ 5   java.lang.String::coder (15 bytes)
<writer thread='9219'/>
    581   97     n 0       java.lang.invoke.MethodHandle::linkToStatic(LLLL)L (native)   (static)
<writer thread='40195'/>
                                @ 12   java.lang.AbstractStringBuilder::inflate (42 bytes)   callee is too large
                                @ 25   java.lang.String::getBytes (44 bytes)   callee is too large
<writer thread='42499'/>
    583   98       3       java.lang.invoke.MemberName::testAllFlags (7 bytes)
                              @ 3   java.lang.invoke.MemberName::testFlags (16 bytes)
<writer thread='40963'/>
    584   99       3       java.util.concurrent.ConcurrentHashMap::get (162 bytes)
                              @ 1   java.lang.Object::hashCode (0 bytes)   no static binding
                              @ 4   java.util.concurrent.ConcurrentHashMap::spread (10 bytes)
                              @ 34   java.util.concurrent.ConcurrentHashMap::tabAt (22 bytes)
                                @ 15   jdk.internal.misc.Unsafe::getReferenceAcquire (7 bytes)
                                  @ 3   jdk.internal.misc.Unsafe::getReferenceVolatile (0 bytes)   intrinsic
                              @ 73   java.lang.Object::equals (11 bytes)   no static binding
                              @ 93   java.util.concurrent.ConcurrentHashMap$Node::find (52 bytes)   no static binding
                              @ 149   java.lang.Object::equals (11 bytes)   no static binding
<writer thread='43011'/>

============================= C2-compiled nmethod ==============================
<opto_assembly compile_id='92'>
----------------------- MetaData before Compile_id = 92 ------------------------
{method}
 - this oop:          0x0000000126b1dc28
 - method holder:     &apos;java/lang/StringLatin1&apos;
 - constants:         0x0000000126b1b920 constant pool [372] {0x0000000126b1b920} for &apos;java/lang/StringLatin1&apos; cache=0x0000000126b202b0
 - access:            0xc1000009  public static 
 - name:              &apos;indexOf&apos;
 - signature:         &apos;([BII)I&apos;
 - max stack:         3
 - max locals:        6
 - size of params:    3
 - method size:       13
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x000000010c0a1de0
 - adapters:          AHE@0x00007f99308e17f0: 0xbaa00000 i2c: 0x000000010c0e8d60 c2i: 0x000000010c0e8e49 c2iUV: 0x000000010c0e8e10 c2iNCI: 0x000000010c0e8e86
 - compiled entry     0x000000010c7d5500
 - code size:         61
 - code start:        0x0000000126b1db88
 - code end (excl):   0x0000000126b1dbc5
 - method data:       0x0000000126d43580
 - checked ex length: 0
 - linenumber start:  0x0000000126b1dbc5
 - localvar length:   6
 - localvar start:    0x0000000126b1dbde
 - compiled code: nmethod    591   19       3       java.lang.StringLatin1::indexOf (61 bytes)

------------------------ OptoAssembly for Compile_id = 92 -----------------------
#
#  int ( byte[int:&gt;=0]:exact *, int, int )
#
#r018 rsi:rsi   : parm 0: byte[int:&gt;=0]:exact *
#r016 rdx   : parm 1: int
#r010 rcx   : parm 2: int
# -- Old rsp -- Framesize: 64 --
#r583 rsp+60: in_preserve
#r582 rsp+56: return address
#r581 rsp+52: in_preserve
#r580 rsp+48: saved fp register
#r579 rsp+44: pad2, stack alignment
#r578 rsp+40: pad2, stack alignment
#r577 rsp+36: Fixed slot 1
#r576 rsp+32: Fixed slot 0
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N1: #	out( B1 ) &lt;- in( B38 B40 B39 B37 B30 )  Freq: 1

000     B1: #	out( B38 B2 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
000     # stack bang (256 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

00c     movl    RBP, RDX	# spill
00e     shrl    RBP, #8
011     testl   RBP, RBP
013     jne     B38  P=0.000000 C=2128.000000

019     B2: #	out( B40 B3 ) &lt;- in( B1 )  Freq: 1
019     movl    RBP, [RSI + #12 (8-bit)]	# range
01c     NullCheck RSI

01c     B3: #	out( B39 B4 ) &lt;- in( B2 )  Freq: 0.999999
01c     testl   RCX, RCX
01e     jl     B39  P=0.000000 C=872.000000

024     B4: #	out( B30 B5 ) &lt;- in( B3 )  Freq: 0.999998
024     movl    RAX, #-1	# int
029     cmpl    RCX, RBP
02b     jge     B30  P=0.047018 C=872.000000

031     B5: #	out( B37 B6 ) &lt;- in( B4 )  Freq: 0.95298
031     movsbl  RBX, RDX	# i2b
034     cmpl    RCX, RBP	# unsigned
036     jnb,u   B37  P=0.000001 C=-1.000000

03c     B6: #	out( B37 B7 ) &lt;- in( B5 )  Freq: 0.952979
03c     movl    R10, RBP	# spill
03f     decl    R10	# int
042     cmpl    R10, RBP	# unsigned
045     jnb,u   B37  P=0.000001 C=-1.000000

04b     B7: #	out( B8 ) &lt;- in( B6 )  Freq: 0.952978
04b     movl    R8, RCX	# spill
04e     incl    R8	# int

051     B8: #	out( B29 B9 ) &lt;- in( B7 B9 ) Loop( B8-B9 inner pre of N220) Freq: 1.88502
051     movsbl  R9, [RSI + #16 + RCX]	# byte
057     cmpl    R9, RBX
05a     je     B29  P=0.011106 C=16838.000000

060     B9: #	out( B8 B10 ) &lt;- in( B8 )  Freq: 1.86409
060     incl    RCX	# int
062     cmpl    RCX, R8
065     jl,s   B8	# loop end  P=0.500000 C=16651.000000

067     B10: #	out( B23 B11 ) &lt;- in( B9 )  Freq: 0.932043
067     movl    R9, RBP	# spill
06a     addl    R9, #-7	# int
06e     movl    R11, #-2147483648	# int
074     cmpl    R10, R9
077     cmovll R9, R11	# signed, int
07b     cmpl    RCX, R9
07e     jge     B23  P=0.000001 C=-1.000000

084     B11: #	out( B12 ) &lt;- in( B10 )  Freq: 0.932042
084     # castII of RCX
084     movl    R10, #8000	# int

08a     B12: #	out( B13 ) &lt;- in( B11 B22 ) Loop( B12-B22 ) Freq: 1.28083
08a     movl    RDI, R9	# spill
08d     subl    RDI, RCX	# int
08f     cmpl    RDI, R10
092     cmovlgt RDI, R10	# min
096     addl    RDI, RCX	# int
        nop 	# 8 bytes pad for loops and calls

0a0     B13: #	out( B29 B14 ) &lt;- in( B12 B21 ) Loop( B13-B21 inner main of N137 strip mined) Freq: 10.749
0a0     movsbl  R11, [RSI + #16 + RCX]	# byte
0a6     cmpl    R11, RBX
0a9     je     B29  P=0.011106 C=16838.000000

0af     B14: #	out( B28 B15 ) &lt;- in( B13 )  Freq: 10.6296
0af     movslq  R8, RCX	# i2l
0b2     movsbl  R11, [RSI + #17 + R8]	# byte
0b8     cmpl    R11, RBX
0bb     je,s   B28  P=0.011106 C=16838.000000

0bd     B15: #	out( B31 B16 ) &lt;- in( B14 )  Freq: 10.5115
0bd     movsbl  R11, [RSI + #18 + R8]	# byte
0c3     cmpl    R11, RBX
0c6     je     B31  P=0.011106 C=16838.000000

0cc     B16: #	out( B32 B17 ) &lt;- in( B15 )  Freq: 10.3948
0cc     movsbl  R11, [RSI + #19 + R8]	# byte
0d2     cmpl    R11, RBX
0d5     je,s   B32  P=0.011106 C=16838.000000

0d7     B17: #	out( B33 B18 ) &lt;- in( B16 )  Freq: 10.2794
0d7     movsbl  R11, [RSI + #20 + R8]	# byte
0dd     cmpl    R11, RBX
0e0     je,s   B33  P=0.011106 C=16838.000000

0e2     B18: #	out( B34 B19 ) &lt;- in( B17 )  Freq: 10.1652
0e2     movsbl  R11, [RSI + #21 + R8]	# byte
0e8     cmpl    R11, RBX
0eb     je,s   B34  P=0.011106 C=16838.000000

0ed     B19: #	out( B35 B20 ) &lt;- in( B18 )  Freq: 10.0523
0ed     movsbl  R11, [RSI + #22 + R8]	# byte
0f3     cmpl    R11, RBX
0f6     je,s   B35  P=0.011106 C=16838.000000

0f8     B20: #	out( B36 B21 ) &lt;- in( B19 )  Freq: 9.94067
0f8     movsbl  R11, [RSI + #23 + R8]	# byte
0fe     cmpl    R11, RBX
101     je,s   B36  P=0.011106 C=16838.000000

103     B21: #	out( B13 B22 ) &lt;- in( B20 )  Freq: 9.83027
103     addl    RCX, #8	# int
106     cmpl    RCX, RDI
108     jl,s   B13	# loop end  P=0.963162 C=16651.000000

10a     B22: #	out( B12 B23 ) &lt;- in( B21 )  Freq: 0.362126
10a     # TLS is in R15
10a     movq    R11, [R15 + #296 (32-bit)]	# ptr
111     testl   rax, [R11]	# Safepoint: poll for GC        # java.lang.StringLatin1::indexOf @ bci:56  L[0]=RSI L[1]=_ L[2]=_ L[3]=RBP L[4]=RBX L[5]=RCX
        # OopMap {rsi=Oop off=273/0x111}
114     cmpl    RCX, R9
117     jl     B12  P=0.963162 C=16651.000000

11d     B23: #	out( B30 B24 ) &lt;- in( B10 B22 )  Freq: 0.0133409
11d     cmpl    RCX, RBP
11f     jge,s   B30  P=0.500000 C=-1.000000

121     B24: #	out( B25 ) &lt;- in( B23 )  Freq: 0.00667045
121     # castII of RCX
        nop 	# 3 bytes pad for loops and calls

124     B25: #	out( B29 B26 ) &lt;- in( B24 B26 ) Loop( B25-B26 inner post of N220) Freq: 0.0131944
124     movsbl  R10, [RSI + #16 + RCX]	# byte
12a     cmpl    R10, RBX
12d     je,s   B29  P=0.011106 C=16838.000000

12f     B26: #	out( B25 B27 ) &lt;- in( B25 )  Freq: 0.0130478
12f     incl    RCX	# int
131     cmpl    RCX, RBP
133     jl,s   B25	# loop end  P=0.500000 C=16651.000000

135     B27: #	out( B30 ) &lt;- in( B26 )  Freq: 0.00652392
135     jmp,s   B30

137     B28: #	out( B29 ) &lt;- in( B14 )  Freq: 0.118051
137     incl    RCX	# int

139     B29: #	out( B30 ) &lt;- in( B25 B8 B13 B33 B31 B35 B28 B34 B32 B36 )  Freq: 0.939783
139     movl    RAX, RCX	# spill

13b     B30: #	out( N1 ) &lt;- in( B4 B29 B27 B23 )  Freq: 0.999996
13b     addq    rsp, 48	# Destroy frame
	popq    rbp
	movq    rscratch1, poll_offset[r15_thread] #polling_page_address
	testl   rax, [rscratch1]	# Safepoint: poll for GC

14a     ret

14b     B31: #	out( B29 ) &lt;- in( B15 )  Freq: 0.11674
14b     addl    RCX, #2	# int
14e     jmp,s   B29

150     B32: #	out( B29 ) &lt;- in( B16 )  Freq: 0.115443
150     addl    RCX, #3	# int
153     jmp,s   B29

155     B33: #	out( B29 ) &lt;- in( B17 )  Freq: 0.114161
155     addl    RCX, #4	# int
158     jmp,s   B29

15a     B34: #	out( B29 ) &lt;- in( B18 )  Freq: 0.112893
15a     addl    RCX, #5	# int
15d     jmp,s   B29

15f     B35: #	out( B29 ) &lt;- in( B19 )  Freq: 0.111639
15f     addl    RCX, #6	# int
162     jmp,s   B29

164     B36: #	out( B29 ) &lt;- in( B20 )  Freq: 0.110399
164     addl    RCX, #7	# int
167     jmp,s   B29

169     B37: #	out( N1 ) &lt;- in( B6 B5 )  Freq: 1.93127e-06
169     movq    [rsp + #0], RSI	# spill
16d     movl    [rsp + #8], RBX	# spill
171     movl    [rsp + #16], RCX	# spill
175     movl    RSI, #-138	# int
        nop 	# 1 bytes pad for loops and calls
17b     call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.StringLatin1::indexOf @ bci:38  L[0]=rsp + #0 L[1]=_ L[2]=_ L[3]=RBP L[4]=rsp + #8 L[5]=rsp + #16 STK[0]=rsp + #16 STK[1]=RBP
        # OopMap {[0]=Oop off=384/0x180}
180     ud2	# ShouldNotReachHere

194     B38: #	out( N1 ) &lt;- in( B1 )  Freq: 5e-07
194     movq    [rsp + #0], RSI	# spill
198     movl    [rsp + #8], RCX	# spill
19c     movl    [rsp + #12], RDX	# spill
1a0     movl    RSI, #-187	# int
        nop 	# 2 bytes pad for loops and calls
1a7     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.StringLatin1::canEncode @ bci:4  L[0]=_ STK[0]=RBP
        # java.lang.StringLatin1::indexOf @ bci:1  L[0]=rsp + #0 L[1]=rsp + #12 L[2]=rsp + #8 L[3]=_ L[4]=_ L[5]=_
        # OopMap {[0]=Oop off=428/0x1ac}
1ac     ud2	# ShouldNotReachHere

1c0     B39: #	out( N1 ) &lt;- in( B3 )  Freq: 4.76836e-07
1c0     movq    [rsp + #0], RSI	# spill
1c4     movl    [rsp + #12], RCX	# spill
1c8     movl    [rsp + #16], RDX	# spill
1cc     movl    RSI, #-187	# int
        nop 	# 2 bytes pad for loops and calls
1d3     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.StringLatin1::indexOf @ bci:13  L[0]=rsp + #0 L[1]=rsp + #16 L[2]=rsp + #12 L[3]=RBP L[4]=_ L[5]=_ STK[0]=rsp + #12
        # OopMap {[0]=Oop off=472/0x1d8}
1d8     ud2	# ShouldNotReachHere

1ec     B40: #	out( N1 ) &lt;- in( B2 )  Freq: 1.01328e-06
1ec     movl    RSI, #-10	# int
        nop 	# 2 bytes pad for loops and calls
1f3     call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.StringLatin1::indexOf @ bci:10  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ STK[0]=#NULL
        # OopMap {off=504/0x1f8}
1f8     ud2	# ShouldNotReachHere

--------------------------------------------------------------------------------
</opto_assembly>
<writer thread='40195'/>
    595  101       3       java.lang.AbstractStringBuilder::&lt;init&gt; (39 bytes)
<writer thread='43011'/>
    595   19       3       java.lang.StringLatin1::indexOf (61 bytes)   made not entrant
<writer thread='42499'/>
    595  100       3       java.lang.StringBuilder::&lt;init&gt; (7 bytes)
<writer thread='43011'/>
                              @ 1   java.lang.StringLatin1::canEncode (13 bytes)   inline (hot)
<writer thread='40195'/>
                              @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
<writer thread='40963'/>
    595  102       3       java.lang.StringBuilder::toString (35 bytes)
<writer thread='42499'/>
                              @ 3   java.lang.AbstractStringBuilder::&lt;init&gt; (39 bytes)   callee is too large
<writer thread='40963'/>
                              @ 1   java.lang.AbstractStringBuilder::isLatin1 (19 bytes)
                              @ 16   java.lang.StringLatin1::newString (17 bytes)
                                @ 9   java.util.Arrays::copyOfRange (64 bytes)   callee is too large
                                @ 13   java.lang.String::&lt;init&gt; (15 bytes)
                                  @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
                              @ 31   java.lang.StringUTF16::newString (50 bytes)   callee is too large
<writer thread='9219'/>
    596  103     n 0       java.lang.invoke.MethodHandle::invokeBasic()L (native)   
    597  104     n 0       java.lang.invoke.MethodHandle::linkToSpecial(LL)L (native)   (static)
<writer thread='42499'/>
    598  105       1       java.lang.invoke.MethodType::form (5 bytes)
<writer thread='40195'/>
    599  106       3       jdk.internal.org.objectweb.asm.ByteVector::put12 (64 bytes)
                              @ 18   jdk.internal.org.objectweb.asm.ByteVector::enlarge (51 bytes)   callee is too large
<writer thread='42499'/>
    600  107       1       java.lang.invoke.MethodType::ptypes (5 bytes)
<writer thread='9219'/>
    611  108     n 0       java.lang.invoke.MethodHandle::linkToSpecial(LL)V (native)   (static)
<writer thread='40195'/>
    611  109       3       java.lang.invoke.MethodType::makeImpl (108 bytes)
<writer thread='40963'/>
    611  110       3       java.lang.invoke.MethodType::&lt;init&gt; (15 bytes)
<writer thread='42499'/>
    611  111       3       java.lang.invoke.MethodType$ConcurrentWeakInternSet::get (47 bytes)
<writer thread='40963'/>
                              @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
<writer thread='40195'/>
                              @ 17   java.lang.invoke.MethodType::&lt;init&gt; (15 bytes)
<writer thread='42499'/>
                              @ 8   java.lang.NullPointerException::&lt;init&gt; (5 bytes)   don&apos;t inline Throwable constructors
<writer thread='40195'/>
                                @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
<writer thread='42499'/>
                              @ 13   java.lang.invoke.MethodType$ConcurrentWeakInternSet::expungeStaleElements (27 bytes)
               !m               @ 4   java.lang.ref.ReferenceQueue::poll (28 bytes)
<writer thread='40195'/>
                              @ 25   java.lang.invoke.MethodType$ConcurrentWeakInternSet::get (47 bytes)   callee is too large
                              @ 42   java.lang.invoke.MethodType::checkRtype (6 bytes)
                                @ 1   java.util.Objects::requireNonNull (14 bytes)
<writer thread='42499'/>
                                  @ 17   java.lang.ref.ReferenceQueue::reallyPoll (65 bytes)   callee is too large
<writer thread='40963'/>
    612  112   !   3       java.lang.invoke.MemberName::getMethodType (203 bytes)
<writer thread='40195'/>
                                  @ 8   java.lang.NullPointerException::&lt;init&gt; (5 bytes)   don&apos;t inline Throwable constructors
                              @ 50   java.lang.invoke.MethodType::checkPtypes (61 bytes)   callee is too large
<writer thread='42499'/>
                                @ 17   java.util.concurrent.ConcurrentHashMap::remove (8 bytes)
<writer thread='40195'/>
                              @ 63   java.util.Arrays::copyOf (10 bytes)
<writer thread='42499'/>
               !m                 @ 4   java.util.concurrent.ConcurrentHashMap::replaceNode (437 bytes)   callee is too large
<writer thread='40963'/>
                              @ 8   java.lang.invoke.MemberName::expandFromVM (21 bytes)
<writer thread='40195'/>
                                @ 3   java.lang.Object::getClass (0 bytes)   intrinsic
<writer thread='42499'/>
                              @ 21   java.util.concurrent.ConcurrentHashMap::get (162 bytes)   callee is too large
<writer thread='40963'/>
                                @ 9   java.lang.invoke.MemberName::
<writer thread='40195'/>
                                @ 6   java.util.Arrays::copyOf (40 bytes)   callee is too large
<writer thread='40963'/>
isResolved (13 bytes)
<writer thread='42499'/>
                              @ 35   java.lang.ref.Reference::get (5 bytes)   intrinsic
<writer thread='40195'/>
                              @ 71   java.lang.invoke.MethodType::checkPtypes (61 bytes)   callee is too large
                              @ 81   java.lang.invoke.MethodType::&lt;init&gt; (15 bytes)
                                @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
<writer thread='40963'/>
                                @ 17   java.lang.invoke.MethodHandleNatives::expand (0 bytes)   native method
<writer thread='40195'/>
                              @ 90   java.lang.invoke.MethodTypeForm::findForm (25 bytes)
<writer thread='40963'/>
                              @ 21   java.lang.invoke.MemberName::isInvocable (8 bytes)
<writer thread='40195'/>
                                @ 3   java.lang.invoke.MethodTypeForm::canonicalize (64 bytes)   callee is too large
<writer thread='9219'/>
    614  113     n 0       java.lang.invoke.MethodHandle::linkToInterface(LLL)I (native)   (static)
<writer thread='40963'/>
                                @ 4   java.lang.invoke.MemberName::testAnyFlags (15 bytes)
                                  @ 3   java.lang.invoke.MemberName::testFlags (16 bytes)
<writer thread='40195'/>
                                @ 16   java.lang.invoke.MethodTypeForm::&lt;init&gt; (322 bytes)   callee is too large
                                @ 21   java.lang.invoke.MethodType::form (5 bytes)
                              @ 101   java.lang.invoke.MethodType$ConcurrentWeakInternSet::add (66 bytes)   callee is too large
<writer thread='40963'/>
                              @ 29   java.lang.invoke.MethodHandleStatics::newIllegalArgumentException (9 bytes)
                                @ 5   java.lang.IllegalArgumentException::&lt;init&gt; (6 bytes)   don&apos;t inline Throwable constructors
                              @ 74   java.lang.invoke.MemberName::getClassLoader (8 bytes)
                                @ 4   java.lang.Class::getClassLoader (28 bytes)   force inline by annotation
                                  @ 1   java.lang.Class::getClassLoader0 (5 bytes)
                                  @ 11   java.lang.System::getSecurityManager (12 bytes)
                                    @ 0   java.lang.System::allowSecurityManager (13 bytes)
                                  @ 20   jdk.internal.reflect.Reflection::getCallerClass (0 bytes)   native method
                                  @ 23   java.lang.ClassLoader::checkClassLoaderPermission (29 bytes)   callee is too large
                              @ 77   java.lang.invoke.MethodType::fromDescriptor (90 bytes)   callee is too large
<writer thread='42499'/>
    618  114       3       java.lang.invoke.MethodType::parameterCount (6 bytes)
<writer thread='40963'/>
                              @ 126   java.lang.invoke.MethodType::makeImpl (108 bytes)   callee is too large
<writer thread='42499'/>
    619  116       3       java.lang.invoke.MethodType::checkSlotCount (33 bytes)
                              @ 13   java.lang.StringBuilder::&lt;init&gt; (7 bytes)
                                @ 3   java.lang.AbstractStringBuilder::&lt;init&gt; (39 bytes)   callee is too large
                              @ 18   java.lang.StringBuilder::append (8 bytes)
                                @ 2   java.lang.AbstractStringBuilder::append (45 bytes)   callee is too large
                              @ 22   java.lang.StringBuilder::append (8 bytes)
                                @ 2   java.lang.AbstractStringBuilder::append (55 bytes)   callee is too large
                              @ 25   java.lang.StringBuilder::toString (35 bytes)
                                @ 1   java.lang.AbstractStringBuilder::isLatin1 (19 bytes)
                                @ 16   java.lang.StringLatin1::newString (17 bytes)
                                  @ 9   java.util.Arrays::copyOfRange (64 bytes)   callee is too large
                                  @ 13   java.lang.String::&lt;init&gt; (15 bytes)
                                    @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
                                @ 31   java.lang.StringUTF16::newString (50 bytes)   callee is too large
                              @ 28   java.lang.invoke.MethodHandleStatics::newIllegalArgumentException
<writer thread='40195'/>
    621  115       1       java.lang.invoke.LambdaForm$Name::index (5 bytes)
<writer thread='42499'/>
 (9 bytes)
                                @ 5   java.lang.IllegalArgumentException::&lt;init&gt; (6 bytes)   don&apos;t inline Throwable constructors
<writer thread='40195'/>
    622  117       1       jdk.internal.org.objectweb.asm.SymbolTable::getMajorVersion (5 bytes)
<writer thread='9219'/>
    629  118     n 0       java.lang.Object::getClass (native)   
<writer thread='40195'/>
    629  119       1       sun.nio.fs.UnixPath::getFileSystem (5 bytes)
    631  120       1       java.util.HashMap::size (5 bytes)
<writer thread='40963'/>
    632  121       3       java.lang.StringUTF16::compress (50 bytes)
<writer thread='42499'/>
    632  122       3       java.io.DataInputStream::readUTF (501 bytes)
<writer thread='40195'/>
    632  123       3       java.util.AbstractCollection::&lt;init&gt; (5 bytes)
                              @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
<writer thread='42499'/>
                              @ 1   java.io.DataInputStream::readUnsignedShort (39 bytes)   callee is too large
                              @ 87   java.io.DataInputStream::readFully (63 bytes)   callee is too large
<writer thread='40195'/>
    633  124       3       java.util.HashMap::putVal (300 bytes)
<writer thread='42499'/>
                              @ 259  java/io/UTFDataFormatException::&lt;init&gt; (not loaded)   not inlineable
                              @ 291   java.lang.StringBuilder::&lt;init&gt; (7 bytes)
                                @ 3   java.lang.AbstractStringBuilder::&lt;init&gt; (39 bytes)   callee is too large
<writer thread='40963'/>
    634  126       3       java.util.HashMap::newNode (13 bytes)
<writer thread='42499'/>
                              @ 296   java.lang.StringBuilder::append (8 bytes)
<writer thread='40195'/>
                              @ 20   java.util.HashMap::resize (356 bytes)   callee is too large
<writer thread='42499'/>
                                @ 2  
<writer thread='40963'/>
                              @ 9  
<writer thread='42499'/>
 java.lang.AbstractStringBuilder::append
<writer thread='40963'/>
 java.util.HashMap$Node::
<writer thread='40195'/>
             
<writer thread='42499'/>
 (45 bytes)   callee is too large
<writer thread='40195'/>
                 @ 56  
<writer thread='40963'/>
&lt;init&gt;
<writer thread='40195'/>
 java.util.HashMap::
<writer thread='40963'/>
 (26 bytes)
<writer thread='40195'/>
newNode (13 bytes)
<writer thread='40963'/>
                   
<writer thread='42499'/>
             
<writer thread='40963'/>
           
<writer thread='42499'/>
                 
<writer thread='40963'/>
  @ 1  
<writer thread='42499'/>
@ 301  
<writer thread='40963'/>
 java.lang.Object::
<writer thread='40195'/>
        
<writer thread='42499'/>
 java.lang.StringBuilder::append (8 bytes)
<writer thread='40963'/>
&lt;init&gt;
<writer thread='42499'/>

<writer thread='40195'/>
                      
<writer thread='40963'/>
 (1 bytes)
<writer thread='40195'/>
  @ 9   java.util.HashMap$Node::&lt;init&gt; (26 bytes)
<writer thread='42499'/>
                                @ 2   java.lang.AbstractStringBuilder::append (55 bytes)   callee is too large
<writer thread='40195'/>
                                  @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
<writer thread='42499'/>
                              @ 304   java.lang.StringBuilder::toString (35 bytes)
                                @ 1   java.lang.AbstractStringBuilder::isLatin1 (19 bytes)
                                @ 16   java.lang.StringLatin1::newString (17 bytes)
<writer thread='40195'/>
             
<writer thread='42499'/>
                                  @ 9  
<writer thread='40195'/>
                 @ 91  
<writer thread='42499'/>
 java.util.Arrays::
<writer thread='40195'/>
 java.lang.Object::
<writer thread='42499'/>
copyOfRange (64 bytes)
<writer thread='40195'/>
equals (11 bytes)   no static binding
<writer thread='42499'/>
   callee is too large
                                  @ 13   java.lang.String::&lt;init&gt; (15 bytes)
<writer thread='40195'/>
                              @ 123   java.util.HashMap$TreeNode::putTreeVal (314 bytes)   not inlineable
<writer thread='42499'/>
                                    @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
<writer thread='40195'/>
                              @ 152   java.util.HashMap::newNode (13 bytes)
                                @ 9   java.util.HashMap$Node::&lt;init&gt; (26 bytes)
                                  @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
<writer thread='42499'/>
                                @ 31   java.lang.StringUTF16::newString (50 bytes)   callee is too large
                              @ 307  java/io/UTFDataFormatException::&lt;init&gt; (not loaded)   not inlineable
<writer thread='40963'/>
    637  131       3       java.util.HashMap$HashIterator::hasNext (13 bytes)
<writer thread='42499'/>
                              @ 351  java/io/UTFDataFormatException::&lt;init&gt; (not loaded)   not inlineable
<writer thread='40195'/>
                              @ 169   java.util.HashMap::treeifyBin (110 bytes)   callee is too large
<writer thread='42499'/>
                              @ 403   java.lang.StringBuilder::&lt;init&gt; (7 bytes)
                                @ 3   java.lang.AbstractStringBuilder::&lt;init&gt; (39 bytes)   callee is too large
<writer thread='40195'/>
                              @ 203   java.lang.Object::equals (11 bytes)   no static binding
<writer thread='42499'/>
                              @ 408   java.lang.StringBuilder::append (8 bytes)
                                @ 2   java.lang.AbstractStringBuilder::append (45 bytes)   callee is too large
                              @ 415   java.lang.StringBuilder::append (8 bytes)
<writer thread='40195'/>
                              @ 253   java.util.HashMap::afterNodeAccess (1 bytes)
<writer thread='42499'/>
                                @ 2   java.lang.AbstractStringBuilder::append (55 bytes)   callee is too large
<writer thread='40963'/>
    637  133       3       java.util.HashMap$HashIterator::nextNode (100 bytes)
<writer thread='42499'/>
                              @ 418   java.lang.StringBuilder::toString (35 bytes)
                                @ 1   java.lang.AbstractStringBuilder::isLatin1 (19 bytes)
<writer thread='40195'/>
                              @ 288   java.util.HashMap::resize (356 bytes)   callee is too large
<writer thread='40963'/>
                              @ 23  java/util/ConcurrentModificationException::&lt;init&gt; (not loaded)
<writer thread='40195'/>
             
<writer thread='40963'/>
   not inlineable
<writer thread='40195'/>
                 @ 295   java.util.HashMap::afterNodeInsertion (1 bytes)
<writer thread='40963'/>
                              @ 35  java/util/NoSuchElementException::&lt;init&gt; (not loaded)   not inlineable
<writer thread='42499'/>
                                @ 16   java.lang.StringLatin1::newString (17 bytes)
                                  @ 9   java.util.Arrays::copyOfRange (64 bytes)   callee is too large
                                  @ 13   java.lang.String::&lt;init&gt; (15 bytes)
                                    @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
                                @ 31   java.lang.StringUTF16::newString (50 bytes)   callee is too large
                              @ 421  java/io/UTFDataFormatException::&lt;init&gt; (not loaded)   not inlineable
                              @ 469   java.lang.StringBuilder::&lt;init&gt; (7 bytes)
                                @ 3   java.lang.AbstractStringBuilder::&lt;init&gt; (39 bytes)   callee is too large
                              @ 474   java.lang.StringBuilder::append (8 bytes)
                                @ 2   java.lang.AbstractStringBuilder::append (45 bytes)   callee is too large
<writer thread='43011'/>
    640  135       4       java.lang.StringLatin1::hashCode (42 bytes)
<writer thread='42499'/>
                              @ 479   java.lang.StringBuilder::append (8 bytes)
                                @ 2   java.lang.AbstractStringBuilder::append (55 bytes)   callee is too large
                              @ 482   java.lang.StringBuilder::toString (35 bytes)
                                @ 1   java.lang.AbstractStringBuilder::isLatin1 (19 bytes)
                                @ 16   java.lang.StringLatin1::newString (17 bytes)
                                  @ 9   java.util.Arrays::copyOfRange (64 bytes)   callee is too large
                                  @ 13   java.lang.String::&lt;init&gt; (15 bytes)
                                    @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
<writer thread='40963'/>
    641  130       3       java.util.HashMap::put (13 bytes)
<writer thread='42499'/>
                                @ 31  
<writer thread='40963'/>
             
<writer thread='42499'/>
 java.lang.StringUTF16::
<writer thread='40963'/>
                 @ 2  
<writer thread='42499'/>
newString (50 bytes)   callee is too large
<writer thread='40963'/>
 java.util.HashMap::hash (20 bytes)
<writer thread='42499'/>
                              @ 485  java/io/UTFDataFormatException::&lt;init&gt; (not loaded)   not inlineable
<writer thread='40963'/>
                                @ 9   java.lang.Object::hashCode (0 bytes)   no static binding
<writer thread='42499'/>
                              @ 497   java.lang.String::&lt;init&gt; (14 bytes)
<writer thread='40963'/>
                              
<writer thread='42499'/>
                                @ 7  
<writer thread='40963'/>
@ 9  
<writer thread='42499'/>
 java.lang.String::rangeCheck
<writer thread='40963'/>
 java.util.HashMap::
<writer thread='42499'/>
 (9 bytes)
<writer thread='40963'/>
putVal (300 bytes)   callee is too large
<writer thread='42499'/>
                                  @ 4   java.lang.String::checkBoundsOffCount (64 bytes)   callee is too large
                                @ 10   java.lang.String::&lt;init&gt; (74 bytes)   callee is too large
<writer thread='40963'/>
    644  127       3       java.util.HashMap$Node::&lt;init&gt; (26 bytes)
                              @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
    646  128       3       java.util.HashMap::afterNodeInsertion (1 bytes)
    646  134       3       jdk.internal.module.ModuleInfo$ConstantPool::checkIndex (21 bytes)
                              @ 16  jdk/internal/module/ModuleInfo::invalidModuleDescriptor (not loaded)   not inlineable
    648  148       3       java.io.DataInputStream::readFully (63 bytes)
                              @ 8  java/lang/IndexOutOfBoundsException::&lt;init&gt; (not loaded)   not inlineable
               !              @ 34   java.io.InputStream::read (81 bytes)   no static binding
<writer thread='24067'/>
    648  142       3       jdk.internal.module.ModuleInfo$ConstantPool$Entry::&lt;init&gt; (10 bytes)
<writer thread='40963'/>
                              @ 48  java/io/EOFException::&lt;init&gt; (not loaded)   not inlineable
<writer thread='24067'/>
                              @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
    650  158       3       jdk.internal.module.ModuleInfo$ConstantPool::checkUnqualifiedName (131 bytes)
                              @ 1   java.lang.String::length (11 bytes)
                                @ 6   java.lang.String::coder (15 bytes)
                              @ 15   java.lang.StringBuilder::&lt;init&gt; (7 bytes)
                                @ 3   java.lang.AbstractStringBuilder::&lt;init&gt; (39 bytes)   callee is too large
                              @ 19   java.lang.StringBuilder::append (8 bytes)
                                @ 2   java.lang.AbstractStringBuilder::append (45 bytes)   callee is too large
<writer thread='40963'/>
    651  141       3       java.io.DataInputStream::readUnsignedByte (22 bytes)
                              @ 4   java.io.InputStream::read (0 bytes)   no static binding
<writer thread='24067'/>
                              @ 24   java.lang.StringBuilder::append (8 bytes)
<writer thread='40963'/>
                              @ 16  
<writer thread='24067'/>
                   
<writer thread='40963'/>
java/io/EOFException::&lt;init&gt;
<writer thread='24067'/>
       
<writer thread='40963'/>
 (not loaded)   not inlineable
<writer thread='24067'/>
      @ 2   java.lang.AbstractStringBuilder::append (45 bytes)   callee is too large
                              @ 28   java.lang.StringBuilder::append (8 bytes)
                                @ 2   java.lang.AbstractStringBuilder::append (55 bytes)   callee is too large
                              @ 33   java.lang.StringBuilder::append (8 bytes)
                                @ 2   java.lang.AbstractStringBuilder::append (45 bytes)   callee is too large
                              @ 36   java.lang.StringBuilder::toString (35 bytes)
                                @ 1   java.lang.AbstractStringBuilder::isLatin1 (19 bytes)
<writer thread='40963'/>
    653  129       3       java.util.HashSet::add (20 bytes)
<writer thread='24067'/>
                                @ 16   java.lang.StringLatin1::newString (17 bytes)
<writer thread='40963'/>
                              @ 8   java.util.HashMap::put (13 bytes)
<writer thread='24067'/>
                                  @ 9   java.util.Arrays::copyOfRange (64 bytes)   callee is too large
<writer thread='40963'/>
                                @ 2   java.util.HashMap::hash (20 bytes)
<writer thread='24067'/>
                                  @ 13   java.lang.String::&lt;init&gt; (15 bytes)
<writer thread='40963'/>
                                  @ 9  
<writer thread='24067'/>
             
<writer thread='40963'/>
 java.lang.Object::
<writer thread='24067'/>
                 
<writer thread='40963'/>
hashCode
<writer thread='24067'/>
      @ 1  
<writer thread='40963'/>
 (0 bytes)   no static binding
<writer thread='24067'/>
 java.lang.Object::&lt;init&gt; (1 bytes)
<writer thread='40963'/>
                                @ 9   java.util.HashMap::putVal (300 bytes)   callee is too large
<writer thread='24067'/>
                                @ 31   java.lang.StringUTF16::newString (50 bytes)   callee is too large
                              @ 39  jdk/internal/module/ModuleInfo::invalidModuleDescriptor (not loaded)   not inlineable
                              @ 56   java.lang.String::charAt (25 bytes)
                                @ 1   java.lang.String::isLatin1 (19 bytes)
                                @ 12   java.lang.StringLatin1::charAt (28 bytes)
                                  @ 15  java/lang/StringIndexOutOfBoundsException::&lt;init&gt; (not loaded)   not inlineable
<writer thread='40195'/>
    656  154       3       java.lang.CharacterData::of (120 bytes)
<writer thread='24067'/>
                                @ 21   java.lang.StringUTF16::charAt (11 bytes)
                                  @ 2   java.lang.StringUTF16::checkIndex (9 bytes)
<writer thread='40963'/>
    656  155       3       java.lang.CharacterDataLatin1::getProperties (11 bytes)
<writer thread='24067'/>
                                    @ 2   java.lang.StringUTF16::length (5 bytes)
                                    @ 5   java.lang.String::checkIndex (48 bytes)   callee is too large
                                  @ 7   java.lang.StringUTF16::getChar (60 bytes)   intrinsic
                              @ 86   java.lang.StringBuilder::&lt;init&gt; (7 bytes)
                                @ 3   java.lang.AbstractStringBuilder::&lt;init&gt; (39 bytes)   callee is too large
                   
<writer thread='40963'/>
    657  125       3       java.util.AbstractSet::&lt;init&gt; (5 bytes)
<writer thread='24067'/>
           @ 90   java.lang.StringBuilder::append (8 bytes)
                                @ 2   java.lang.AbstractStringBuilder::
<writer thread='40963'/>
                              
<writer thread='24067'/>
append (45 bytes)   callee is too large
<writer thread='40963'/>
@ 1   java.util.AbstractCollection::&lt;init&gt; (5 bytes)
<writer thread='24067'/>
                              @ 95   java.lang.StringBuilder::
<writer thread='40963'/>
             
<writer thread='24067'/>
append
<writer thread='40963'/>
                   @ 1   java.lang.Object::&lt;init&gt;
<writer thread='24067'/>
 (8 bytes)
<writer thread='40963'/>
 (1 bytes)
<writer thread='24067'/>
                                @ 2   java.lang.AbstractStringBuilder::append (45 bytes)   callee is too large
                              @ 99   java.lang.StringBuilder::append (8 bytes)
                                @ 2   java.lang.AbstractStringBuilder::append (55 bytes)   callee is too large
                              @ 104   java.lang.StringBuilder::append (8 bytes)
                                @ 2   java.lang.AbstractStringBuilder::append (45 bytes)   callee is too large
                              @ 109   java.lang.StringBuilder::append (8 bytes)
                                @ 2   java.lang.AbstractStringBuilder::append (77 bytes)   callee is too large
                              @ 114   java.lang.StringBuilder::append (8 bytes)
                                @ 2   java.lang.AbstractStringBuilder::append (45 bytes)   callee is too large
                              @ 117   java.lang.StringBuilder::toString (35 bytes)
<writer thread='40963'/>
    658  144       3       java.lang.String::checkBoundsOffCount (64 bytes)
<writer thread='24067'/>
                                @ 1   java.lang.AbstractStringBuilder::isLatin1 (19 bytes)
<writer thread='40963'/>
                              @ 23   java.lang.StringBuilder::&lt;init&gt; (7 bytes)
                                @ 3   java.lang.AbstractStringBuilder::&lt;init&gt; (39 bytes)   callee is too large
<writer thread='24067'/>
                                @ 16   java.lang.StringLatin1::newString (17 bytes)
<writer thread='40963'/>
                              @ 29   java.lang.StringBuilder::append (8 bytes)
<writer thread='24067'/>
                                  @ 9   java.util.Arrays::copyOfRange (64 bytes)   callee is too large
<writer thread='40963'/>
                                @ 2   java.lang.AbstractStringBuilder::append (45 bytes)   callee is too large
<writer thread='24067'/>
                                  @ 13   java.lang.String::&lt;init&gt; (15 bytes)
                                  
<writer thread='40195'/>
    659  139       3       java.util.AbstractMap::&lt;init&gt; (5 bytes)
<writer thread='40963'/>
                     
<writer thread='24067'/>
  @ 1  
<writer thread='40963'/>
         
<writer thread='24067'/>
 java.lang.Object::
<writer thread='40963'/>
@ 33   java.lang.StringBuilder::
<writer thread='24067'/>
&lt;init&gt;
<writer thread='40963'/>
append
<writer thread='24067'/>
 (1 bytes)
<writer thread='40963'/>
 (8 bytes)
<writer thread='40195'/>
                              @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
<writer thread='40963'/>
                                @ 2   java.lang.AbstractStringBuilder::append (55 bytes)   callee is too large
                              @ 39   java.lang.StringBuilder::append (8 bytes)
                                @ 2   java.lang.AbstractStringBuilder::append
<writer thread='24067'/>
             
<writer thread='40963'/>
 (45 bytes)   callee is too large
<writer thread='24067'/>
                   @ 31   java.lang.StringUTF16::newString (50 bytes)   callee is too large
<writer thread='40963'/>
                              @ 43   java.lang.StringBuilder::append (8 bytes)
<writer thread='24067'/>
                     
<writer thread='40963'/>
             
<writer thread='24067'/>
         
<writer thread='40963'/>
                   
<writer thread='24067'/>
@ 120  
<writer thread='40963'/>
@ 2  
<writer thread='24067'/>
jdk/internal/module/ModuleInfo
<writer thread='40963'/>
 java.lang.AbstractStringBuilder::
<writer thread='24067'/>
::
<writer thread='40963'/>
append (55 bytes)   callee is too large
<writer thread='24067'/>
invalidModuleDescriptor (not loaded)   not inlineable
<writer thread='40195'/>
    660  166       3       java.util.ImmutableCollections$SetN::probe (56 bytes)
<writer thread='40963'/>
                              @ 49   java.lang.StringBuilder::append (8 bytes)
                                @ 2   java.lang.AbstractStringBuilder::append (45 bytes)   callee is too large
<writer thread='40195'/>
                              @ 1   java.lang.Object::hashCode
<writer thread='40963'/>
                              @ 53   java.lang.StringBuilder::append
<writer thread='40195'/>
 (0 bytes)   no static binding
<writer thread='40963'/>
 (8 bytes)
                                @ 2   java.lang.AbstractStringBuilder::append (55 bytes)   callee is too large
<writer thread='40195'/>
                              @ 9   java.lang.Math::floorMod (20 bytes)
<writer thread='40963'/>
                              @ 56   java.lang.StringBuilder::toString (35 bytes)
<writer thread='43011'/>

============================= C2-compiled nmethod ==============================
<opto_assembly compile_id='135'>
----------------------- MetaData before Compile_id = 135 ------------------------
{method}
 - this oop:          0x0000000126b1dae8
 - method holder:     &apos;java/lang/StringLatin1&apos;
 - constants:         0x0000000126b1b920 constant pool [372] {0x0000000126b1b920} for &apos;java/lang/StringLatin1&apos; cache=0x0000000126b202b0
 - access:            0xc1000009  public static 
 - name:              &apos;hashCode&apos;
 - signature:         &apos;([B)I&apos;
 - max stack:         4
 - max locals:        6
 - size of params:    1
 - method size:       13
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x000000010c0a1de0
 - adapters:          AHE@0x00007f99308e1660: 0xb0000000 i2c: 0x000000010c0e9ee0 c2i: 0x000000010c0e9fc3 c2iUV: 0x000000010c0e9f8a c2iNCI: 0x000000010c0ea000
 - compiled entry     0x000000010c7d4560
 - code size:         42
 - code start:        0x0000000126b1da88
 - code end (excl):   0x0000000126b1dab2
 - method data:       0x0000000126c5c740
 - checked ex length: 0
 - linenumber start:  0x0000000126b1dab2
 - localvar length:   3
 - localvar start:    0x0000000126b1dac2
 - compiled code: nmethod    661    9       3       java.lang.StringLatin1::hashCode (42 bytes)

------------------------ OptoAssembly for Compile_id = 135 -----------------------
#
#  int ( byte[int:&gt;=0]:exact * )
#
#r018 rsi:rsi   : parm 0: byte[int:&gt;=0]:exact *
# -- Old rsp -- Framesize: 48 --
#r583 rsp+44: in_preserve
#r582 rsp+40: return address
#r581 rsp+36: in_preserve
#r580 rsp+32: saved fp register
#r579 rsp+28: pad2, stack alignment
#r578 rsp+24: pad2, stack alignment
#r577 rsp+20: Fixed slot 1
#r576 rsp+16: Fixed slot 0
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N1: #	out( B1 ) &lt;- in( B19 B18 B16 )  Freq: 1

000     B1: #	out( B19 B2 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
000     # stack bang (168 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

00c     movl    R11, [RSI + #12 (8-bit)]	# range
010     NullCheck RSI

010     B2: #	out( B17 B3 ) &lt;- in( B1 )  Freq: 0.999999
010     testl   R11, R11	# unsigned
013     jbe,u   B17  P=0.042775 C=17183.000000

019     B3: #	out( B18 B4 ) &lt;- in( B2 )  Freq: 0.957224
019     movl    R8, R11	# spill
01c     decl    R8	# int
01f     cmpl    R8, R11	# unsigned
022     jnb,u   B18  P=0.000001 C=-1.000000

028     B4: #	out( B14 B5 ) &lt;- in( B3 )  Freq: 0.957223
028     movzbl  R10, [RSI + #16 (8-bit)]	# ubyte
02d     movl    RCX, R11	# spill
030     addl    RCX, #-7	# int
033     movl    R9, #-2147483648	# int
039     cmpl    R8, RCX
03c     cmovll RCX, R9	# signed, int
040     movl    RDI, #1	# int
045     cmpl    RCX, #1
048     jle     B14  P=0.000001 C=-1.000000

04e     B5: #	out( B10 ) &lt;- in( B4 )  Freq: 0.957222
04e     movl    RBX, R10	# spill
051     sall    RBX, #5
054     subl    RBX, R10	# int
057     movl    RAX, #8000	# int
05c     # TLS is in R15
05c     jmp,s   B10

05e     B6: #	out( B7 ) &lt;- in( B14 )  Freq: 0.478612
05e     # castII of RDI

05e     B7: #	out( B16 B8 ) &lt;- in( B6 B8 ) Loop( B7-B8 inner post of N167) Freq: 0.957223
05e     movzbl  R8, [RSI + #16 + RDI]	# ubyte
064     movl    RAX, R10	# spill
067     sall    RAX, #5
06a     subl    RAX, R10	# int
06d     addl    RAX, R8	# int
070     incl    RDI	# int
072     cmpl    RDI, R11
075     jge     B16	# loop end  P=0.500000 C=16448.000000

07b     B8: #	out( B7 ) &lt;- in( B7 )  Freq: 0.478612
07b     movl    R10, RAX	# spill
07e     jmp,s   B7

080     B9: #	out( B10 ) &lt;- in( B12 ) top-of-loop Freq: 21.4209
080     movdq   RSI, XMM0	# spill
085     movdl   R11, XMM1	# spill

08a     B10: #	out( B11 ) &lt;- in( B5 B9 ) Loop( B10-B9 ) Freq: 22.3782
08a     movl    RDX, RCX	# spill
08c     subl    RDX, RDI	# int
08e     cmpl    RDX, RAX
090     cmovlgt RDX, RAX	# min
093     addl    RDX, RDI	# int
095     movdq   XMM0, RSI	# spill
09a     movdl   XMM1, R11	# spill
        nop 	# 1 bytes pad for loops and calls

0a0     B11: #	out( B11 B12 ) &lt;- in( B10 B11 ) Loop( B11-B11 inner main of N73 strip mined) Freq: 523.161
0a0     movslq  RSI, RDI	# i2l
0a3     movdq   R8, XMM0	# spill
0a8     movzbl  RBP, [R8 + #16 + RSI]	# ubyte
0ae     movzbl  R14, [R8 + #23 + RSI]	# ubyte
0b4     movzbl  R11, [R8 + #17 + RSI]	# ubyte
0ba     movzbl  R10, [R8 + #22 + RSI]	# ubyte
0c0     movzbl  R9, [R8 + #21 + RSI]	# ubyte
0c6     movzbl  R8, [R8 + #20 + RSI]	# ubyte
0cc     addl    RBX, RBP	# int
0ce     movdq   RBP, XMM0	# spill
0d3     movzbl  RBP, [RBP + #18 + RSI]	# ubyte
0d8     movdq   R13, XMM0	# spill
0dd     movzbl  RSI, [R13 + #19 + RSI]	# ubyte
0e3     movl    R13, RBX	# spill
0e6     sall    R13, #5
0ea     subl    R13, RBX	# int
0ed     addl    R13, R11	# int
0f0     movl    R11, R13	# spill
0f3     sall    R11, #5
0f7     subl    R11, R13	# int
0fa     addl    R11, RBP	# int
0fd     movl    RBP, R11	# spill
100     sall    RBP, #5
103     subl    RBP, R11	# int
106     addl    RBP, RSI	# int
108     movl    RBX, RBP	# spill
10a     sall    RBX, #5
10d     subl    RBX, RBP	# int
10f     addl    RBX, R8	# int
112     movl    R11, RBX	# spill
115     sall    R11, #5
119     subl    R11, RBX	# int
11c     addl    R11, R9	# int
11f     movl    R8, R11	# spill
122     sall    R8, #5
126     subl    R8, R11	# int
129     addl    R8, R10	# int
12c     movl    R10, R8	# spill
12f     sall    R10, #5
133     subl    R10, R8	# int
136     addl    R10, R14	# int
139     movl    RBX, R10	# spill
13c     sall    RBX, #5
13f     subl    RBX, R10	# int
142     addl    RDI, #8	# int
145     cmpl    RDI, RDX
147     jl     B11	# loop end  P=0.957225 C=16448.000000

14d     B12: #	out( B9 B13 ) &lt;- in( B11 )  Freq: 22.3782
14d     movq    R11, [R15 + #296 (32-bit)]	# ptr
154     testl   rax, [R11]	# Safepoint: poll for GC        # java.lang.StringLatin1::hashCode @ bci:37  L[0]=_ L[1]=R10 L[2]=XMM0 L[3]=XMM1 L[4]=RDI L[5]=_
        # OopMap {xmm0=Oop off=340/0x154}
157     cmpl    RDI, RCX
159     jl     B9  P=0.957225 C=16448.000000

15f     B13: #	out( B14 ) &lt;- in( B12 )  Freq: 0.957222
15f     movdq   RSI, XMM0	# spill
164     movdl   R11, XMM1	# spill

169     B14: #	out( B6 B15 ) &lt;- in( B4 B13 )  Freq: 0.957223
169     cmpl    RDI, R11
16c     jl     B6  P=0.500000 C=-1.000000

172     B15: #	out( B16 ) &lt;- in( B14 )  Freq: 0.478612
172     movl    RAX, R10	# spill

175     B16: #	out( N1 ) &lt;- in( B7 B15 B17 )  Freq: 0.999998
175     addq    rsp, 32	# Destroy frame
	popq    rbp
	movq    rscratch1, poll_offset[r15_thread] #polling_page_address
	testl   rax, [rscratch1]	# Safepoint: poll for GC

184     ret

185     B17: #	out( B16 ) &lt;- in( B2 )  Freq: 0.0427748
185     xorl    RAX, RAX	# int
187     jmp,s   B16

189     B18: #	out( N1 ) &lt;- in( B3 )  Freq: 9.69935e-07
189     movq    RBP, RSI	# spill
18c     movl    [rsp + #4], R11	# spill
191     movl    RSI, #-138	# int
        nop 	# 1 bytes pad for loops and calls
197     call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.StringLatin1::hashCode @ bci:13  L[0]=_ L[1]=#0 L[2]=RBP L[3]=rsp + #4 L[4]=#0 L[5]=_ STK[0]=#0 STK[1]=rsp + #4
        # OopMap {rbp=Oop off=412/0x19c}
19c     ud2	# ShouldNotReachHere

1b0     B19: #	out( N1 ) &lt;- in( B1 )  Freq: 1.01328e-06
1b0     movl    RSI, #-10	# int
        nop 	# 2 bytes pad for loops and calls
1b7     call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.StringLatin1::hashCode @ bci:5  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ STK[0]=#NULL
        # OopMap {off=444/0x1bc}
1bc     ud2	# ShouldNotReachHere

--------------------------------------------------------------------------------
</opto_assembly>
<writer thread='40963'/>
                          
<writer thread='40195'/>
                          
<writer thread='40963'/>
    
<writer thread='43011'/>
    665    9       3       java.lang.StringLatin1::hashCode (42 bytes)   made not entrant
<writer thread='40963'/>
  @ 1  
<writer thread='40195'/>
    @ 31   java.lang.Object::
<writer thread='43011'/>
<writer thread='40963'/>
 java.lang.AbstractStringBuilder::
<writer thread='40195'/>
equals
<writer thread='40963'/>
isLatin1
<writer thread='40195'/>
 (11 bytes)   no static binding
<writer thread='40963'/>
 (19 bytes)
<writer thread='43011'/>
    666  140       4       java.lang.String::length (11 bytes)
<writer thread='40963'/>
                                @ 16   java.lang.StringLatin1::newString (17 bytes)
                                  @ 9   java.util.Arrays::copyOfRange (64 bytes)   callee is too large
                                  @ 13   java.lang.String::&lt;init&gt; (15 bytes)
                                    @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
                                @ 31   java.lang.StringUTF16::newString (50 bytes)   callee is too large
                              @ 59  java/lang/StringIndexOutOfBoundsException::&lt;init&gt; (not loaded)   not inlineable
<writer thread='43011'/>

============================= C2-compiled nmethod ==============================
<opto_assembly compile_id='140'>
----------------------- MetaData before Compile_id = 140 ------------------------
{method}
 - this oop:          0x000000012699ffa8
 - method holder:     &apos;java/lang/String&apos;
 - constants:         0x000000012699b360 constant pool [1059]/operands[28] {0x000000012699b360} for &apos;java/lang/String&apos; cache=0x0000000126aba220
 - access:            0x81000001  public 
 - name:              &apos;length&apos;
 - signature:         &apos;()I&apos;
 - max stack:         3
 - max locals:        1
 - size of params:    1
 - method size:       13
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x000000010c0a1de0
 - adapters:          AHE@0x00007f99308e1660: 0xb0000000 i2c: 0x000000010c0e9ee0 c2i: 0x000000010c0e9fc3 c2iUV: 0x000000010c0e9f8a c2iNCI: 0x000000010c0ea000
 - compiled entry     0x000000010c7d4b00
 - code size:         11
 - code start:        0x000000012699ff88
 - code end (excl):   0x000000012699ff93
 - method data:       0x0000000126d3e7b8
 - checked ex length: 0
 - linenumber start:  0x000000012699ff93
 - localvar length:   1
 - localvar start:    0x000000012699ff9a
 - compiled code: nmethod    668   10       3       java.lang.String::length (11 bytes)

------------------------ OptoAssembly for Compile_id = 140 -----------------------
#
#  int ( java/lang/String:NotNull:exact * )
#
#r018 rsi:rsi   : parm 0: java/lang/String:NotNull:exact *
# -- Old rsp -- Framesize: 32 --
#r583 rsp+28: in_preserve
#r582 rsp+24: return address
#r581 rsp+20: in_preserve
#r580 rsp+16: saved fp register
#r579 rsp+12: pad2, stack alignment
#r578 rsp+ 8: pad2, stack alignment
#r577 rsp+ 4: Fixed slot 1
#r576 rsp+ 0: Fixed slot 0
#
000     N34: #	out( B1 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B3 B2 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (120 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

02c     movl    R11, [RSI + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value (constant)
030     movl    RAX, [R12 + R11 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
035     NullCheck R11

035     B2: #	out( N34 ) &lt;- in( B1 )  Freq: 0.999999
035     movsbl  RCX, [RSI + #20 (8-bit)]	# byte ! Field: java/lang/String.coder (constant)
039     sarl    RAX, RCX
03b     addq    rsp, 16	# Destroy frame
	popq    rbp
	movq    rscratch1, poll_offset[r15_thread] #polling_page_address
	testl   rax, [rscratch1]	# Safepoint: poll for GC

04a     ret

04b     B3: #	out( N34 ) &lt;- in( B1 )  Freq: 1.01328e-06
04b     movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
053     call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.String::length @ bci:4  L[0]=_ STK[0]=#NULL
        # OopMap {off=88/0x58}
058     ud2	# ShouldNotReachHere

--------------------------------------------------------------------------------
</opto_assembly>
    669   10       3       java.lang.String::length (11 bytes)   made not entrant
                              @ 6   java.lang.String::coder (15 bytes)   inline (hot)
    669  171       4       java.io.BufferedInputStream::getBufIfOpen (21 bytes)
<writer thread='40195'/>
    670  170       3       java.util.HashMap::resize (356 bytes)
<writer thread='43011'/>

============================= C2-compiled nmethod ==============================
<opto_assembly compile_id='171'>
----------------------- MetaData before Compile_id = 171 ------------------------
{method}
 - this oop:          0x0000000126b37c38
 - method holder:     &apos;java/io/BufferedInputStream&apos;
 - constants:         0x0000000126b37478 constant pool [155] {0x0000000126b37478} for &apos;java/io/BufferedInputStream&apos; cache=0x0000000126b39728
 - access:            0x81000002  private 
 - name:              &apos;getBufIfOpen&apos;
 - signature:         &apos;()[B&apos;
 - max stack:         4
 - max locals:        2
 - size of params:    1
 - method size:       13
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x000000010c0a1de0
 - adapters:          AHE@0x00007f99308e1660: 0xb0000000 i2c: 0x000000010c0e9ee0 c2i: 0x000000010c0e9fc3 c2iUV: 0x000000010c0e9f8a c2iNCI: 0x000000010c0ea000
 - compiled entry     0x000000010c7e0a80
 - code size:         21
 - code start:        0x0000000126b37bf8
 - code end (excl):   0x0000000126b37c0d
 - method data:       0x0000000126dce888
 - checked ex length: 1
 - checked ex start:  0x0000000126b37c34
 - linenumber start:  0x0000000126b37c0d
 - localvar length:   2
 - localvar start:    0x0000000126b37c1a
 - compiled code: nmethod    671   56       3       java.io.BufferedInputStream::getBufIfOpen (21 bytes)

------------------------ OptoAssembly for Compile_id = 171 -----------------------
#
#  byte[int:&gt;=0]:exact * ( java/io/BufferedInputStream:NotNull * )
#
#r018 rsi:rsi   : parm 0: java/io/BufferedInputStream:NotNull *
# -- Old rsp -- Framesize: 48 --
#r583 rsp+44: in_preserve
#r582 rsp+40: return address
#r581 rsp+36: in_preserve
#r580 rsp+32: saved fp register
#r579 rsp+28: pad2, stack alignment
#r578 rsp+24: pad2, stack alignment
#r577 rsp+20: Fixed slot 1
#r576 rsp+16: Fixed slot 0
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N35: #	out( B1 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B3 B2 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (136 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

02c     movl    R10, [RSI + #32 (8-bit)]	# compressed ptr ! Field: volatile java/io/BufferedInputStream.buf
030     MEMBAR-acquire ! (empty encoding)
030     testl   R10, R10	# compressed ptr
033     je,s   B3  P=0.000000 C=7932.000000

035     B2: #	out( N35 ) &lt;- in( B1 )  Freq: 1
035     decode_heap_oop_not_null RAX,R10
039     addq    rsp, 32	# Destroy frame
	popq    rbp
	movq    rscratch1, poll_offset[r15_thread] #polling_page_address
	testl   rax, [rscratch1]	# Safepoint: poll for GC

048     ret

049     B3: #	out( N35 ) &lt;- in( B1 )  Freq: 4.76837e-07
049     movl    RSI, #-187	# int
04e     movl    [rsp + #0], R10	# spill
        nop 	# 1 bytes pad for loops and calls
053     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.io.BufferedInputStream::getBufIfOpen @ bci:6  L[0]=_ L[1]=rsp + #0 STK[0]=rsp + #0
        # OopMap {[0]=NarrowOop off=88/0x58}
058     ud2	# ShouldNotReachHere

--------------------------------------------------------------------------------
</opto_assembly>
<writer thread='40195'/>
                              @ 217   java.util.HashMap$TreeNode::split (218 bytes)   not inlineable
<writer thread='43011'/>
    672   56       3       java.io.BufferedInputStream::getBufIfOpen (21 bytes)   made not entrant
    672  180       4       java.lang.StringUTF16::compress (50 bytes)
<writer thread='40963'/>
    675  152  s    3       java.io.BufferedInputStream::read (113 bytes)
                              @ 1   java.io.BufferedInputStream::getBufIfOpen (21 bytes)
<writer thread='42499'/>
    676  167       3       java.util.ImmutableCollections$SetN::hashCode (46 bytes)
<writer thread='40963'/>
                                @ 15  java/io/IOException::&lt;init&gt; (not loaded)   not inlineable
                              @ 26  java/lang/IndexOutOfBoundsException::&lt;init&gt; (not loaded)   not inlineable
<writer thread='42499'/>
                              @ 33   java.lang.Object::hashCode (0 bytes)   no static binding
<writer thread='40963'/>
                              @ 49   java.io.BufferedInputStream::read1 (108 bytes)   callee is too large
                              @ 101   java.io.InputStream::available (2 bytes)   no static binding
<writer thread='42499'/>
    679  156       3       java.lang.Character::codePointAt (51 bytes)
                              @ 2   java.lang.CharSequence::charAt (0 bytes)   no static binding
                              @ 9   java.lang.Character::isHighSurrogate (18 bytes)
                              @ 20   java.lang.CharSequence::length (0 bytes)   no static binding
                              @ 30   java.lang.CharSequence::charAt (0 bytes)   no static binding
                              @ 37   java.lang.Character::isLowSurrogate (18 bytes)
                              @ 45   java.lang.Character::toCodePoint (10 bytes)
<writer thread='40963'/>
    683  172       3       java.util.HashMap::getNode (148 bytes)
<writer thread='24067'/>
    684  157       3       java.lang.Character::isHighSurrogate (18 bytes)
<writer thread='40963'/>
                              @ 59   java.lang.Object::equals (11 bytes)   no static binding
                              @ 94   java.util.HashMap$TreeNode::getTreeNode (22 bytes)   not inlineable
<writer thread='42499'/>
    685  164       3       java.lang.Character::isJavaIdentifierPart (9 bytes)
<writer thread='40963'/>
                              @ 126   java.lang.Object::equals (11 bytes)   no static binding
<writer thread='42499'/>
                              @ 1   java.lang.CharacterData::of (120 bytes)   callee is too large
                              @ 5   java.lang.CharacterData::isJavaIdentifierPart (0 bytes)   no static binding
<writer thread='24067'/>
    686  189       3       java.util.HashMap::keysToArray (81 bytes)
<writer thread='24323'/>
    686  183       4       java.lang.StringLatin1::replace (198 bytes)
<writer thread='42499'/>
    687  160       3       java.lang.Math::floorMod (20 bytes)
    689  163       3       java.io.BufferedInputStream::read1 (108 bytes)
                              @ 18   java.io.BufferedInputStream::getBufIfOpen (21 bytes)
                                @ 15  java/io/IOException::&lt;init&gt; (not loaded)   not inlineable
                              @ 33   java.io.BufferedInputStream::getInIfOpen (21 bytes)
                                @ 15  java/io/IOException::&lt;init&gt; (not loaded)   not inlineable
               !              @ 39   java.io.InputStream::read (81 bytes)   no static binding
                              @ 44   java.io.BufferedInputStream::fill (203 bytes)   callee is too large
                              @ 80   java.io.BufferedInputStream::getBufIfOpen (21 bytes)
<writer thread='24067'/>
    690  194       3       java.util.HashMap$HashIterator::&lt;init&gt; (79 bytes)
<writer thread='42499'/>
                                @ 15  java/io/IOException::&lt;init&gt; (not loaded)   not inlineable
<writer thread='40195'/>
    691  145       3       java.lang.String::&lt;init&gt; (14 bytes)
<writer thread='42499'/>
                              @ 91   java.lang.System::arraycopy (0 bytes)   intrinsic
<writer thread='24067'/>
                              @ 6   java.lang.Object::&lt;init&gt; (1 bytes)
<writer thread='40195'/>
                              @ 7   java.lang.String::rangeCheck (9 bytes)
                                @ 4   java.lang.String::checkBoundsOffCount (64 bytes)   callee is too large
                              @ 10   java.lang.String::&lt;init&gt; (74 bytes)   callee is too large
    693  195       3       java.util.AbstractCollection::addAll (42 bytes)
<writer thread='38659'/>
    693  190       4       java.io.DataInputStream::readUTF (501 bytes)
<writer thread='40195'/>
                              @ 3   java.util.Collection::iterator (0 bytes)   no static binding
                              @ 10   java.util.Iterator::hasNext (0 bytes)   no static binding
                              @ 19   java.util.Iterator::next (0 bytes)   no static binding
                              @ 29   java.util.AbstractCollection::add (8 bytes)   no static binding
<writer thread='40963'/>
    694  143       3       java.util.HashMap$KeyIterator::next (8 bytes)
                              @ 1   java.util.HashMap$HashIterator::nextNode (100 bytes)   callee is too large
<writer thread='24067'/>
    695  162       3       jdk.internal.module.ModuleInfo$ConstantPool::getUtf8 (54 bytes)
                              @ 2   jdk.internal.module.ModuleInfo$ConstantPool::checkIndex (21 bytes)
                                @ 16  jdk/internal/module/ModuleInfo::invalidModuleDescriptor (not loaded)   not inlineable
<writer thread='40963'/>
    695  159       3       java.lang.String::replace (42 bytes)
<writer thread='24067'/>
                              @ 24   java.lang.StringBuilder::&lt;init&gt; (7 bytes)
                                @ 3   java.lang.AbstractStringBuilder::&lt;init&gt; (39 bytes)   callee is too large
<writer thread='40963'/>
                              @ 6   java.lang.String::isLatin1 (19 bytes)
<writer thread='24067'/>
                              @ 29   java.lang.StringBuilder::append (8 bytes)
                                @ 2   java.lang.AbstractStringBuilder::append (45 bytes)   callee is too large
<writer thread='40963'/>
                              @ 18   java.lang.StringLatin1::replace (198 bytes)   callee is too large
                              @ 30   java.lang.StringUTF16::replace (168 bytes)   callee is too large
<writer thread='40195'/>
    696  132       3       jdk.internal.misc.Unsafe::allocateUninitializedArray (55 bytes)
<writer thread='24067'/>
                              @ 33   java.lang.StringBuilder::append (8 bytes)
                                @ 2   java.lang.AbstractStringBuilder::append (55 bytes)   callee is too large
                              @ 36   java.lang.StringBuilder::toString (35 bytes)
                                @ 1   java.lang.AbstractStringBuilder::isLatin1 (19 bytes)
<writer thread='40195'/>
                              @ 11   java.lang.IllegalArgumentException::&lt;init&gt; (6 bytes)   don&apos;t inline Throwable constructors
                              @ 16   java.lang.Class::isPrimitive (0 bytes)   intrinsic
                              @ 29   java.lang.IllegalArgumentException::&lt;init&gt; (6 bytes)   don&apos;t inline Throwable constructors
<writer thread='24067'/>
                                @ 16   java.lang.StringLatin1::newString (17 bytes)
<writer thread='40195'/>
                              @ 44   java.lang.IllegalArgumentException::&lt;init&gt; (6 bytes)   don&apos;t inline Throwable constructors
<writer thread='24067'/>
                                  @ 9   java.util.Arrays::copyOfRange (64 bytes)   callee is too large
<writer thread='40195'/>
                              @ 51   jdk.internal.misc.Unsafe::allocateUninitializedArray0 (90 bytes)   callee is too large
<writer thread='24067'/>
                                  @ 13   java.lang.String::&lt;init&gt; (15 bytes)
<writer thread='42499'/>
    698  165       3       java.lang.CharacterDataLatin1::isJavaIdentifierPart (20 bytes)
                              @ 2   java.lang.CharacterDataLatin1::getProperties (11 bytes)
<writer thread='40963'/>
    699  153       3       jdk.internal.misc.Unsafe::allocateUninitializedArray0 (90 bytes)
<writer thread='24067'/>
                                    @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
                                @ 31   java.lang.StringUTF16::newString (50 bytes)   callee is too large
                              @ 39  jdk/internal/module/ModuleInfo::invalidModuleDescriptor (not loaded)   not inlineable
<writer thread='42499'/>
    700  146       3       java.lang.String::rangeCheck (9 bytes)
                              @ 4   java.lang.String::checkBoundsOffCount (64 bytes)   callee is too large
<writer thread='40195'/>
    700  151       3       java.io.DataInputStream::readUTF (5 bytes)
                              @ 1   java.io.DataInputStream::readUTF (501 bytes)   callee is too large
    702  198       3       jdk.internal.module.ModuleInfo$ConstantPool::getPackageName (73 bytes)
<writer thread='42499'/>
    702  188       3       java.util.ImmutableCollections$ListN::get (7 bytes)
<writer thread='40195'/>
                              @ 2   jdk.internal.module.ModuleInfo$ConstantPool::checkIndex (21 bytes)
                                @ 16  jdk/internal/module/ModuleInfo::invalidModuleDescriptor (not loaded)   not inlineable
                              @ 25   java.lang.StringBuilder::&lt;init&gt; (7 bytes)
                                @ 3   java.lang.AbstractStringBuilder::&lt;init&gt; (39 bytes)   callee is too large
                              @ 30   java.lang.StringBuilder::append (8 bytes)
<writer thread='42499'/>
    703  200       3       java.lang.module.ModuleDescriptor$Exports::hashCode (38 bytes)
<writer thread='40195'/>
                                @ 2   java.lang.AbstractStringBuilder::append (45 bytes)   callee is too large
<writer thread='42499'/>
                              @ 4   java.util.Set::hashCode (0 bytes)   no static binding
<writer thread='40195'/>
                              @ 34   java.lang.StringBuilder::append (8 bytes)
<writer thread='42499'/>

<writer thread='40195'/>
                                @ 2   java.lang.AbstractStringBuilder::append (55 bytes)   callee is too large
<writer thread='42499'/>
                              @ 18   java.lang.String::hashCode (60 bytes)   callee is too large
<writer thread='40195'/>
                              @ 37   java.lang.StringBuilder::toString (35 bytes)
<writer thread='42499'/>
                              @ 31   java.util.Set::hashCode (0 bytes)   no static binding
<writer thread='40195'/>
                                @ 1   java.lang.AbstractStringBuilder::isLatin1 (19 bytes)
                                @ 16   java.lang.StringLatin1::newString (17 bytes)
                                  @ 9   java.util.Arrays::copyOfRange (64 bytes)   callee is too large
                                  @ 13   java.lang.String::&lt;init&gt; (15 bytes)
                                    @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
<writer thread='40963'/>
    704  147       3       java.lang.String::&lt;init&gt; (74 bytes)
                              @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
                              @ 36   java.lang.StringUTF16::compress (20 bytes)
<writer thread='40195'/>
                                @ 31   java.lang.StringUTF16::newString (50 bytes)   callee is too large
<writer thread='42499'/>
    705  191       3       java.util.Set::copyOf (27 bytes)
<writer thread='40195'/>
                              @ 40  jdk/internal/module/ModuleInfo::invalidModuleDescriptor (not loaded)   not inlineable
<writer thread='42499'/>
                              @ 17   java.util.HashSet::&lt;init&gt; (40 bytes)   callee is too large
<writer thread='40195'/>
                              @ 52   jdk.internal.module.ModuleInfo$ConstantPool::getUtf8 (54 bytes)   callee is too large
<writer thread='42499'/>
                              @ 20   java.util.HashSet::
<writer thread='40963'/>
                                @ 9   java.lang.StringUTF16::compress (50 bytes)   callee is too large
<writer thread='40195'/>
             
<writer thread='42499'/>
toArray (18 bytes)
<writer thread='40195'/>
                 @ 61   jdk.internal.module.ModuleInfo$ConstantPool::
<writer thread='9219'/>
    706  201     n 0       java.lang.Thread::currentThread (native)   (static)
<writer thread='42499'/>
                   
<writer thread='40195'/>
checkUnqualifiedName (131 bytes)   callee is too large
<writer thread='42499'/>
             @ 8   java.util.HashMap::size (5 bytes)
<writer thread='40963'/>
                              @ 67   java.lang.StringUTF16::toBytes (34 bytes)
                   
<writer thread='40195'/>
                              @ 69   java.lang.String::
<writer thread='40963'/>
             @ 1  
<writer thread='42499'/>
             
<writer thread='40195'/>
replace
<writer thread='40963'/>
 java.lang.StringUTF16::newBytesFor (61 bytes)   callee is too large
<writer thread='40195'/>
 (42 bytes)   callee is too large
<writer thread='42499'/>
                 
<writer thread='40963'/>

                                
<writer thread='42499'/>
  @ 14   java.util.HashMap::keysToArray (81 bytes)   callee is too large
<writer thread='40963'/>
@ 20   java.lang.StringUTF16::putChar (54 bytes)   intrinsic
<writer thread='42499'/>
                              @ 23   java.util.Set::of (68 bytes)   callee is too large
<writer thread='24067'/>
    708  149       3       java.lang.StringUTF16::compress (20 bytes)
                              @ 9   java.lang.StringUTF16::compress (50 bytes)   callee is too large
<writer thread='42499'/>
    709  150       3       jdk.internal.module.ModuleInfo$ConstantPool$ValueEntry::&lt;init&gt; (11 bytes)
                              @ 2   jdk.internal.module.ModuleInfo$ConstantPool$Entry::&lt;init&gt; (10 bytes)
                                @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
<writer thread='24067'/>
    710  185       3       java.util.HashMap::containsKey (18 bytes)
                              @ 2   java.util.HashMap::hash (20 bytes)
                                @ 9   java.lang.Object::hashCode (0 bytes)   no static binding
                              @ 6   java.util.HashMap::getNode (148 bytes)   callee is too large
<writer thread='42499'/>
    711  179       3       jdk.internal.module.ModuleInfo$ConstantPool$IndexEntry::&lt;init&gt; (11 bytes)
                              @ 2   jdk.internal.module.ModuleInfo$ConstantPool$Entry::
<writer thread='43011'/>

============================= C2-compiled nmethod ==============================
<opto_assembly compile_id='180'>
----------------------- MetaData before Compile_id = 180 ------------------------
{method}
 - this oop:          0x0000000126cc39e8
 - method holder:     &apos;java/lang/StringUTF16&apos;
 - constants:         0x0000000126cc13d0 constant pool [581] {0x0000000126cc13d0} for &apos;java/lang/StringUTF16&apos; cache=0x0000000126cc96f8
 - access:            0xc1000009  public static 
 - name:              &apos;compress&apos;
 - signature:         &apos;([CI[BII)I&apos;
 - max stack:         4
 - max locals:        7
 - size of params:    5
 - method size:       13
 - intrinsic id:      85 _compressStringC
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x000000010c0a1de0
 - adapters:          AHE@0x00007f99308e1980: 0xbabaa000 i2c: 0x000000010c0e7be0 c2i: 0x000000010c0e7cd2 c2iUV: 0x000000010c0e7c99 c2iNCI: 0x000000010c0e7d0f
 - compiled entry     0x000000010c802ca0
 - code size:         50
 - code start:        0x0000000126cc3940
 - code end (excl):   0x0000000126cc3972
 - method data:       0x0000000126e8e990
 - checked ex length: 0
 - linenumber start:  0x0000000126cc3972
 - localvar length:   7
 - localvar start:    0x0000000126cc398a
 - compiled code: nmethod    711  121       3       java.lang.StringUTF16::compress (50 bytes)

------------------------ OptoAssembly for Compile_id = 180 -----------------------
#
#  int ( char[int:&gt;=0]:exact *, int, byte[int:&gt;=0]:exact *, int, int )
#
#r018 rsi:rsi   : parm 0: char[int:&gt;=0]:exact *
#r016 rdx   : parm 1: int
#r010 rcx:rcx   : parm 2: byte[int:&gt;=0]:exact *
#r004 r8   : parm 3: int
#r006 r9   : parm 4: int
# -- Old rsp -- Framesize: 80 --
#r583 rsp+76: in_preserve
#r582 rsp+72: return address
#r581 rsp+68: in_preserve
#r580 rsp+64: saved fp register
#r579 rsp+60: pad2, stack alignment
#r578 rsp+56: pad2, stack alignment
#r577 rsp+52: Fixed slot 1
#r576 rsp+48: Fixed slot 0
#r595 rsp+44: spill
#r594 rsp+40: spill
#r593 rsp+36: spill
#r592 rsp+32: spill
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N1: #	out( B1 ) &lt;- in( B40 B33 B39 B30 )  Freq: 1

000     B1: #	out( B30 B2 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
000     # stack bang (176 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #64	# Create frame

00c     movl    RBX, R9	# spill
00f     testl   R9, R9
012     jle     B30  P=0.035211 C=18375.000000

018     B2: #	out( B40 B3 ) &lt;- in( B1 )  Freq: 0.964789
018     movl    R14, [RSI + #12 (8-bit)]	# range
01c     NullCheck RSI

01c     B3: #	out( B40 B4 ) &lt;- in( B2 )  Freq: 0.964788
01c     movl    R10, [RCX + #12 (8-bit)]	# range
020     NullCheck RCX

020     B4: #	out( B40 B5 ) &lt;- in( B3 )  Freq: 0.964787
020     cmpl    R8, R10	# unsigned
023     jnb,u   B40  P=0.000001 C=-1.000000

029     B5: #	out( B40 B6 ) &lt;- in( B4 )  Freq: 0.964786
029     movslq  R10, R10	# i2l
02c     movslq  R11, R9	# i2l
02f     movslq  RBP, R8	# i2l
032     addq    R11, RBP	# long
035     decq    R11	# long
038     cmpq    R11, R10	# unsigned
03b     jnb,u   B40  P=0.000001 C=-1.000000

041     B6: #	out( B7 ) &lt;- in( B5 )  Freq: 0.964785
041     xorl    RAX, RAX	# int
043     movl    R10, #-2	# int
049     subl    R10, RDX	# int
04c     movl    RDI, #-1	# int
051     subl    RDI, RDX	# int
053     movl    R9, #1	# int
059     cmpl    RDI, R9
05c     cmovllt RDI, R9	# max
060     cmpl    RDI, RBX
062     cmovlgt RDI, RBX	# min
065     cmpl    RDI, R10
068     cmovllt RDI, R10	# max
06c     cmpl    RDI, RBX
06e     cmovlgt RDI, RBX	# min
071     xorl    R10, R10	# int

074     B7: #	out( B31 B8 ) &lt;- in( B6 B10 ) Loop( B7-B10 inner pre of N218) Freq: 1.92957
074     movl    R9, R10	# spill
077     addl    R9, R8	# int
07a     addl    RAX, RDX	# int
07c     cmpl    RAX, R14	# unsigned
07f     jnb,u   B31  P=0.000001 C=-1.000000

085     B8: #	out( B42 B9 ) &lt;- in( B7 )  Freq: 1.92957
085     movzwl  R11, [RSI + #16 + RAX &lt;&lt; #1]	# ushort/char
08b     cmpl    R11, #255
092     jg     B42  P=0.000000 C=17728.000000

098     B9: #	out( B11 B10 ) &lt;- in( B8 )  Freq: 1.92956
098     movslq  R9, R10	# i2l
09b     addq    R9, RBP	# long
09e     movb    [RCX + #16 + R9], R11	# byte
0a3     incl    R10	# int
0a6     cmpl    R10, RDI
0a9     jge,s   B11	# loop end  P=0.500000 C=17728.000000

0ab     B10: #	out( B7 ) &lt;- in( B9 )  Freq: 0.964782
0ab     movl    RAX, R10	# spill
0ae     jmp,s   B7

0b0     B11: #	out( B41 B12 ) &lt;- in( B9 )  Freq: 0.964782
0b0     movl    R9, R14	# spill
0b3     subl    R9, RDX	# int
0b6     movl    R11, RBX	# spill
0b9     decl    R11	# int
0bc     movl    RDI, R9	# spill
0bf     decl    RDI	# int
0c1     addl    R9, #-2	# int
0c5     movl    RAX, #-2147483648	# int
0ca     cmpl    RBX, R11
0cd     cmovll R11, RAX	# signed, int
0d1     cmpl    R11, RDI
0d4     cmovlgt R11, RDI	# min
0d8     movl    RBP, R11	# spill
0db     addl    RBP, #-2	# int
0de     cmpl    R11, RBP
0e1     cmovll RBP, RAX	# signed, int
0e4     cmpl    RBP, R9
0e7     cmovlgt RBP, R9	# min
0eb     cmpl    R10, RBP
0ee     jge     B41  P=0.000001 C=-1.000000

0f4     B12: #	out( B22 ) &lt;- in( B11 )  Freq: 0.964781
0f4     movl    RDI, R10	# spill
0f7     # castII of RDI
0f7     # TLS is in R15
0f7     jmp     B22
        nop 	# 4 bytes pad for loops and calls

100     B13: #	out( B14 ) &lt;- in( B19 ) top-of-loop Freq: 749.005
100     movl    R10, RDI	# spill
103     movdl   RBX, XMM1	# spill
107     movdl   R8, XMM0	# spill

10c     B14: #	out( B32 B15 ) &lt;- in( B22 B13 ) Loop( B14-B13 inner main of N157 strip mined) Freq: 776.343
10c     movl    R9, RDI	# spill
10f     addl    R9, R8	# int
112     addl    R10, RDX	# int
115     cmpl    R10, R14	# unsigned
118     jnb,u   B32  P=0.000001 C=-1.000000

11e     B15: #	out( B35 B16 ) &lt;- in( B14 )  Freq: 776.343
11e     movzwl  R13, [RSI + #16 + R10 &lt;&lt; #1]	# ushort/char
124     cmpl    R13, #255
12b     jg     B35  P=0.000000 C=17728.000000

131     B16: #	out( B36 B17 ) &lt;- in( B15 )  Freq: 776.342
131     movdl   XMM0, R8	# spill
136     movb    [RCX + #16 + R9], R13	# byte
13b     movl    R10, RDI	# spill
13e     addl    R10, RDX	# int
141     movslq  R8, R10	# i2l
144     movzwl  R11, [RSI + #18 + R8 &lt;&lt; #1]	# ushort/char
14a     cmpl    R11, #255
151     jg     B36  P=0.000000 C=17728.000000

157     B17: #	out( B34 B18 ) &lt;- in( B16 )  Freq: 776.342
157     movdl   XMM1, RBX	# spill
15b     movzwl  R13, [RSI + #20 + R8 &lt;&lt; #1]	# ushort/char
161     movslq  RBX, R9	# i2l
164     movb    [RCX + #17 + RBX], R11	# byte
169     cmpl    R13, #255
170     jg     B34  P=0.000000 C=17728.000000

176     B18: #	out( B37 B19 ) &lt;- in( B17 )  Freq: 776.342
176     movb    [RCX + #18 + RBX], R13	# byte
17b     movzwl  R11, [RSI + #22 + R8 &lt;&lt; #1]	# ushort/char
181     cmpl    R11, #255
188     jg     B37  P=0.000000 C=17728.000000

18e     B19: #	out( B13 B20 ) &lt;- in( B18 )  Freq: 776.341
18e     movb    [RCX + #19 + RBX], R11	# byte
193     addl    RDI, #4	# int
196     cmpl    RDI, RAX
198     jl     B13	# loop end  P=0.964789 C=17728.000000

19e     B20: #	out( B23 B21 ) &lt;- in( B19 )  Freq: 27.3357
19e     movq    R11, [R15 + #296 (32-bit)]	# ptr
1a5     addl    R10, #4	# int
1a9     addl    R9, #4	# int
1ad     testl   rax, [R11]	# Safepoint: poll for GC        # java.lang.StringUTF16::compress @ bci:44  L[0]=RSI L[1]=R10 L[2]=RCX L[3]=R9 L[4]=XMM1 L[5]=RDI L[6]=_
        # OopMap {rcx=Oop rsi=Oop off=429/0x1ad}
1b0     cmpl    RDI, RBP
1b2     jge,s   B23  P=0.035211 C=17728.000000

1b4     B21: #	out( B22 ) &lt;- in( B20 )  Freq: 26.3732
1b4     movl    R10, RDI	# spill
1b7     movdl   RBX, XMM1	# spill
1bb     movdl   R8, XMM0	# spill

1c0     B22: #	out( B14 ) &lt;- in( B12 B21 ) Loop( B22-B21 ) Freq: 27.3379
1c0     movl    RAX, RBP	# spill
1c2     subl    RAX, RDI	# int
1c4     movl    R9, #4000	# int
1ca     cmpl    RAX, R9
1cd     movl    R11, #4000	# int
1d3     cmovlgt RAX, R11	# min
1d7     addl    RAX, RDI	# int
1d9     jmp     B14

1de     B23: #	out( B24 ) &lt;- in( B20 )  Freq: 0.962514
1de     movdl   RBX, XMM1	# spill
1e2     movdl   R8, XMM0	# spill

1e7     B24: #	out( B30 B25 ) &lt;- in( B41 B23 )  Freq: 0.962515
1e7     cmpl    RDI, RBX
1e9     jge,s   B30  P=0.500000 C=-1.000000

1eb     B25: #	out( B26 ) &lt;- in( B24 )  Freq: 0.481257
1eb     movl    RBP, RDI	# spill
1ed     # castII of RBP
        nop 	# 3 bytes pad for loops and calls

1f0     B26: #	out( B33 B27 ) &lt;- in( B25 B29 ) Loop( B26-B29 inner post of N218) Freq: 0.962513
1f0     movl    R9, RBP	# spill
1f3     addl    R9, R8	# int
1f6     addl    RDI, RDX	# int
1f8     cmpl    RDI, R14	# unsigned
1fb     jnb,us  B33  P=0.000001 C=-1.000000

1fd     B27: #	out( B39 B28 ) &lt;- in( B26 )  Freq: 0.962513
1fd     movzwl  R11, [RSI + #16 + RDI &lt;&lt; #1]	# ushort/char
203     cmpl    R11, #255
20a     jg     B39  P=0.000000 C=17728.000000

210     B28: #	out( B30 B29 ) &lt;- in( B27 )  Freq: 0.962512
210     movb    [RCX + #16 + R9], R11	# byte
215     incl    RBP	# int
217     cmpl    RBP, RBX
219     jge,s   B30	# loop end  P=0.500000 C=17728.000000

21b     B29: #	out( B26 ) &lt;- in( B28 )  Freq: 0.481256
21b     movl    RDI, RBP	# spill
21d     jmp,s   B26

21f     B30: #	out( N1 ) &lt;- in( B1 B28 B24 )  Freq: 0.997724
21f     movl    RAX, RBX	# spill
221     addq    rsp, 64	# Destroy frame
	popq    rbp
	movq    rscratch1, poll_offset[r15_thread] #polling_page_address
	testl   rax, [rscratch1]	# Safepoint: poll for GC

230     ret

231     B31: #	out( B32 ) &lt;- in( B7 )  Freq: 1.95519e-06
231     movl    RDI, R10	# spill
234     movl    R10, RAX	# spill

237     B32: #	out( B33 ) &lt;- in( B31 B14 )  Freq: 0.000788608
237     movl    RBP, RDI	# spill
239     movl    RDI, R10	# spill

23c     B33: #	out( N1 ) &lt;- in( B26 B32 )  Freq: 0.000789583
23c     movq    [rsp + #16], RCX	# spill
241     movl    [rsp + #12], R9	# spill
246     movl    [rsp + #24], RBX	# spill
24a     movq    [rsp + #32], RSI	# spill
24f     movl    [rsp + #28], RDI	# spill
253     movl    RSI, #-28	# int
        nop 	# 3 bytes pad for loops and calls
25b     call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos; debug_id=&apos;0&apos;)
        # java.lang.StringUTF16::compress @ bci:12  L[0]=rsp + #32 L[1]=rsp + #28 L[2]=rsp + #16 L[3]=rsp + #12 L[4]=rsp + #24 L[5]=RBP L[6]=_ STK[0]=rsp + #32 STK[1]=rsp + #28
        # OopMap {[16]=Oop [32]=Oop off=608/0x260}
260     ud2	# ShouldNotReachHere

274     B34: #	out( B35 ) &lt;- in( B17 )  Freq: 0.000370189
274     addl    R10, #2	# int
278     addl    R9, #2	# int
27c     addl    RDI, #2	# int
27f     movdl   RBX, XMM1	# spill

283     B35: #	out( B38 ) &lt;- in( B15 B34 )  Freq: 0.000740378
283     movl    R11, R13	# spill
286     jmp,s   B38

288     B36: #	out( B38 ) &lt;- in( B16 )  Freq: 0.000370189
288     incl    R10	# int
28b     incl    R9	# int
28e     incl    RDI	# int
290     jmp,s   B38

292     B37: #	out( B38 ) &lt;- in( B18 )  Freq: 0.000370188
292     addl    R10, #3	# int
296     addl    R9, #3	# int
29a     addl    RDI, #3	# int
29d     movdl   RBX, XMM1	# spill

2a1     B38: #	out( B39 ) &lt;- in( B42 B35 B36 B37 )  Freq: 0.00148168
2a1     movl    RBP, RDI	# spill
2a3     movl    RDI, R10	# spill

2a6     B39: #	out( N1 ) &lt;- in( B27 B38 )  Freq: 0.00148213
2a6     movq    [rsp + #0], RSI	# spill
2aa     movl    [rsp + #8], RDI	# spill
2ae     movq    [rsp + #16], RCX	# spill
2b3     movl    [rsp + #12], R9	# spill
2b8     movl    [rsp + #24], RBX	# spill
2bc     movl    [rsp + #32], R11	# spill
2c1     movl    RSI, #-187	# int
        nop 	# 1 bytes pad for loops and calls
2c7     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.StringUTF16::compress @ bci:20  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=rsp + #16 L[3]=rsp + #12 L[4]=rsp + #24 L[5]=RBP L[6]=rsp + #32 STK[0]=rsp + #32 STK[1]=#255
        # OopMap {[0]=Oop [16]=Oop off=716/0x2cc}
2cc     ud2	# ShouldNotReachHere

2e0     B40: #	out( N1 ) &lt;- in( B5 B2 B3 B4 )  Freq: 3.9104e-06
2e0     movq    RBP, RSI	# spill
2e3     movl    [rsp + #0], RDX	# spill
2e6     movq    [rsp + #8], RCX	# spill
2eb     movl    [rsp + #4], R8	# spill
2f0     movl    [rsp + #20], R9	# spill
2f5     movl    RSI, #-138	# int
        nop 	# 1 bytes pad for loops and calls
2fb     call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.StringUTF16::compress @ bci:7  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #4 L[4]=rsp + #20 L[5]=#0 L[6]=_ STK[0]=#0 STK[1]=rsp + #20
        # OopMap {rbp=Oop [8]=Oop off=768/0x300}
300     ud2	# ShouldNotReachHere

314     B41: #	out( B24 ) &lt;- in( B11 )  Freq: 9.77594e-07
314     movl    RDI, R10	# spill
317     jmp     B24

31c     B42: #	out( B38 ) &lt;- in( B8 )  Freq: 9.20089e-07
31c     movl    RDI, R10	# spill
31f     movl    R10, RAX	# spill
322     jmp     B38

--------------------------------------------------------------------------------
</opto_assembly>
<writer thread='42499'/>
&lt;init&gt;
<writer thread='40963'/>
    718  173       3       java.lang.Integer::numberOfLeadingZeros (79 bytes)
<writer thread='24067'/>
    718  175       3       java.lang.Float::isNaN (12 bytes)
<writer thread='40195'/>
    718  176       3       java.util.HashMap::tableSizeFor (32 bytes)
<writer thread='42499'/>
 (10 bytes)
<writer thread='43011'/>
    718  121       3       java.lang.StringUTF16::compress (50 bytes)   made not entrant
<writer thread='40195'/>
                          
<writer thread='42499'/>
             
<writer thread='43011'/>
<writer thread='40195'/>
    @ 4   java.lang.Integer::numberOfLeadingZeros (79 bytes)   callee is too large
<writer thread='42499'/>
                   @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
<writer thread='43011'/>
    718  186       4       java.lang.StringLatin1::equals (36 bytes)
<writer thread='24067'/>
    719  217   !   3       sun.nio.fs.UnixPath::initOffsets (189 bytes)
<writer thread='42499'/>
    719  220       3       jdk.internal.module.ModuleInfo$ConstantPool::decodeModuleName (142 bytes)
<writer thread='40195'/>
    720  177       3       java.util.HashMap::&lt;init&gt; (8 bytes)
<writer thread='42499'/>
                              @ 1   java.lang.String::length (11 bytes)
<writer thread='40195'/>
                              @ 4   java.util.HashMap::&lt;init&gt; (98 bytes)   callee is too large
<writer thread='24067'/>
                              @ 12  
<writer thread='42499'/>
                                @ 6   java.lang.String::coder (15 bytes)
<writer thread='24067'/>
 sun.nio.fs.UnixPath::isEmpty (14 bytes)
<writer thread='42499'/>
                              @ 13   java.lang.StringBuilder::&lt;init&gt; (7 bytes)
<writer thread='40195'/>
    721  178       3       java.util.HashMap::&lt;init&gt; (98 bytes)
<writer thread='42499'/>
                                @ 3   java.lang.AbstractStringBuilder::&lt;init&gt; (39 bytes)   callee is too large
<writer thread='40963'/>
    721  181       3       java.lang.Math::max (11 bytes)
<writer thread='42499'/>
                              @ 18   java.lang.StringBuilder::
<writer thread='40195'/>
                              @ 1  
<writer thread='42499'/>
append (8 bytes)
                                @ 2   java.lang.AbstractStringBuilder::append (45 bytes)   callee is too large
                              @ 22  
<writer thread='40195'/>
 java.util.AbstractMap::&lt;init&gt; (5 bytes)
                                @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
                              @ 16   java.lang.StringBuilder::&lt;init&gt; (7 bytes)
                   
<writer thread='42499'/>
 java.lang.StringBuilder::append (8 bytes)
<writer thread='40195'/>
             @ 3   java.lang.AbstractStringBuilder::&lt;init&gt; (39 bytes)   callee is too large
<writer thread='42499'/>
                                @ 2   java.lang.AbstractStringBuilder::append (55 bytes)   callee is too large
                   
<writer thread='40963'/>
    722  218       3       sun.nio.fs.UnixPath::getName (106 bytes)
<writer thread='40195'/>
             
<writer thread='42499'/>
           @ 27  
<writer thread='40195'/>
                 @ 21  
<writer thread='42499'/>
 java.lang.StringBuilder::
<writer thread='40195'/>
 java.lang.StringBuilder::
<writer thread='42499'/>
append
<writer thread='40195'/>
append (8 bytes)
<writer thread='42499'/>
 (8 bytes)
<writer thread='40963'/>
               !m             @ 1   sun.nio.fs.UnixPath::initOffsets (189 bytes)   callee is too large
<writer thread='42499'/>
                     
<writer thread='40195'/>
                                @ 2   java.lang.AbstractStringBuilder::append (45 bytes)   callee is too large
<writer thread='42499'/>
           @ 2   java.lang.AbstractStringBuilder::append (45 bytes)   callee is too large
<writer thread='40195'/>
                              @ 25   java.lang.StringBuilder::append (8 bytes)
<writer thread='42499'/>
                              @ 30   java.lang.StringBuilder::toString (35 bytes)
<writer thread='40195'/>
                                @ 2   java.lang.AbstractStringBuilder::
<writer thread='40963'/>
                              @ 12  
<writer thread='40195'/>
append (55 bytes)   callee is too large
<writer thread='40963'/>
 java.lang.IllegalArgumentException::&lt;init&gt; (5 bytes)   don&apos;t inline Throwable constructors
<writer thread='42499'/>
                                @ 1   java.lang.AbstractStringBuilder::isLatin1 (19 bytes)
<writer thread='40963'/>
                              @ 29   java.lang.IllegalArgumentException::
<writer thread='40195'/>
                              @ 28   java.lang.StringBuilder::toString (35 bytes)
                                @ 1   java.lang.AbstractStringBuilder::isLatin1 (19 bytes)
<writer thread='42499'/>
                                @ 16   java.lang.StringLatin1::newString (17 bytes)
<writer thread='40963'/>
&lt;init&gt; (5 bytes)   don&apos;t inline Throwable constructors
<writer thread='42499'/>
                                  @ 9   java.util.Arrays::copyOfRange (64 bytes)   callee is too large
                                  @ 13   java.lang.String::&lt;init&gt; (15 bytes)
                                    @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
                                @ 31   java.lang.StringUTF16::newString (50 bytes)   callee is too large
                              @ 33  jdk/internal/module/ModuleInfo::invalidModuleDescriptor (not loaded)   not inlineable
                              @ 49   java.lang.String::codePointAt (50 bytes)   callee is too large
<writer thread='40195'/>
        
<writer thread='40963'/>
                              @ 89   java.lang.System::arraycopy (0 bytes)   intrinsic
                              @ 97   sun.nio.fs.UnixPath::getFileSystem (5 bytes)
<writer thread='40195'/>
     
<writer thread='40963'/>
                              @ 102   sun.nio.fs.UnixPath::&lt;init&gt; (15 bytes)
<writer thread='42499'/>
                              @ 123   jdk.internal.module.ModuleInfo$ConstantPool::decodeModuleName (275 bytes)   callee is too large
                              @ 131   java.lang.Character::charCount (12 bytes)
                              @ 79   java.lang.StringBuilder::&lt;init&gt; (7 bytes)
                                @ 3   java.lang.AbstractStringBuilder::&lt;init&gt; (39 bytes)   callee is too large
                              @ 84   java.lang.StringBuilder::append (8 bytes)
                                @ 2   java.lang.AbstractStringBuilder::append (45 bytes)   callee is too large
<writer thread='40963'/>
                                @ 1  
<writer thread='40195'/>
                   @ 16   java.lang.StringLatin1::newString (17 bytes)
                                  @ 9   java.util.Arrays::copyOfRange (64 bytes)   callee is too large
<writer thread='40963'/>
 java.lang.Object::&lt;init&gt; (1 bytes)
<writer thread='40195'/>
                                  @ 13   java.lang.String::&lt;init&gt;
<writer thread='42499'/>
                              @ 88   java.lang.StringBuilder::append (8 bytes)
             
<writer thread='40195'/>
 (15 bytes)
                                    @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
                                @ 31   java.lang.StringUTF16::newString (50 bytes)   callee is too large
             
<writer thread='42499'/>
                   @ 2   java.lang.AbstractStringBuilder::append (55 bytes)   callee is too large
                   
<writer thread='40195'/>
                 @ 31  
<writer thread='42499'/>
           @ 93   java.lang.StringBuilder::append (8 bytes)
                   
<writer thread='40195'/>
 java.lang.IllegalArgumentException::&lt;init&gt; (6 bytes)   don&apos;t inline Throwable constructors
<writer thread='42499'/>
             @ 2   java.lang.AbstractStringBuilder::append (45 bytes)   callee is too large
<writer thread='40195'/>
                              @ 51   java.lang.Float::isNaN (12 bytes)
<writer thread='42499'/>
                              @ 98   java.lang.Character::getName (118 bytes)   callee is too large
<writer thread='40195'/>
                              @ 91   java.util.HashMap::tableSizeFor (32 bytes)
                                @ 4   java.lang.Integer::numberOfLeadingZeros (79 bytes)   callee is too large
                              @ 65   java.lang.StringBuilder::&lt;init&gt; (7 bytes)
                                @ 3   java.lang.AbstractStringBuilder::&lt;init&gt; (39 bytes)   callee is too large
<writer thread='42499'/>
                              @ 101   java.lang.StringBuilder::append (8 bytes)
                                
<writer thread='40195'/>
                              @ 70   java.lang.StringBuilder::append (8 bytes)
                                @ 2   java.lang.AbstractStringBuilder::append (45 bytes)   callee is too large
                              @ 74   java.lang.StringBuilder::append (8 bytes)
                                @ 2   java.lang.AbstractStringBuilder::append (7 bytes)
<writer thread='42499'/>
@ 2   java.lang.AbstractStringBuilder::append (45 bytes)   callee is too large
<writer thread='40195'/>
             
<writer thread='42499'/>
                              @ 104   java.lang.StringBuilder::
<writer thread='40195'/>
        
<writer thread='42499'/>
toString (35 bytes)
<writer thread='40195'/>
             @ 2  jdk/internal/math/FloatingDecimal::appendTo (not loaded)   not inlineable
<writer thread='42499'/>
                                @ 1   java.lang.AbstractStringBuilder::isLatin1 (19 bytes)
<writer thread='40195'/>
                              @ 77   java.lang.StringBuilder::toString (35 bytes)
                                @ 1   java.lang.AbstractStringBuilder::isLatin1 (19 bytes)
<writer thread='42499'/>
                                @ 16   java.lang.StringLatin1::newString (17 bytes)
                                  @ 9   java.util.Arrays::copyOfRange (64 bytes)   callee is too large
<writer thread='40195'/>
                                @ 16   java.lang.StringLatin1::newString (17 bytes)
<writer thread='42499'/>
                                  @ 13   java.lang.String::&lt;init&gt; (15 bytes)
<writer thread='40195'/>
                                  @ 9   java.util.Arrays::copyOfRange (64 bytes)   callee is too large
<writer thread='42499'/>
                                    @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
<writer thread='40195'/>
                                  @ 13   java.lang.String::&lt;init&gt; (15 bytes)
                                    @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
<writer thread='42499'/>
                                @ 31   java.lang.StringUTF16::newString (50 bytes)   callee is too large
                              @ 107  jdk/internal/module/ModuleInfo::invalidModuleDescriptor (not loaded)   not inlineable
<writer thread='40195'/>
                                @ 31   java.lang.StringUTF16::newString (50 bytes)   callee is too large
                              @ 80   java.lang.IllegalArgumentException::&lt;init&gt; (6 bytes)   don&apos;t inline Throwable constructors
<writer thread='40963'/>
    732  199       3       java.util.HashSet::&lt;init&gt; (40 bytes)
                              @ 1   java.util.AbstractSet::&lt;init&gt; (5 bytes)
                                @ 1   java.util.AbstractCollection::&lt;init&gt; (5 bytes)
                                  @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
                              @ 10   java.util.Collection::size
<writer thread='24067'/>
    733  192       3       java.util.HashSet::iterator (13 bytes)
                              @ 4   java.util.HashMap::keySet (25 bytes)
                                @ 14   java.util.HashMap$KeySet::&lt;init&gt; (10 bytes)
                                  @ 6   java.util.AbstractSet::&lt;init&gt; (5 bytes)
                                    @ 1   java.util.AbstractCollection::&lt;init&gt; (5 bytes)
                                      @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
                              @ 7   java.util.Set::iterator (0 bytes)   no static binding
<writer thread='40963'/>
 (0 bytes)   no static binding
                              @ 24   java.lang.Math::max (11 bytes)
                              @ 27   java.util.HashMap::&lt;init&gt; (8 bytes)
                                @ 4   java.util.HashMap::&lt;init&gt; (98 bytes)   callee is too large
                              @ 35   java.util.AbstractCollection::addAll (42 bytes)   callee is too large
<writer thread='24067'/>
    737  206       3       java.lang.Enum::hashCode (5 bytes)
                              @ 1   java.lang.Object::hashCode (0 bytes)   native method
    738  219       3       java.lang.ThreadLocal::getMap (5 bytes)
    739  193       3       java.util.HashMap::keySet (25 bytes)
<writer thread='43011'/>

============================= C2-compiled nmethod ==============================
<opto_assembly compile_id='186'>
----------------------- MetaData before Compile_id = 186 ------------------------
{method}
 - this oop:          0x0000000126b1d130
 - method holder:     &apos;java/lang/StringLatin1&apos;
 - constants:         0x0000000126b1b920 constant pool [372] {0x0000000126b1b920} for &apos;java/lang/StringLatin1&apos; cache=0x0000000126b202b0
 - access:            0xc1000009  public static 
 - name:              &apos;equals&apos;
 - signature:         &apos;([B[B)Z&apos;
 - max stack:         4
 - max locals:        3
 - size of params:    2
 - method size:       13
 - intrinsic id:      104 _equalsL
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x000000010c0a1de0
 - adapters:          AHE@0x00007f99308e16b0: 0xbb000000 i2c: 0x000000010c0e9b60 c2i: 0x000000010c0e9c47 c2iUV: 0x000000010c0e9c0e c2iNCI: 0x000000010c0e9c84
 - compiled entry     0x000000010c7e3880
 - code size:         36
 - code start:        0x0000000126b1d0d0
 - code end (excl):   0x0000000126b1d0f4
 - method data:       0x0000000126dc6278
 - checked ex length: 0
 - linenumber start:  0x0000000126b1d0f4
 - localvar length:   3
 - localvar start:    0x0000000126b1d102
 - compiled code: nmethod    740   68       3       java.lang.StringLatin1::equals (36 bytes)

------------------------ OptoAssembly for Compile_id = 186 -----------------------
#
#  bool ( byte[int:&gt;=0]:exact *, byte[int:&gt;=0]:exact * )
#
#r018 rsi:rsi   : parm 0: byte[int:&gt;=0]:exact *
#r016 rdx:rdx   : parm 1: byte[int:&gt;=0]:exact *
# -- Old rsp -- Framesize: 48 --
#r583 rsp+44: in_preserve
#r582 rsp+40: return address
#r581 rsp+36: in_preserve
#r580 rsp+32: saved fp register
#r579 rsp+28: pad2, stack alignment
#r578 rsp+24: pad2, stack alignment
#r577 rsp+20: Fixed slot 1
#r576 rsp+16: Fixed slot 0
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N1: #	out( B1 ) &lt;- in( B26 B27 B24 B23 )  Freq: 1

000     B1: #	out( B26 B2 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
000     # stack bang (144 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

00c     movl    RBP, [RSI + #12 (8-bit)]	# range
00f     NullCheck RSI

00f     B2: #	out( B27 B3 ) &lt;- in( B1 )  Freq: 0.999999
00f     movl    R11, [RDX + #12 (8-bit)]	# range
013     NullCheck RDX

013     B3: #	out( B23 B4 ) &lt;- in( B2 )  Freq: 0.999998
013     xorl    RAX, RAX	# int
015     cmpl    RBP, R11
018     jne     B23  P=0.522572 C=2348.000000

01e     B4: #	out( B22 B5 ) &lt;- in( B3 )  Freq: 0.477427
01e     testl   RBP, RBP	# unsigned
020     jbe,u   B22  P=0.042617 C=24028.000000

026     B5: #	out( B24 B6 ) &lt;- in( B4 )  Freq: 0.45708
026     movl    R8, RBP	# spill
029     decl    R8	# int
02c     cmpl    R8, RBP	# unsigned
02f     jnb,u   B24  P=0.000001 C=-1.000000

035     B6: #	out( B24 B7 ) &lt;- in( B5 )  Freq: 0.45708
035     testl   R11, R11	# unsigned
038     jbe,u   B24  P=0.000001 C=-1.000000

03e     B7: #	out( B24 B8 ) &lt;- in( B6 )  Freq: 0.457079
03e     cmpl    R8, R11	# unsigned
041     jnb,u   B24  P=0.000001 C=-1.000000

047     B8: #	out( B23 B9 ) &lt;- in( B7 )  Freq: 0.457079
047     movsbl  R10, [RDX + #16 (8-bit)]	# byte
04c     movsbl  R9, [RSI + #16 (8-bit)]	# byte
051     cmpl    R9, R10
054     jne     B23  P=0.004217 C=23004.000000

05a     B9: #	out( B25 B10 ) &lt;- in( B8 )  Freq: 0.455151
05a     movl    R11, RBP	# spill
05d     addl    R11, #-3	# int
061     movl    R10, #-2147483648	# int
067     cmpl    R8, R11
06a     cmovll R11, R10	# signed, int
06e     cmpl    R11, #1
072     jle     B25  P=0.000001 C=-1.000000

078     B10: #	out( B11 ) &lt;- in( B9 )  Freq: 0.455151
078     movl    RCX, #4000	# int
07d     # TLS is in R15
07d     movl    R9, #1	# int

083     B11: #	out( B12 ) &lt;- in( B10 B17 ) Loop( B11-B17 ) Freq: 1.43969
083     movl    RDI, R11	# spill
086     subl    RDI, R9	# int
089     cmpl    RDI, RCX
08b     cmovlgt RDI, RCX	# min
08e     addl    RDI, R9	# int

091     B12: #	out( B23 B13 ) &lt;- in( B11 B16 ) Loop( B12-B16 inner main of N113 strip mined) Freq: 24.5416
091     movslq  RBX, R9	# i2l
094     movsbl  R10, [RSI + #16 + RBX]	# byte
09a     movsbl  R8, [RDX + #16 + RBX]	# byte
0a0     cmpl    R10, R8
0a3     jne,s   B23  P=0.004217 C=23004.000000

0a5     B13: #	out( B23 B14 ) &lt;- in( B12 )  Freq: 24.4382
0a5     movsbl  R10, [RDX + #17 + RBX]	# byte
0ab     movsbl  R8, [RSI + #17 + RBX]	# byte
0b1     cmpl    R8, R10
0b4     jne,s   B23  P=0.004217 C=23004.000000

0b6     B14: #	out( B23 B15 ) &lt;- in( B13 )  Freq: 24.3351
0b6     movsbl  R10, [RDX + #18 + RBX]	# byte
0bc     movsbl  R8, [RSI + #18 + RBX]	# byte
0c2     cmpl    R8, R10
0c5     jne,s   B23  P=0.004217 C=23004.000000

0c7     B15: #	out( B23 B16 ) &lt;- in( B14 )  Freq: 24.2325
0c7     movsbl  R8, [RDX + #19 + RBX]	# byte
0cd     movsbl  R10, [RSI + #19 + RBX]	# byte
0d3     cmpl    R10, R8
0d6     jne,s   B23  P=0.004217 C=23004.000000

0d8     B16: #	out( B12 B17 ) &lt;- in( B15 )  Freq: 24.1303
0d8     addl    R9, #4	# int
0dc     cmpl    R9, RDI
0df     jl,s   B12	# loop end  P=0.957383 C=22907.000000

0e1     B17: #	out( B11 B18 ) &lt;- in( B16 )  Freq: 1.02836
0e1     movq    R10, [R15 + #296 (32-bit)]	# ptr
0e8     testl   rax, [R10]	# Safepoint: poll for GC        # java.lang.StringLatin1::equals @ bci:29  L[0]=RSI L[1]=RDX L[2]=R9
        # OopMap {rdx=Oop rsi=Oop off=232/0xe8}
0eb     cmpl    R9, R11
0ee     jl,s   B11  P=0.957383 C=22907.000000

0f0     B18: #	out( B22 B19 ) &lt;- in( B25 B17 )  Freq: 0.0438261
0f0     cmpl    R9, RBP
0f3     jge,s   B22  P=0.500000 C=-1.000000

0f5     B19: #	out( B20 ) &lt;- in( B18 )  Freq: 0.021913
0f5     # castII of R9
        nop 	# 3 bytes pad for loops and calls

0f8     B20: #	out( B23 B21 ) &lt;- in( B19 B21 ) Loop( B20-B21 inner post of N210) Freq: 0.0436421
0f8     movslq  R10, R9	# i2l
0fb     movsbl  R8, [RSI + #16 + R10]	# byte
101     movsbl  R10, [RDX + #16 + R10]	# byte
107     cmpl    R8, R10
10a     jne,s   B23  P=0.004217 C=23004.000000

10c     B21: #	out( B20 B22 ) &lt;- in( B20 )  Freq: 0.043458
10c     incl    R9	# int
10f     cmpl    R9, RBP
112     jl,s   B20	# loop end  P=0.500000 C=22907.000000

114     B22: #	out( B23 ) &lt;- in( B18 B4 B21 )  Freq: 0.0639885
114     movl    RAX, #1	# int

119     B23: #	out( N1 ) &lt;- in( B20 B14 B8 B12 B13 B15 B22 B3 )  Freq: 0.999997
119     addq    rsp, 32	# Destroy frame
	popq    rbp
	movq    rscratch1, poll_offset[r15_thread] #polling_page_address
	testl   rax, [rscratch1]	# Safepoint: poll for GC

128     ret

129     B24: #	out( N1 ) &lt;- in( B7 B6 B5 )  Freq: 1.38338e-06
129     movq    [rsp + #0], RSI	# spill
12d     movq    [rsp + #8], RDX	# spill
132     movl    RSI, #-138	# int
137     call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.StringLatin1::equals @ bci:12  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=#0 STK[0]=#0 STK[1]=RBP
        # OopMap {[0]=Oop [8]=Oop off=316/0x13c}
13c     ud2	# ShouldNotReachHere

150     B25: #	out( B18 ) &lt;- in( B9 )  Freq: 4.61195e-07
150     movl    R9, #1	# int
156     jmp,s   B18

158     B26: #	out( N1 ) &lt;- in( B1 )  Freq: 1.01328e-06
158     movl    RSI, #-10	# int
        nop 	# 2 bytes pad for loops and calls
15f     call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.StringLatin1::equals @ bci:1  L[0]=_ L[1]=_ L[2]=_ STK[0]=#NULL
        # OopMap {off=356/0x164}
164     ud2	# ShouldNotReachHere

178     B27: #	out( N1 ) &lt;- in( B2 )  Freq: 1.01328e-06
178     movl    RSI, #-10	# int
        nop 	# 2 bytes pad for loops and calls
17f     call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.StringLatin1::equals @ bci:3  L[0]=_ L[1]=_ L[2]=_ STK[0]=_ STK[1]=#NULL
        # OopMap {off=388/0x184}
184     ud2	# ShouldNotReachHere

--------------------------------------------------------------------------------
</opto_assembly>
<writer thread='24067'/>
                     
<writer thread='40963'/>
    744  226       3       java.util.Set::of (4 bytes)
<writer thread='24067'/>
         @ 14  
<writer thread='43011'/>
    744   68       3       java.lang.StringLatin1::equals (36 bytes)   made not entrant
<writer thread='24067'/>
 java.util.HashMap$KeySet::&lt;init&gt;
<writer thread='43011'/>
<writer thread='24067'/>
 (10 bytes)
<writer thread='43011'/>
    744  207       4       jdk.internal.module.ModuleInfo$ConstantPool::checkUnqualifiedName (131 bytes)
<writer thread='24067'/>
                                @ 6   java.util.AbstractSet::&lt;init&gt; (5 bytes)
                                  @ 1   java.util.AbstractCollection::&lt;init&gt; (5 bytes)
                                    @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
<writer thread='40963'/>
    745  215       3       java.util.HashSet::contains (9 bytes)
                              @ 5   java.util.HashMap::containsKey (18 bytes)
                                @ 2   java.util.HashMap::hash (20 bytes)
                                  @ 9   java.lang.Object::hashCode (0 bytes)   no static binding
                                @ 6   java.util.HashMap::getNode (148 bytes)   callee is too large
<writer thread='24067'/>
    747  203       3       java.util.HashMap$KeySet::iterator (12 bytes)
<writer thread='25091'/>
    748  174  s    4       java.io.BufferedInputStream::read (49 bytes)
<writer thread='40195'/>
    748  204       3       java.util.HashMap$KeyIterator::&lt;init&gt; (11 bytes)
<writer thread='24067'/>
                              @ 8   java.util.HashMap$KeyIterator::&lt;init&gt; (11 bytes)
<writer thread='40195'/>
                              @ 7   java.util.HashMap$HashIterator::&lt;init&gt; (79 bytes)   callee is too large
<writer thread='24067'/>
                                @ 7   java.util.HashMap$HashIterator::&lt;init&gt; (79 bytes)   callee is too large
<writer thread='40963'/>
    749  212       3       java.util.HashMap$KeySet::&lt;init&gt; (10 bytes)
<writer thread='42499'/>
    750  221       3       java.util.HashSet::size (8 bytes)
<writer thread='40195'/>
    750  211       3       java.util.ImmutableCollections$Set12::hashCode (27 bytes)
<writer thread='24067'/>
    750  222       3       java.util.Set::of (68 bytes)
<writer thread='40963'/>
                              @ 6   java.util.AbstractSet::&lt;init&gt; (5 bytes)
<writer thread='42499'/>
                              @ 4   java.util.HashMap::size
<writer thread='40195'/>
                              @ 4   java.lang.Object::hashCode
<writer thread='40963'/>
                   
<writer thread='40195'/>
 (0 bytes)
<writer thread='42499'/>
 (5 bytes)
<writer thread='40963'/>
             @ 1  
<writer thread='40195'/>
   no static binding
<writer thread='40963'/>
 java.util.AbstractCollection::&lt;init&gt; (5 bytes)
<writer thread='24067'/>
                              @ 41  
<writer thread='40963'/>
        
<writer thread='40195'/>
        
<writer thread='24067'/>
 java.util.ImmutableCollections$Set12::
<writer thread='40195'/>
                  
<writer thread='40963'/>
     
<writer thread='24067'/>
&lt;init&gt;
<writer thread='40963'/>
                 
<writer thread='40195'/>
    @ 22  
<writer thread='24067'/>
 (18 bytes)
<writer thread='40195'/>
 java.lang.Object::hashCode
<writer thread='40963'/>
    
<writer thread='40195'/>
 (0 bytes)   no static binding
<writer thread='40963'/>
@ 1   java.lang.Object::&lt;init&gt; (1 bytes)
<writer thread='24067'/>
                                @ 1   java.util.ImmutableCollections$AbstractImmutableSet::&lt;init&gt; (5 bytes)
                                  @ 1   java.util.ImmutableCollections$AbstractImmutableCollection::&lt;init&gt; (5 bytes)
                                    @ 1   java.util.AbstractCollection::&lt;init&gt; (5 bytes)
                                
<writer thread='42499'/>
    751  228       3       java.lang.ThreadLocal::get (38 bytes)
<writer thread='24067'/>
      @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
<writer thread='42499'/>
                              @ 0   java.lang.Thread::currentThread (0 bytes)   intrinsic
                              @ 6   java.lang.ThreadLocal::getMap (5 bytes)
<writer thread='24067'/>
                                @ 6   java.util.Objects::requireNonNull (14 bytes)
<writer thread='42499'/>
                              @ 16  
<writer thread='24067'/>
             
<writer thread='42499'/>
 java.lang.ThreadLocal$ThreadLocalMap::
<writer thread='24067'/>
                     
<writer thread='42499'/>
getEntry (42 bytes)   callee is too large
<writer thread='24067'/>
@ 8   java.lang.NullPointerException::&lt;init&gt; (5 bytes)   don&apos;t inline Throwable constructors
<writer thread='42499'/>
                              @ 34   java.lang.ThreadLocal::
<writer thread='40963'/>
    752  229       3       java.lang.ThreadLocal$ThreadLocalMap::getEntry (42 bytes)
<writer thread='24067'/>
                              @ 55   java.util.ImmutableCollections$Set12::&lt;init&gt; (53 bytes)   callee is too large
<writer thread='42499'/>
setInitialValue
<writer thread='40195'/>
    752  237       3       java.util.HashMap$ValueIterator::next (8 bytes)
<writer thread='42499'/>
 (50 bytes)   callee is too large
<writer thread='24067'/>
                              @ 64   java.util.ImmutableCollections$SetN::&lt;init&gt; (90 bytes)   callee is too large
<writer thread='40195'/>
                              @ 1   java.util.HashMap$HashIterator::nextNode (100 bytes)   callee is too large
<writer thread='40963'/>
                              @ 25   java.lang.ref.Reference::get (5 bytes)   intrinsic
                              @ 38   java.lang.ThreadLocal$ThreadLocalMap::getEntryAfterMiss (63 bytes)   callee is too large
<writer thread='40195'/>
    753  242       3       java.util.ImmutableCollections$SetN$SetNIterator::nextIndex (56 bytes)
<writer thread='42499'/>
    754  138       1       sun.nio.fs.NativeBuffer::address (5 bytes)
<writer thread='40963'/>
    755  225       3       java.util.HashMap::&lt;init&gt; (11 bytes)
<writer thread='42499'/>
    755  234       3       java.nio.Buffer::position (55 bytes)
<writer thread='40195'/>
    755  233       3       java.util.Collections$UnmodifiableCollection$1::hasNext (10 bytes)
                              @ 4   java.util.Iterator::hasNext (0 bytes)   no static binding
<writer thread='42499'/>
                              @ 28   java.nio.Buffer::createPositionException (104 bytes)   callee is too large
<writer thread='40963'/>
                              @ 1   java.util.AbstractMap::&lt;init&gt; (5 bytes)
                                @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
<writer thread='40195'/>
    756  240       1       java.util.HashMap$Node::getKey (5 bytes)
<writer thread='9219'/>
    757  243     n 0       java.lang.invoke.MethodHandle::linkToInterface(LL)L (native)   (static)
<writer thread='24067'/>
    757  168       3       sun.nio.fs.UnixPath::&lt;init&gt; (15 bytes)
<writer thread='40963'/>
    757  232       3       java.util.ImmutableCollections$SetN::contains (26 bytes)
<writer thread='40195'/>
    757  241       1       java.util.HashMap$Node::getValue (5 bytes)
<writer thread='24067'/>
                              @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
<writer thread='40963'/>
                              @ 1   java.util.Objects::requireNonNull (14 bytes)
                                @ 8   java.lang.NullPointerException::&lt;init&gt; (5 bytes)   don&apos;t inline Throwable constructors
                              @ 14   java.util.ImmutableCollections$SetN::probe (56 bytes)   callee is too large
<writer thread='40195'/>
    758  161       1       java.nio.Buffer::position (5 bytes)
<writer thread='42499'/>
    758  182       1       java.lang.module.ModuleDescriptor$Exports::source (5 bytes)
<writer thread='40195'/>
    758  169       1       java.nio.Buffer::limit (5 bytes)
<writer thread='24067'/>
    759  239       3       java.util.ImmutableCollections$AbstractImmutableCollection::&lt;init&gt; (5 bytes)
<writer thread='24323'/>

============================= C2-compiled nmethod ==============================
<opto_assembly compile_id='183'>
----------------------- MetaData before Compile_id = 183 ------------------------
{method}
 - this oop:          0x0000000126b1e3d8
 - method holder:     &apos;java/lang/StringLatin1&apos;
 - constants:         0x0000000126b1b920 constant pool [372] {0x0000000126b1b920} for &apos;java/lang/StringLatin1&apos; cache=0x0000000126b202b0
 - access:            0xc1000009  public static 
 - name:              &apos;replace&apos;
 - signature:         &apos;([BCC)Ljava/lang/String;&apos;
 - max stack:         6
 - max locals:        7
 - size of params:    3
 - method size:       13
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x000000010c0a1de0
 - adapters:          AHE@0x00007f99308e17f0: 0xbaa00000 i2c: 0x000000010c0e8d60 c2i: 0x000000010c0e8e49 c2iUV: 0x000000010c0e8e10 c2iNCI: 0x000000010c0e8e86
 - compiled entry     0x000000010c7eb020
 - code size:         198
 - code start:        0x0000000126b1e270
 - code end (excl):   0x0000000126b1e336
 - method data:       0x0000000126e0e4a8
 - checked ex length: 0
 - linenumber start:  0x0000000126b1e336
 - localvar length:   10
 - localvar start:    0x0000000126b1e35e
 - compiled code: nmethod    759   74       3       java.lang.StringLatin1::replace (198 bytes)

------------------------ OptoAssembly for Compile_id = 183 -----------------------
#
#  java/lang/String:exact * ( byte[int:&gt;=0]:exact *, int, int )
#
#r018 rsi:rsi   : parm 0: byte[int:&gt;=0]:exact *
#r016 rdx   : parm 1: int
#r010 rcx   : parm 2: int
# -- Old rsp -- Framesize: 80 --
#r583 rsp+76: in_preserve
#r582 rsp+72: return address
#r581 rsp+68: in_preserve
#r580 rsp+64: saved fp register
#r579 rsp+60: pad2, stack alignment
#r578 rsp+56: pad2, stack alignment
#r577 rsp+52: Fixed slot 1
#r576 rsp+48: Fixed slot 0
#r595 rsp+44: spill
#r594 rsp+40: spill
#r593 rsp+36: spill
#r592 rsp+32: spill
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N1: #	out( B1 ) &lt;- in( B80 B82 B75 B76 B70 B86 B81 B83 B77 B79 )  Freq: 1

000     B1: #	out( B80 B2 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
000     # stack bang (304 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #64	# Create frame

00c     movl    [rsp + #12], RCX	# spill
010     movq    R10, RSI	# spill
013     movl    [rsp + #8], RDX	# spill
017     movl    RBP, RDX	# spill
019     shrl    RBP, #8
01c     testl   RBP, RBP
01e     jne     B80  P=0.000000 C=6814.000000

024     B2: #	out( B82 B3 ) &lt;- in( B1 )  Freq: 1
024     movq    R8, RSI	# spill
027     movl    R11, [RSI + #12 (8-bit)]	# range
02b     NullCheck RSI

02b     B3: #	out( B19 B4 ) &lt;- in( B2 )  Freq: 0.999999
02b     testl   R11, R11	# unsigned
02e     jbe,u   B19  P=0.006202 C=3870.000000

034     B4: #	out( B75 B5 ) &lt;- in( B3 )  Freq: 0.993797
034     movl    RCX, R11	# spill
037     decl    RCX	# int
039     cmpl    RCX, R11	# unsigned
03c     jnb,u   B75  P=0.000001 C=-1.000000

042     B5: #	out( B24 B6 ) &lt;- in( B4 )  Freq: 0.993796
042     movsbl  R9, [RSI + #16 (8-bit)]	# byte
047     movl    RBX, R11	# spill
04a     addl    RBX, #-3	# int
04d     movsbl  RSI, RDX	# i2b
050     cmpl    R9, RSI
053     je     B24  P=0.216069 C=3846.000000

059     B6: #	out( B78 B7 ) &lt;- in( B5 )  Freq: 0.779068
059     cmpl    RBX, #1
05c     jle     B78  P=0.000001 C=-1.000000

062     B7: #	out( B8 ) &lt;- in( B6 )  Freq: 0.779067
062     movl    R9, #1	# int
068     movl    RDI, #1	# int
        nop 	# 3 bytes pad for loops and calls

070     B8: #	out( B26 B9 ) &lt;- in( B7 B14 ) Loop( B8-B14 inner main of N140) Freq: 1.24716
070     movslq  RAX, R9	# i2l
073     movsbl  RDX, [R8 + #16 + RAX]	# byte
079     cmpl    RDX, RSI
07b     je     B26  P=0.216069 C=3846.000000

081     B9: #	out( B25 B10 ) &lt;- in( B8 )  Freq: 0.977689
081     movsbl  RDX, [R8 + #17 + RAX]	# byte
087     cmpl    RDX, RSI
089     je     B25  P=0.216069 C=3846.000000

08f     B10: #	out( B12 B11 ) &lt;- in( B9 )  Freq: 0.766441
08f     movsbl  RDX, [R8 + #18 + RAX]	# byte
095     cmpl    RDX, RSI
097     jne,s   B12  P=0.783931 C=3846.000000

099     B11: #	out( B26 ) &lt;- in( B10 )  Freq: 0.165604
099     addl    R9, #2	# int
09d     jmp     B26

0a2     B12: #	out( B14 B13 ) &lt;- in( B10 )  Freq: 0.600837
0a2     movsbl  RDX, [R8 + #19 + RAX]	# byte
0a8     cmpl    RDX, RSI
0aa     jne,s   B14  P=0.783931 C=3846.000000

0ac     B13: #	out( B26 ) &lt;- in( B12 )  Freq: 0.129822
0ac     addl    R9, #3	# int
0b0     jmp     B26

0b5     B14: #	out( B8 B15 ) &lt;- in( B12 )  Freq: 0.471015
0b5     addl    R9, #4	# int
0b9     cmpl    R9, RBX
0bc     jl,s   B8	# loop end  P=0.993798 C=3870.000000

0be     B15: #	out( B19 B16 ) &lt;- in( B78 B14 )  Freq: 0.00292182
0be     cmpl    R9, R11
0c1     jge,s   B19  P=0.500000 C=-1.000000

0c3     B16: #	out( B17 ) &lt;- in( B15 )  Freq: 0.00146091
0c3     # castII of R9
        nop 	# 1 bytes pad for loops and calls

0c4     B17: #	out( B26 B18 ) &lt;- in( B16 B18 ) Loop( B17-B18 inner post of N672) Freq: 0.00240268
0c4     movsbl  RDX, [R8 + #16 + R9]	# byte
0ca     cmpl    RDX, RSI
0cc     je,s   B26  P=0.216069 C=3846.000000

0ce     B18: #	out( B17 B19 ) &lt;- in( B17 )  Freq: 0.00188353
0ce     incl    R9	# int
0d1     cmpl    R9, R11
0d4     jl,s   B17	# loop end  P=0.500000 C=3870.000000

0d6     B19: #	out( B70 ) &lt;- in( B15 B26 B3 B18 )  Freq: 0.0364328
0d6     xorl    RAX, RAX	# ptr
0d8     jmp     B70
        nop 	# 3 bytes pad for loops and calls

0e0     B20: #	out( B21 ) &lt;- in( B21 ) top-of-loop Freq: 10.5596
0e0     movl    [rsp + #36], RBX	# spill

0e4     B21: #	out( B20 B22 ) &lt;- in( B38 B20 ) Loop( B21-B20 inner main of N213 strip mined) Freq: 13.7494
0e4     movslq  RSI, [RSP + #36 (32-bit)]	# int -&gt; long
0e9     movsbl  RBX, [R9 + #16 + RSI]	# byte
0ef     movb    [RBP + #16 + RSI], RBX	# byte
0f3     movsbl  R10, [R9 + #17 + RSI]	# byte
0f9     movb    [RBP + #17 + RSI], R10	# byte
0fe     movl    RBX, [rsp + #36]	# spill
102     addl    RBX, #2	# int
105     cmpl    RBX, RDI
107     jl,s   B20	# loop end  P=0.768007 C=2751.000000

109     B22: #	out( B40 B23 ) &lt;- in( B21 )  Freq: 3.18977
109     movq    RDI, [R15 + #296 (32-bit)]	# ptr
110     testl   rax, [RDI]	# Safepoint: poll for GC        # java.lang.StringLatin1::replace @ bci:76  L[0]=R9 L[1]=rsp + #8 L[2]=rsp + #12 L[3]=rsp + #16 L[4]=R8 L[5]=RBP L[6]=RBX
        # OopMap {r9=Oop rbp=Oop off=272/0x110}
112     cmpl    RBX, R11
115     jge     B40  P=0.231993 C=2751.000000

11b     B23: #	out( B38 ) &lt;- in( B22 )  Freq: 2.44976
11b     movl    [rsp + #36], RBX	# spill
11f     jmp     B38

124     B24: #	out( B26 ) &lt;- in( B5 )  Freq: 0.214728
124     xorl    R9, R9	# int
127     movl    RDI, #1	# int
12c     jmp,s   B26

12e     B25: #	out( B26 ) &lt;- in( B9 )  Freq: 0.211248
12e     incl    R9	# int

131     B26: #	out( B19 B27 ) &lt;- in( B17 B24 B8 B11 B25 B13 )  Freq: 0.991393
131     cmpl    R9, R11
134     jge,s   B19  P=0.028070 C=855.000000

136     B27: #	out( B81 B28 ) &lt;- in( B26 )  Freq: 0.963565
136     movl    RBP, [rsp + #12]	# spill
13a     shrl    RBP, #8
13d     testl   RBP, RBP
13f     jne     B81  P=0.000000 C=6814.000000

145     B28: #	out( B85 B29 ) &lt;- in( B27 )  Freq: 0.963564
145     movl    [rsp + #36], RDI	# spill
149     movl    [rsp + #32], RSI	# spill
14d     movl    [rsp + #28], RBX	# spill
151     movl    [rsp + #24], RCX	# spill
155     movl    [rsp + #20], R9	# spill
15a     movl    [rsp + #16], R11	# spill
15f     movq    [rsp + #0], R8	# spill
163     movq    RSI, jdk/internal/misc/Unsafe:exact *	# ptr
16d     movq    RDX, java/lang/Class:exact *	# ptr
177     movl    RCX, R11	# spill
        nop 	# 1 bytes pad for loops and calls
17b     call,static  jdk.internal.misc.Unsafe::allocateUninitializedArray
        # java.lang.StringConcatHelper::newArray @ bci:19  L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # java.lang.StringLatin1::replace @ bci:49  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=rsp + #12 L[3]=rsp + #16 L[4]=rsp + #20 L[5]=_ L[6]=_
        # OopMap {[0]=Oop off=384/0x180}

180     B29: #	out( B83 B30 ) &lt;- in( B28 )  Freq: 0.963545
        # Block is sole successor of call
180     movq    RBP, RAX	# spill
183     movl    R11, [RAX + #8 (8-bit)]	# compressed klass ptr
187     NullCheck RAX

187     B30: #	out( B77 B31 ) &lt;- in( B29 )  Freq: 0.963544
187     cmpl    R11, narrowklass: precise klass [B: 0x000000012728fa90:Constant:exact *	# compressed klass ptr
18e     jne,u   B77  P=0.000001 C=-1.000000

194     B31: #	out( B33 B32 ) &lt;- in( B30 )  Freq: 0.963543
194     # checkcastPP of RBP
194     movl    RCX, [RBP + #12 (8-bit)]	# range
197     # TLS is in R15
197     movl    R8, [rsp + #20]	# spill
19c     testl   R8, R8
19f     jg,s   B33  P=0.768007 C=3582.000000

1a1     B32: #	out( B43 ) &lt;- in( B31 )  Freq: 0.223536
1a1     movq    R9, [rsp + #0]	# spill
1a5     jmp,s   B43

1a7     B33: #	out( B79 B34 ) &lt;- in( B31 )  Freq: 0.740007
1a7     movl    R11, R8	# spill
1aa     decl    R11	# int
1ad     cmpl    R11, [RSP + #16 (32-bit)]	# unsigned
1b2     jnb,u   B79  P=0.000001 C=-1.000000

1b8     B34: #	out( B79 B35 ) &lt;- in( B33 )  Freq: 0.740007
1b8     testl   RCX, RCX	# unsigned
1ba     jbe,u   B79  P=0.000001 C=-1.000000

1c0     B35: #	out( B79 B36 ) &lt;- in( B34 )  Freq: 0.740006
1c0     cmpl    R11, RCX	# unsigned
1c3     jnb,u   B79  P=0.000001 C=-1.000000

1c9     B36: #	out( B39 B37 ) &lt;- in( B35 )  Freq: 0.740005
1c9     movq    R9, [rsp + #0]	# spill
1cd     movsbl  R10, [R9 + #16 (8-bit)]	# byte
1d2     movb    [RBP + #16 (8-bit)], R10	# byte
1d6     cmpl    R11, #1
1da     jle,s   B39  P=0.000001 C=-1.000000

1dc     B37: #	out( B38 ) &lt;- in( B36 )  Freq: 0.740004
1dc     movl    RDX, #2000	# int

1e1     B38: #	out( B21 ) &lt;- in( B37 B23 ) Loop( B38-B23 ) Freq: 3.18977
1e1     movl    R10, R8	# spill
1e4     subl    R10, [RSP + #36 (32-bit)]	# int
1e9     decl    R10	# int
1ec     cmpl    RDX, R10
1ef     movl    RDI, #2000	# int
1f4     cmovlgt RDI, R10	# min
1f8     addl    RDI, [RSP + #36 (32-bit)]	# int
1fc     jmp     B21

201     B39: #	out( B40 ) &lt;- in( B36 )  Freq: 7.49832e-07
201     movl    RBX, [rsp + #36]	# spill

205     B40: #	out( B43 B41 ) &lt;- in( B39 B22 )  Freq: 0.740005
205     cmpl    RBX, R8
208     jge,s   B43  P=0.500000 C=-1.000000

20a     B41: #	out( B42 ) &lt;- in( B40 )  Freq: 0.370003
20a     # castII of RBX
        nop 	# 2 bytes pad for loops and calls

20c     B42: #	out( B42 B43 ) &lt;- in( B41 B42 ) Loop( B42-B42 inner post of N682) Freq: 0.740005
20c     movslq  R10, RBX	# i2l
20f     movsbl  R11, [R9 + #16 + R10]	# byte
215     movb    [RBP + #16 + R10], R11	# byte
21a     incl    RBX	# int
21c     cmpl    RBX, R8
21f     jl,s   B42	# loop end  P=0.500000 C=2751.000000

221     B43: #	out( B76 B44 ) &lt;- in( B42 B40 B32 )  Freq: 0.963541
221     cmpl    R8, [RSP + #16 (32-bit)]	# unsigned
226     jnb,u   B76  P=0.000001 C=-1.000000

22c     B44: #	out( B76 B45 ) &lt;- in( B43 )  Freq: 0.96354
22c     cmpl    R8, RCX	# unsigned
22f     jnb,u   B76  P=0.000001 C=-1.000000

235     B45: #	out( B76 B46 ) &lt;- in( B44 )  Freq: 0.963539
235     movl    R11, [rsp + #24]	# spill
23a     cmpl    R11, RCX	# unsigned
23d     jnb,u   B76  P=0.000001 C=-1.000000

243     B46: #	out( B47 ) &lt;- in( B45 )  Freq: 0.963538
243     movl    RBX, R8	# spill
246     incl    RBX	# int
248     movsbl  RCX, [RSP + #12 (32-bit)]	# int -&gt; byte

24d     B47: #	out( B71 B48 ) &lt;- in( B46 B48 ) Loop( B47-B48 inner pre of N693) Freq: 1.92708
24d     movslq  R10, R8	# i2l
250     movsbl  R11, [R9 + #16 + R10]	# byte
256     cmpl    R11, [RSP + #32 (32-bit)]
25b     je     B71  P=0.112756 C=28708.000000

261     B48: #	out( B47 B49 ) &lt;- in( B47 B71 )  Freq: 1.92708
261     movb    [RBP + #16 + R10], R11	# byte
266     incl    R8	# int
269     cmpl    R8, RBX
26c     jl,s   B47	# loop end  P=0.500000 C=28708.000000

26e     B49: #	out( B63 B50 ) &lt;- in( B48 )  Freq: 0.963538
26e     cmpl    R8, [RSP + #28 (32-bit)]
273     jge     B63  P=0.000001 C=-1.000000

279     B50: #	out( B62 ) &lt;- in( B49 )  Freq: 0.963537
279     # castII of R8
279     movl    RDI, #4000	# int
27e     jmp     B62

283     B51: #	out( B52 ) &lt;- in( B57 ) top-of-loop Freq: 137.277
283     movl    R11, RCX	# spill
        nop 	# 10 bytes pad for loops and calls

290     B52: #	out( B60 B53 ) &lt;- in( B56 B51 ) top-of-loop Freq: 1217.47
290     movb    [RBP + #17 + RDX], R11	# byte
295     movsbl  R10, [R9 + #18 + RDX]	# byte
29b     cmpl    R10, [RSP + #32 (32-bit)]
2a0     je,s   B60  P=0.112756 C=28708.000000

2a2     B53: #	out( B59 B54 ) &lt;- in( B52 B60 )  Freq: 1217.47
2a2     movb    [RBP + #18 + RDX], R10	# byte
2a7     movsbl  R11, [R9 + #19 + RDX]	# byte
2ad     cmpl    R11, [RSP + #32 (32-bit)]
2b2     je,s   B59  P=0.112756 C=28708.000000

2b4     B54: #	out( B61 B55 ) &lt;- in( B53 B59 )  Freq: 1217.47
2b4     movb    [RBP + #19 + RDX], R11	# byte
2b9     addl    R8, #4	# int
2bd     cmpl    R8, RBX
2c0     jge,s   B61	# loop end  P=0.028132 C=28708.000000

2c2     B55: #	out( B58 B56 ) &lt;- in( B62 B54 ) Loop( B55-B54 inner main of N347 strip mined) Freq: 1217.47
2c2     movslq  R11, R8	# i2l
2c5     movsbl  R10, [R9 + #16 + R11]	# byte
2cb     cmpl    R10, [RSP + #32 (32-bit)]
2d0     je,s   B58  P=0.112756 C=28708.000000

2d2     B56: #	out( B52 B57 ) &lt;- in( B55 B58 )  Freq: 1217.47
2d2     movb    [RBP + #16 + R11], R10	# byte
2d7     movslq  RDX, R8	# i2l
2da     movsbl  R11, [R9 + #17 + RDX]	# byte
2e0     cmpl    R11, [RSP + #32 (32-bit)]
2e5     jne,s   B52  P=0.887244 C=28708.000000

2e7     B57: #	out( B51 ) &lt;- in( B56 )  Freq: 137.277
2e7     jmp,s   B51

2e9     B58: #	out( B56 ) &lt;- in( B55 )  Freq: 137.277
2e9     movl    R10, RCX	# spill
2ec     jmp,s   B56

2ee     B59: #	out( B54 ) &lt;- in( B53 )  Freq: 137.277
2ee     movl    R11, RCX	# spill
2f1     jmp,s   B54

2f3     B60: #	out( B53 ) &lt;- in( B52 )  Freq: 137.277
2f3     movl    R10, RCX	# spill
2f6     jmp,s   B53

2f8     B61: #	out( B63 B62 ) &lt;- in( B54 )  Freq: 34.2502
2f8     movq    R10, [R15 + #296 (32-bit)]	# ptr
2ff     testl   rax, [R10]	# Safepoint: poll for GC        # java.lang.StringLatin1::replace @ bci:113  L[0]=R9 L[1]=rsp + #8 L[2]=rsp + #12 L[3]=rsp + #16 L[4]=R8 L[5]=RBP L[6]=_
        # OopMap {r9=Oop rbp=Oop off=767/0x2ff}
302     cmpl    R8, [RSP + #28 (32-bit)]
307     jge,s   B63  P=0.028132 C=28708.000000

309     B62: #	out( B55 ) &lt;- in( B50 B61 ) Loop( B62-B61 ) Freq: 34.2502
309     movl    R11, [rsp + #16]	# spill
30e     subl    R11, R8	# int
311     addl    R11, #-3	# int
315     cmpl    RDI, R11
318     movl    RBX, #4000	# int
31d     cmovlgt RBX, R11	# min
321     addl    RBX, R8	# int
324     jmp,s   B55

326     B63: #	out( B67 B64 ) &lt;- in( B49 B61 )  Freq: 0.963538
326     cmpl    R8, [RSP + #16 (32-bit)]
32b     jge,s   B67  P=0.500000 C=-1.000000

32d     B64: #	out( B65 ) &lt;- in( B63 )  Freq: 0.481769
32d     # castII of R8
        nop 	# 3 bytes pad for loops and calls

330     B65: #	out( B72 B66 ) &lt;- in( B64 B66 ) Loop( B65-B66 inner post of N693) Freq: 0.963538
330     movslq  R10, R8	# i2l
333     movsbl  RBX, [R9 + #16 + R10]	# byte
339     cmpl    RBX, [RSP + #32 (32-bit)]
33d     je     B72  P=0.112756 C=28708.000000

343     B66: #	out( B65 B67 ) &lt;- in( B65 B72 )  Freq: 0.963538
343     movb    [RBP + #16 + R10], RBX	# byte
348     incl    R8	# int
34b     cmpl    R8, [RSP + #16 (32-bit)]
350     jl,s   B65	# loop end  P=0.500000 C=28708.000000

352     B67: #	out( B73 B68 ) &lt;- in( B66 B63 )  Freq: 0.963538
352     movq    RAX, [R15 + #320 (32-bit)]	# ptr
359     movq    R10, RAX	# spill
35c     addq    R10, #24	# ptr
360     cmpq    R10, [R15 + #336 (32-bit)]	# raw ptr
367     jnb,u   B73  P=0.000100 C=-1.000000

36d     B68: #	out( B69 ) &lt;- in( B67 )  Freq: 0.963441
36d     movq    [R15 + #320 (32-bit)], R10	# ptr
374     PREFETCHW [R10 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
37c     movl    R11, narrowklass: precise klass java/lang/String: 0x000000010bf8aca0:Constant:exact *	# compressed klass ptr
382     decode_klass_not_null R10,R11
38f     movq    R10, [R10 + #184 (32-bit)]	# long
396     movq    [RAX], R10	# long
399     movl    [RAX + #8 (8-bit)], narrowklass: precise klass java/lang/String: 0x000000010bf8aca0:Constant:exact *	# compressed klass ptr
3a0     movq    [RAX + #16 (8-bit)], #0	# long

3a8     B69: #	out( B70 ) &lt;- in( B74 B68 )  Freq: 0.963538
3a8     encode_heap_oop_not_null R11,RBP
3f1     movl    [RAX + #12 (8-bit)], R11	# compressed ptr
3f5     
3f5     # checkcastPP of RAX
3f5     MEMBAR-release ! (empty encoding)
3f5     MEMBAR-release ! (empty encoding)

3f5     B70: #	out( N1 ) &lt;- in( B69 B19 )  Freq: 0.999971
3f5     addq    rsp, 64	# Destroy frame
	popq    rbp
	movq    rscratch1, poll_offset[r15_thread] #polling_page_address
	testl   rax, [rscratch1]	# Safepoint: poll for GC

404     ret

405     B71: #	out( B48 ) &lt;- in( B47 )  Freq: 0.217289
405     movl    R11, RCX	# spill
408     jmp     B48

40d     B72: #	out( B66 ) &lt;- in( B65 )  Freq: 0.108645
40d     movl    RBX, RCX	# spill
40f     jmp     B66

414     B73: #	out( B84 B74 ) &lt;- in( B67 )  Freq: 9.63698e-05
414     movq    RSI, precise klass java/lang/String: 0x000000010bf8aca0:Constant:exact *	# ptr
        nop 	# 1 bytes pad for loops and calls
41f     call,static  wrapper for: _new_instance_Java
        # java.lang.StringLatin1::replace @ bci:116  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=RBP L[6]=_
        # OopMap {rbp=Oop off=1060/0x424}

424     B74: #	out( B69 ) &lt;- in( B73 )  Freq: 9.63678e-05
        # Block is sole successor of call
424     jmp     B69

429     B75: #	out( N1 ) &lt;- in( B4 )  Freq: 1.00699e-06
429     movl    RSI, #-138	# int
42e     movq    RBP, R8	# spill
431     movl    [rsp + #0], RDX	# spill
434     movl    R8, [rsp + #12]	# spill
439     movl    [rsp + #4], R8	# spill
43e     movl    [rsp + #12], R11	# spill
443     call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.StringLatin1::replace @ bci:19  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #4 L[3]=rsp + #12 L[4]=#0 L[5]=_ L[6]=_ STK[0]=#0 STK[1]=rsp + #12
        # OopMap {rbp=Oop off=1096/0x448}
448     ud2	# ShouldNotReachHere

45c     B76: #	out( N1 ) &lt;- in( B45 B43 B44 )  Freq: 2.929e-06
45c     movl    RSI, #-138	# int
461     movq    [rsp + #0], R9	# spill
465     movl    [rsp + #24], R8	# spill
        nop 	# 1 bytes pad for loops and calls
46b     call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.StringLatin1::replace @ bci:82  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=rsp + #12 L[3]=rsp + #16 L[4]=rsp + #24 L[5]=RBP L[6]=_ STK[0]=rsp + #24 STK[1]=rsp + #16
        # OopMap {rbp=Oop [0]=Oop off=1136/0x470}
470     ud2	# ShouldNotReachHere

484     B77: #	out( N1 ) &lt;- in( B30 )  Freq: 9.63544e-07
484     movl    RSI, #-34	# int
        nop 	# 2 bytes pad for loops and calls
48b     call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.StringConcatHelper::newArray @ bci:22  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=RBP
        # java.lang.StringLatin1::replace @ bci:49  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap {rbp=Oop off=1168/0x490}
490     ud2	# ShouldNotReachHere

4a4     B78: #	out( B15 ) &lt;- in( B6 )  Freq: 7.89413e-07
4a4     movl    R9, #1	# int
4aa     movl    RDI, #1	# int
4af     jmp     B15

4b4     B79: #	out( N1 ) &lt;- in( B35 B34 B33 )  Freq: 2.23967e-06
4b4     movl    RSI, #-138	# int
        nop 	# 2 bytes pad for loops and calls
4bb     call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.StringLatin1::replace @ bci:61  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=rsp + #12 L[3]=rsp + #16 L[4]=rsp + #20 L[5]=RBP L[6]=#0 STK[0]=#0 STK[1]=rsp + #20
        # OopMap {rbp=Oop [0]=Oop off=1216/0x4c0}
4c0     ud2	# ShouldNotReachHere

4d4     B80: #	out( N1 ) &lt;- in( B1 )  Freq: 5e-07
4d4     movl    RSI, #-187	# int
4d9     movq    [rsp + #0], R10	# spill
        nop 	# 2 bytes pad for loops and calls
4df     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.StringLatin1::canEncode @ bci:4  L[0]=_ STK[0]=RBP
        # java.lang.StringLatin1::replace @ bci:1  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=rsp + #12 L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap {[0]=Oop off=1252/0x4e4}
4e4     ud2	# ShouldNotReachHere

4f8     B81: #	out( N1 ) &lt;- in( B27 )  Freq: 4.81782e-07
4f8     movl    RSI, #-187	# int
4fd     movq    [rsp + #0], R8	# spill
501     movl    [rsp + #16], R11	# spill
506     movl    [rsp + #20], R9	# spill
50b     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.StringLatin1::canEncode @ bci:4  L[0]=_ STK[0]=RBP
        # java.lang.StringLatin1::replace @ bci:41  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=rsp + #12 L[3]=rsp + #16 L[4]=rsp + #20 L[5]=_ L[6]=_
        # OopMap {[0]=Oop off=1296/0x510}
510     ud2	# ShouldNotReachHere

524     B82: #	out( N1 ) &lt;- in( B2 )  Freq: 1.01328e-06
524     movl    RSI, #-10	# int
        nop 	# 2 bytes pad for loops and calls
52b     call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.StringLatin1::replace @ bci:8  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL
        # OopMap {off=1328/0x530}
530     ud2	# ShouldNotReachHere

544     B83: #	out( N1 ) &lt;- in( B29 )  Freq: 9.7634e-07
544     movl    RSI, #-12	# int
549     movq    RBP, [rsp + #0]	# spill
54d     movl    R10, [rsp + #8]	# spill
552     movl    [rsp + #0], R10	# spill
556     movl    R11, [rsp + #12]	# spill
55b     movl    [rsp + #4], R11	# spill
        nop 	# 3 bytes pad for loops and calls
563     call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;make_not_entrant&apos; debug_id=&apos;0&apos;)
        # java.lang.StringConcatHelper::newArray @ bci:22  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#NULL
        # java.lang.StringLatin1::replace @ bci:49  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #4 L[3]=rsp + #16 L[4]=rsp + #20 L[5]=_ L[6]=_
        # OopMap {rbp=Oop off=1384/0x568}
568     ud2	# ShouldNotReachHere

57c     B84: #	out( B86 ) &lt;- in( B73 )  Freq: 9.63698e-10
57c     # exception oop is in rax; no code emitted
57c     movq    RSI, RAX	# spill
57f     jmp,s   B86

581     B85: #	out( B86 ) &lt;- in( B28 )  Freq: 9.63564e-06
581     # exception oop is in rax; no code emitted
581     movq    RSI, RAX	# spill

584     B86: #	out( N1 ) &lt;- in( B85 B84 )  Freq: 9.63661e-06
584     addq    rsp, 64	# Destroy frame
	popq    rbp

589     jmp     rethrow_stub

--------------------------------------------------------------------------------
</opto_assembly>
<writer thread='42499'/>
    773  205       1       sun.nio.fs.UnixFileSystem::needToResolveAgainstDefaultDirectory (5 bytes)
<writer thread='24067'/>
             
<writer thread='40195'/>
    773  208       1       sun.nio.fs.NativeBuffer::size (5 bytes)
<writer thread='25091'/>

============================= C2-compiled nmethod ==============================
<opto_assembly compile_id='174'>
----------------------- MetaData before Compile_id = 174 ------------------------
{method}
 - this oop:          0x0000000126b380c8
 - method holder:     &apos;java/io/BufferedInputStream&apos;
 - constants:         0x0000000126b37478 constant pool [155] {0x0000000126b37478} for &apos;java/io/BufferedInputStream&apos; cache=0x0000000126b39728
 - access:            0x81000021  public synchronized 
 - name:              &apos;read&apos;
 - signature:         &apos;()I&apos;
 - max stack:         6
 - max locals:        1
 - size of params:    1
 - method size:       13
 - highest level:     3
 - vtable index:      7
 - i2i entry:         0x000000010c0a25e0
 - adapters:          AHE@0x00007f99308e1660: 0xb0000000 i2c: 0x000000010c0e9ee0 c2i: 0x000000010c0e9fc3 c2iUV: 0x000000010c0e9f8a c2iNCI: 0x000000010c0ea000
 - compiled entry     0x000000010c7e1460
 - code size:         49
 - code start:        0x0000000126b38078
 - code end (excl):   0x0000000126b380a9
 - method data:       0x0000000126dcea58
 - checked ex length: 1
 - checked ex start:  0x0000000126b380c4
 - linenumber start:  0x0000000126b380a9
 - localvar length:   1
 - localvar start:    0x0000000126b380b6
 - compiled code: nmethod    773   55  s    3       java.io.BufferedInputStream::read (49 bytes)

------------------------ OptoAssembly for Compile_id = 174 -----------------------
#
#  int ( java/io/BufferedInputStream:NotNull * )
#
#r018 rsi:rsi   : parm 0: java/io/BufferedInputStream:NotNull *
# -- Old rsp -- Framesize: 64 --
#r583 rsp+60: in_preserve
#r582 rsp+56: return address
#r581 rsp+52: in_preserve
#r580 rsp+48: saved fp register
#r579 rsp+44: Fixed slot 3
#r578 rsp+40: Fixed slot 2
#r577 rsp+36: Fixed slot 1
#r576 rsp+32: Fixed slot 0
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N307: #	out( B1 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B13 B2 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (248 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

02c     movq    [rsp + #0], RSI	# spill
030     movq    RAX, [RSI]	# long
033     movq    R10, RAX	# spill
036     andq    R10, #7	# long
03a     cmpq    R10, #5
03e     jne     B13  P=0.000001 C=-1.000000

044     B2: #	out( B15 B3 ) &lt;- in( B1 )  Freq: 0.999999
044     movl    R11, narrowklass: precise klass java/io/BufferedInputStream: 0x00000001274b7b60:Constant:exact *	# compressed klass ptr
04a     decode_klass_not_null R10,R11
057     movq    R10, [R10 + #184 (32-bit)]	# long
05e     movq    R11, R10	# spill
061     # TLS is in R15
061     orq     R11, R15	# long
064     movq    R8, R11	# spill
067     xorq    R8, RAX	# long
06a     testq   R8, #-121	# long
071     jne     B15  P=0.000001 C=-1.000000

077     B3: #	out( B8 B4 ) &lt;- in( B14 B13 B2 B19 )  Freq: 1
077     MEMBAR-acquire (prior CMPXCHG in FastLock so empty encoding)
077     movq    R10, [rsp + #0]	# spill
07b     movl    R10, [R10 + #20 (8-bit)]	# int ! Field: java/io/BufferedInputStream.pos
07f     movq    R11, [rsp + #0]	# spill
083     movl    R8, [R11 + #16 (8-bit)]	# int ! Field: java/io/BufferedInputStream.count
087     cmpl    R10, R8
08a     jge,s   B8  P=0.002960 C=23646.000000

08c     B4: #	out( B22 B5 ) &lt;- in( B9 B3 )  Freq: 1
08c     movq    R10, [rsp + #0]	# spill
090     movl    R11, [R10 + #32 (8-bit)]	# compressed ptr ! Field: volatile java/io/BufferedInputStream.buf
094     MEMBAR-acquire ! (empty encoding)
094     movl    R10, [R12 + R11 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
099     NullCheck R11

099     B5: #	out( B11 B6 ) &lt;- in( B4 )  Freq: 0.999999
099     movq    R8, [rsp + #0]	# spill
09d     movl    RBP, [R8 + #20 (8-bit)]	# int ! Field: java/io/BufferedInputStream.pos
0a1     movl    R8, RBP	# spill
0a4     incl    R8	# int
0a7     movq    R9, [rsp + #0]	# spill
0ab     movl    [R9 + #20 (8-bit)], R8	# int ! Field: java/io/BufferedInputStream.pos
0af     cmpl    RBP, R10	# unsigned
0b2     jnb,us  B11  P=0.000001 C=-1.000000

0b4     B6: #	out( B20 B7 ) &lt;- in( B5 )  Freq: 0.999998
0b4     decode_heap_oop_not_null R10,R11
0b8     movzbl  RBX, [R10 + #16 + RBP]	# ubyte
0be     MEMBAR-release (a FastUnlock follows so empty encoding)
0be     movl    R10, #7	# long (unsigned 32-bit)
0c4     andq    R10, [R9]	# long
0c7     cmpq    R10, #5
0cb     jne     B20  P=0.000001 C=-1.000000

0d1     B7: #	out( N307 ) &lt;- in( B21 B20 B6 )  Freq: 0.999998
0d1     movl    RAX, RBX	# spill
0d3     addq    rsp, 48	# Destroy frame
	popq    rbp
	movq    rscratch1, poll_offset[r15_thread] #polling_page_address
	testl   rax, [rscratch1]	# Safepoint: poll for GC

0e2     ret

0e3     B8: #	out( B23 B9 ) &lt;- in( B3 )  Freq: 0.00296032
0e3     movq    RSI, R11	# spill
0e6     movq    RBP, RSI	# spill
        nop 	# 2 bytes pad for loops and calls
0eb     call,static  java.io.BufferedInputStream::fill
        # java.io.BufferedInputStream::read @ bci:12  L[0]=RBP MON-BOX0=rsp+32 MON-OBJ[0]=RBP
        # OopMap {rbp=Oop [0]=Oop off=240/0xf0}

0f0     B9: #	out( B4 B10 ) &lt;- in( B8 )  Freq: 0.00296026
        # Block is sole successor of call
0f0     movl    R11, [RBP + #20 (8-bit)]	# int ! Field: java/io/BufferedInputStream.pos
0f4     movl    RBP, [RBP + #16 (8-bit)]	# int ! Field: java/io/BufferedInputStream.count
0f7     cmpl    R11, RBP
0fa     jl,s   B4  P=1.000000 C=70.000000

0fc     B10: #	out( N307 ) &lt;- in( B9 )  Freq: 1.41156e-09
0fc     movl    RSI, #-187	# int
101     movl    [rsp + #16], R11	# spill
        nop 	# 1 bytes pad for loops and calls
107     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.io.BufferedInputStream::read @ bci:23  L[0]=rsp + #0 STK[0]=rsp + #16 STK[1]=RBP MON-BOX0=rsp+32 MON-OBJ[0]=rsp + #0
        # OopMap {[0]=Oop off=268/0x10c}
10c     ud2	# ShouldNotReachHere

120     B11: #	out( N307 ) &lt;- in( B5 )  Freq: 1.01328e-06
120     movl    RSI, #-28	# int
125     movl    [rsp + #8], R11	# spill
        nop 	# 1 bytes pad for loops and calls
12b     call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos; debug_id=&apos;0&apos;)
        # java.io.BufferedInputStream::read @ bci:43  L[0]=_ STK[0]=rsp + #8 STK[1]=RBP MON-BOX0=rsp+32 MON-OBJ[0]=rsp + #0
        # OopMap {[0]=Oop [8]=NarrowOop off=304/0x130}
130     ud2	# ShouldNotReachHere

144     B12: #	out( B13 ) &lt;- in( B15 )  Freq: 9.99999e-13
144     cmpxchgq [RSI], R10	# If rax == [RSI] then store R10 into [RSI]

149     B13: #	out( B3 B14 ) &lt;- in( B1 B12 )  Freq: 1e-06
149     leaq    RBX, [rsp + #32]	# box lock
14e     fastlock RSI,RBX	! kills RBX,RAX,R10
190     je     B3  P=0.999999 C=-1.000000

196     B14: #	out( B3 ) &lt;- in( B18 B13 )  Freq: 2e-12
196     leaq    RDX, [rsp + #32]	# box lock
19b     movq    RBP, RSI	# spill
        nop 	# 1 bytes pad for loops and calls
19f     call,static  wrapper for: _complete_monitor_locking_Java
        # java.io.BufferedInputStream::read @ bci:-1  L[0]=RBP MON-BOX0=rsp+32 MON-OBJ[0]=RBP
        # OopMap {rbp=Oop [0]=Oop off=420/0x1a4}
1a4     jmp     B3

1a9     B15: #	out( B12 B16 ) &lt;- in( B2 )  Freq: 9.99999e-07
1a9     testq   R8, #7	# long
1b0     jne,s   B12  P=0.000001 C=-1.000000

1b2     B16: #	out( B18 B17 ) &lt;- in( B15 )  Freq: 9.99998e-07
1b2     testq   R8, #768	# long
1b9     jne,s   B18  P=0.000001 C=-1.000000

1bb     B17: #	out( B18 ) &lt;- in( B16 )  Freq: 9.99997e-07
1bb     andq    RAX, #895	# long
1c2     movq    R11, RAX	# spill
1c5     # TLS is in R15
1c5     orq     R11, R15	# long

1c8     B18: #	out( B14 B19 ) &lt;- in( B17 B16 )  Freq: 9.99998e-07
1c8     cmpxchgq [RSI], R11	# If rax == [RSI] then store R11 into [RSI]
1cd     jne,us  B14  P=0.000001 C=-1.000000

1cf     B19: #	out( B3 ) &lt;- in( B18 )  Freq: 9.99997e-07
1cf     jmp     B3

1d4     B20: #	out( B7 B21 ) &lt;- in( B6 )  Freq: 9.99998e-07
1d4     leaq    RAX, [rsp + #32]	# box lock
1d9     fastunlock R9,RAX	! kills RAX,R10
25e     je     B7  P=0.999999 C=-1.000000

264     B21: #	out( B7 ) &lt;- in( B20 )  Freq: 9.99998e-13
264     movq    RDI, R9	# spill
267     leaq    RSI, [rsp + #32]	# box lock
26c     # TLS is in R15
26c     movq    RDX, R15	# spill
26f     call_leaf,runtime  complete_monitor_unlocking_C
        No JVM State Info
        # 
27c     jmp     B7

281     B22: #	out( N307 ) &lt;- in( B4 )  Freq: 4.76837e-07
281     movl    RSI, #-187	# int
286     movq    RBP, [rsp + #0]	# spill
28a     movl    [rsp + #12], R11	# spill
28f     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.io.BufferedInputStream::getBufIfOpen @ bci:6  L[0]=_ L[1]=rsp + #12 STK[0]=rsp + #12
        # java.io.BufferedInputStream::read @ bci:29  L[0]=RBP MON-BOX0=rsp+32 MON-OBJ[0]=RBP
        # OopMap {rbp=Oop [12]=NarrowOop off=660/0x294}
294     ud2	# ShouldNotReachHere

2a8     B23: #	out( B25 B24 ) &lt;- in( B8 )  Freq: 2.96032e-08
2a8     # exception oop is in rax; no code emitted
2a8     movq    RBX, RAX	# spill
2ab     MEMBAR-release (a FastUnlock follows so empty encoding)
2ab     movl    R10, #7	# long (unsigned 32-bit)
2b1     andq    R10, [RBP]	# long
2b5     cmpq    R10, #5
2b9     jne,s   B25  P=0.000001 C=-1.000000

2bb     B24: #	out( N307 ) &lt;- in( B26 B25 B23 )  Freq: 2.96032e-08
2bb     movq    RSI, RBX	# spill
2be     addq    rsp, 48	# Destroy frame
	popq    rbp

2c3     jmp     rethrow_stub

2c8     B25: #	out( B24 B26 ) &lt;- in( B23 )  Freq: 2.96032e-14
2c8     leaq    RAX, [rsp + #32]	# box lock
2cd     fastunlock RBP,RAX	! kills RAX,R10
354     je     B24  P=0.999999 C=-1.000000

35a     B26: #	out( B24 ) &lt;- in( B25 )  Freq: 2.96032e-20
35a     movq    RDI, RBP	# spill
35d     leaq    RSI, [rsp + #32]	# box lock
362     # TLS is in R15
362     movq    RDX, R15	# spill
365     call_leaf,runtime  complete_monitor_unlocking_C
        No JVM State Info
        # 
372     jmp     B24

--------------------------------------------------------------------------------
</opto_assembly>
<writer thread='40963'/>
    777  209       1       sun.nio.fs.NativeBuffer::owner (5 bytes)
<writer thread='24323'/>
    777   74       3       java.lang.StringLatin1::replace (198 bytes)   made not entrant
<writer thread='43011'/>

============================= C2-compiled nmethod ==============================
<opto_assembly compile_id='207'>
----------------------- MetaData before Compile_id = 207 ------------------------
{method}
 - this oop:          0x0000000126d9fb40
 - method holder:     &apos;jdk/internal/module/ModuleInfo$ConstantPool&apos;
 - constants:         0x0000000126d9e610 constant pool [271] {0x0000000126d9e610} for &apos;jdk/internal/module/ModuleInfo$ConstantPool&apos; cache=0x0000000126da0040
 - access:            0xc1000000  
 - name:              &apos;checkUnqualifiedName&apos;
 - signature:         &apos;(Ljava/lang/String;ILjava/lang/String;)V&apos;
 - max stack:         3
 - max locals:        7
 - size of params:    4
 - method size:       13
 - highest level:     3
 - vtable index:      10
 - i2i entry:         0x000000010c0a1de0
 - adapters:          AHE@0x00007f992d825bd0: 0xbbab0000 i2c: 0x000000010c0cf7e0 c2i: 0x000000010c0cf8ce c2iUV: 0x000000010c0cf895 c2iNCI: 0x000000010c0cf90b
 - compiled entry     0x000000010c815820
 - code size:         131
 - code start:        0x0000000126d9fa50
 - code end (excl):   0x0000000126d9fad3
 - method data:       0x0000000126e947c0
 - checked ex length: 0
 - linenumber start:  0x0000000126d9fad3
 - localvar length:   7
 - localvar start:    0x0000000126d9faea
 - compiled code: nmethod    778  158       3       jdk.internal.module.ModuleInfo$ConstantPool::checkUnqualifiedName (131 bytes)

------------------------ OptoAssembly for Compile_id = 207 -----------------------
#
#  void ( jdk/internal/module/ModuleInfo$ConstantPool:NotNull *, java/lang/String:exact *, int, java/lang/String:exact * )
#
#r018 rsi:rsi   : parm 0: jdk/internal/module/ModuleInfo$ConstantPool:NotNull *
#r016 rdx:rdx   : parm 1: java/lang/String:exact *
#r010 rcx   : parm 2: int
#r004 r8:r8   : parm 3: java/lang/String:exact *
# -- Old rsp -- Framesize: 64 --
#r583 rsp+60: in_preserve
#r582 rsp+56: return address
#r581 rsp+52: in_preserve
#r580 rsp+48: saved fp register
#r579 rsp+44: pad2, stack alignment
#r578 rsp+40: pad2, stack alignment
#r577 rsp+36: Fixed slot 1
#r576 rsp+32: Fixed slot 0
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N467: #	out( B1 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B46 B2 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (264 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

02c     movl    RBX, RCX	# spill
02e     movq    R9, R8	# spill
031     movl    R10, [R8 + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value (constant)
035     NullCheck R8

035     B2: #	out( B47 B3 ) &lt;- in( B1 )  Freq: 0.999999
035     movl    R8, [R12 + R10 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
03a     NullCheck R10

03a     B3: #	out( B42 B4 ) &lt;- in( B2 )  Freq: 0.999998
03a     movsbl  RCX, [R9 + #20 (8-bit)]	# byte ! Field: java/lang/String.coder (constant)
03f     movl    RBP, R8	# spill
042     sarl    RBP, RCX
044     testl   RBP, RBP
046     je     B42  P=0.000000 C=1658.000000

04c     B4: #	out( B34 B5 ) &lt;- in( B3 )  Freq: 0.999997
04c     testl   RBP, RBP
04e     jle     B34  P=0.031096 C=53319.000000

054     B5: #	out( B41 B6 ) &lt;- in( B4 )  Freq: 0.968902
054     testl   RCX, RCX
056     jne     B41  P=0.000001 C=-1.000000

05c     B6: #	out( B41 B7 ) &lt;- in( B5 )  Freq: 0.968901
05c     testl   R8, R8	# unsigned
05f     jbe,u   B41  P=0.000001 C=-1.000000

065     B7: #	out( B41 B8 ) &lt;- in( B6 )  Freq: 0.9689
065     movslq  R11, R8	# i2l
068     movslq  R8, RBP	# i2l
06b     decq    R8	# long
06e     cmpq    R8, R11	# unsigned
071     jnb,u   B41  P=0.000001 C=-1.000000

077     B8: #	out( B36 B9 ) &lt;- in( B7 )  Freq: 0.968899
077     movzbl  RDI, [R12 + R10 &lt;&lt; 3 + #16] (compressed oop addressing)	# ubyte
07d     xorl    R8, R8	# int
080     cmpl    RDI, #46
083     je     B36  P=0.000000 C=51661.000000

089     B9: #	out( B38 B10 ) &lt;- in( B8 )  Freq: 0.968898
089     cmpl    RDI, #59
08c     je     B38  P=0.000000 C=51661.000000

092     B10: #	out( B40 B11 ) &lt;- in( B9 )  Freq: 0.968898
092     cmpl    RDI, #91
095     je     B40  P=0.000000 C=51661.000000

09b     B11: #	out( B28 B12 ) &lt;- in( B10 )  Freq: 0.968897
09b     movl    RAX, RBP	# spill
09d     addl    RAX, #-3	# int
0a0     decode_heap_oop_not_null RSI,R10
0a4     movl    R10, #1	# int
0aa     movl    R11, #-2147483648	# int
0b0     cmpl    RBP, RAX
0b2     cmovll RAX, R11	# signed, int
0b6     cmpl    RAX, #1
0b9     jle     B28  P=0.000001 C=-1.000000

0bf     B12: #	out( B13 ) &lt;- in( B11 )  Freq: 0.968896
0bf     movl    R11, #4000	# int
0c5     # TLS is in R15

0c5     B13: #	out( B14 ) &lt;- in( B12 B27 ) Loop( B13-B27 ) Freq: 30.9808
0c5     movl    RCX, RAX	# spill
0c7     subl    RCX, R10	# int
0ca     cmpl    RCX, R11
0cd     cmovlgt RCX, R11	# min
0d1     addl    RCX, R10	# int

0d4     B14: #	out( B35 B15 ) &lt;- in( B13 B26 ) Loop( B14-B26 inner main of N163 strip mined) Freq: 996.121
0d4     movslq  R13, R10	# i2l
0d7     movzbl  RDI, [RSI + #16 + R13]	# ubyte
0dd     cmpl    RDI, #46
0e0     je     B35  P=0.000000 C=51661.000000

0e6     B15: #	out( B37 B16 ) &lt;- in( B14 )  Freq: 996.121
0e6     cmpl    RDI, #59
0e9     je     B37  P=0.000000 C=51661.000000

0ef     B16: #	out( B39 B17 ) &lt;- in( B15 )  Freq: 996.12
0ef     cmpl    RDI, #91
0f2     je     B39  P=0.000000 C=51661.000000

0f8     B17: #	out( B36 B18 ) &lt;- in( B16 )  Freq: 996.12
0f8     movzbl  RDI, [RSI + #17 + R13]	# ubyte
0fe     movl    R8, R10	# spill
101     incl    R8	# int
104     cmpl    RDI, #46
107     je     B36  P=0.000000 C=51661.000000

10d     B18: #	out( B38 B19 ) &lt;- in( B17 )  Freq: 996.119
10d     cmpl    RDI, #59
110     je     B38  P=0.000000 C=51661.000000

116     B19: #	out( B40 B20 ) &lt;- in( B18 )  Freq: 996.119
116     cmpl    RDI, #91
119     je     B40  P=0.000000 C=51661.000000

11f     B20: #	out( B36 B21 ) &lt;- in( B19 )  Freq: 996.118
11f     movzbl  RDI, [RSI + #18 + R13]	# ubyte
125     movl    R8, R10	# spill
128     addl    R8, #2	# int
12c     cmpl    RDI, #46
12f     je     B36  P=0.000000 C=51661.000000

135     B21: #	out( B38 B22 ) &lt;- in( B20 )  Freq: 996.118
135     cmpl    RDI, #59
138     je     B38  P=0.000000 C=51661.000000

13e     B22: #	out( B40 B23 ) &lt;- in( B21 )  Freq: 996.117
13e     cmpl    RDI, #91
141     je     B40  P=0.000000 C=51661.000000

147     B23: #	out( B36 B24 ) &lt;- in( B22 )  Freq: 996.117
147     movzbl  RDI, [RSI + #19 + R13]	# ubyte
14d     movl    R8, R10	# spill
150     addl    R8, #3	# int
154     cmpl    RDI, #46
157     je,s   B36  P=0.000000 C=51661.000000

159     B24: #	out( B38 B25 ) &lt;- in( B23 )  Freq: 996.117
159     cmpl    RDI, #59
15c     je     B38  P=0.000000 C=51661.000000

162     B25: #	out( B40 B26 ) &lt;- in( B24 )  Freq: 996.116
162     cmpl    RDI, #91
165     je     B40  P=0.000000 C=51661.000000

16b     B26: #	out( B14 B27 ) &lt;- in( B25 )  Freq: 996.116
16b     addl    R10, #4	# int
16f     cmpl    R10, RCX
172     jl     B14	# loop end  P=0.968904 C=51661.000000

178     B27: #	out( B13 B28 ) &lt;- in( B26 )  Freq: 30.9751
178     movq    R8, [R15 + #296 (32-bit)]	# ptr
17f     testl   rax, [R8]	# Safepoint: poll for GC        # jdk.internal.module.ModuleInfo$ConstantPool::checkUnqualifiedName @ bci:127  L[0]=_ L[1]=RDX L[2]=RBX L[3]=R9 L[4]=RBP L[5]=R10 L[6]=_
        # OopMap {r9=Oop rdx=Oop rsi=Oop off=383/0x17f}
182     cmpl    R10, RAX
185     jl     B13  P=0.968904 C=51661.000000

18b     B28: #	out( B34 B29 ) &lt;- in( B11 B27 )  Freq: 0.963198
18b     cmpl    R10, RBP
18e     jge,s   B34  P=0.500000 C=-1.000000

190     B29: #	out( B30 ) &lt;- in( B28 )  Freq: 0.481599
190     # castII of R10

190     B30: #	out( B43 B31 ) &lt;- in( B29 B33 ) Loop( B30-B33 inner post of N387) Freq: 0.963196
190     movzbl  RDI, [RSI + #16 + R10]	# ubyte
196     cmpl    RDI, #46
199     je     B43  P=0.000000 C=51661.000000

19f     B31: #	out( B44 B32 ) &lt;- in( B30 )  Freq: 0.963196
19f     cmpl    RDI, #59
1a2     je     B44  P=0.000000 C=51661.000000

1a8     B32: #	out( B45 B33 ) &lt;- in( B31 )  Freq: 0.963195
1a8     cmpl    RDI, #91
1ab     je     B45  P=0.000000 C=51661.000000

1b1     B33: #	out( B30 B34 ) &lt;- in( B32 )  Freq: 0.963195
1b1     incl    R10	# int
1b4     cmpl    R10, RBP
1b7     jl,s   B30	# loop end  P=0.500000 C=51661.000000

1b9     B34: #	out( N467 ) &lt;- in( B28 B4 B33 )  Freq: 0.994292
1b9     addq    rsp, 48	# Destroy frame
	popq    rbp
	movq    rscratch1, poll_offset[r15_thread] #polling_page_address
	testl   rax, [rscratch1]	# Safepoint: poll for GC

1c8     ret

1c9     B35: #	out( B36 ) &lt;- in( B14 )  Freq: 0.000474988
1c9     movl    R8, R10	# spill

1cc     B36: #	out( N467 ) &lt;- in( B43 B8 B35 B20 B17 B23 )  Freq: 0.00190087
1cc     movl    RSI, #-187	# int
1d1     movl    [rsp + #0], R8	# spill
1d5     movl    [rsp + #8], RDI	# spill
1d9     movq    [rsp + #16], RDX	# spill
1de     movl    [rsp + #12], RBX	# spill
1e2     movq    [rsp + #24], R9	# spill
1e7     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # jdk.internal.module.ModuleInfo$ConstantPool::checkUnqualifiedName @ bci:65  L[0]=_ L[1]=rsp + #16 L[2]=rsp + #12 L[3]=rsp + #24 L[4]=RBP L[5]=rsp + #0 L[6]=rsp + #8 STK[0]=rsp + #8 STK[1]=#46
        # OopMap {[16]=Oop [24]=Oop off=492/0x1ec}
1ec     ud2	# ShouldNotReachHere

200     B37: #	out( B38 ) &lt;- in( B15 )  Freq: 0.000474987
200     movl    R8, R10	# spill

203     B38: #	out( N467 ) &lt;- in( B44 B9 B37 B21 B18 B24 )  Freq: 0.00190087
203     movl    RSI, #-187	# int
208     movl    [rsp + #0], R8	# spill
20c     movl    [rsp + #8], RDI	# spill
210     movq    [rsp + #16], RDX	# spill
215     movl    [rsp + #12], RBX	# spill
219     movq    [rsp + #24], R9	# spill
        nop 	# 1 bytes pad for loops and calls
21f     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # jdk.internal.module.ModuleInfo$ConstantPool::checkUnqualifiedName @ bci:72  L[0]=_ L[1]=rsp + #16 L[2]=rsp + #12 L[3]=rsp + #24 L[4]=RBP L[5]=rsp + #0 L[6]=rsp + #8 STK[0]=rsp + #8 STK[1]=#59
        # OopMap {[16]=Oop [24]=Oop off=548/0x224}
224     ud2	# ShouldNotReachHere

238     B39: #	out( B40 ) &lt;- in( B16 )  Freq: 0.000474987
238     movl    R8, R10	# spill

23b     B40: #	out( N467 ) &lt;- in( B45 B10 B39 B22 B19 B25 )  Freq: 0.00190087
23b     movl    RSI, #-187	# int
240     movl    [rsp + #0], R8	# spill
244     movl    [rsp + #8], RDI	# spill
248     movq    [rsp + #16], RDX	# spill
24d     movl    [rsp + #12], RBX	# spill
251     movq    [rsp + #24], R9	# spill
        nop 	# 1 bytes pad for loops and calls
257     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # jdk.internal.module.ModuleInfo$ConstantPool::checkUnqualifiedName @ bci:79  L[0]=_ L[1]=rsp + #16 L[2]=rsp + #12 L[3]=rsp + #24 L[4]=RBP L[5]=rsp + #0 L[6]=rsp + #8 STK[0]=rsp + #8 STK[1]=#91
        # OopMap {[16]=Oop [24]=Oop off=604/0x25c}
25c     ud2	# ShouldNotReachHere

270     B41: #	out( N467 ) &lt;- in( B7 B5 B6 )  Freq: 2.91957e-06
270     movl    RSI, #-138	# int
275     movq    [rsp + #0], RDX	# spill
279     movl    [rsp + #8], RBX	# spill
27d     movq    [rsp + #16], R9	# spill
        nop 	# 1 bytes pad for loops and calls
283     call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # jdk.internal.module.ModuleInfo$ConstantPool::checkUnqualifiedName @ bci:50  L[0]=_ L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #16 L[4]=RBP L[5]=#0 L[6]=_ STK[0]=#0 STK[1]=RBP
        # OopMap {[0]=Oop [16]=Oop off=648/0x288}
288     ud2	# ShouldNotReachHere

29c     B42: #	out( N467 ) &lt;- in( B3 )  Freq: 4.76836e-07
29c     movl    RSI, #-187	# int
2a1     movq    [rsp + #0], RDX	# spill
2a5     movl    [rsp + #8], RBX	# spill
2a9     movq    [rsp + #16], R9	# spill
        nop 	# 1 bytes pad for loops and calls
2af     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # jdk.internal.module.ModuleInfo$ConstantPool::checkUnqualifiedName @ bci:8  L[0]=_ L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #16 L[4]=RBP L[5]=_ L[6]=_ STK[0]=RBP
        # OopMap {[0]=Oop [16]=Oop off=692/0x2b4}
2b4     ud2	# ShouldNotReachHere

2c8     B43: #	out( B36 ) &lt;- in( B30 )  Freq: 4.59288e-07
2c8     movl    R8, R10	# spill
2cb     jmp     B36

2d0     B44: #	out( B38 ) &lt;- in( B31 )  Freq: 4.59288e-07
2d0     movl    R8, R10	# spill
2d3     jmp     B38

2d8     B45: #	out( B40 ) &lt;- in( B32 )  Freq: 4.59287e-07
2d8     movl    R8, R10	# spill
2db     jmp     B40

2e0     B46: #	out( N467 ) &lt;- in( B1 )  Freq: 1.01328e-06
2e0     movl    RSI, #-10	# int
        nop 	# 2 bytes pad for loops and calls
2e7     call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # jdk.internal.module.ModuleInfo$ConstantPool::checkUnqualifiedName @ bci:1  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL
        # OopMap {off=748/0x2ec}
2ec     ud2	# ShouldNotReachHere

300     B47: #	out( N467 ) &lt;- in( B2 )  Freq: 1.01328e-06
300     movl    RSI, #-10	# int
        nop 	# 2 bytes pad for loops and calls
307     call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.String::length @ bci:4  L[0]=_ STK[0]=#NULL
        # jdk.internal.module.ModuleInfo$ConstantPool::checkUnqualifiedName @ bci:1  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap {off=780/0x30c}
30c     ud2	# ShouldNotReachHere

--------------------------------------------------------------------------------
</opto_assembly>
<writer thread='24067'/>
        
<writer thread='24323'/>
                              @ 1   java.lang.StringLatin1::canEncode (13 bytes)   inline (hot)
                              @ 41   java.lang.StringLatin1::canEncode (13 bytes)   inline (hot)
                              @ 49   java.lang.StringConcatHelper::newArray (26 bytes)   force inline by annotation
                                @ 19   jdk.internal.misc.Unsafe::allocateUninitializedArray (55 bytes)   too big
                              @ 123   java.lang.String::&lt;init&gt; (15 bytes)   inline (hot)
                                @ 1   java.lang.Object::&lt;init&gt; (1 bytes)   inline (hot)
<writer thread='24067'/>
         @ 1  
<writer thread='25091'/>
    785   55  s    3       java.io.BufferedInputStream::read (49 bytes)   made not entrant
<writer thread='24067'/>
 java.util.AbstractCollection::&lt;init&gt; (5 bytes)
<writer thread='25091'/>
                              @ 12   java.io.BufferedInputStream::fill (203 bytes)   too big
                              @ 29   java.io.BufferedInputStream::getBufIfOpen (21 bytes)   inline (hot)
<writer thread='42499'/>
    785  246       3       java.util.Objects::hashCode (13 bytes)
<writer thread='40195'/>
    785  244       3       java.lang.module.ModuleDescriptor$Requires::hashCode (63 bytes)
<writer thread='24323'/>
    785  245       4       java.util.HashMap::putVal (300 bytes)
<writer thread='24067'/>
                                @ 1   java.lang.Object::
<writer thread='43011'/>
    785  158       3       jdk.internal.module.ModuleInfo$ConstantPool::checkUnqualifiedName (131 bytes)   made not entrant
<writer thread='24067'/>
&lt;init&gt; (1 bytes)
<writer thread='43011'/>
                              @ 1   java.lang.String::length (11 bytes)   inline (hot)
                                @ 6   java.lang.String::coder (15 bytes)   inline (hot)
                              @ 56   java.lang.String::charAt (25 bytes)   inline (hot)
                                @ 1   java.lang.String::isLatin1 (19 bytes)   inline (hot)
                                @ 12   java.lang.StringLatin1::charAt (28 bytes)   inline (hot)
<writer thread='25091'/>
    785  187       4       java.lang.String::hashCode (60 bytes)
<writer thread='40963'/>
    785  184       3       java.lang.String::lastIndexOf (12 bytes)
<writer thread='42499'/>
                              
<writer thread='43011'/>
    785  235       4       java.lang.String::indexOf (7 bytes)
<writer thread='42499'/>
@ 5   java.lang.Object::
<writer thread='40195'/>
                              
<writer thread='42499'/>
hashCode
<writer thread='40963'/>
             
<writer thread='40195'/>
@ 4   java.lang.String::
<writer thread='42499'/>
 (0 bytes)   no static binding
<writer thread='40963'/>
                 @ 3  
<writer thread='40195'/>
hashCode
<writer thread='40963'/>
 java.lang.String::
<writer thread='40195'/>
 (60 bytes)
<writer thread='40963'/>
length (11 bytes)
<writer thread='40195'/>
   callee is too large
                              @ 14   java.util.Set::hashCode
<writer thread='40963'/>
             
<writer thread='40195'/>
 (0 bytes)   no static binding
<writer thread='40963'/>
                   @ 6   java.lang.String::coder (15 bytes)
<writer thread='40195'/>
                              @ 36  java/lang/module/ModuleDescriptor$Version::hashCode (not loaded)   not inlineable
                              @ 56   java.lang.String::hashCode (60 bytes)   callee is too large
<writer thread='40963'/>
                              @ 8   java.lang.String::lastIndexOf (29 bytes)
                     
<writer thread='24067'/>
    786  230       1       java.lang.module.ModuleReference::descriptor (5 bytes)
<writer thread='40963'/>
           @ 1   java.lang.String::isLatin1 (19 bytes)
<writer thread='42499'/>
    787  223       3       java.lang.String::lastIndexOf (29 bytes)
<writer thread='24067'/>
    787  136       3       java.lang.System::getSecurityManager (12 bytes)
<writer thread='42499'/>
                              @ 1   java.lang.String::isLatin1 (19 bytes)
<writer thread='24067'/>
                              @ 0   java.lang.System::allowSecurityManager (13 bytes)
<writer thread='42499'/>
                              @ 13   java.lang.StringLatin1::lastIndexOf (40 bytes)   callee is too large
                              @ 25   java.lang.StringUTF16::lastIndexOf (47 bytes)   callee is too large
<writer thread='9219'/>
    788  247     n 0       java.lang.invoke.MethodHandle::linkToStatic(LL)I (native)   (static)
<writer thread='40963'/>
                                @ 13   java.lang.StringLatin1::lastIndexOf (40 bytes)   callee is too large
<writer thread='40195'/>
    789  137       3       java.lang.System::allowSecurityManager (13 bytes)
<writer thread='40963'/>
                                @ 25   java.lang.StringUTF16::lastIndexOf (47 bytes)   callee is too large
<writer thread='24067'/>
    789  202       1       sun.nio.fs.UnixFileSystem::provider (5 bytes)
    790  210       1       sun.nio.fs.NativeBuffer::setOwner (6 bytes)
<writer thread='42499'/>
    791  214       1       java.nio.Buffer::capacity (5 bytes)
    791  216       1       java.util.concurrent.locks.ReentrantReadWriteLock::readLock (5 bytes)
<writer thread='24067'/>
    791  227       1       java.lang.module.ModuleDescriptor$Requires::name (5 bytes)
<writer thread='40195'/>
    792  213       1       java.util.concurrent.locks.AbstractQueuedSynchronizer::getState (5 bytes)
<writer thread='42499'/>
    792  231       1       java.lang.module.ModuleDescriptor::name (5 bytes)
<writer thread='24067'/>
    792  248       1       java.lang.invoke.MethodHandle::type (5 bytes)
<writer thread='40195'/>
    793  249       1       java.lang.invoke.MethodType$ConcurrentWeakInternSet$WeakEntry::hashCode (5 bytes)
<writer thread='24067'/>
    793  250       3       jdk.internal.org.objectweb.asm.SymbolTable::addConstantClass (8 bytes)
                              @ 4   jdk.internal.org.objectweb.asm.SymbolTable::addConstantUtf8Reference (101 bytes)   callee is too large
<writer thread='42499'/>
    794  251       3       java.lang.invoke.MemberName::isConstructor (8 bytes)
                              @ 4   java.lang.invoke.MemberName::testAllFlags (7 bytes)
<writer thread='9219'/>
    795  252     n 0       java.lang.invoke.MethodHandle::linkToVirtual(LL)L (native)   (static)
<writer thread='42499'/>
                                @ 3   java.lang.invoke.MemberName::testFlags (16 bytes)
<writer thread='40963'/>
    796  253       3       sun.invoke.util.BytecodeDescriptor::unparseSig (91 bytes)
<writer thread='24067'/>
    797  254       3       sun.invoke.util.Wrapper::forBasicType (16 bytes)
<writer thread='40963'/>
                              @ 1   sun.invoke.util.Wrapper::forBasicType (16 bytes)
<writer thread='24067'/>
                              @ 1   java.lang.Class::isPrimitive (0 bytes)   intrinsic
<writer thread='40963'/>
                                @ 1   java.lang.Class::isPrimitive (0 bytes)   intrinsic
<writer thread='24067'/>
                              @ 8   sun.invoke.util.Wrapper::forPrimitiveType (49 bytes)   callee is too large
<writer thread='40963'/>
                                @ 8   sun.invoke.util.Wrapper::forPrimitiveType (49 bytes)   callee is too large
                              @ 4   sun.invoke.util.Wrapper::basicTypeChar (5 bytes)
                              @ 16   java.lang.StringBuilder::append (8 bytes)
                                @ 2   java.lang.AbstractStringBuilder::append (77 bytes)   callee is too large
                              @ 32   java.lang.StringBuilder::append (8 bytes)
                                @ 2   java.lang.AbstractStringBuilder::append (45 bytes)   callee is too large
                              @ 40   java.lang.Class::isArray (0 bytes)   native method
                              @ 59   java.lang.StringBuilder::append (8 bytes)
                                @ 2   java.lang.AbstractStringBuilder::append (77 bytes)   callee is too large
                              @ 65   java.lang.Class::getName (18 bytes)
                                @ 14   java.lang.Class::initClassName (0 bytes)   native method
                              @ 72   java.lang.String::replace (42 bytes)   callee is too large
                              @ 75   java.lang.StringBuilder::append (8 bytes)
                                @ 2   java.lang.AbstractStringBuilder::append (45 bytes)   callee is too large
                              @ 86   java.lang.StringBuilder::append (8 bytes)
                                @ 2   java.lang.AbstractStringBuilder::append (77 bytes)   callee is too large
<writer thread='9219'/>
    804  255     n 0       java.lang.invoke.MethodHandle::linkToSpecial(LL)I (native)   (static)
<writer thread='40195'/>
    805  256       1       java.lang.invoke.LambdaForm$Name::type (5 bytes)
<writer thread='24067'/>
    805  257       1       java.lang.invoke.LambdaForm$BasicType::basicTypeClass (5 bytes)
<writer thread='40195'/>
    806  258       3       java.lang.invoke.MemberName::initResolved (53 bytes)
<writer thread='24067'/>
    806  259       3       java.lang.invoke.MethodType::equals (56 bytes)
                              @ 19   java.lang.invoke.MethodType::equals (31 bytes)
                                @ 19   java.util.Arrays::equals (57 bytes)   callee is too large
                              @ 34   java.lang.ref.Reference::get (5 bytes)   intrinsic
                              @ 50   java.lang.invoke.MethodType::equals (31 bytes)
                                @ 19   java.util.Arrays::equals (57 bytes)   callee is too large
<writer thread='43011'/>

============================= C2-compiled nmethod ==============================
<opto_assembly compile_id='235'>
----------------------- MetaData before Compile_id = 235 ------------------------
{method}
 - this oop:          0x00000001269a1ac0
 - method holder:     &apos;java/lang/String&apos;
 - constants:         0x000000012699b360 constant pool [1059]/operands[28] {0x000000012699b360} for &apos;java/lang/String&apos; cache=0x0000000126aba220
 - access:            0x81000001  public 
 - name:              &apos;indexOf&apos;
 - signature:         &apos;(I)I&apos;
 - max stack:         4
 - max locals:        2
 - size of params:    2
 - method size:       13
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x000000010c0a1de0
 - adapters:          AHE@0x00007f99308e1840: 0xba000000 i2c: 0x000000010c0e89e0 c2i: 0x000000010c0e8ac6 c2iUV: 0x000000010c0e8a8d c2iNCI: 0x000000010c0e8b03
 - compiled entry     0x000000010c7e4e40
 - code size:         7
 - code start:        0x00000001269a1a98
 - code end (excl):   0x00000001269a1a9f
 - method data:       0x0000000126dd12d0
 - checked ex length: 0
 - linenumber start:  0x00000001269a1a9f
 - localvar length:   2
 - localvar start:    0x00000001269a1aa6
 - compiled code: nmethod    809   60       3       java.lang.String::indexOf (7 bytes)

------------------------ OptoAssembly for Compile_id = 235 -----------------------
#
#  int ( java/lang/String:NotNull:exact *, int )
#
#r018 rsi:rsi   : parm 0: java/lang/String:NotNull:exact *
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 48 --
#r583 rsp+44: in_preserve
#r582 rsp+40: return address
#r581 rsp+36: in_preserve
#r580 rsp+32: saved fp register
#r579 rsp+28: pad2, stack alignment
#r578 rsp+24: pad2, stack alignment
#r577 rsp+20: Fixed slot 1
#r576 rsp+16: Fixed slot 0
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N303: #	out( B1 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B36 B2 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (472 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

02c     movq    R10, RSI	# spill
02f     movsbl  RBP, [RSI + #20 (8-bit)]	# byte ! Field: java/lang/String.coder (constant)
033     testl   RBP, RBP
035     jne     B36  P=0.000000 C=70243.000000

03b     B2: #	out( B37 B3 ) &lt;- in( B1 )  Freq: 1
03b     movl    R11, [RSI + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value (constant)
03f     movl    RBP, RDX	# spill
041     shrl    RBP, #8
044     testl   RBP, RBP
046     jne     B37  P=0.000000 C=13206.000000

04c     B3: #	out( B38 B4 ) &lt;- in( B2 )  Freq: 0.999999
04c     movl    RBP, [R12 + R11 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
051     NullCheck R11

051     B4: #	out( B27 B5 ) &lt;- in( B3 )  Freq: 0.999998
051     movl    RAX, #-1	# int
056     testl   RBP, RBP	# unsigned
058     jbe,u   B27  P=0.069458 C=1051.000000

05e     B5: #	out( B35 B6 ) &lt;- in( B4 )  Freq: 0.930541
05e     movsbl  RBX, RDX	# i2b
061     movl    R9, RBP	# spill
064     decl    R9	# int
067     cmpl    R9, RBP	# unsigned
06a     jnb,u   B35  P=0.000001 C=-1.000000

070     B6: #	out( B34 B7 ) &lt;- in( B5 )  Freq: 0.93054
070     movsbl  R10, [R12 + R11 &lt;&lt; 3 + #16] (compressed oop addressing)	# byte
076     cmpl    R10, RBX
079     je     B34  P=0.008589 C=26545.000000

07f     B7: #	out( B20 B8 ) &lt;- in( B6 )  Freq: 0.922547
07f     movl    R10, RBP	# spill
082     addl    R10, #-7	# int
086     decode_heap_oop_not_null RCX,R11
08a     movl    R8, #1	# int
090     movl    R11, #-2147483648	# int
096     cmpl    R9, R10
099     cmovll R10, R11	# signed, int
09d     cmpl    R10, #1
0a1     jle     B20  P=0.000001 C=-1.000000

0a7     B8: #	out( B9 ) &lt;- in( B7 )  Freq: 0.922546
0a7     movl    R9, #8000	# int

0ad     B9: #	out( B10 ) &lt;- in( B8 B19 ) Loop( B9-B19 ) Freq: 1.26399
0ad     movl    RDX, R10	# spill
0b0     subl    RDX, R8	# int
0b3     cmpl    RDX, R9
0b6     cmovlgt RDX, R9	# min
0ba     addl    RDX, R8	# int
        nop 	# 3 bytes pad for loops and calls

0c0     B10: #	out( B26 B11 ) &lt;- in( B9 B18 ) Loop( B10-B18 inner main of N127 strip mined) Freq: 13.6901
0c0     movslq  RDI, R8	# i2l
0c3     movsbl  R11, [RCX + #16 + RDI]	# byte
0c9     cmpl    R11, RBX
0cc     je     B26  P=0.008589 C=26545.000000

0d2     B11: #	out( B25 B12 ) &lt;- in( B10 )  Freq: 13.5725
0d2     movsbl  R11, [RCX + #17 + RDI]	# byte
0d8     cmpl    R11, RBX
0db     je     B25  P=0.008589 C=26545.000000

0e1     B12: #	out( B28 B13 ) &lt;- in( B11 )  Freq: 13.4559
0e1     movsbl  R11, [RCX + #18 + RDI]	# byte
0e7     cmpl    R11, RBX
0ea     je     B28  P=0.008589 C=26545.000000

0f0     B13: #	out( B29 B14 ) &lt;- in( B12 )  Freq: 13.3404
0f0     movsbl  R11, [RCX + #19 + RDI]	# byte
0f6     cmpl    R11, RBX
0f9     je     B29  P=0.008589 C=26545.000000

0ff     B14: #	out( B30 B15 ) &lt;- in( B13 )  Freq: 13.2258
0ff     movsbl  R11, [RCX + #20 + RDI]	# byte
105     cmpl    R11, RBX
108     je,s   B30  P=0.008589 C=26545.000000

10a     B15: #	out( B31 B16 ) &lt;- in( B14 )  Freq: 13.1122
10a     movsbl  R11, [RCX + #21 + RDI]	# byte
110     cmpl    R11, RBX
113     je,s   B31  P=0.008589 C=26545.000000

115     B16: #	out( B32 B17 ) &lt;- in( B15 )  Freq: 12.9996
115     movsbl  R11, [RCX + #22 + RDI]	# byte
11b     cmpl    R11, RBX
11e     je,s   B32  P=0.008589 C=26545.000000

120     B17: #	out( B33 B18 ) &lt;- in( B16 )  Freq: 12.8879
120     movsbl  R11, [RCX + #23 + RDI]	# byte
126     cmpl    R11, RBX
129     je,s   B33  P=0.008589 C=26545.000000

12b     B18: #	out( B10 B19 ) &lt;- in( B17 )  Freq: 12.7772
12b     addl    R8, #8	# int
12f     cmpl    R8, RDX
132     jl,s   B10	# loop end  P=0.972522 C=26317.000000

134     B19: #	out( B9 B20 ) &lt;- in( B18 )  Freq: 0.351087
134     # TLS is in R15
134     movq    R11, [R15 + #296 (32-bit)]	# ptr
13b     testl   rax, [R11]	# Safepoint: poll for GC        # java.lang.StringLatin1::indexOf @ bci:56  L[0]=RCX L[1]=_ L[2]=_ L[3]=RBP L[4]=RBX L[5]=R8
        # java.lang.String::indexOf @ bci:13  L[0]=_ L[1]=_ L[2]=_
        # java.lang.String::indexOf @ bci:3  L[0]=_ L[1]=_
        # OopMap {rcx=Oop off=315/0x13b}
13e     cmpl    R8, R10
141     jl     B9  P=0.972522 C=26317.000000

147     B20: #	out( B27 B21 ) &lt;- in( B7 B19 )  Freq: 0.00964794
147     cmpl    R8, RBP
14a     jge,s   B27  P=0.500000 C=-1.000000

14c     B21: #	out( B22 ) &lt;- in( B20 )  Freq: 0.00482397
14c     # castII of R8

14c     B22: #	out( B26 B23 ) &lt;- in( B21 B23 ) Loop( B22-B23 inner post of N294) Freq: 0.00956578
14c     movsbl  R10, [RCX + #16 + R8]	# byte
152     cmpl    R10, RBX
155     je,s   B26  P=0.008589 C=26545.000000

157     B23: #	out( B22 B24 ) &lt;- in( B22 )  Freq: 0.00948362
157     incl    R8	# int
15a     cmpl    R8, RBP
15d     jl,s   B22	# loop end  P=0.500000 C=26317.000000

15f     B24: #	out( B27 ) &lt;- in( B23 )  Freq: 0.00474181
15f     jmp,s   B27

161     B25: #	out( B26 ) &lt;- in( B11 )  Freq: 0.116577
161     incl    R8	# int

164     B26: #	out( B27 ) &lt;- in( B22 B34 B10 B30 B28 B32 B25 B31 B29 B33 )  Freq: 0.920974
164     movl    RAX, R8	# spill

167     B27: #	out( N303 ) &lt;- in( B4 B26 B24 B20 )  Freq: 0.999997
167     addq    rsp, 32	# Destroy frame
	popq    rbp
	movq    rscratch1, poll_offset[r15_thread] #polling_page_address
	testl   rax, [rscratch1]	# Safepoint: poll for GC

176     ret

177     B28: #	out( B26 ) &lt;- in( B12 )  Freq: 0.115576
177     addl    R8, #2	# int
17b     jmp,s   B26

17d     B29: #	out( B26 ) &lt;- in( B13 )  Freq: 0.114583
17d     addl    R8, #3	# int
181     jmp,s   B26

183     B30: #	out( B26 ) &lt;- in( B14 )  Freq: 0.113599
183     addl    R8, #4	# int
187     jmp,s   B26

189     B31: #	out( B26 ) &lt;- in( B15 )  Freq: 0.112623
189     addl    R8, #5	# int
18d     jmp,s   B26

18f     B32: #	out( B26 ) &lt;- in( B16 )  Freq: 0.111656
18f     addl    R8, #6	# int
193     jmp,s   B26

195     B33: #	out( B26 ) &lt;- in( B17 )  Freq: 0.110697
195     addl    R8, #7	# int
199     jmp,s   B26

19b     B34: #	out( B26 ) &lt;- in( B6 )  Freq: 0.0079926
19b     xorl    R8, R8	# int
19e     jmp,s   B26

1a0     B35: #	out( N303 ) &lt;- in( B5 )  Freq: 9.42897e-07
1a0     movl    RSI, #-138	# int
1a5     movl    [rsp + #0], RBX	# spill
1a8     movl    [rsp + #4], R11	# spill
        nop 	# 2 bytes pad for loops and calls
1af     call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.StringLatin1::indexOf @ bci:38  L[0]=rsp + #4 L[1]=_ L[2]=_ L[3]=RBP L[4]=rsp + #0 L[5]=#0 STK[0]=#0 STK[1]=RBP
        # java.lang.String::indexOf @ bci:13  L[0]=_ L[1]=_ L[2]=_
        # java.lang.String::indexOf @ bci:3  L[0]=_ L[1]=_
        # OopMap {[4]=NarrowOop off=436/0x1b4}
1b4     ud2	# ShouldNotReachHere

1c8     B36: #	out( N303 ) &lt;- in( B1 )  Freq: 5e-07
1c8     movl    RSI, #-187	# int
1cd     movq    [rsp + #0], R10	# spill
1d1     movl    [rsp + #8], RDX	# spill
        nop 	# 2 bytes pad for loops and calls
1d7     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.String::isLatin1 @ bci:10  L[0]=_ STK[0]=RBP
        # java.lang.String::indexOf @ bci:1  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=#0
        # java.lang.String::indexOf @ bci:3  L[0]=_ L[1]=_
        # OopMap {[0]=Oop off=476/0x1dc}
1dc     ud2	# ShouldNotReachHere

1f0     B37: #	out( N303 ) &lt;- in( B2 )  Freq: 5e-07
1f0     movl    RSI, #-187	# int
1f5     movl    [rsp + #0], R11	# spill
1f9     movl    [rsp + #4], RDX	# spill
        nop 	# 2 bytes pad for loops and calls
1ff     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.StringLatin1::canEncode @ bci:4  L[0]=_ STK[0]=RBP
        # java.lang.StringLatin1::indexOf @ bci:1  L[0]=rsp + #0 L[1]=rsp + #4 L[2]=#0 L[3]=_ L[4]=_ L[5]=_
        # java.lang.String::indexOf @ bci:13  L[0]=_ L[1]=_ L[2]=_
        # java.lang.String::indexOf @ bci:3  L[0]=_ L[1]=_
        # OopMap {[0]=NarrowOop off=516/0x204}
204     ud2	# ShouldNotReachHere

218     B38: #	out( N303 ) &lt;- in( B3 )  Freq: 1.01328e-06
218     movl    RSI, #-10	# int
        nop 	# 2 bytes pad for loops and calls
21f     call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.StringLatin1::indexOf @ bci:10  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ STK[0]=#NULL
        # java.lang.String::indexOf @ bci:13  L[0]=_ L[1]=_ L[2]=_
        # java.lang.String::indexOf @ bci:3  L[0]=_ L[1]=_
        # OopMap {off=548/0x224}
224     ud2	# ShouldNotReachHere

--------------------------------------------------------------------------------
</opto_assembly>
<writer thread='42499'/>
    814  260       3       jdk.internal.org.objectweb.asm.Handler::getExceptionTableLength (21 bytes)
<writer thread='40963'/>
    814  261       3       java.lang.invoke.DirectMethodHandle::internalMemberName (8 bytes)
<writer thread='40195'/>
    814  262       3       java.lang.ref.Reference::reachabilityFence (1 bytes)
<writer thread='24067'/>
    814  263       3       java.util.ImmutableCollections$SetN$SetNIterator::next (47 bytes)
<writer thread='43011'/>
    814   60       3       java.lang.String::indexOf (7 bytes)   made not entrant
                              @ 3   java.lang.String::indexOf (29 bytes)   inline (hot)
                                @ 1   java.lang.String::isLatin1 (19 bytes)   inline (hot)
                                @ 13   java.lang.StringLatin1::indexOf (61 bytes)   inline (hot)
                                  @ 1   java.lang.StringLatin1::canEncode (13 bytes)   inline (hot)
    815  238       4       java.lang.AbstractStringBuilder::ensureCapacityInternal (39 bytes)
<writer thread='24067'/>
                              @ 15   java.util.ImmutableCollections$SetN$SetNIterator::nextIndex (56 bytes)   callee is too large
                              @ 43  java/util/NoSuchElementException::&lt;init&gt; (not loaded)   not inlineable
<writer thread='40963'/>
    816  267       3       java.util.stream.ReferencePipeline$2$1::accept (27 bytes)
<writer thread='40195'/>
    816  264       1       java.util.stream.FindOps$FindSink::cancellationRequested (5 bytes)
<writer thread='40963'/>
                              @ 8   java.util.function.Predicate::test (0 bytes)   no static binding
                              @ 21   java.util.stream.Sink::accept (10 bytes)   no static binding
<writer thread='42499'/>
    816  266       1       java.util.Spliterators$IteratorSpliterator::characteristics (5 bytes)
<writer thread='40195'/>
    817  265       3       java.util.ImmutableCollections$SetN$SetNIterator::hasNext (13 bytes)
<writer thread='25091'/>

============================= C2-compiled nmethod ==============================
<opto_assembly compile_id='187'>
----------------------- MetaData before Compile_id = 187 ------------------------
{method}
 - this oop:          0x00000001269a19f8
 - method holder:     &apos;java/lang/String&apos;
 - constants:         0x000000012699b360 constant pool [1059]/operands[28] {0x000000012699b360} for &apos;java/lang/String&apos; cache=0x0000000126aba220
 - access:            0x81000001  public 
 - name:              &apos;hashCode&apos;
 - signature:         &apos;()I&apos;
 - max stack:         3
 - max locals:        2
 - size of params:    1
 - method size:       13
 - highest level:     3
 - vtable index:      3
 - i2i entry:         0x000000010c0a1de0
 - adapters:          AHE@0x00007f99308e1660: 0xb0000000 i2c: 0x000000010c0e9ee0 c2i: 0x000000010c0e9fc3 c2iUV: 0x000000010c0e9f8a c2iNCI: 0x000000010c0ea000
 - compiled entry     0x000000010c7d3940
 - code size:         60
 - code start:        0x00000001269a1990
 - code end (excl):   0x00000001269a19cc
 - method data:       0x0000000126c5aca0
 - checked ex length: 0
 - linenumber start:  0x00000001269a19cc
 - localvar length:   2
 - localvar start:    0x00000001269a19de
 - compiled code: nmethod    818    5       3       java.lang.String::hashCode (60 bytes)

------------------------ OptoAssembly for Compile_id = 187 -----------------------
#
#  int ( java/lang/String:NotNull:exact * )
#
#r018 rsi:rsi   : parm 0: java/lang/String:NotNull:exact *
# -- Old rsp -- Framesize: 48 --
#r583 rsp+44: in_preserve
#r582 rsp+40: return address
#r581 rsp+36: in_preserve
#r580 rsp+32: saved fp register
#r579 rsp+28: pad2, stack alignment
#r578 rsp+24: pad2, stack alignment
#r577 rsp+20: Fixed slot 1
#r576 rsp+16: Fixed slot 0
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N286: #	out( B1 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B21 B2 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (272 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

02c     movl    RAX, [RSI + #16 (8-bit)]	# int ! Field: java/lang/String.hash
02f     testl   RAX, RAX
031     jne     B21  P=0.779990 C=17431.000000

037     B2: #	out( B23 B3 ) &lt;- in( B1 )  Freq: 0.22001
037     movzbl  R10, [RSI + #21 (8-bit)]	# ubyte ! Field: java/lang/String.hashIsZero
03c     testl   R10, R10
03f     jne     B23  P=0.000782 C=3835.000000

045     B3: #	out( B25 B4 ) &lt;- in( B2 )  Freq: 0.219838
045     movsbl  RBP, [RSI + #20 (8-bit)]	# byte ! Field: java/lang/String.coder (constant)
049     testl   RBP, RBP
04b     jne     B25  P=0.000000 C=70241.000000

051     B4: #	out( B26 B5 ) &lt;- in( B3 )  Freq: 0.219838
051     movl    RBP, [RSI + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value (constant)
054     movl    R11, [R12 + RBP &lt;&lt; 3 + #12] (compressed oop addressing)	# range
059     NullCheck RBP

059     B5: #	out( B22 B6 ) &lt;- in( B4 )  Freq: 0.219838
059     testl   R11, R11	# unsigned
05c     jbe,u   B22  P=0.043037 C=27790.000000

062     B6: #	out( B24 B7 ) &lt;- in( B5 )  Freq: 0.210377
062     movl    R10, R11	# spill
065     decl    R10	# int
068     cmpl    R10, R11	# unsigned
06b     jnb,u   B24  P=0.000001 C=-1.000000

071     B7: #	out( B17 B8 ) &lt;- in( B6 )  Freq: 0.210377
071     movzbl  R8, [R12 + RBP &lt;&lt; 3 + #16] (compressed oop addressing)	# ubyte
077     movl    R14, R11	# spill
07a     addl    R14, #-7	# int
07e     decode_heap_oop_not_null RDI,RBP
082     movl    R9, #1	# int
088     cmpl    R14, #1
08c     jle     B17  P=0.000001 C=-1.000000

092     B8: #	out( B13 ) &lt;- in( B7 )  Freq: 0.210376
092     movl    RCX, R8	# spill
095     sall    RCX, #5
098     subl    RCX, R8	# int
09b     # TLS is in R15
09b     jmp,s   B13

09d     B9: #	out( B10 ) &lt;- in( B17 )  Freq: 0.105188
09d     # castII of R9

09d     B10: #	out( B19 B11 ) &lt;- in( B9 B11 ) Loop( B10-B11 inner post of N270) Freq: 0.210377
09d     movzbl  R10, [RDI + #16 + R9]	# ubyte
0a3     movl    RAX, R8	# spill
0a6     sall    RAX, #5
0a9     subl    RAX, R8	# int
0ac     addl    RAX, R10	# int
0af     incl    R9	# int
0b2     cmpl    R9, R11
0b5     jge     B19	# loop end  P=0.500000 C=26594.000000

0bb     B11: #	out( B10 ) &lt;- in( B10 )  Freq: 0.105188
0bb     movl    R8, RAX	# spill
0be     jmp,s   B10

0c0     B12: #	out( B13 ) &lt;- in( B15 ) top-of-loop Freq: 4.67788
0c0     movdq   RSI, XMM0	# spill

0c5     B13: #	out( B14 ) &lt;- in( B8 B12 ) Loop( B13-B12 ) Freq: 4.88826
0c5     movl    R8, R11	# spill
0c8     subl    R8, R9	# int
0cb     addl    R8, #-7	# int
0cf     movl    R10, #8000	# int
0d5     cmpl    R10, R8
0d8     cmovlgt R10, R8	# min
0dc     addl    R10, R9	# int
0df     movdq   XMM0, RSI	# spill
        nop 	# 12 bytes pad for loops and calls

0f0     B14: #	out( B14 B15 ) &lt;- in( B13 B14 ) Loop( B14-B14 inner main of N94 strip mined) Freq: 113.583
0f0     movslq  RSI, R9	# i2l
0f3     movzbl  RBX, [RDI + #16 + RSI]	# ubyte
0f8     movzbl  RAX, [RDI + #23 + RSI]	# ubyte
0fd     movzbl  RBP, [RDI + #17 + RSI]	# ubyte
102     movzbl  R8, [RDI + #22 + RSI]	# ubyte
108     addl    RCX, RBX	# int
10a     movzbl  RBX, [RDI + #20 + RSI]	# ubyte
10f     movl    RDX, RCX	# spill
111     sall    RDX, #5
114     subl    RDX, RCX	# int
116     addl    RDX, RBP	# int
118     movzbl  RBP, [RDI + #19 + RSI]	# ubyte
11d     movl    RCX, RDX	# spill
11f     sall    RCX, #5
122     subl    RCX, RDX	# int
124     movzbl  RDX, [RDI + #18 + RSI]	# ubyte
129     addl    RCX, RDX	# int
12b     movzbl  RDX, [RDI + #21 + RSI]	# ubyte
130     movl    R13, RCX	# spill
133     sall    R13, #5
137     subl    R13, RCX	# int
13a     addl    R13, RBP	# int
13d     movl    RCX, R13	# spill
140     sall    RCX, #5
143     subl    RCX, R13	# int
146     addl    RCX, RBX	# int
148     movl    RSI, RCX	# spill
14a     sall    RSI, #5
14d     subl    RSI, RCX	# int
14f     addl    RSI, RDX	# int
151     movl    RCX, RSI	# spill
153     sall    RCX, #5
156     subl    RCX, RSI	# int
158     addl    RCX, R8	# int
15b     movl    R8, RCX	# spill
15e     sall    R8, #5
162     subl    R8, RCX	# int
165     addl    R8, RAX	# int
168     movl    RCX, R8	# spill
16b     sall    RCX, #5
16e     subl    RCX, R8	# int
171     addl    R9, #8	# int
175     cmpl    R9, R10
178     jl     B14	# loop end  P=0.956963 C=26594.000000

17e     B15: #	out( B12 B16 ) &lt;- in( B14 )  Freq: 4.88826
17e     movq    R10, [R15 + #296 (32-bit)]	# ptr
185     testl   rax, [R10]	# Safepoint: poll for GC        # java.lang.StringLatin1::hashCode @ bci:37  L[0]=_ L[1]=R8 L[2]=RDI L[3]=R11 L[4]=R9 L[5]=_
        # java.lang.String::hashCode @ bci:27  L[0]=XMM0 L[1]=_
        # OopMap {rdi=Oop xmm0=Oop off=389/0x185}
188     cmpl    R9, R14
18b     jl     B12  P=0.956963 C=26594.000000

191     B16: #	out( B17 ) &lt;- in( B15 )  Freq: 0.210376
191     movdq   RSI, XMM0	# spill

196     B17: #	out( B9 B18 ) &lt;- in( B7 B16 )  Freq: 0.210377
196     cmpl    R9, R11
199     jl     B9  P=0.500000 C=-1.000000

19f     B18: #	out( B19 ) &lt;- in( B17 )  Freq: 0.105188
19f     movl    RAX, R8	# spill

1a2     B19: #	out( B22 B20 ) &lt;- in( B10 B18 )  Freq: 0.210377
1a2     testl   RAX, RAX
1a4     je,s   B22  P=0.000261 C=3832.000000

1a6     B20: #	out( B21 ) &lt;- in( B19 )  Freq: 0.210322
1a6     movl    [RSI + #16 (8-bit)], RAX	# int ! Field: java/lang/String.hash

1a9     B21: #	out( N286 ) &lt;- in( B20 B22 B23 B1 )  Freq: 0.999999
1a9     addq    rsp, 32	# Destroy frame
	popq    rbp
	movq    rscratch1, poll_offset[r15_thread] #polling_page_address
	testl   rax, [rscratch1]	# Safepoint: poll for GC

1b8     ret

1b9     B22: #	out( B21 ) &lt;- in( B19 B5 )  Freq: 0.00951608
1b9     movb    [RSI + #21 (8-bit)], #1	# byte ! Field: java/lang/String.hashIsZero
1bd     xorl    RAX, RAX	# int
1bf     jmp,s   B21

1c1     B23: #	out( B21 ) &lt;- in( B2 )  Freq: 0.000172107
1c1     xorl    RAX, RAX	# int
1c3     jmp,s   B21

1c5     B24: #	out( N286 ) &lt;- in( B6 )  Freq: 2.1317e-07
1c5     movq    [rsp + #0], RSI	# spill
1c9     movl    [rsp + #12], R11	# spill
1ce     movl    RSI, #-138	# int
1d3     call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.StringLatin1::hashCode @ bci:13  L[0]=_ L[1]=#0 L[2]=RBP L[3]=rsp + #12 L[4]=#0 L[5]=_ STK[0]=#0 STK[1]=rsp + #12
        # java.lang.String::hashCode @ bci:27  L[0]=rsp + #0 L[1]=_
        # OopMap {rbp=NarrowOop [0]=Oop off=472/0x1d8}
1d8     ud2	# ShouldNotReachHere

1ec     B25: #	out( N286 ) &lt;- in( B3 )  Freq: 1.09919e-07
1ec     movq    [rsp + #0], RSI	# spill
1f0     movl    RSI, #-187	# int
        nop 	# 2 bytes pad for loops and calls
1f7     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.String::isLatin1 @ bci:10  L[0]=_ STK[0]=RBP
        # java.lang.String::hashCode @ bci:17  L[0]=rsp + #0 L[1]=_
        # OopMap {[0]=Oop off=508/0x1fc}
1fc     ud2	# ShouldNotReachHere

210     B26: #	out( N286 ) &lt;- in( B4 )  Freq: 2.22757e-07
210     movl    RSI, #-10	# int
        nop 	# 2 bytes pad for loops and calls
217     call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.StringLatin1::hashCode @ bci:5  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ STK[0]=#NULL
        # java.lang.String::hashCode @ bci:27  L[0]=_ L[1]=_
        # OopMap {off=540/0x21c}
21c     ud2	# ShouldNotReachHere

--------------------------------------------------------------------------------
</opto_assembly>
<writer thread='42499'/>
    822  269       3       java.lang.invoke.LambdaForm$MH/0x0000000800061840::linkToTargetMethod (10 bytes)
<writer thread='24067'/>
    822  270       3       java.lang.invoke.LambdaForm$DMH/0x0000000800060440::invokeStatic (15 bytes)
<writer thread='40963'/>
    823  271       3       java.util.Optional::&lt;init&gt; (10 bytes)
<writer thread='9219'/>
    823  272     n 0       jdk.internal.reflect.Reflection::getCallerClass (native)   (static)
<writer thread='25091'/>
    823    5       3       java.lang.String::hashCode (60 bytes)   made not entrant
                              @ 17   java.lang.String::isLatin1 (19 bytes)   inline (hot)
                              @ 27   java.lang.StringLatin1::hashCode (42 bytes)   inline (hot)
<writer thread='40195'/>
    823  273       3       java.util.Optional::of (12 bytes)
<writer thread='25091'/>
    823  268       4       java.util.HashMap::hash (20 bytes)
<writer thread='40963'/>
                              @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
<writer thread='24067'/>
                          
<writer thread='40195'/>
                   
<writer thread='24067'/>
    @ 1  
<writer thread='40195'/>
           @ 5  
<writer thread='24067'/>
 java.lang.invoke.DirectMethodHandle::
<writer thread='40195'/>
 java.util.Objects::
<writer thread='42499'/>
             
<writer thread='40195'/>
requireNonNull
<writer thread='42499'/>
                 @ 6  
<writer thread='24067'/>
internalMemberName
<writer thread='42499'/>
 java.lang.invoke.MethodHandle::invokeBasic
<writer thread='40195'/>
 (14 bytes)
<writer thread='24067'/>
 (8 bytes)   force inline by annotation
<writer thread='40195'/>

<writer thread='42499'/>
(LL)L (0 bytes)   receiver not constant
<writer thread='40195'/>
                          
<writer thread='24067'/>
                   
<writer thread='40195'/>
      @ 8  
<writer thread='24067'/>
           @ 11   java.lang.invoke.MethodHandle::
<writer thread='40195'/>
 java.lang.NullPointerException::
<writer thread='24067'/>
linkToStatic(LLL
<writer thread='40195'/>
&lt;init&gt; (5 bytes)   don&apos;t inline Throwable constructors
<writer thread='24067'/>
)L (0 bytes)   MemberName not constant
<writer thread='40195'/>
                              @ 8   java.util.Optional::&lt;init&gt; (10 bytes)
                                @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
<writer thread='40963'/>
    824  274       3       java.util.HashMap::get (23 bytes)
                              @ 2   java.util.HashMap::hash (20 bytes)
                                @ 9   java.lang.Object::hashCode (0 bytes)   no static binding
                              @ 6   java.util.HashMap::getNode (148 bytes)   callee is too large
<writer thread='42499'/>
    825  275       1       java.lang.module.ModuleDescriptor$Provides::service (5 bytes)
<writer thread='24067'/>
    826  276       3       java.security.AccessController::doPrivileged (9 bytes)
<writer thread='42499'/>
    826  277       3       java.security.AccessController::executePrivileged (65 bytes)
<writer thread='24067'/>
                              @ 2  
<writer thread='40195'/>
    826  278       1       java.lang.module.ModuleDescriptor$Requires::modifiers (5 bytes)
<writer thread='24067'/>
 jdk.internal.reflect.Reflection::getCallerClass (0 bytes)   native method
<writer thread='42499'/>
                              @ 5   java.security.AccessController::ensureMaterializedForStackWalk (0 bytes)   native method
<writer thread='24067'/>
                              @ 5   java.security.AccessController::executePrivileged (65 bytes)   force inline by annotation
<writer thread='42499'/>
                              @ 29   java.security.PrivilegedAction::run (0 bytes)   not inlineable
<writer thread='9219'/>
<dependency_failed type='leaf_type' ctxk='java/util/HashSet' witness='java/util/LinkedHashSet' stamp='0.828'/>
<dependency_failed type='leaf_type' ctxk='java/util/HashSet' witness='java/util/LinkedHashSet' stamp='0.828'/>
    828  191       3       java.util.Set::copyOf (27 bytes)   made not entrant
    828  199       3       java.util.HashSet::&lt;init&gt; (40 bytes)   made not entrant
<writer thread='24067'/>
             
<writer thread='42499'/>
             
<writer thread='24067'/>
        
<writer thread='42499'/>
                 
<writer thread='24067'/>
           @ 29  
<writer thread='42499'/>
@ 56  
<writer thread='24067'/>
 java.security.PrivilegedAction::
<writer thread='42499'/>
 java.lang.ref.Reference::
<writer thread='24067'/>
run
<writer thread='42499'/>
reachabilityFence
<writer thread='24067'/>
 (0 bytes)   not inlineable
<writer thread='42499'/>
 (1 bytes)   force inline by annotation
                              @ 60  
<writer thread='24067'/>
             
<writer thread='42499'/>
 java.lang.ref.Reference::
<writer thread='24067'/>
                   @ 56  
<writer thread='42499'/>
reachabilityFence
<writer thread='25091'/>

============================= C2-compiled nmethod ==============================
<opto_assembly compile_id='268'>
----------------------- MetaData before Compile_id = 268 ------------------------
{method}
 - this oop:          0x0000000126af24e8
 - method holder:     &apos;java/util/HashMap&apos;
 - constants:         0x0000000126af0d88 constant pool [593] {0x0000000126af0d88} for &apos;java/util/HashMap&apos; cache=0x0000000126af6970
 - access:            0x81000018  static final 
 - name:              &apos;hash&apos;
 - signature:         &apos;(Ljava/lang/Object;)I&apos;
 - max stack:         4
 - max locals:        2
 - size of params:    1
 - method size:       13
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x000000010c0a1de0
 - adapters:          AHE@0x00007f99308e1660: 0xb0000000 i2c: 0x000000010c0e9ee0 c2i: 0x000000010c0e9fc3 c2iUV: 0x000000010c0e9f8a c2iNCI: 0x000000010c0ea000
 - compiled entry     0x000000010c7e2260
 - code size:         20
 - code start:        0x0000000126af24b0
 - code end (excl):   0x0000000126af24c4
 - method data:       0x0000000126dd24b8
 - checked ex length: 0
 - linenumber start:  0x0000000126af24c4
 - localvar length:   2
 - localvar start:    0x0000000126af24ce
 - compiled code: nmethod    829   66       3       java.util.HashMap::hash (20 bytes)

------------------------ OptoAssembly for Compile_id = 268 -----------------------
#
#  int ( java/lang/Object * )
#
#r018 rsi:rsi   : parm 0: java/lang/Object *
# -- Old rsp -- Framesize: 48 --
#r583 rsp+44: in_preserve
#r582 rsp+40: return address
#r581 rsp+36: in_preserve
#r580 rsp+32: saved fp register
#r579 rsp+28: pad2, stack alignment
#r578 rsp+24: pad2, stack alignment
#r577 rsp+20: Fixed slot 1
#r576 rsp+16: Fixed slot 0
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N1: #	out( B1 ) &lt;- in( B8 B5 B9 )  Freq: 1

000     B1: #	out( B8 B2 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
000     # stack bang (136 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

00c     movq    R8, RSI	# spill
00f     movl    R10, [RSI + #8 (8-bit)]	# compressed klass ptr
013     NullCheck RSI

013     B2: #	out( B6 B3 ) &lt;- in( B1 )  Freq: 1
013     decode_klass_not_null R10,R10
023     movq    R10, [R10 + #504 (32-bit)]	# ptr
02a     movq    R11, metadataptr:Constant0x000000012763bd20	# ptr
034     cmpq    R10, R11	# ptr
037     jne,us  B6  P=0.001000 C=-1.000000

039     B3: #	out( B6 B4 ) &lt;- in( B2 )  Freq: 0.999
039     movq    R10, [RSI]	# long
03c     movq    R11, R10	# spill
03f     andq    R11, #7	# long
043     cmpq    R11, #1
047     jne,s   B6  P=0.001000 C=-1.000000

049     B4: #	out( B6 B5 ) &lt;- in( B3 )  Freq: 0.998001
049     shrq    R10, #8
04d     movl    R11, R10	# l2i
050     andl    R11, #2147483647	# int
057     testl   R11, R11
05a     je,s   B6  P=0.001000 C=-1.000000

05c     B5: #	out( N1 ) &lt;- in( B7 B4 )  Freq: 0.999999
05c     movl    RAX, R11	# spill
05f     shrl    RAX, #16
062     xorl    RAX, R11	# int
065     addq    rsp, 32	# Destroy frame
	popq    rbp
	movq    rscratch1, poll_offset[r15_thread] #polling_page_address
	testl   rax, [rscratch1]	# Safepoint: poll for GC

074     ret

075     B6: #	out( B9 B7 ) &lt;- in( B2 B3 B4 )  Freq: 0.00299699
075     movq    rax, #Universe::non_oop_word()
	call,dynamic  java.lang.Object::hashCode
        # java.util.HashMap::hash @ bci:9  L[0]=_ L[1]=_
        # OopMap {off=132/0x84}

084     B7: #	out( B5 ) &lt;- in( B6 )  Freq: 0.00299693
        # Block is sole successor of call
084     movl    R11, RAX	# spill
087     jmp,s   B5

089     B8: #	out( N1 ) &lt;- in( B1 )  Freq: 4.76837e-07
089     movl    RSI, #-187	# int
08e     movq    [rsp + #0], R8	# spill
        nop 	# 1 bytes pad for loops and calls
093     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::hash @ bci:1  L[0]=rsp + #0 L[1]=_ STK[0]=rsp + #0
        # OopMap {[0]=Oop off=152/0x98}
098     ud2	# ShouldNotReachHere

0ac     B9: #	out( N1 ) &lt;- in( B6 )  Freq: 2.99699e-08
0ac     # exception oop is in rax; no code emitted
0ac     movq    RSI, RAX	# spill
0af     addq    rsp, 32	# Destroy frame
	popq    rbp

0b4     jmp     rethrow_stub

--------------------------------------------------------------------------------
</opto_assembly>
<writer thread='24067'/>
 java.lang.ref.Reference::
<writer thread='42499'/>
 (1 bytes)   force inline by annotation
<writer thread='9219'/>
<dependency_failed type='leaf_type' ctxk='java/util/HashMap' witness='java/util/LinkedHashMap' stamp='0.831'/>
<writer thread='24067'/>
reachabilityFence
<writer thread='9219'/>
<dependency_failed type='leaf_type' ctxk='java/util/HashMap' witness='java/util/LinkedHashMap' stamp='0.831'/>
<writer thread='24067'/>
 (1 bytes)   force inline by annotation
<writer thread='9219'/>
<dependency_failed type='leaf_type' ctxk='java/util/HashMap' witness='java/util/LinkedHashMap' stamp='0.831'/>
<writer thread='24067'/>

<writer thread='9219'/>
<dependency_failed type='leaf_type' ctxk='java/util/HashMap' witness='java/util/LinkedHashMap' stamp='0.831'/>
<dependency_failed type='leaf_type' ctxk='java/util/HashMap' witness='java/util/LinkedHashMap' stamp='0.831'/>
<dependency_failed type='leaf_type' ctxk='java/util/HashMap' witness='java/util/LinkedHashMap' stamp='0.831'/>
<dependency_failed type='leaf_type' ctxk='java/util/HashMap' witness='java/util/LinkedHashMap' stamp='0.831'/>
<dependency_failed type='leaf_type' ctxk='java/util/HashMap' witness='java/util/LinkedHashMap' stamp='0.831'/>
<dependency_failed type='leaf_type' ctxk='java/util/HashMap' witness='java/util/LinkedHashMap' stamp='0.831'/>
<dependency_failed type='leaf_type' ctxk='java/util/HashMap' witness='java/util/LinkedHashMap' stamp='0.831'/>
<dependency_failed type='leaf_type' ctxk='java/util/HashMap' witness='java/util/LinkedHashMap' stamp='0.831'/>
<writer thread='24067'/>
                                @ 60   java.lang.ref.Reference::reachabilityFence (1 bytes)   force inline by annotation
<writer thread='9219'/>
    831  130       3       java.util.HashMap::put (13 bytes)   made not entrant
    831  124       3       java.util.HashMap::putVal (300 bytes)   made not entrant
    831  129       3       java.util.HashSet::add (20 bytes)   made not entrant
    831  185       3       java.util.HashMap::containsKey (18 bytes)   made not entrant
    831  177       3       java.util.HashMap::&lt;init&gt; (8 bytes)   made not entrant
    831  192       3       java.util.HashSet::iterator (13 bytes)   made not entrant
    831  178       3       java.util.HashMap::&lt;init&gt; (98 bytes)   made not entrant
    831  215       3       java.util.HashSet::contains (9 bytes)   made not entrant
    831  221       3       java.util.HashSet::size (8 bytes)   made not entrant
    831  225       3       java.util.HashMap::&lt;init&gt; (11 bytes)   made not entrant
    831  274       3       java.util.HashMap::get (23 bytes)   made not entrant
<writer thread='25091'/>
    831   66       3       java.util.HashMap::hash (20 bytes)   made not entrant
                              @ 9   java.lang.Object::hashCode (0 bytes)   (intrinsic, virtual)
    831  196       4       java.lang.CharacterDataLatin1::getProperties (11 bytes)
<writer thread='40963'/>
    833  279       3       java.util.ImmutableCollections$Set12$1::hasNext (13 bytes)
<writer thread='40195'/>
    833  280       3       java.util.HashMap::get (23 bytes)
<writer thread='24067'/>
    833  281       3       java.util.HashSet::contains (9 bytes)
<writer thread='40195'/>
                              @ 2  
<writer thread='42499'/>
    833  283       3       java.util.HashMap::containsKey (18 bytes)
<writer thread='24067'/>
                              @ 5   java.util.HashMap::containsKey (18 bytes)
                                @ 2   java.util.HashMap::hash (20 bytes)
<writer thread='42499'/>
                              @ 2   java.util.HashMap::hash (20 bytes)
<writer thread='40195'/>
 java.util.HashMap::
<writer thread='24067'/>
             
<writer thread='25091'/>

============================= C2-compiled nmethod ==============================
<opto_assembly compile_id='196'>
----------------------- MetaData before Compile_id = 196 ------------------------
{method}
 - this oop:          0x0000000126baf370
 - method holder:     &apos;java/lang/CharacterDataLatin1&apos;
 - constants:         0x0000000126baed38 constant pool [132] {0x0000000126baed38} for &apos;java/lang/CharacterDataLatin1&apos; cache=0x0000000126bb1f08
 - access:            0x81000000  
 - name:              &apos;getProperties&apos;
 - signature:         &apos;(I)I&apos;
 - max stack:         3
 - max locals:        4
 - size of params:    2
 - method size:       13
 - highest level:     3
 - vtable index:      38
 - i2i entry:         0x000000010c0a1de0
 - adapters:          AHE@0x00007f99308e1840: 0xba000000 i2c: 0x000000010c0e89e0 c2i: 0x000000010c0e8ac6 c2iUV: 0x000000010c0e8a8d c2iNCI: 0x000000010c0e8b03
 - compiled entry     0x000000010c80ad80
 - code size:         11
 - code start:        0x0000000126baf328
 - code end (excl):   0x0000000126baf333
 - method data:       0x0000000126e94170
 - checked ex length: 0
 - linenumber start:  0x0000000126baf333
 - localvar length:   4
 - localvar start:    0x0000000126baf33e
 - compiled code: nmethod    834  155       3       java.lang.CharacterDataLatin1::getProperties (11 bytes)

------------------------ OptoAssembly for Compile_id = 196 -----------------------
#
#  int ( java/lang/CharacterDataLatin1:NotNull *, int )
#
#r018 rsi:rsi   : parm 0: java/lang/CharacterDataLatin1:NotNull *
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 32 --
#r583 rsp+28: in_preserve
#r582 rsp+24: return address
#r581 rsp+20: in_preserve
#r580 rsp+16: saved fp register
#r579 rsp+12: pad2, stack alignment
#r578 rsp+ 8: pad2, stack alignment
#r577 rsp+ 4: Fixed slot 1
#r576 rsp+ 0: Fixed slot 0
#
000     N32: #	out( B1 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B3 B2 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (144 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

02c     movzwl  RDX, RDX	# int &amp; 0xFFFF
02f     cmpl    RDX, #256	# unsigned
035     jnb,us  B3  P=0.000001 C=-1.000000

037     B2: #	out( N32 ) &lt;- in( B1 )  Freq: 0.999999
037     movq    R10, int[int:256]&lt;ciTypeArray length=256 type=&lt;ciTypeArrayKlass name=[I ident=1136 address=0x000000012728fb40&gt; ident=1146 address=0x0000000127917980&gt; *	# ptr
041     movl    RAX, [R10 + #16 + RDX &lt;&lt; #2]	# int
046     addq    rsp, 16	# Destroy frame
	popq    rbp
	movq    rscratch1, poll_offset[r15_thread] #polling_page_address
	testl   rax, [rscratch1]	# Safepoint: poll for GC

055     ret

056     B3: #	out( N32 ) &lt;- in( B1 )  Freq: 1.01328e-06
056     movl    RSI, #-28	# int
05b     movl    RBP, RDX	# spill
        nop 	# 2 bytes pad for loops and calls
05f     call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos; debug_id=&apos;0&apos;)
        # java.lang.CharacterDataLatin1::getProperties @ bci:7  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#Ptr0x0000000127917980 STK[1]=RBP
        # OopMap {off=100/0x64}
064     ud2	# ShouldNotReachHere

--------------------------------------------------------------------------------
</opto_assembly>
<writer thread='40195'/>
hash
<writer thread='24067'/>
      
<writer thread='42499'/>
        
<writer thread='24067'/>
  
<writer thread='40963'/>
    835  282       3       java.lang.module.ModuleDescriptor::hashCode (170 bytes)
<writer thread='42499'/>
                        
<writer thread='40195'/>
 (20 bytes)
<writer thread='42499'/>
@ 9   java.lang.Object::
<writer thread='25091'/>
    835  155       3       java.lang.CharacterDataLatin1::getProperties (11 bytes)   made not entrant
<writer thread='42499'/>
hashCode (0 bytes)
<writer thread='25091'/>
<writer thread='24067'/>
             @ 9   java.lang.Object::
<writer thread='42499'/>
   no static binding
<writer thread='24067'/>
hashCode (0 bytes)   no static binding
<writer thread='40195'/>
                                @ 9   java.lang.Object::hashCode (0 bytes)   no static binding
<writer thread='25091'/>
    835  287       4       java.util.HashMap$HashIterator::hasNext (13 bytes)
<writer thread='40963'/>
             
<writer thread='42499'/>
             
<writer thread='40963'/>
                 @ 13   java.lang.String::hashCode (60 bytes)   callee is too large
<writer thread='42499'/>
      
<writer thread='40195'/>
             
<writer thread='40963'/>

<writer thread='24067'/>
             
<writer thread='40195'/>
        
<writer thread='24067'/>
      
<writer thread='42499'/>
  
<writer thread='24067'/>
             
<writer thread='42499'/>
         
<writer thread='24067'/>
@ 6  
<writer thread='42499'/>
@ 6  
<writer thread='40195'/>
         @ 6  
<writer thread='24067'/>
 java.util.HashMap::
<writer thread='42499'/>
 java.util.HashMap::
<writer thread='40195'/>
 java.util.HashMap::
<writer thread='40963'/>
                              
<writer thread='24067'/>
getNode
<writer thread='40195'/>
getNode
<writer thread='40963'/>
@ 25  
<writer thread='24067'/>
 (148 bytes)   callee is too large
<writer thread='40963'/>
 java.util.Objects::hashCode
<writer thread='40195'/>
 (148 bytes)   callee is too large
<writer thread='42499'/>
getNode
<writer thread='40195'/>

<writer thread='42499'/>
 (148 bytes)   callee is too large
<writer thread='40963'/>
 (13 bytes)
<writer thread='42499'/>

<writer thread='40963'/>
                                @ 5   java.lang.Object::hashCode (0 bytes)   no static binding
                              @ 38   java.util.Set::hashCode (0 bytes)   no static binding
                              @ 53   java.util.Objects::hashCode (13 bytes)
<writer thread='25091'/>

============================= C2-compiled nmethod ==============================
<opto_assembly compile_id='287'>
----------------------- MetaData before Compile_id = 287 ------------------------
{method}
 - this oop:          0x0000000126b2d980
 - method holder:     &apos;java/util/HashMap$HashIterator&apos;
 - constants:         0x0000000126b2d430 constant pool [90] {0x0000000126b2d430} for &apos;java/util/HashMap$HashIterator&apos; cache=0x0000000126b2dc70
 - access:            0x81000011  public final 
 - name:              &apos;hasNext&apos;
 - signature:         &apos;()Z&apos;
 - max stack:         2
 - max locals:        1
 - size of params:    1
 - method size:       13
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x000000010c0a1de0
 - adapters:          AHE@0x00007f99308e1660: 0xb0000000 i2c: 0x000000010c0e9ee0 c2i: 0x000000010c0e9fc3 c2iUV: 0x000000010c0e9f8a c2iNCI: 0x000000010c0ea000
 - compiled entry     0x000000010c803c00
 - code size:         13
 - code start:        0x0000000126b2d960
 - code end (excl):   0x0000000126b2d96d
 - method data:       0x0000000126e92040
 - checked ex length: 0
 - linenumber start:  0x0000000126b2d96d
 - localvar length:   1
 - localvar start:    0x0000000126b2d972
 - compiled code: nmethod    837  131       3       java.util.HashMap$HashIterator::hasNext (13 bytes)

------------------------ OptoAssembly for Compile_id = 287 -----------------------
#
#  bool ( java/util/HashMap$HashIterator:NotNull * )
#
#r018 rsi:rsi   : parm 0: java/util/HashMap$HashIterator:NotNull *
# -- Old rsp -- Framesize: 32 --
#r583 rsp+28: in_preserve
#r582 rsp+24: return address
#r581 rsp+20: in_preserve
#r580 rsp+16: saved fp register
#r579 rsp+12: pad2, stack alignment
#r578 rsp+ 8: pad2, stack alignment
#r577 rsp+ 4: Fixed slot 1
#r576 rsp+ 0: Fixed slot 0
#
000     N20: #	out( B1 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( N20 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (96 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

02c     movl    R11, [RSI + #20 (8-bit)]	# compressed ptr ! Field: java/util/HashMap$HashIterator.next
030     decode_heap_oop R10,R11
05c     testq   R10, R10	# cp2b
	setnz   RAX
	movzbl  RAX, RAX
065     addq    rsp, 16	# Destroy frame
	popq    rbp
	movq    rscratch1, poll_offset[r15_thread] #polling_page_address
	testl   rax, [rscratch1]	# Safepoint: poll for GC

074     ret

--------------------------------------------------------------------------------
</opto_assembly>
<writer thread='40963'/>
                                @ 5   java.lang.Object::hashCode (0 bytes)   no static binding
<writer thread='25091'/>
    837  131       3       java.util.HashMap$HashIterator::hasNext (13 bytes)   made not entrant
    837  292       4       java.util.HashMap::newNode (13 bytes)
<writer thread='40963'/>
                              @ 66   java.util.Set::hashCode (0 bytes)   no static binding
                              @ 81   java.util.Set::hashCode (0 bytes)   no static binding
                              @ 96   java.util.Set::hashCode (0 bytes)   no static binding
<writer thread='40195'/>
    838  289       3       java.util.HashMap::&lt;init&gt; (11 bytes)
<writer thread='42499'/>
    838  295       3       java.util.HashSet::iterator (13 bytes)
<writer thread='40195'/>
                              @ 1   java.util.AbstractMap::
<writer thread='24067'/>
    838  300       3       java.lang.module.ModuleDescriptor$Exports::isQualified (18 bytes)
<writer thread='40963'/>
                              @ 111   java.util.Set::hashCode (0 bytes)   no static binding
                              @ 126   java.util.Objects::hashCode (13 bytes)
<writer thread='42499'/>
                              @ 4   java.util.HashMap::keySet (25 bytes)   no static binding
<writer thread='40963'/>
                                @ 5   java.lang.Object::
<writer thread='42499'/>
        
<writer thread='40195'/>
&lt;init&gt;
<writer thread='42499'/>
                      @ 7  
<writer thread='40195'/>
 (5 bytes)
<writer thread='24067'/>
             
<writer thread='42499'/>
 java.util.Set::
<writer thread='40195'/>

<writer thread='40963'/>
hashCode
<writer thread='42499'/>
iterator (0 bytes)   no static binding
<writer thread='40963'/>
 (0 bytes)   no static binding
<writer thread='40195'/>
                                @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
<writer thread='40963'/>
                              @ 139   java.util.Objects::hashCode (13 bytes)
                                @ 5   java.lang.String::hashCode (60 bytes)   callee is too large
<writer thread='43011'/>

============================= C2-compiled nmethod ==============================
<opto_assembly compile_id='238'>
----------------------- MetaData before Compile_id = 238 ------------------------
{method}
 - this oop:          0x0000000126a4d510
 - method holder:     &apos;java/lang/AbstractStringBuilder&apos;
 - constants:         0x0000000126a4b410 constant pool [538]/operands[14] {0x0000000126a4b410} for &apos;java/lang/AbstractStringBuilder&apos; cache=0x0000000126b94e78
 - access:            0x81000002  private 
 - name:              &apos;ensureCapacityInternal&apos;
 - signature:         &apos;(I)V&apos;
 - max stack:         5
 - max locals:        3
 - size of params:    2
 - method size:       13
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x000000010c0a1de0
 - adapters:          AHE@0x00007f99308e1840: 0xba000000 i2c: 0x000000010c0e89e0 c2i: 0x000000010c0e8ac6 c2iUV: 0x000000010c0e8a8d c2iNCI: 0x000000010c0e8b03
 - compiled entry     0x000000010c7dbc80
 - code size:         39
 - code start:        0x0000000126a4d4b0
 - code end (excl):   0x0000000126a4d4d7
 - method data:       0x0000000126d9d040
 - checked ex length: 0
 - linenumber start:  0x0000000126a4d4d7
 - localvar length:   3
 - localvar start:    0x0000000126a4d4ea
 - compiled code: nmethod    840   37       3       java.lang.AbstractStringBuilder::ensureCapacityInternal (39 bytes)

------------------------ OptoAssembly for Compile_id = 238 -----------------------
#
#  void ( java/lang/AbstractStringBuilder:NotNull *, int )
#
#r018 rsi:rsi   : parm 0: java/lang/AbstractStringBuilder:NotNull *
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 80 --
#r583 rsp+76: in_preserve
#r582 rsp+72: return address
#r581 rsp+68: in_preserve
#r580 rsp+64: saved fp register
#r579 rsp+60: pad2, stack alignment
#r578 rsp+56: pad2, stack alignment
#r577 rsp+52: Fixed slot 1
#r576 rsp+48: Fixed slot 0
#r595 rsp+44: spill
#r594 rsp+40: spill
#r593 rsp+36: spill
#r592 rsp+32: spill
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N498: #	out( B1 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B38 B2 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (288 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #64	# Create frame

02c     movq    [rsp + #32], RSI	# spill
031     movl    R8, [RSI + #20 (8-bit)]	# compressed ptr ! Field: java/lang/AbstractStringBuilder.value
035     movl    RBP, [R12 + R8 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
03a     NullCheck R8

03a     B2: #	out( B5 B3 ) &lt;- in( B1 )  Freq: 0.999999
03a     movsbl  RCX, [RSI + #16 (8-bit)]	# byte ! Field: java/lang/AbstractStringBuilder.coder
03e     movl    R11, RBP	# spill
041     sarl    R11, RCX
044     movl    RBX, RDX	# spill
046     subl    RBX, R11	# int
049     testl   RBX, RBX
04b     jg,s   B5  P=0.072289 C=7802.000000

04d     B3: #	out( N498 ) &lt;- in( B26 B27 B24 B23 B22 B2 )  Freq: 0.999998
04d     vzeroupper
	addq    rsp, 64	# Destroy frame
	popq    rbp
	movq    rscratch1, poll_offset[r15_thread] #polling_page_address
	testl   rax, [rscratch1]	# Safepoint: poll for GC

05f     ret

060     B4: #	out( B7 ) &lt;- in( B5 )  Freq: 0.0361445
060     movl    R11, RDX	# spill
063     jmp,s   B7

065     B5: #	out( B4 B6 ) &lt;- in( B2 )  Freq: 0.0722891
065     sall    R11, #1
068     movl    R9, R11	# spill
06b     subl    R9, RDX	# int
06e     addl    R9, #2	# int
072     testl   R9, R9
075     jl,s   B4  P=0.500000 C=-1.000000

077     B6: #	out( B7 ) &lt;- in( B5 )  Freq: 0.0361445
077     addl    R11, #2	# int

07b     B7: #	out( B9 B8 ) &lt;- in( B4 B6 )  Freq: 0.0722891
07b     testl   R11, R11
07e     jle,s   B9  P=0.500000 C=-1.000000

080     B8: #	out( B11 B9 ) &lt;- in( B7 )  Freq: 0.0361445
080     movl    R9, #2147483639	# int
086     sarl    R9, RCX
089     subl    R9, R11	# int
08c     testl   R9, R9
08f     jge,s   B11  P=0.500000 C=-1.000000

091     B9: #	out( B40 B10 ) &lt;- in( B8 B7 )  Freq: 0.0542168
091     movl    [rsp + #16], R8	# spill
096     movq    [rsp + #8], RSI	# spill
        nop 	# 1 bytes pad for loops and calls
09c     call,static  java.lang.AbstractStringBuilder::hugeCapacity
        # java.lang.AbstractStringBuilder::newCapacity @ bci:47  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.lang.AbstractStringBuilder::ensureCapacityInternal @ bci:24  L[0]=rsp + #8 L[1]=_ L[2]=_ STK[0]=rsp + #32 STK[1]=rsp + #16
        # OopMap {[8]=Oop [16]=NarrowOop [32]=Oop off=164/0xa4}

0a4     B10: #	out( B11 ) &lt;- in( B9 )  Freq: 0.0542157
        # Block is sole successor of call
0a4     movq    R11, [rsp + #8]	# spill
0a9     movsbl  RCX, [R11 + #16 (8-bit)]	# byte ! Field: java/lang/AbstractStringBuilder.coder
0ae     movl    R11, RAX	# spill
0b1     movl    R8, [rsp + #16]	# spill

0b6     B11: #	out( B34 B12 ) &lt;- in( B10 B8 )  Freq: 0.072288
0b6     sall    R11, RCX
0b9     cmpl    R11, #1048576	# unsigned
0c0     jnbe,u   B34  P=0.000001 C=-1.000000

0c6     B12: #	out( B13 ) &lt;- in( B11 )  Freq: 0.0722879
0c6     movslq  R9, R11	# i2l

0c9     B13: #	out( B36 B14 ) &lt;- in( B12 B34 )  Freq: 0.072288
0c9     movl    RDI, R11	# spill
0cc     # castII of RDI
0cc     cmpl    RBP, RDI
0ce     movl    R10, RDI	# spill
0d1     cmovll R10, RBP	# signed, int
0d5     cmpl    RBP, R10	# unsigned
0d8     jb,u   B36  P=0.000001 C=-1.000000

0de     B14: #	out( B36 B15 ) &lt;- in( B13 )  Freq: 0.0722879
0de     cmpl    RDI, R10	# unsigned
0e1     jb,u   B36  P=0.000001 C=-1.000000

0e7     B15: #	out( B32 B16 ) &lt;- in( B14 )  Freq: 0.0722879
0e7     addq    R9, #23	# long
0eb     movq    RDX, R9	# spill
0ee     andq    RDX, #-8	# long
0f2     cmpl    R11, #1048576	# unsigned
0f9     jnbe,u   B32  P=0.000001 C=-1.000000

0ff     B16: #	out( B32 B17 ) &lt;- in( B15 )  Freq: 0.0722878
0ff     # TLS is in R15
0ff     movq    RBX, [R15 + #320 (32-bit)]	# ptr
106     movq    RCX, RBX	# spill
109     addq    RCX, RDX	# ptr
10c     # TLS is in R15
10c     cmpq    RCX, [R15 + #336 (32-bit)]	# raw ptr
113     jnb,u   B32  P=0.000100 C=-1.000000

119     B17: #	out( B18 ) &lt;- in( B16 )  Freq: 0.0722806
119     # TLS is in R15
119     movq    [R15 + #320 (32-bit)], RCX	# ptr
120     PREFETCHW [RCX + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
127     movq    [RBX], #1	# long
12e     PREFETCHW [RCX + #256 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
135     movl    [RBX + #8 (8-bit)], narrowklass: precise klass [B: 0x000000012728fa90:Constant:exact *	# compressed klass ptr
13c     movl    [RBX + #12 (8-bit)], R11	# int
140     PREFETCHW [RCX + #320 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
147     PREFETCHW [RCX + #384 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified

14e     B18: #	out( B35 B19 ) &lt;- in( B33 B17 )  Freq: 0.0722879
14e     
14e     # checkcastPP of RBX
14e     movq    RSI, RBX	# spill
151     addq    RSI, #16	# ptr
155     shrq    R9, #3
159     encode_heap_oop_not_null RBP,RBX
1a2     testl   R10, R10
1a5     je     B35  P=0.000001 C=-1.000000

1ab     B19: #	out( B28 B20 ) &lt;- in( B18 )  Freq: 0.0722878
1ab     decode_heap_oop_not_null RCX,R8
1af     leaq    R13, [R12 + R8 &lt;&lt; 3 + #16] (compressed oop addressing)	# ptr compressedoopoff32
1b4     cmpl    R10, R11
1b7     jl     B28  P=0.001000 C=-1.000000

1bd     B20: #	out( B21 ) &lt;- in( B19 )  Freq: 0.0722155
1bd     addq    RDX, #-16	# long
1c1     shrq    RDX, #3
1c5     movq    RDI, R13	# spill
1c8     call_leaf_nofp,runtime  jlong_disjoint_arraycopy
        No JVM State Info
        # 

1d8     B21: #	out( B29 B22 ) &lt;- in( B28 B20 B35 )  Freq: 0.0722879
1d8     MEMBAR-storestore (empty encoding)
1d8     # TLS is in R15
1d8     cmpb    [R15 + #48 (8-bit)], #0
1dd     jne     B29  P=0.001000 C=-1.000000

1e3     B22: #	out( B3 B23 ) &lt;- in( B37 B31 B29 B21 )  Freq: 0.0722879
1e3     movq    R10, [rsp + #32]	# spill
1e8     movl    [R10 + #20 (8-bit)], RBP	# compressed ptr ! Field: java/lang/AbstractStringBuilder.value
1ec     movq    R10, RBX	# ptr -&gt; long
1ef     movq    R11, [rsp + #32]	# spill
1f4     movq    R11, R11	# ptr -&gt; long
1f4     xorq    R10, R11	# long
1f7     shrq    R10, #20
1fb     testq   R10, R10
1fe     je     B3  P=0.001000 C=-1.000000

204     B23: #	out( B3 B24 ) &lt;- in( B22 )  Freq: 0.0722156
204     shrq    R11, #9
208     movq    RDI, 0x0000000117891000	# ptr
212     addq    RDI, R11	# ptr
215     cmpb    [RDI], #8
218     je     B3  P=0.999000 C=-1.000000

21e     B24: #	out( B3 B25 ) &lt;- in( B23 )  Freq: 7.22156e-05
21e     # TLS is in R15
21e     movq    R10, [R15 + #120 (8-bit)]	# ptr
222     # TLS is in R15
222     movq    R11, [R15 + #104 (8-bit)]	# long
226     lock addl [rsp + #0], 0	! membar_volatile
22c     cmpb    [RDI], #0
22f     je     B3  P=0.500000 C=-1.000000

235     B25: #	out( B27 B26 ) &lt;- in( B24 )  Freq: 3.61078e-05
235     movb    [RDI], #0	# CMS card-mark byte 0
238     testq   R11, R11
23b     jne,s   B27  P=0.500000 C=-1.000000

23d     B26: #	out( B3 ) &lt;- in( B25 )  Freq: 1.80539e-05
23d     # TLS is in R15
23d     movq    RSI, R15	# spill
240     call_leaf,runtime  write_ref_field_post_entry
        No JVM State Info
        # 
250     jmp     B3

255     B27: #	out( B3 ) &lt;- in( B25 )  Freq: 1.80539e-05
255     movq    [R10 + #-8 + R11], RDI	# ptr
25a     addq    R11, #-8	# long
25e     # TLS is in R15
25e     movq    [R15 + #104 (8-bit)], R11	# long
262     jmp     B3

267     B28: #	out( B21 ) &lt;- in( B19 )  Freq: 7.22878e-05
267     movslq  RDX, R10	# i2l
26a     movq    R10, RDX	# spill
26d     addq    R10, #16	# long
271     movq    R11, R10	# spill
274     andq    R11, #-8	# long
278     movq    RDI, RBX	# spill
27b     addq    RDI, R11	# ptr
27e     shrq    R10, #3
282     subq    R9, R10	# long
285     movq    RCX, R9	# spill
288     xorq    rax, rax	# ClearArray:
	cmp     InitArrayShortSize,rcx
	jg      LARGE
	dec     rcx
	js      DONE	# Zero length
	mov     rax,(rdi,rcx,8)	# LOOP
	dec     rcx
	jge     LOOP
	jmp     DONE
	# LARGE:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
	# DONE
2a8     movq    RDI, R13	# spill
2ab     call_leaf_nofp,runtime  arrayof_jbyte_disjoint_arraycopy
        No JVM State Info
        # 
2bb     jmp     B21

2c0     B29: #	out( B22 B30 ) &lt;- in( B21 )  Freq: 7.22869e-05
2c0     movq    R10, [rsp + #32]	# spill
2c5     movl    R11, [R10 + #20 (8-bit)]	# compressed ptr ! Field: java/lang/AbstractStringBuilder.value
2c9     testl   R11, R11	# compressed ptr
2cc     je     B22  P=0.500000 C=-1.000000

2d2     B30: #	out( B37 B31 ) &lt;- in( B29 )  Freq: 3.61435e-05
2d2     # TLS is in R15
2d2     movq    R10, [R15 + #56 (8-bit)]	# long
2d6     decode_heap_oop RDI,R11
302     testq   R10, R10
305     je     B37  P=0.001000 C=-1.000000

30b     B31: #	out( B22 ) &lt;- in( B30 )  Freq: 3.61073e-05
30b     # TLS is in R15
30b     movq    R11, [R15 + #72 (8-bit)]	# ptr
30f     movq    [R11 + #-8 + R10], RDI	# ptr
314     addq    R10, #-8	# long
318     # TLS is in R15
318     movq    [R15 + #56 (8-bit)], R10	# long
31c     jmp     B22

321     B32: #	out( B39 B33 ) &lt;- in( B15 B16 )  Freq: 7.30323e-06
321     movl    [rsp + #24], R10	# spill
326     movl    [rsp + #4], R8	# spill
32b     movq    [rsp + #16], RDX	# spill
330     movq    [rsp + #8], R9	# spill
335     movl    [rsp + #0], R11	# spill
339     movq    RBP, [rsp + #32]	# spill
33e     movq    RSI, precise klass [B: 0x000000012728fa90:Constant:exact *	# ptr
348     movl    RDX, R11	# spill
        nop 	# 1 bytes pad for loops and calls
34c     call,static  wrapper for: _new_array_nozero_Java
        # java.util.Arrays::copyOf @ bci:1  L[0]=rsp + #4 L[1]=rsp + #0 L[2]=_
        # java.lang.AbstractStringBuilder::ensureCapacityInternal @ bci:32  L[0]=_ L[1]=_ L[2]=_ STK[0]=RBP
        # OopMap {rbp=Oop [4]=NarrowOop [32]=Oop off=852/0x354}

354     B33: #	out( B18 ) &lt;- in( B32 )  Freq: 7.30308e-06
        # Block is sole successor of call
354     movl    R11, [rsp + #0]	# spill
358     movq    R9, [rsp + #8]	# spill
35d     movq    RDX, [rsp + #16]	# spill
362     movq    RBX, RAX	# spill
365     movl    R8, [rsp + #4]	# spill
36a     movl    R10, [rsp + #24]	# spill
36f     jmp     B18

374     B34: #	out( B13 ) &lt;- in( B11 )  Freq: 7.32479e-08
374     movslq  R9, R11	# i2l
377     jmp     B13

37c     B35: #	out( B21 ) &lt;- in( B18 )  Freq: 7.32478e-08
37c     addq    R9, #-2	# long
380     movq    RCX, R9	# spill
383     movq    RDI, RSI	# spill
386     xorq    rax, rax	# ClearArray:
	cmp     InitArrayShortSize,rcx
	jg      LARGE
	dec     rcx
	js      DONE	# Zero length
	mov     rax,(rdi,rcx,8)	# LOOP
	dec     rcx
	jge     LOOP
	jmp     DONE
	# LARGE:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
	# DONE
3a6     
3a6     jmp     B21

3ab     B36: #	out( N498 ) &lt;- in( B13 B14 )  Freq: 1.44576e-07
3ab     movl    RSI, #-52	# int
3b0     movq    RBP, [rsp + #32]	# spill
3b5     movl    [rsp + #0], R8	# spill
3b9     movl    [rsp + #8], R11	# spill
        nop 	# 2 bytes pad for loops and calls
3c0     call,static  wrapper for: uncommon_trap(reason=&apos;intrinsic_or_type_checked_inlining&apos; action=&apos;make_not_entrant&apos; debug_id=&apos;0&apos;)
        # java.util.Arrays::copyOf @ bci:1  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=_ STK[0]=rsp + #8
        # java.lang.AbstractStringBuilder::ensureCapacityInternal @ bci:32  L[0]=_ L[1]=_ L[2]=_ STK[0]=RBP
        # OopMap {rbp=Oop [0]=NarrowOop off=968/0x3c8}
3c8     ud2	# ShouldNotReachHere

3dc     B37: #	out( B22 ) &lt;- in( B30 )  Freq: 3.6143e-08
3dc     # TLS is in R15
3dc     movq    RSI, R15	# spill
3df     call_leaf,runtime  write_ref_field_pre_entry
        No JVM State Info
        # 
3ef     jmp     B22

3f4     B38: #	out( N498 ) &lt;- in( B1 )  Freq: 1.01328e-06
3f4     movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
3fc     call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.AbstractStringBuilder::ensureCapacityInternal @ bci:4  L[0]=_ L[1]=_ L[2]=_ STK[0]=#NULL
        # OopMap {off=1028/0x404}
404     ud2	# ShouldNotReachHere

418     B39: #	out( B41 ) &lt;- in( B32 )  Freq: 7.30323e-11
418     # exception oop is in rax; no code emitted
418     movq    RSI, RAX	# spill
41b     jmp,s   B41

41d     B40: #	out( B41 ) &lt;- in( B9 )  Freq: 5.42168e-07
41d     # exception oop is in rax; no code emitted
41d     movq    RSI, RAX	# spill

420     B41: #	out( N498 ) &lt;- in( B40 B39 )  Freq: 5.42241e-07
420     vzeroupper
	addq    rsp, 64	# Destroy frame
	popq    rbp

428     jmp     rethrow_stub

--------------------------------------------------------------------------------
</opto_assembly>
<writer thread='24067'/>
        
<writer thread='40963'/>
             
<writer thread='25091'/>

============================= C2-compiled nmethod ==============================
<opto_assembly compile_id='292'>
----------------------- MetaData before Compile_id = 292 ------------------------
{method}
 - this oop:          0x0000000126af6118
 - method holder:     &apos;java/util/HashMap&apos;
 - constants:         0x0000000126af0d88 constant pool [593] {0x0000000126af0d88} for &apos;java/util/HashMap&apos; cache=0x0000000126af6970
 - access:            0x81000000  
 - name:              &apos;newNode&apos;
 - signature:         &apos;(ILjava/lang/Object;Ljava/lang/Object;Ljava/util/HashMap$Node;)Ljava/util/HashMap$Node;&apos;
 - max stack:         7
 - max locals:        5
 - size of params:    5
 - method size:       13
 - highest level:     3
 - vtable index:      29
 - i2i entry:         0x000000010c0a1de0
 - adapters:          AHE@0x00007f992d824d70: 0xbabbb000 i2c: 0x000000010c0d9e60 c2i: 0x000000010c0d9f52 c2iUV: 0x000000010c0d9f19 c2iNCI: 0x000000010c0d9f8f
 - compiled entry     0x000000010c803400
 - code size:         13
 - code start:        0x0000000126af60c0
 - code end (excl):   0x0000000126af60cd
 - method data:       0x0000000126e91af8
 - checked ex length: 0
 - linenumber start:  0x0000000126af60cd
 - localvar length:   5
 - localvar start:    0x0000000126af60d8
 - compiled code: nmethod    847  126       3       java.util.HashMap::newNode (13 bytes)

------------------------ OptoAssembly for Compile_id = 292 -----------------------
#
#  java/util/HashMap$Node * ( java/util/HashMap:NotNull *, int, java/lang/Object *, java/lang/Object *, java/util/HashMap$Node * )
#
#r018 rsi:rsi   : parm 0: java/util/HashMap:NotNull *
#r016 rdx   : parm 1: int
#r010 rcx:rcx   : parm 2: java/lang/Object *
#r004 r8:r8   : parm 3: java/lang/Object *
#r006 r9:r9   : parm 4: java/util/HashMap$Node *
# -- Old rsp -- Framesize: 64 --
#r583 rsp+60: in_preserve
#r582 rsp+56: return address
#r581 rsp+52: in_preserve
#r580 rsp+48: saved fp register
#r579 rsp+44: pad2, stack alignment
#r578 rsp+40: pad2, stack alignment
#r577 rsp+36: Fixed slot 1
#r576 rsp+32: Fixed slot 0
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N95: #	out( B1 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B4 B2 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (184 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

02c     movq    [rsp + #16], R9	# spill
031     movq    [rsp + #8], R8	# spill
036     movq    [rsp + #0], RCX	# spill
03a     movl    RBP, RDX	# spill
03c     # TLS is in R15
03c     movq    RAX, [R15 + #320 (32-bit)]	# ptr
043     movq    R10, RAX	# spill
046     addq    R10, #32	# ptr
04a     cmpq    R10, [R15 + #336 (32-bit)]	# raw ptr
051     jnb,u   B4  P=0.000100 C=-1.000000

057     B2: #	out( B3 ) &lt;- in( B1 )  Freq: 0.9999
057     movq    [R15 + #320 (32-bit)], R10	# ptr
05e     PREFETCHW [R10 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
066     movl    R11, narrowklass: precise klass java/util/HashMap$Node: 0x0000000127e9be30:Constant:exact *	# compressed klass ptr
06c     decode_klass_not_null R10,R11
079     movq    R10, [R10 + #184 (32-bit)]	# long
080     movq    [RAX], R10	# long
083     movl    [RAX + #8 (8-bit)], narrowklass: precise klass java/util/HashMap$Node: 0x0000000127e9be30:Constant:exact *	# compressed klass ptr
08a     movl    [RAX + #28 (8-bit)], #0	# int

091     B3: #	out( N95 ) &lt;- in( B5 B2 )  Freq: 1
091     movl    [RAX + #12 (8-bit)], RBP	# int
094     movq    R10, [rsp + #8]	# spill
099     encode_heap_oop R11,R10
0c5     movq    R10, [rsp + #16]	# spill
0ca     encode_heap_oop R8,R10
0f6     movq    R10, [rsp + #0]	# spill
0fa     encode_heap_oop R9,R10
126     movl    [RAX + #16 (8-bit)], R9	# compressed ptr
12a     movl    [RAX + #20 (8-bit)], R11	# compressed ptr
12e     movl    [RAX + #24 (8-bit)], R8	# compressed ptr
132     
132     # checkcastPP of RAX
132     MEMBAR-release ! (empty encoding)
132     addq    rsp, 48	# Destroy frame
	popq    rbp
	movq    rscratch1, poll_offset[r15_thread] #polling_page_address
	testl   rax, [rscratch1]	# Safepoint: poll for GC

141     ret

142     B4: #	out( B6 B5 ) &lt;- in( B1 )  Freq: 0.000100017
142     movq    RSI, precise klass java/util/HashMap$Node: 0x0000000127e9be30:Constant:exact *	# ptr
        nop 	# 3 bytes pad for loops and calls
14f     call,static  wrapper for: _new_instance_Java
        # java.util.HashMap::newNode @ bci:0  L[0]=_ L[1]=RBP L[2]=rsp + #0 L[3]=rsp + #8 L[4]=rsp + #16
        # OopMap {[0]=Oop [8]=Oop [16]=Oop off=340/0x154}

154     B5: #	out( B3 ) &lt;- in( B4 )  Freq: 0.000100015
        # Block is sole successor of call
154     jmp     B3

159     B6: #	out( N95 ) &lt;- in( B4 )  Freq: 1.00017e-09
159     # exception oop is in rax; no code emitted
159     movq    RSI, RAX	# spill
15c     addq    rsp, 48	# Destroy frame
	popq    rbp

161     jmp     rethrow_stub

--------------------------------------------------------------------------------
</opto_assembly>
<writer thread='40195'/>
    850  303       3       java.util.HashMap::putIfAbsent (13 bytes)
<writer thread='40963'/>
        
<writer thread='24067'/>
         
<writer thread='43011'/>
    850   37       3       java.lang.AbstractStringBuilder::ensureCapacityInternal (39 bytes)   made not entrant
<writer thread='42499'/>
    850  301       3       java.util.ImmutableCollections$SetN::isEmpty (13 bytes)
<writer thread='24067'/>
@ 4   java.util.Set::
<writer thread='43011'/>
                              @ 24   java.lang.AbstractStringBuilder::newCapacity (55 bytes)   inline (hot)
                                @ 47   java.lang.AbstractStringBuilder::hugeCapacity (41 bytes)   too big
                              @ 32   java.util.Arrays::copyOf (19 bytes)   inline (hot)
                                @ 11   java.lang.Math::min (11 bytes)   (intrinsic)
                                @ 14   java.lang.System::arraycopy (0 bytes)   (intrinsic)
<writer thread='40963'/>
         @ 152  
<writer thread='24067'/>
isEmpty
<writer thread='40963'/>
 java.util.Objects::
<writer thread='24067'/>
 (0 bytes)   no static binding
<writer thread='40963'/>
hashCode (13 bytes)
                                @ 5   java.lang.String::hashCode (60 bytes)   callee is too large
<writer thread='25091'/>
    850  126       3       java.util.HashMap::newNode (13 bytes)   made not entrant
                              @ 9   java.util.HashMap$Node::&lt;init&gt; (26 bytes)   inline (hot)
                                @ 1   java.lang.Object::&lt;init&gt; (1 bytes)   inline (hot)
    850  311       4       java.util.ImmutableCollections$SetN$SetNIterator::next (47 bytes)
<writer thread='43011'/>
    850  305       4       java.util.ImmutableCollections$SetN$SetNIterator::nextIndex (56 bytes)
<writer thread='40195'/>
                              @ 2   java.util.HashMap::hash (20 bytes)
<writer thread='42499'/>
    851  299       1       java.lang.module.ModuleDescriptor$Exports::targets (5 bytes)
<writer thread='40195'/>
                                @ 9   java.lang.Object::hashCode (0 bytes)   no static binding
                              @ 9   java.util.HashMap::putVal (300 bytes)   callee is too large
<writer thread='24067'/>
    852  302       3       java.util.ImmutableCollections$Set12::contains (28 bytes)
                              @ 5   java.lang.Object::equals (11 bytes)   no static binding
                              @ 16   java.lang.Object::equals (11 bytes)   no static binding
<writer thread='40195'/>
    853  298       1       java.util.ImmutableCollections$Set12::isEmpty (2 bytes)
<writer thread='43011'/>

============================= C2-compiled nmethod ==============================
<opto_assembly compile_id='305'>
----------------------- MetaData before Compile_id = 305 ------------------------
{method}
 - this oop:          0x0000000126ea3210
 - method holder:     &apos;java/util/ImmutableCollections$SetN$SetNIterator&apos;
 - constants:         0x0000000126ea2ac8 constant pool [74] {0x0000000126ea2ac8} for &apos;java/util/ImmutableCollections$SetN$SetNIterator&apos; cache=0x0000000126ea33a8
 - access:            0x81000002  private 
 - name:              &apos;nextIndex&apos;
 - signature:         &apos;()I&apos;
 - max stack:         4
 - max locals:        2
 - size of params:    1
 - method size:       13
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x000000010c0a1de0
 - adapters:          AHE@0x00007f99308e1660: 0xb0000000 i2c: 0x000000010c0e9ee0 c2i: 0x000000010c0e9fc3 c2iUV: 0x000000010c0e9f8a c2iNCI: 0x000000010c0ea000
 - compiled entry     0x000000010c83b4a0
 - code size:         56
 - code start:        0x0000000126ea31b0
 - code end (excl):   0x0000000126ea31e8
 - method data:       0x0000000126ea5258
 - checked ex length: 0
 - linenumber start:  0x0000000126ea31e8
 - localvar length:   2
 - localvar start:    0x0000000126ea31f6
 - compiled code: nmethod    854  242       3       java.util.ImmutableCollections$SetN$SetNIterator::nextIndex (56 bytes)

------------------------ OptoAssembly for Compile_id = 305 -----------------------
#
#  int ( java/util/ImmutableCollections$SetN$SetNIterator:NotNull:exact * )
#
#r018 rsi:rsi   : parm 0: java/util/ImmutableCollections$SetN$SetNIterator:NotNull:exact *
# -- Old rsp -- Framesize: 32 --
#r583 rsp+28: in_preserve
#r582 rsp+24: return address
#r581 rsp+20: in_preserve
#r580 rsp+16: saved fp register
#r579 rsp+12: pad2, stack alignment
#r578 rsp+ 8: pad2, stack alignment
#r577 rsp+ 4: Fixed slot 1
#r576 rsp+ 0: Fixed slot 0
#
000     N63: #	out( B1 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B6 B2 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (136 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

02c     movl    R11, [RSI + #20 (8-bit)]	# compressed ptr ! Field: java/util/ImmutableCollections$SetN$SetNIterator.this$0
030     movl    R10, [R12 + R11 &lt;&lt; 3 + #16] (compressed oop addressing)	# compressed ptr ! Field: java/util/ImmutableCollections$SetN.elements (constant)
035     NullCheck R11

035     B2: #	out( B7 B3 ) &lt;- in( B1 )  Freq: 0.999999
035     movl    R11, [R12 + R10 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
03a     NullCheck R10

03a     B3: #	out( B5 B4 ) &lt;- in( B2 )  Freq: 0.999998
03a     movl    RAX, [RSI + #16 (8-bit)]	# int ! Field: java/util/ImmutableCollections$SetN$SetNIterator.idx
03d     incl    RAX	# int
03f     cmpl    RAX, R11
042     jge,s   B5  P=0.014376 C=17529.000000

044     B4: #	out( N63 ) &lt;- in( B3 B5 )  Freq: 0.999998
044     movl    [RSI + #16 (8-bit)], RAX	# int ! Field: java/util/ImmutableCollections$SetN$SetNIterator.idx
047     addq    rsp, 16	# Destroy frame
	popq    rbp
	movq    rscratch1, poll_offset[r15_thread] #polling_page_address
	testl   rax, [rscratch1]	# Safepoint: poll for GC

056     ret

057     B5: #	out( B4 ) &lt;- in( B3 )  Freq: 0.0143761
057     xorl    RAX, RAX	# int
059     jmp,s   B4

05b     B6: #	out( N63 ) &lt;- in( B1 )  Freq: 1.01328e-06
05b     movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
063     call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.util.ImmutableCollections$SetN$SetNIterator::nextIndex @ bci:19  L[0]=_ L[1]=_ STK[0]=_ STK[1]=#NULL
        # OopMap {off=104/0x68}
068     ud2	# ShouldNotReachHere

07c     B7: #	out( N63 ) &lt;- in( B2 )  Freq: 1.01328e-06
07c     movl    RSI, #-10	# int
        nop 	# 2 bytes pad for loops and calls
083     call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.util.ImmutableCollections$SetN$SetNIterator::nextIndex @ bci:22  L[0]=_ L[1]=_ STK[0]=_ STK[1]=#NULL
        # OopMap {off=136/0x88}
088     ud2	# ShouldNotReachHere

--------------------------------------------------------------------------------
</opto_assembly>
<writer thread='40195'/>
    856  308       1       java.lang.module.ResolvedModule::reference (5 bytes)
<writer thread='43011'/>
    856  242       3       java.util.ImmutableCollections$SetN$SetNIterator::nextIndex (56 bytes)   made not entrant
<writer thread='42499'/>
    856  284       1       java.util.ImmutableCollections$SetN::size (5 bytes)
<writer thread='9219'/>
    856  317     n 0       jdk.internal.misc.Unsafe::compareAndSetLong (native)   
    856  321     n 0       jdk.internal.misc.Unsafe::compareAndSetReference (native)   
<writer thread='40195'/>
    856  293       3       java.lang.Enum::equals (11 bytes)
<writer thread='43011'/>
<writer thread='42499'/>
    856  320   !   3       java.util.concurrent.ConcurrentHashMap::putVal (432 bytes)
<writer thread='24067'/>
    857  312       3       java.util.ImmutableCollections$Set12$1::next (92 bytes)
<writer thread='43011'/>
    857  313       4       java.util.HashMap::resize (356 bytes)
<writer thread='42499'/>
                              @ 17   java.lang.Object::hashCode (0 bytes)   no static binding
<writer thread='40195'/>
    858  318       3       java.util.concurrent.ConcurrentHashMap$Node::&lt;init&gt; (20 bytes)
                              @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
<writer thread='42499'/>
                              @ 20   java.util.concurrent.ConcurrentHashMap::spread (10 bytes)
                              @ 69   java.util.concurrent.ConcurrentHashMap::tabAt (22 bytes)
                                @ 15   jdk.internal.misc.Unsafe::getReferenceAcquire (7 bytes)
                                  @ 3   jdk.internal.misc.Unsafe::getReferenceVolatile (0 bytes)   intrinsic
                              @ 91   java.util.concurrent.ConcurrentHashMap$Node::&lt;init&gt; (20 bytes)
                                @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
<writer thread='40195'/>
    860  319       3       java.util.concurrent.ConcurrentHashMap::addCount (280 bytes)
<writer thread='24067'/>
                              @ 88  java/util/NoSuchElementException::&lt;init&gt; (not loaded)   not inlineable
<writer thread='42499'/>
                              @ 94   java.util.concurrent.ConcurrentHashMap::casTabAt (21 bytes)
                                @ 17   jdk.internal.misc.Unsafe::compareAndSetReference (0 bytes)   intrinsic
                              @ 120   java.util.concurrent.ConcurrentHashMap::helpTransfer (124 bytes)   callee is too large
<writer thread='40195'/>
                              @ 31   jdk.internal.misc.Unsafe::compareAndSetLong (0 bytes)   intrinsic
<writer thread='40963'/>
    862  323       3       java.util.concurrent.ConcurrentHashMap::putIfAbsent (8 bytes)
               !m             @ 4   java.util.concurrent.ConcurrentHashMap::putVal (432 bytes)   callee is too large
<writer thread='42499'/>
                              @ 159   java.lang.Object::equals (11 bytes)   no static binding
<writer thread='24067'/>
    862  322       3       java.util.concurrent.ConcurrentHashMap::casTabAt (21 bytes)
<writer thread='40195'/>
                              @ 58  java/util/concurrent/ThreadLocalRandom::getProbe (not loaded)   not inlineable
                              @ 91   jdk.internal.misc.Unsafe::compareAndSetLong (0 bytes)   intrinsic
<writer thread='24067'/>
                              @ 17   jdk.internal.misc.Unsafe::compareAndSetReference (0 bytes)   intrinsic
<writer thread='40195'/>
                              @ 115   java.util.concurrent.ConcurrentHashMap::sumCount (60 bytes)   callee is too large
<writer thread='40963'/>
    863  290       3       jdk.internal.module.ModuleReferenceImpl::hashCode (56 bytes)
<writer thread='40195'/>
                              @ 161   java.util.concurrent.ConcurrentHashMap::resizeStamp (9 bytes)
<writer thread='40963'/>
                              @ 10   java.lang.module.ModuleReference::descriptor (5 bytes)
                              @ 13   java.lang.module.ModuleDescriptor::hashCode (170 bytes)   callee is too large
                              @ 25   java.util.Objects::hashCode (13 bytes)
                                @ 5   java.net.URI::hashCode (123 bytes)   callee is too large
                              @ 38   java.util.Objects::hashCode (13 bytes)
                                
<writer thread='42499'/>
                              @ 192   java.util.concurrent.ConcurrentHashMap::tabAt (22 bytes)
<writer thread='40195'/>
                                @ 1   java.lang.Integer::numberOfLeadingZeros (79 bytes)   callee is too large
<writer thread='24067'/>
    865  297       1       java.lang.module.ModuleDescriptor::isAutomatic (5 bytes)
<writer thread='25091'/>

============================= C2-compiled nmethod ==============================
<opto_assembly compile_id='311'>
----------------------- MetaData before Compile_id = 311 ------------------------
{method}
 - this oop:          0x0000000126ea3308
 - method holder:     &apos;java/util/ImmutableCollections$SetN$SetNIterator&apos;
 - constants:         0x0000000126ea2ac8 constant pool [74] {0x0000000126ea2ac8} for &apos;java/util/ImmutableCollections$SetN$SetNIterator&apos; cache=0x0000000126ea33a8
 - access:            0xc1000001  public 
 - name:              &apos;next&apos;
 - signature:         &apos;()Ljava/lang/Object;&apos;
 - max stack:         4
 - max locals:        2
 - size of params:    1
 - method size:       13
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x000000010c0a1de0
 - adapters:          AHE@0x00007f99308e1660: 0xb0000000 i2c: 0x000000010c0e9ee0 c2i: 0x000000010c0e9fc3 c2iUV: 0x000000010c0e9f8a c2iNCI: 0x000000010c0ea000
 - compiled entry     0x000000010c845d00
 - code size:         47
 - code start:        0x0000000126ea32b0
 - code end (excl):   0x0000000126ea32df
 - method data:       0x0000000126eb4ee8
 - checked ex length: 0
 - linenumber start:  0x0000000126ea32df
 - localvar length:   2
 - localvar start:    0x0000000126ea32ec
 - compiled code: nmethod    865  263       3       java.util.ImmutableCollections$SetN$SetNIterator::next (47 bytes)

------------------------ OptoAssembly for Compile_id = 311 -----------------------
#
#  java/lang/Object * ( java/util/ImmutableCollections$SetN$SetNIterator:NotNull:exact * )
#
#r018 rsi:rsi   : parm 0: java/util/ImmutableCollections$SetN$SetNIterator:NotNull:exact *
# -- Old rsp -- Framesize: 48 --
#r583 rsp+44: in_preserve
#r582 rsp+40: return address
#r581 rsp+36: in_preserve
#r580 rsp+32: saved fp register
#r579 rsp+28: pad2, stack alignment
#r578 rsp+24: pad2, stack alignment
#r577 rsp+20: Fixed slot 1
#r576 rsp+16: Fixed slot 0
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N168: #	out( B1 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B18 B2 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (248 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

02c     movl    RCX, [RSI + #12 (8-bit)]	# int ! Field: java/util/ImmutableCollections$SetN$SetNIterator.remaining
02f     testl   RCX, RCX
031     jle     B18  P=0.000000 C=8855.000000

037     B2: #	out( B19 B3 ) &lt;- in( B1 )  Freq: 1
037     movl    R11, [RSI + #20 (8-bit)]	# compressed ptr ! Field: java/util/ImmutableCollections$SetN$SetNIterator.this$0
03b     movl    R9, [R12 + R11 &lt;&lt; 3 + #16] (compressed oop addressing)	# compressed ptr ! Field: java/util/ImmutableCollections$SetN.elements (constant)
040     NullCheck R11

040     B3: #	out( B20 B4 ) &lt;- in( B2 )  Freq: 0.999999
040     movl    R10, [R12 + R9 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
045     NullCheck R9

045     B4: #	out( B14 B5 ) &lt;- in( B3 )  Freq: 0.999997
045     movl    R8, [RSI + #16 (8-bit)]	# int ! Field: java/util/ImmutableCollections$SetN$SetNIterator.idx
049     incl    R8	# int
04c     cmpl    R8, R10
04f     jge,s   B14  P=0.014376 C=17529.000000

051     B5: #	out( B16 B6 ) &lt;- in( B4 B14 )  Freq: 0.999997
051     movl    [RSI + #16 (8-bit)], R8	# int ! Field: java/util/ImmutableCollections$SetN$SetNIterator.idx
055     cmpl    R8, R10	# unsigned
058     jnb,us  B16  P=0.000001 C=-1.000000

05a     B6: #	out( B12 B7 ) &lt;- in( B5 )  Freq: 0.999996
05a     decode_heap_oop_not_null R11,R9
05e     movl    R8, [R11 + #16 + R8 &lt;&lt; #2]	# compressed ptr
063     testl   R8, R8	# compressed ptr
066     jne,s   B12  P=0.505567 C=17515.000000

068     B7: #	out( B8 ) &lt;- in( B6 )  Freq: 0.494432
068     # TLS is in R15

068     B8: #	out( B15 B9 ) &lt;- in( B7 B10 ) Loop( B8-B10 inner ) Freq: 0.977974
068     movq    R8, [R15 + #296 (32-bit)]	# ptr
06f     testl   rax, [R8]	# Safepoint: poll for GC        # java.util.ImmutableCollections$SetN$SetNIterator::next @ bci:24  L[0]=RSI L[1]=_
        # OopMap {r11=Oop r9=NarrowOop rsi=Oop off=111/0x6f}
072     movl    R8, [RSI + #16 (8-bit)]	# int ! Field: java/util/ImmutableCollections$SetN$SetNIterator.idx
076     incl    R8	# int
079     cmpl    R8, R10
07c     jge,s   B15  P=0.014376 C=17529.000000

07e     B9: #	out( B17 B10 ) &lt;- in( B8 B15 )  Freq: 0.977974
07e     movl    [RSI + #16 (8-bit)], R8	# int ! Field: java/util/ImmutableCollections$SetN$SetNIterator.idx
082     cmpl    R8, R10	# unsigned
085     jnb,us  B17  P=0.000001 C=-1.000000

087     B10: #	out( B8 B11 ) &lt;- in( B9 )  Freq: 0.977973
087     movl    R8, [R11 + #16 + R8 &lt;&lt; #2]	# compressed ptr
08c     testl   R8, R8	# compressed ptr
08f     je,s   B8  P=0.494433 C=8660.000000

091     B11: #	out( B13 ) &lt;- in( B10 )  Freq: 0.494431
091     decode_heap_oop_not_null RAX,R8
095     jmp,s   B13

097     B12: #	out( B13 ) &lt;- in( B6 )  Freq: 0.505565
097     decode_heap_oop_not_null RAX,R8

09b     B13: #	out( N168 ) &lt;- in( B11 B12 )  Freq: 0.999995
09b     decl    RCX	# int
09d     movl    [RSI + #12 (8-bit)], RCX	# int ! Field: java/util/ImmutableCollections$SetN$SetNIterator.remaining
0a0     addq    rsp, 32	# Destroy frame
	popq    rbp
	movq    rscratch1, poll_offset[r15_thread] #polling_page_address
	testl   rax, [rscratch1]	# Safepoint: poll for GC

0af     ret

0b0     B14: #	out( B5 ) &lt;- in( B4 )  Freq: 0.0143761
0b0     xorl    R8, R8	# int
0b3     jmp,s   B5

0b5     B15: #	out( B9 ) &lt;- in( B8 )  Freq: 0.0140595
0b5     xorl    R8, R8	# int
0b8     jmp,s   B9

0ba     B16: #	out( N168 ) &lt;- in( B5 )  Freq: 1.01328e-06
0ba     movq    RBP, RSI	# spill
0bd     movl    [rsp + #0], R9	# spill
0c1     movl    [rsp + #4], R8	# spill
0c6     movl    RSI, #-28	# int
0cb     call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos; debug_id=&apos;0&apos;)
        # java.util.ImmutableCollections$SetN$SetNIterator::next @ bci:18  L[0]=RBP L[1]=_ STK[0]=rsp + #0 STK[1]=rsp + #4
        # OopMap {rbp=Oop [0]=NarrowOop off=208/0xd0}
0d0     ud2	# ShouldNotReachHere

0e4     B17: #	out( N168 ) &lt;- in( B9 )  Freq: 9.90961e-07
0e4     movq    RBP, RSI	# spill
0e7     movl    [rsp + #0], R9	# spill
0eb     movl    [rsp + #4], R8	# spill
0f0     movl    RSI, #-28	# int
        nop 	# 2 bytes pad for loops and calls
0f7     call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos; debug_id=&apos;0&apos;)
        # java.util.ImmutableCollections$SetN$SetNIterator::next @ bci:18  L[0]=RBP L[1]=_ STK[0]=rsp + #0 STK[1]=rsp + #4
        # OopMap {rbp=Oop [0]=NarrowOop off=252/0xfc}
0fc     ud2	# ShouldNotReachHere

110     B18: #	out( N168 ) &lt;- in( B1 )  Freq: 5e-07
110     movq    RBP, RSI	# spill
113     movl    [rsp + #0], RCX	# spill
116     movl    RSI, #-187	# int
11b     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.util.ImmutableCollections$SetN$SetNIterator::next @ bci:4  L[0]=RBP L[1]=_ STK[0]=rsp + #0
        # OopMap {rbp=Oop off=288/0x120}
120     ud2	# ShouldNotReachHere

134     B19: #	out( N168 ) &lt;- in( B2 )  Freq: 1.01328e-06
134     movl    RSI, #-10	# int
        nop 	# 2 bytes pad for loops and calls
13b     call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.util.ImmutableCollections$SetN$SetNIterator::next @ bci:11  L[0]=_ L[1]=_ STK[0]=#NULL
        # OopMap {off=320/0x140}
140     ud2	# ShouldNotReachHere

154     B20: #	out( N168 ) &lt;- in( B3 )  Freq: 1.01328e-06
154     movl    RSI, #-10	# int
        nop 	# 2 bytes pad for loops and calls
15b     call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.util.ImmutableCollections$SetN$SetNIterator::nextIndex @ bci:22  L[0]=_ L[1]=_ STK[0]=_ STK[1]=#NULL
        # java.util.ImmutableCollections$SetN$SetNIterator::next @ bci:15  L[0]=_ L[1]=_ STK[0]=_
        # OopMap {off=352/0x160}
160     ud2	# ShouldNotReachHere

--------------------------------------------------------------------------------
</opto_assembly>
<writer thread='40195'/>
                              @ 227  
<writer thread='42499'/>
             
<writer thread='24067'/>
    868  296       3       java.lang.module.ResolvedModule::hashCode (16 bytes)
<writer thread='40963'/>
@ 5  
<writer thread='42499'/>
                   @ 15   jdk.internal.misc.Unsafe::getReferenceAcquire (7 bytes)
<writer thread='25091'/>
    868  263       3       java.util.ImmutableCollections$SetN$SetNIterator::next (47 bytes)   made not entrant
<writer thread='40195'/>
 jdk.internal.misc.Unsafe::
<writer thread='25091'/>
                              @ 15   java.util.ImmutableCollections$SetN$SetNIterator::nextIndex (56 bytes)   inline (hot)
                              @ 15   java.util.ImmutableCollections$SetN$SetNIterator::nextIndex (56 bytes)   inline (hot)
<writer thread='24067'/>
             
<writer thread='25091'/>
    869  309       4       java.util.ImmutableCollections$SetN$SetNIterator::hasNext (13 bytes)
<writer thread='40195'/>
compareAndSetInt (0 bytes)   intrinsic
<writer thread='24067'/>
      
<writer thread='40963'/>
 java.lang.Object::hashCode (0 bytes)   native method
<writer thread='25091'/>

============================= C2-compiled nmethod ==============================
<opto_assembly compile_id='309'>
----------------------- MetaData before Compile_id = 309 ------------------------
{method}
 - this oop:          0x0000000126ea3110
 - method holder:     &apos;java/util/ImmutableCollections$SetN$SetNIterator&apos;
 - constants:         0x0000000126ea2ac8 constant pool [74] {0x0000000126ea2ac8} for &apos;java/util/ImmutableCollections$SetN$SetNIterator&apos; cache=0x0000000126ea33a8
 - access:            0x81000001  public 
 - name:              &apos;hasNext&apos;
 - signature:         &apos;()Z&apos;
 - max stack:         2
 - max locals:        1
 - size of params:    1
 - method size:       13
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x000000010c0a1de0
 - adapters:          AHE@0x00007f99308e1660: 0xb0000000 i2c: 0x000000010c0e9ee0 c2i: 0x000000010c0e9fc3 c2iUV: 0x000000010c0e9f8a c2iNCI: 0x000000010c0ea000
 - compiled entry     0x000000010c846560
 - code size:         13
 - code start:        0x0000000126ea30f0
 - code end (excl):   0x0000000126ea30fd
 - method data:       0x0000000126eb9990
 - checked ex length: 0
 - linenumber start:  0x0000000126ea30fd
 - localvar length:   1
 - localvar start:    0x0000000126ea3102
 - compiled code: nmethod    870  265       3       java.util.ImmutableCollections$SetN$SetNIterator::hasNext (13 bytes)

------------------------ OptoAssembly for Compile_id = 309 -----------------------
#
#  bool ( java/util/ImmutableCollections$SetN$SetNIterator:NotNull:exact * )
#
#r018 rsi:rsi   : parm 0: java/util/ImmutableCollections$SetN$SetNIterator:NotNull:exact *
# -- Old rsp -- Framesize: 32 --
#r583 rsp+28: in_preserve
#r582 rsp+24: return address
#r581 rsp+20: in_preserve
#r580 rsp+16: saved fp register
#r579 rsp+12: pad2, stack alignment
#r578 rsp+ 8: pad2, stack alignment
#r577 rsp+ 4: Fixed slot 1
#r576 rsp+ 0: Fixed slot 0
#
000     N29: #	out( B1 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B4 B2 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (96 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

02c     movl    R11, [RSI + #12 (8-bit)]	# int ! Field: java/util/ImmutableCollections$SetN$SetNIterator.remaining
030     testl   R11, R11
033     jle,s   B4  P=0.036299 C=10634.000000

035     B2: #	out( B3 ) &lt;- in( B1 )  Freq: 0.963701
035     movl    RAX, #1	# int

03a     B3: #	out( N29 ) &lt;- in( B4 B2 )  Freq: 1
03a     addq    rsp, 16	# Destroy frame
	popq    rbp
	movq    rscratch1, poll_offset[r15_thread] #polling_page_address
	testl   rax, [rscratch1]	# Safepoint: poll for GC

049     ret

04a     B4: #	out( B3 ) &lt;- in( B1 )  Freq: 0.0362987
04a     xorl    RAX, RAX	# int
04c     jmp,s   B3

--------------------------------------------------------------------------------
</opto_assembly>
<writer thread='42499'/>
                                  @ 3   jdk.internal.misc.Unsafe::getReferenceVolatile (0 bytes)   intrinsic
<writer thread='25091'/>
    871  265       3       java.util.ImmutableCollections$SetN$SetNIterator::hasNext (13 bytes)   made not entrant
    871  294       4       java.util.HashMap::afterNodeInsertion (1 bytes)
<writer thread='42499'/>
                              @ 242   java.lang.Object::equals (11 bytes)   no static binding
                              @ 293  
<writer thread='40195'/>
               !m             @ 238   java.util.concurrent.ConcurrentHashMap::transfer (849 bytes)   callee is too large
                              @ 257   jdk.internal.misc.Unsafe::compareAndSetInt (0 bytes)   intrinsic
               !m             @ 267   java.util.concurrent.ConcurrentHashMap::transfer (849 bytes)   callee is too large
                              @ 271   java.util.concurrent.ConcurrentHashMap::sumCount (60 bytes)   callee is too large
<writer thread='24067'/>
           
<writer thread='42499'/>
 java.util.concurrent.ConcurrentHashMap$Node::&lt;init&gt; (20 bytes)
                                @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
<writer thread='25091'/>

============================= C2-compiled nmethod ==============================
<opto_assembly compile_id='294'>
----------------------- MetaData before Compile_id = 294 ------------------------
{method}
 - this oop:          0x0000000126af6648
 - method holder:     &apos;java/util/HashMap&apos;
 - constants:         0x0000000126af0d88 constant pool [593] {0x0000000126af0d88} for &apos;java/util/HashMap&apos; cache=0x0000000126af6970
 - access:            0x81000000  
 - name:              &apos;afterNodeInsertion&apos;
 - signature:         &apos;(Z)V&apos;
 - max stack:         1
 - max locals:        2
 - size of params:    2
 - method size:       13
 - highest level:     3
 - vtable index:      31
 - i2i entry:         0x000000010c0a1de0
 - adapters:          AHE@0x00007f99308e1840: 0xba000000 i2c: 0x000000010c0e89e0 c2i: 0x000000010c0e8ac6 c2iUV: 0x000000010c0e8a8d c2iNCI: 0x000000010c0e8b03
 - compiled entry     0x000000010c805ce0
 - code size:         1
 - code start:        0x0000000126af6628
 - code end (excl):   0x0000000126af6629
 - method data:       0x0000000126e91ec0
 - checked ex length: 0
 - linenumber start:  0x0000000126af6629
 - localvar length:   2
 - localvar start:    0x0000000126af662e
 - compiled code: nmethod    873  128       3       java.util.HashMap::afterNodeInsertion (1 bytes)

------------------------ OptoAssembly for Compile_id = 294 -----------------------
#
#  void ( java/util/HashMap:NotNull *, int )
#
#r018 rsi:rsi   : parm 0: java/util/HashMap:NotNull *
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 32 --
#r583 rsp+28: in_preserve
#r582 rsp+24: return address
#r581 rsp+20: in_preserve
#r580 rsp+16: saved fp register
#r579 rsp+12: pad2, stack alignment
#r578 rsp+ 8: pad2, stack alignment
#r577 rsp+ 4: Fixed slot 1
#r576 rsp+ 0: Fixed slot 0
#
000     N14: #	out( B1 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( N14 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (96 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

02c     addq    rsp, 16	# Destroy frame
	popq    rbp
	movq    rscratch1, poll_offset[r15_thread] #polling_page_address
	testl   rax, [rscratch1]	# Safepoint: poll for GC

03b     ret

--------------------------------------------------------------------------------
</opto_assembly>
<writer thread='40195'/>
               !              
<writer thread='25091'/>
    874  128       3       java.util.HashMap::afterNodeInsertion (1 bytes)   made not entrant
<writer thread='40195'/>
@ 104   java.util.concurrent.ConcurrentHashMap::fullAddCount (462 bytes)   callee is too large
<writer thread='40963'/>
    874  315       3       java.util.ImmutableCollections$SetN::iterator (9 bytes)
        
<writer thread='25091'/>
<writer thread='40963'/>
                      @ 5   java.util.ImmutableCollections$SetN$SetNIterator::&lt;init&gt; (40 bytes)   callee is too large
<writer thread='42499'/>
                              
<writer thread='25091'/>
    875  324       4       java.util.concurrent.ConcurrentHashMap::spread (10 bytes)
<writer thread='40963'/>
    875  316       3       java.util.ImmutableCollections$SetN$SetNIterator::&lt;init&gt; (40 bytes)
             
<writer thread='24067'/>
@ 4   java.lang.Object::hashCode (0 bytes)   native method
                              @ 11   java.lang.Object::hashCode (0 bytes)   no static binding
<writer thread='25091'/>

<writer thread='42499'/>
@ 331  java/util/concurrent/ConcurrentHashMap$TreeBin::putTreeVal (not loaded)   not inlineable
                              @ 374  java/lang/IllegalStateException::&lt;init&gt; (not loaded)   not inlineable
               !m             @ 409  
<writer thread='24067'/>
    877  327       3       java.util.HashSet::toArray (18 bytes)
<writer thread='40963'/>
                 @ 6   java.lang.Object::&lt;init&gt; (1 bytes)
                   
<writer thread='25091'/>
============================= C2-compiled nmethod ==============================
<writer thread='24067'/>
        
<writer thread='25091'/>
<opto_assembly compile_id='324'>
----------------------- MetaData before Compile_id = 324 ------------------------
{method}
 - this oop:          0x0000000126afcc88
 - method holder:     &apos;java/util/concurrent/ConcurrentHashMap&apos;
 - constants:         0x0000000126af7a00 constant pool [1210] {0x0000000126af7a00} for &apos;java/util/concurrent/ConcurrentHashMap&apos; cache=0x0000000126b05818
 - access:            0x81000018  static final 
 - name:              &apos;spread&apos;
 - signature:         &apos;(I)I&apos;
 - max stack:         4
 - max locals:        1
 - size of params:    1
 - method size:       13
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x000000010c0a1de0
 - adapters:          AHE@0x00007f99308e1750: 0xa0000000 i2c: 0x000000010c0e9460 c2i: 0x000000010c0e9542 c2iUV: 0x000000010c0e9509 c2iNCI: 0x000000010c0e957f
 - compiled entry     0x000000010c7df7c0
 - code size:         10
 - code start:        0x0000000126afcc68
 - code end (excl):   0x0000000126afcc72
 - method data:       0x0000000126dc9038
 - checked ex length: 0
 - linenumber start:  0x0000000126afcc72
 - localvar length:   1
 - localvar start:    0x0000000126afcc7a
 - compiled code: nmethod    878   51       3       java.util.concurrent.ConcurrentHashMap::spread (10 bytes)

------------------------ OptoAssembly for Compile_id = 324 -----------------------
#
#  int ( int )
#
#r018 rsi   : parm 0: int
# -- Old rsp -- Framesize: 32 --
#r583 rsp+28: in_preserve
#r582 rsp+24: return address
#r581 rsp+20: in_preserve
#r580 rsp+16: saved fp register
#r579 rsp+12: pad2, stack alignment
#r578 rsp+ 8: pad2, stack alignment
#r577 rsp+ 4: Fixed slot 1
#r576 rsp+ 0: Fixed slot 0
#
000     N1: #	out( B1 ) &lt;- in( B1 )  Freq: 1

000     B1: #	out( N1 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
000     # stack bang (96 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

00c     movl    RAX, RSI	# spill
00e     shrl    RAX, #16
011     xorl    RAX, RSI	# int
013     andl    RAX, #2147483647	# int
019     addq    rsp, 16	# Destroy frame
	popq    rbp
	movq    rscratch1, poll_offset[r15_thread] #polling_page_address
	testl   rax, [rscratch1]	# Safepoint: poll for GC

028     ret

--------------------------------------------------------------------------------
</opto_assembly>
    878   51       3       java.util.concurrent.ConcurrentHashMap::spread (10 bytes)   made not entrant
<writer thread='24067'/>
                      @ 8   java.util.HashMap::size (5 bytes)
                              @ 14   java.util.HashMap::keysToArray (81 bytes)   no static binding
<writer thread='40963'/>
           @ 11   java.util.ImmutableCollections$SetN::size (5 bytes)
                              @ 33   java.lang.Math::floorMod (20 bytes)
<writer thread='24067'/>
    879  291       3       java.util.HashSet::&lt;init&gt; (16 bytes)
                              @ 1   java.util.AbstractSet::&lt;init&gt; (5 bytes)
                                @ 1   java.util.AbstractCollection::&lt;init&gt; (5 bytes)
                                  @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
                              @ 9   java.util.HashMap::&lt;init&gt; (11 bytes)
                                @ 1   java.util.AbstractMap::&lt;init&gt; (5 bytes)
                                  @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
<writer thread='25091'/>
    881  286       4       java.util.HashMap::put (13 bytes)
<writer thread='42499'/>
 java.util.concurrent.ConcurrentHashMap::treeifyBin (164 bytes)   callee is too large
                              @ 427   java.util.concurrent.ConcurrentHashMap::addCount (280 bytes)   callee is too large
               !              @ 49   java.util.concurrent.ConcurrentHashMap::initTable (112 bytes)   callee is too large
                              @ 12   java.lang.NullPointerException::&lt;init&gt; (5 bytes)   don&apos;t inline Throwable constructors
<writer thread='40963'/>
    882  331       3       java.util.HashSet::&lt;init&gt; (40 bytes)
                              @ 1   java.util.AbstractSet::&lt;init&gt; (5 bytes)
                                @ 1   java.util.AbstractCollection::&lt;init&gt; (5 bytes)
                                  @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
<writer thread='24067'/>
    883  332       3       java.util.HashMap::&lt;init&gt; (98 bytes)
<writer thread='40963'/>
                              @ 10   java.util.Collection::size (0 bytes)   no static binding
<writer thread='24067'/>
                              @ 1   java.util.AbstractMap::&lt;init&gt; (5 bytes)
                                @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
                              @ 16   java.lang.StringBuilder::&lt;init&gt; (7 bytes)
                                @ 3   java.lang.AbstractStringBuilder::&lt;init&gt; (39 bytes)   callee is too large
                              @ 21   java.lang.StringBuilder::append (8 bytes)
                                @ 2   java.lang.AbstractStringBuilder::append (45 bytes)   callee is too large
                              @ 25   java.lang.StringBuilder::append (8 bytes)
                                @ 2   java.lang.AbstractStringBuilder::append (55 bytes)   callee is too large
                              @ 28   java.lang.StringBuilder::toString (35 bytes)
                                @ 1   java.lang.AbstractStringBuilder::isLatin1 (19 bytes)
                                @ 16   java.lang.StringLatin1::newString (17 bytes)
                                  @ 9   java.util.Arrays::copyOfRange (64 bytes)   callee is too large
                                  @ 13   java.lang.String::&lt;init&gt; (15 bytes)
                                    @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
                                @ 31   java.lang.StringUTF16::newString (50 bytes)   callee is too large
                              @ 31   java.lang.IllegalArgumentException::&lt;init&gt; (6 bytes)   don&apos;t inline Throwable constructors
                              @ 51   java.lang.Float::isNaN (12 bytes)
<writer thread='40963'/>
                              @ 24   java.lang.Math::max (11 bytes)
<writer thread='24067'/>
                              @ 91   java.util.HashMap::tableSizeFor (32 bytes)
<writer thread='40963'/>
                              @ 27   java.util.HashMap::&lt;init&gt; (8 bytes)
<writer thread='24067'/>
                                @ 4   java.lang.Integer::numberOfLeadingZeros (79 bytes)   callee is too large
<writer thread='40963'/>
                                @ 4   java.util.HashMap::&lt;init&gt; (98 bytes)   callee is too large
                              @ 35   java.util.AbstractCollection::addAll (42 bytes)   callee is too large
<writer thread='24067'/>
                              @ 65   java.lang.StringBuilder::&lt;init&gt; (7 bytes)
                                @ 3   java.lang.AbstractStringBuilder::&lt;init&gt; (39 bytes)   callee is too large
                              @ 70   java.lang.StringBuilder::append (8 bytes)
                                @ 2   java.lang.AbstractStringBuilder::append (45 bytes)   callee is too large
                              @ 74   java.lang.StringBuilder::append (8 bytes)
                                @ 2   java.lang.AbstractStringBuilder::append (7 bytes)
                                  @ 2  jdk/internal/math/FloatingDecimal::appendTo (not loaded)   not inlineable
                              @ 77   java.lang.StringBuilder::toString (35 bytes)
                                @ 1   java.lang.AbstractStringBuilder::isLatin1 (19 bytes)
                                @ 16   java.lang.StringLatin1::newString (17 bytes)
                                  @ 9   java.util.Arrays::copyOfRange (64 bytes)   callee is too large
                                  @ 13   java.lang.String::&lt;init&gt; (15 bytes)
                                    @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
                                @ 31   java.lang.StringUTF16::newString (50 bytes)   callee is too large
                              @ 80   java.lang.IllegalArgumentException::&lt;init&gt; (6 bytes)   don&apos;t inline Throwable constructors
<writer thread='40195'/>
    890  335       3       java.util.Set::copyOf (27 bytes)
<writer thread='40963'/>
    891  333       3       java.util.HashMap::&lt;init&gt; (8 bytes)
                              @ 4   java.util.HashMap::&lt;init&gt; (98 bytes)   callee is too large
    892  328       3       java.util.ImmutableCollections$Set12::size (13 bytes)
<writer thread='40195'/>
                              @ 17   java.util.HashSet::&lt;init&gt; (40 bytes)   callee is too large
                              @ 20   java.util.HashSet::toArray (18 bytes)
                                @ 8   java.util.HashMap::size (5 bytes)
                                @ 14   java.util.HashMap::keysToArray (81 bytes)   no static binding
                              @ 23   java.util.Set::of (68 bytes)   callee is too large
<writer thread='40963'/>
    894  306       1       java.lang.module.ModuleDescriptor::provides (5 bytes)
    895  329       3       java.util.ImmutableCollections$Set12::iterator (9 bytes)
                              @ 5   java.util.ImmutableCollections$Set12$1::&lt;init&gt; (21 bytes)
<writer thread='40195'/>
    895  330       3       java.util.ImmutableCollections$Set12$1::&lt;init&gt; (21 bytes)
                              @ 6   java.lang.Object::&lt;init&gt; (1 bytes)
                              @ 14   java.util.ImmutableCollections$Set12::size (13 bytes)
    899  337       3       java.lang.module.ResolvedModule::name (11 bytes)
                              @ 1   java.lang.module.ResolvedModule::reference (5 bytes)
                              @ 4   java.lang.module.ModuleReference::descriptor (5 bytes)
                              @ 7   java.lang.module.ModuleDescriptor::name (5 bytes)
<writer thread='24323'/>

============================= C2-compiled nmethod ==============================
<opto_assembly compile_id='245'>
----------------------- MetaData before Compile_id = 245 ------------------------
{method}
 - this oop:          0x0000000126af3638
 - method holder:     &apos;java/util/HashMap&apos;
 - constants:         0x0000000126af0d88 constant pool [593] {0x0000000126af0d88} for &apos;java/util/HashMap&apos; cache=0x0000000126af6970
 - access:            0xc1000010  final 
 - name:              &apos;putVal&apos;
 - signature:         &apos;(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;&apos;
 - max stack:         8
 - max locals:        13
 - size of params:    6
 - method size:       13
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x000000010c0a1de0
 - adapters:          AHE@0x00007f992d825590: 0xbabbaa00 i2c: 0x000000010c0d3de0 c2i: 0x000000010c0d3ed5 c2iUV: 0x000000010c0d3e9c c2iNCI: 0x000000010c0d3f12
 - compiled entry     0x000000010c0d3ed5
 - code size:         300
 - code start:        0x0000000126af3408
 - code end (excl):   0x0000000126af3534
 - method data:       0x0000000126e90bb8
 - checked ex length: 0
 - linenumber start:  0x0000000126af3534
 - localvar length:   18
 - localvar start:    0x0000000126af355c

------------------------ OptoAssembly for Compile_id = 245 -----------------------
#
#  java/lang/Object * ( java/util/HashMap:NotNull *, int, java/lang/Object *, java/lang/Object *, int, int )
#
#r018 rsi:rsi   : parm 0: java/util/HashMap:NotNull *
#r016 rdx   : parm 1: int
#r010 rcx:rcx   : parm 2: java/lang/Object *
#r004 r8:r8   : parm 3: java/lang/Object *
#r006 r9   : parm 4: int
#r014 rdi   : parm 5: int
# -- Old rsp -- Framesize: 128 --
#r583 rsp+124: in_preserve
#r582 rsp+120: return address
#r581 rsp+116: in_preserve
#r580 rsp+112: saved fp register
#r579 rsp+108: pad2, stack alignment
#r578 rsp+104: pad2, stack alignment
#r577 rsp+100: Fixed slot 1
#r576 rsp+96: Fixed slot 0
#r607 rsp+92: spill
#r606 rsp+88: spill
#r605 rsp+84: spill
#r604 rsp+80: spill
#r603 rsp+76: spill
#r602 rsp+72: spill
#r601 rsp+68: spill
#r600 rsp+64: spill
#r599 rsp+60: spill
#r598 rsp+56: spill
#r597 rsp+52: spill
#r596 rsp+48: spill
#r595 rsp+44: spill
#r594 rsp+40: spill
#r593 rsp+36: spill
#r592 rsp+32: spill
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
0000    N1501: #	out( B1 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
0000    movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


0020    B1: #	out( B58 B2 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
0020    # stack bang (392 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #112	# Create frame

002c    movl    [rsp + #36], RDI	# spill
0030    movl    [rsp + #32], R9	# spill
0035    movq    [rsp + #24], R8	# spill
003a    movq    [rsp + #8], RCX	# spill
003f    movl    [rsp + #16], RDX	# spill
0043    movq    [rsp + #0], RSI	# spill
0047    movl    R11, [RSI + #36 (8-bit)]	# compressed ptr ! Field: java/util/HashMap.table
004b    testl   R11, R11	# compressed ptr
004e    je     B58  P=0.199526 C=7603.000000

0054    B2: #	out( B90 B3 ) &lt;- in( B1 )  Freq: 0.800474
0054    movl    R10, [R12 + R11 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
0059    testl   R10, R10	# unsigned
005c    jbe,u   B90  P=0.000000 C=6086.000000

0062    B3: #	out( B4 ) &lt;- in( B2 )  Freq: 0.800473
0062    decode_heap_oop_not_null R11,R11
0066    movq    [rsp + #40], R11	# spill

006b    B4: #	out( B88 B5 ) &lt;- in( B60 B3 )  Freq: 0.999995
006b    movl    RDI, R10	# spill
006e    decl    RDI	# int
0070    andl    RDI, [RSP + #16 (32-bit)]	# int
0074    testl   R10, R10
0077    jle     B88  P=0.000001 C=-1.000000

007d    B5: #	out( B49 B6 ) &lt;- in( B4 )  Freq: 0.999994
007d    movq    R10, [rsp + #40]	# spill
0082    leaq    RBP, [R10 + #16 + RDI &lt;&lt; #2]	# ptr posidxscaleoff
0087    movl    R11, [RBP]	# compressed ptr
008b    movq    R10, [rsp + #8]	# spill
0090    encode_heap_oop R9,R10
00bc    movq    R8, [rsp + #24]	# spill
00c1    encode_heap_oop R8,R8
00ea    movl    [rsp + #8], R8	# spill
00ef    movl    R8, narrowklass: precise klass java/util/HashMap$Node: 0x0000000127a03610:Constant:exact *	# compressed klass ptr
00f5    decode_klass_not_null RCX,R8
0102    testl   R11, R11	# compressed ptr
0105    je     B49  P=0.726029 C=7603.000000

010b    B6: #	out( B23 B7 ) &lt;- in( B5 )  Freq: 0.273969
010b    movl    RBX, [R12 + R11 &lt;&lt; 3 + #12] (compressed oop addressing)	# int ! Field: java/util/HashMap$Node.hash
0110    decode_heap_oop_not_null R14,R11
0114    cmpl    RBX, [RSP + #16 (32-bit)]
0118    jne     B23  P=0.724436 C=2083.000000

011e    B7: #	out( B100 B8 ) &lt;- in( B6 )  Freq: 0.0754961
011e    movl    RCX, [R12 + R11 &lt;&lt; 3 + #16] (compressed oop addressing)	# compressed ptr ! Field: java/util/HashMap$Node.key
0123    decode_heap_oop R8,RCX
014f    cmpq    R8, R10	# ptr
0152    je,u   B100  P=0.000000 C=574.000000

0158    B8: #	out( B109 B9 ) &lt;- in( B7 )  Freq: 0.0754961
0158    movl    RBX, [R10 + #8 (8-bit)]	# compressed klass ptr
015c    NullCheck R10

015c    B9: #	out( B94 B10 ) &lt;- in( B8 )  Freq: 0.075496
015c    cmpl    RBX, narrowklass: precise klass java/lang/String: 0x000000010bf8aca0:Constant:exact *	# compressed klass ptr
0162    jne,u   B94  P=0.000001 C=-1.000000

0168    B10: #	out( B16 B11 ) &lt;- in( B9 )  Freq: 0.0754959
0168    movq    R9, R10	# spill
016b    # checkcastPP of R9
016b    cmpq    R9, R8	# ptr
016e    je,u   B16  P=0.097928 C=4248.000000

0174    B11: #	out( B108 B12 ) &lt;- in( B10 )  Freq: 0.0681027
0174    movl    R10, [R12 + RCX &lt;&lt; 3 + #8] (compressed oop addressing)	# compressed klass ptr
0179    NullCheck RCX

0179    B12: #	out( B105 B13 ) &lt;- in( B11 )  Freq: 0.0681027
0179    cmpl    R10, narrowklass: precise klass java/lang/String: 0x000000010bf8aca0:Constant:exact *	# compressed klass ptr
0180    jne,u   B105  P=0.000000 C=-1.000000

0186    B13: #	out( B101 B14 ) &lt;- in( B12 )  Freq: 0.0681027
0186    movsbl  RBX, [R9 + #20 (8-bit)]	# byte ! Field: java/lang/String.coder (constant)
018b    decode_heap_oop_not_null RDI,RCX
018f    # checkcastPP of RDI
018f    movsbl  RCX, [RDI + #20 (8-bit)]	# byte ! Field: java/lang/String.coder (constant)
0193    cmpl    RBX, RCX
0195    jne     B101  P=0.000000 C=3832.000000

019b    B14: #	out( B95 B15 ) &lt;- in( B13 )  Freq: 0.0681026
019b    movl    R8, [RDI + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value (constant)
019f    movl    RBX, [R9 + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value (constant)
01a3    movl    R10, [R12 + R8 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
01a8    movl    RCX, [R12 + RBX &lt;&lt; 3 + #12] (compressed oop addressing)	# range
01ad    cmpl    RCX, R10
01b0    jne     B95  P=0.000001 C=-1.000000

01b6    B15: #	out( B96 B16 ) &lt;- in( B14 )  Freq: 0.0681026
01b6    decode_heap_oop_not_null R10,R8
01ba    leaq    RSI, [R12 + R8 &lt;&lt; 3 + #16] (compressed oop addressing)	# ptr compressedoopoff32
01bf    decode_heap_oop_not_null R10,RBX
01c3    leaq    RDI, [R12 + RBX &lt;&lt; 3 + #16] (compressed oop addressing)	# ptr compressedoopoff32
01c8    String Equals RDI,RSI,RCX -&gt; RAX    // KILL XMM0, XMM1, RBX
0284    testl   RAX, RAX
0286    je     B96  P=0.000000 C=574.000000

028c    B16: #	out( B17 ) &lt;- in( B10 B15 )  Freq: 0.0754957
028c    movq    R13, 0x0000000117891000	# ptr

0296    B17: #	out( B99 B18 ) &lt;- in( B16 B30 B35 )  Freq: 0.0929886
0296    movl    RBX, [R14 + #20 (8-bit)]	# compressed ptr ! Field: java/util/HashMap$Node.value
029a    movl    R10, [rsp + #32]	# spill
029f    testl   R10, R10
02a2    jne     B99  P=0.000000 C=707.000000

02a8    B18: #	out( B77 B19 ) &lt;- in( B17 )  Freq: 0.0929886
02a8    # TLS is in R15
02a8    cmpb    [R15 + #48 (8-bit)], #0
02ad    jne     B77  P=0.001000 C=-1.000000

02b3    B19: #	out( B22 B20 ) &lt;- in( B98 B79 B77 B18 )  Freq: 0.0929886
02b3    movl    R11, [rsp + #8]	# spill
02b8    movl    [R14 + #20 (8-bit)], R11	# compressed ptr ! Field: java/util/HashMap$Node.value
02bc    decode_heap_oop RBX,RBX
02e5    movq    R10, [rsp + #24]	# spill
02ea    movq    R10, R10	# ptr -&gt; long
02ea    movq    R11, R14	# ptr -&gt; long
02ed    xorq    R10, R11	# long
02f0    shrq    R10, #20
02f4    testq   R10, R10
02f7    je,s   B22  P=0.001000 C=-1.000000

02f9    B20: #	out( B22 B21 ) &lt;- in( B19 )  Freq: 0.0928956
02f9    movq    R10, [rsp + #24]	# spill
02fe    testq   R10, R10	# ptr
0301    je,s   B22  P=0.001000 C=-1.000000

0303    B21: #	out( B80 B22 ) &lt;- in( B20 )  Freq: 0.0928027
0303    shrq    R11, #9
0307    addq    R13, R11	# ptr
030a    cmpb    [R13], #8
030f    jne     B80  P=0.001000 C=-1.000000

0315    B22: #	out( B57 ) &lt;- in( B82 B83 B80 B21 B20 B19 )  Freq: 0.0929886
0315    movq    RAX, RBX	# spill
0318    jmp     B57

031d    B23: #	out( B92 B24 ) &lt;- in( B6 )  Freq: 0.198473
031d    movl    R8, [R12 + R11 &lt;&lt; 3 + #8] (compressed oop addressing)	# compressed klass ptr
0322    cmpl    R8, narrowklass: precise klass java/util/HashMap$TreeNode: 0x0000000127a07f20:Constant:exact *	# compressed klass ptr
0329    je,u   B92  P=0.000001 C=-1.000000

032f    B24: #	out( B41 B25 ) &lt;- in( B23 )  Freq: 0.198473
032f    movl    R11, [R12 + R11 &lt;&lt; 3 + #24] (compressed oop addressing)	# compressed ptr ! Field: java/util/HashMap$Node.next
0334    testl   R11, R11	# compressed ptr
0337    je     B41  P=0.754386 C=1824.000000

033d    B25: #	out( B26 ) &lt;- in( B24 )  Freq: 0.0487478
033d    decode_heap_oop_not_null R14,R11
0341    xorl    R11, R11	# int
0344    movq    R13, 0x0000000117891000	# ptr
034e    xorl    RBX, RBX	# int

0350    B26: #	out( B38 B27 ) &lt;- in( B25 B39 ) Loop( B26-B39 inner ) Freq: 0.0589237
0350    movl    R8, [R14 + #12 (8-bit)]	# int ! Field: java/util/HashMap$Node.hash
0354    cmpl    R8, [RSP + #16 (32-bit)]
0359    jne     B38  P=0.703125 C=448.000000

035f    B27: #	out( B103 B28 ) &lt;- in( B26 )  Freq: 0.017493
035f    movl    R9, [R14 + #16 (8-bit)]	# compressed ptr ! Field: java/util/HashMap$Node.key
0363    decode_heap_oop RDI,R9
038f    cmpq    RDI, R10	# ptr
0392    je,u   B103  P=0.000000 C=133.000000

0398    B28: #	out( B111 B29 ) &lt;- in( B27 )  Freq: 0.017493
0398    movl    RCX, [R10 + #8 (8-bit)]	# compressed klass ptr
039c    NullCheck R10

039c    B29: #	out( B102 B30 ) &lt;- in( B28 )  Freq: 0.017493
039c    cmpl    RCX, narrowklass: precise klass java/lang/String: 0x000000010bf8aca0:Constant:exact *	# compressed klass ptr
03a2    jne,u   B102  P=0.000001 C=-1.000000

03a8    B30: #	out( B17 B31 ) &lt;- in( B29 )  Freq: 0.0174929
03a8    movq    R8, R10	# spill
03ab    # checkcastPP of R8
03ab    cmpq    R8, RDI	# ptr
03ae    je,u   B17  P=0.097928 C=4248.000000

03b4    B31: #	out( B110 B32 ) &lt;- in( B30 )  Freq: 0.0157799
03b4    movl    R10, [R12 + R9 &lt;&lt; 3 + #8] (compressed oop addressing)	# compressed klass ptr
03b9    NullCheck R9

03b9    B32: #	out( B106 B33 ) &lt;- in( B31 )  Freq: 0.0157799
03b9    cmpl    R10, narrowklass: precise klass java/lang/String: 0x000000010bf8aca0:Constant:exact *	# compressed klass ptr
03c0    jne,u   B106  P=0.000000 C=-1.000000

03c6    B33: #	out( B104 B34 ) &lt;- in( B32 )  Freq: 0.0157799
03c6    movsbl  RDI, [R8 + #20 (8-bit)]	# byte ! Field: java/lang/String.coder (constant)
03cb    decode_heap_oop_not_null R9,R9
03cf    # checkcastPP of R9
03cf    movsbl  RBP, [R9 + #20 (8-bit)]	# byte ! Field: java/lang/String.coder (constant)
03d4    cmpl    RDI, RBP
03d6    jne     B104  P=0.000000 C=3832.000000

03dc    B34: #	out( B37 B35 ) &lt;- in( B33 )  Freq: 0.0157799
03dc    movl    R10, [R9 + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value (constant)
03e0    movl    RDX, [R8 + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value (constant)
03e4    movl    R9, [R12 + R10 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
03e9    movl    RCX, [R12 + RDX &lt;&lt; 3 + #12] (compressed oop addressing)	# range
03ee    cmpl    RCX, R9
03f1    jne     B37  P=0.000001 C=-1.000000

03f7    B35: #	out( B17 B36 ) &lt;- in( B34 )  Freq: 0.0157798
03f7    decode_heap_oop_not_null R9,R10
03fb    leaq    RSI, [R12 + R10 &lt;&lt; 3 + #16] (compressed oop addressing)	# ptr compressedoopoff32
0400    decode_heap_oop_not_null R10,RDX
0404    leaq    RDI, [R12 + RDX &lt;&lt; 3 + #16] (compressed oop addressing)	# ptr compressedoopoff32
0409    String Equals RDI,RSI,RCX -&gt; RAX    // KILL XMM1, XMM0, RBX
04c5    testl   RAX, RAX
04c7    jne     B17  P=1.000000 C=133.000000

04cd    B36: #	out( B37 ) &lt;- in( B35 )  Freq: 7.52442e-09
04cd    movl    RBX, RAX	# spill

04cf    B37: #	out( N1501 ) &lt;- in( B36 B34 )  Freq: 2.33043e-08
04cf    movl    RSI, #-187	# int
04d4    movq    RBP, [rsp + #0]	# spill
04d8    movl    R10, [rsp + #16]	# spill
04dd    movl    [rsp + #0], R10	# spill
04e1    pushq   [rsp + #24]	# 64-bit mem-mem spill
	popq    [rsp + #8]
04eb    movl    R10, [rsp + #32]	# spill
04f0    movl    [rsp + #4], R10	# spill
04f5    movl    R10, [rsp + #36]	# spill
04fa    movl    [rsp + #16], R10	# spill
04ff    pushq   [rsp + #40]	# 64-bit mem-mem spill
	popq    [rsp + #24]
0509    movq    [rsp + #32], R14	# spill
050e    movl    [rsp + #20], R11	# spill
0513    movl    [rsp + #40], RBX	# spill
0517    movq    [rsp + #48], R8	# spill
051c    call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:206  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #48 L[3]=rsp + #8 L[4]=rsp + #4 L[5]=rsp + #16 L[6]=rsp + #24 L[7]=_ L[8]=_ L[9]=_ L[10]=rsp + #32 L[11]=_ L[12]=rsp + #20 STK[0]=rsp + #40
        # OopMap {rbp=Oop [8]=Oop [24]=Oop [32]=Oop [48]=Oop off=1316/0x524}
0524    ud2	# ShouldNotReachHere

0538    B38: #	out( B40 B39 ) &lt;- in( B26 )  Freq: 0.0414307
0538    # TLS is in R15
0538    movq    RAX, [R15 + #296 (32-bit)]	# ptr
053f    movl    RDI, [R14 + #24 (8-bit)]	# compressed ptr ! Field: java/util/HashMap$Node.next
0543    incl    R11	# int
0546    movq    R8, [rsp + #0]	# spill
054a    movq    RDX, [rsp + #24]	# spill
054f    testl   rax, [RAX]	# Safepoint: poll for GC        # java.util.HashMap::putVal @ bci:219  L[0]=R8 L[1]=rsp + #16 L[2]=R10 L[3]=RDX L[4]=rsp + #32 L[5]=rsp + #36 L[6]=rsp + #40 L[7]=R14 L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=R11
        # OopMap {r10=Oop r8=Oop r9=NarrowOop rdi=NarrowOop rdx=Oop r14=Oop [0]=Oop [8]=NarrowOop [24]=Oop [40]=Oop off=1359/0x54f}
0551    testl   RDI, RDI	# compressed ptr
0553    je,s   B40  P=0.754386 C=315.000000

0555    B39: #	out( B26 ) &lt;- in( B38 )  Freq: 0.010176
0555    decode_heap_oop_not_null R14,RDI
0559    jmp     B26

055e    B40: #	out( B42 ) &lt;- in( B38 )  Freq: 0.0312548
055e    movl    RBX, R11	# spill
0561    jmp,s   B42

0563    B41: #	out( B42 ) &lt;- in( B24 )  Freq: 0.149725
0563    movq    R13, 0x0000000117891000	# ptr
056d    xorl    RBX, RBX	# int

056f    B42: #	out( B86 B43 ) &lt;- in( B40 B41 )  Freq: 0.18098
056f    # TLS is in R15
056f    movq    RBP, [R15 + #320 (32-bit)]	# ptr
0576    movq    R11, RBP	# spill
0579    addq    R11, #32	# ptr
057d    # TLS is in R15
057d    cmpq    R11, [R15 + #336 (32-bit)]	# raw ptr
0584    jnb,u   B86  P=0.000100 C=-1.000000

058a    B43: #	out( B44 ) &lt;- in( B42 )  Freq: 0.180962
058a    # TLS is in R15
058a    movq    [R15 + #320 (32-bit)], R11	# ptr
0591    PREFETCHW [R11 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0599    movq    R10, [RCX + #184 (32-bit)]	# long
05a0    movq    [RBP], R10	# long
05a4    movl    [RBP + #8 (8-bit)], narrowklass: precise klass java/util/HashMap$Node: 0x0000000127a03610:Constant:exact *	# compressed klass ptr
05ab    movq    [RBP + #24 (8-bit)], #0	# long

05b3    B44: #	out( B70 B45 ) &lt;- in( B87 B43 )  Freq: 0.18098
05b3    movl    R11, [rsp + #16]	# spill
05b8    movl    [RBP + #12 (8-bit)], R11	# int
05bc    movl    [RBP + #16 (8-bit)], R9	# compressed ptr
05c0    movl    R10, [rsp + #8]	# spill
05c5    movl    [RBP + #20 (8-bit)], R10	# compressed ptr
05c9    
05c9    # checkcastPP of RBP
05c9    MEMBAR-release ! (empty encoding)
05c9    # TLS is in R15
05c9    cmpb    [R15 + #48 (8-bit)], #0
05ce    jne     B70  P=0.001000 C=-1.000000

05d4    B45: #	out( B47 B46 ) &lt;- in( B93 B72 B70 B44 )  Freq: 0.18098
05d4    movq    R10, R14	# ptr -&gt; long
05d7    encode_heap_oop_not_null R8,RBP
0620    movl    [R14 + #24 (8-bit)], R8	# compressed ptr ! Field: java/util/HashMap$Node.next
0624    movq    R11, RBP	# ptr -&gt; long
0627    xorq    R11, R10	# long
062a    shrq    R11, #20
062e    testq   R11, R11
0631    je,s   B47  P=0.001000 C=-1.000000

0633    B46: #	out( B73 B47 ) &lt;- in( B45 )  Freq: 0.180799
0633    shrq    R10, #9
0637    addq    R13, R10	# ptr
063a    cmpb    [R13], #8
063f    jne     B73  P=0.001000 C=-1.000000

0645    B47: #	out( B55 B48 ) &lt;- in( B75 B76 B73 B46 B45 )  Freq: 0.18098
0645    cmpl    RBX, #7
0648    jl     B55  P=1.000000 C=1376.000000

064e    B48: #	out( N1501 ) &lt;- in( B47 )  Freq: 8.6298e-08
064e    movl    RSI, #-187	# int
0653    movq    RBP, [rsp + #0]	# spill
0657    movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #16]
	movl    [rsp + #0], rax
	movq    rax, [rsp - #8]
0668    pushq   [rsp + #24]	# 64-bit mem-mem spill
	popq    [rsp + #8]
0672    movl    [rsp + #20], RBX	# spill
        nop 	# 2 bytes pad for loops and calls
0678    call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:162  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=rsp + #8 L[4]=rsp + #32 L[5]=rsp + #36 L[6]=rsp + #40 L[7]=_ L[8]=_ L[9]=_ L[10]=#NULL L[11]=_ L[12]=_ STK[0]=rsp + #20 STK[1]=#7
        # OopMap {rbp=Oop [8]=Oop [40]=Oop off=1664/0x680}
0680    ud2	# ShouldNotReachHere

0694    B49: #	out( B84 B50 ) &lt;- in( B5 )  Freq: 0.726025
0694    # TLS is in R15
0694    movq    RBX, [R15 + #320 (32-bit)]	# ptr
069b    movq    R11, RBX	# spill
069e    addq    R11, #32	# ptr
06a2    # TLS is in R15
06a2    cmpq    R11, [R15 + #336 (32-bit)]	# raw ptr
06a9    jnb,u   B84  P=0.000100 C=-1.000000

06af    B50: #	out( B51 ) &lt;- in( B49 )  Freq: 0.725952
06af    # TLS is in R15
06af    movq    [R15 + #320 (32-bit)], R11	# ptr
06b6    PREFETCHW [R11 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
06be    movq    R10, [RCX + #184 (32-bit)]	# long
06c5    movq    [RBX], R10	# long
06c8    movl    [RBX + #8 (8-bit)], narrowklass: precise klass java/util/HashMap$Node: 0x0000000127a03610:Constant:exact *	# compressed klass ptr
06cf    movq    [RBX + #24 (8-bit)], #0	# long

06d7    B51: #	out( B89 B52 ) &lt;- in( B85 B50 )  Freq: 0.726025
06d7    movl    R10, [rsp + #16]	# spill
06dc    movl    [RBX + #12 (8-bit)], R10	# int
06e0    movl    [RBX + #16 (8-bit)], R9	# compressed ptr
06e4    movl    R10, [rsp + #8]	# spill
06e9    movl    [RBX + #20 (8-bit)], R10	# compressed ptr
06ed    
06ed    # checkcastPP of RBX
06ed    MEMBAR-release ! (empty encoding)
06ed    movq    R10, [rsp + #40]	# spill
06f2    movl    R11, [R10 + #8 (8-bit)]	# compressed klass ptr
06f6    cmpl    R11, narrowklass: precise klass [Ljava/util/HashMap$Node;: 0x0000000127a065c0:Constant:exact *	# compressed klass ptr
06fd    jne,u   B89  P=0.000001 C=-1.000000

0703    B52: #	out( B63 B53 ) &lt;- in( B51 )  Freq: 0.726024
0703    # TLS is in R15
0703    cmpb    [R15 + #48 (8-bit)], #0
0708    jne     B63  P=0.001000 C=-1.000000

070e    B53: #	out( B55 B54 ) &lt;- in( B91 B65 B63 B52 )  Freq: 0.726024
070e    movq    R10, RBP	# ptr -&gt; long
0711    encode_heap_oop_not_null R8,RBX
075a    movl    [RBP], R8	# compressed ptr
075e    movq    R11, RBX	# ptr -&gt; long
0761    xorq    R11, R10	# long
0764    shrq    R11, #20
0768    testq   R11, R11
076b    je,s   B55  P=0.001000 C=-1.000000

076d    B54: #	out( B66 B55 ) &lt;- in( B53 )  Freq: 0.725298
076d    shrq    R10, #9
0771    movq    R8, 0x0000000117891000	# ptr
077b    addq    R8, R10	# ptr
077e    cmpb    [R8], #8
0782    jne     B66  P=0.001000 C=-1.000000

0788    B55: #	out( B61 B56 ) &lt;- in( B47 B68 B69 B66 B54 B53 )  Freq: 0.907004
0788    movq    R10, [rsp + #0]	# spill
078c    incl    [R10 + #24 (8-bit)]	# int ! Field: java/util/HashMap.modCount
0790    movl    R11, [R10 + #28 (8-bit)]	# int ! Field: java/util/HashMap.threshold
0794    movl    R10, [R10 + #20 (8-bit)]	# int ! Field: java/util/HashMap.size
0798    incl    R10	# int
079b    movq    R8, [rsp + #0]	# spill
079f    movl    [R8 + #20 (8-bit)], R10	# int ! Field: java/util/HashMap.size
07a3    cmpl    R10, R11
07a6    jg,s   B61  P=0.037993 C=6896.000000

07a8    B56: #	out( B57 ) &lt;- in( B62 B55 )  Freq: 0.907004
07a8    xorl    RAX, RAX	# ptr

07aa    B57: #	out( N1501 ) &lt;- in( B22 B56 )  Freq: 0.999992
07aa    vzeroupper
	addq    rsp, 112	# Destroy frame
	popq    rbp
	movq    rscratch1, poll_offset[r15_thread] #polling_page_address
	testl   rax, [rscratch1]	# Safepoint: poll for GC

07bc    ret

07bd    B58: #	out( B115 B59 ) &lt;- in( B1 )  Freq: 0.199526
        nop 	# 3 bytes pad for loops and calls
07c0    call,static  java.util.HashMap::resize
        # java.util.HashMap::putVal @ bci:20  L[0]=rsp + #0 L[1]=rsp + #16 L[2]=rsp + #8 L[3]=rsp + #24 L[4]=rsp + #32 L[5]=rsp + #36 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_
        # OopMap {[0]=Oop [8]=Oop [24]=Oop off=1992/0x7c8}

07c8    B59: #	out( B107 B60 ) &lt;- in( B58 )  Freq: 0.199522
        # Block is sole successor of call
07c8    movq    [rsp + #40], RAX	# spill
07cd    movl    R10, [RAX + #12 (8-bit)]	# range
07d1    NullCheck RAX

07d1    B60: #	out( B4 ) &lt;- in( B59 )  Freq: 0.199522
07d1    jmp     B4

07d6    B61: #	out( B114 B62 ) &lt;- in( B55 )  Freq: 0.0344598
07d6    movl    RBP, [rsp + #36]	# spill
07da    movq    RSI, [rsp + #0]	# spill
        nop 	# 2 bytes pad for loops and calls
07e0    call,static  java.util.HashMap::resize
        # java.util.HashMap::putVal @ bci:288  L[0]=rsp + #0 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=RBP L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_
        # OopMap {[0]=Oop off=2024/0x7e8}

07e8    B62: #	out( B56 ) &lt;- in( B61 )  Freq: 0.0344591
        # Block is sole successor of call
07e8    jmp,s   B56

07ea    B63: #	out( B53 B64 ) &lt;- in( B52 )  Freq: 0.000726015
07ea    movl    R10, [RBP]	# compressed ptr
07ee    testl   R10, R10	# compressed ptr
07f1    je     B53  P=0.500000 C=-1.000000

07f7    B64: #	out( B91 B65 ) &lt;- in( B63 )  Freq: 0.000363008
07f7    # TLS is in R15
07f7    movq    R11, [R15 + #56 (8-bit)]	# long
07fb    decode_heap_oop RDI,R10
0827    testq   R11, R11
082a    je     B91  P=0.001000 C=-1.000000

0830    B65: #	out( B53 ) &lt;- in( B64 )  Freq: 0.000362645
0830    # TLS is in R15
0830    movq    R10, [R15 + #72 (8-bit)]	# ptr
0834    movq    [R10 + #-8 + R11], RDI	# ptr
0839    addq    R11, #-8	# long
083d    # TLS is in R15
083d    movq    [R15 + #56 (8-bit)], R11	# long
0841    jmp     B53

0846    B66: #	out( B55 B67 ) &lt;- in( B54 )  Freq: 0.000725298
0846    # TLS is in R15
0846    movq    R10, [R15 + #104 (8-bit)]	# long
084a    # TLS is in R15
084a    movq    R11, [R15 + #120 (8-bit)]	# ptr
084e    lock addl [rsp + #0], 0	! membar_volatile
0854    cmpb    [R8], #0
0858    je     B55  P=0.500000 C=-1.000000

085e    B67: #	out( B69 B68 ) &lt;- in( B66 )  Freq: 0.000362649
085e    movb    [R8], #0	# CMS card-mark byte 0
0862    testq   R10, R10
0865    jne,s   B69  P=0.500000 C=-1.000000

0867    B68: #	out( B55 ) &lt;- in( B67 )  Freq: 0.000181325
0867    movq    RDI, R8	# spill
086a    # TLS is in R15
086a    movq    RSI, R15	# spill
086d    call_leaf,runtime  write_ref_field_post_entry
        No JVM State Info
        # 
087d    jmp     B55

0882    B69: #	out( B55 ) &lt;- in( B67 )  Freq: 0.000181325
0882    movq    [R11 + #-8 + R10], R8	# ptr
0887    addq    R10, #-8	# long
088b    # TLS is in R15
088b    movq    [R15 + #104 (8-bit)], R10	# long
088f    jmp     B55

0894    B70: #	out( B45 B71 ) &lt;- in( B44 )  Freq: 0.000180978
0894    movl    R10, [R14 + #24 (8-bit)]	# compressed ptr ! Field: java/util/HashMap$Node.next
0898    testl   R10, R10	# compressed ptr
089b    je     B45  P=0.500000 C=-1.000000

08a1    B71: #	out( B93 B72 ) &lt;- in( B70 )  Freq: 9.04888e-05
08a1    # TLS is in R15
08a1    movq    R11, [R15 + #56 (8-bit)]	# long
08a5    decode_heap_oop RDI,R10
08d1    testq   R11, R11
08d4    je     B93  P=0.001000 C=-1.000000

08da    B72: #	out( B45 ) &lt;- in( B71 )  Freq: 9.03983e-05
08da    # TLS is in R15
08da    movq    R10, [R15 + #72 (8-bit)]	# ptr
08de    movq    [R10 + #-8 + R11], RDI	# ptr
08e3    addq    R11, #-8	# long
08e7    # TLS is in R15
08e7    movq    [R15 + #56 (8-bit)], R11	# long
08eb    jmp     B45

08f0    B73: #	out( B47 B74 ) &lt;- in( B46 )  Freq: 0.000180799
08f0    # TLS is in R15
08f0    movq    R10, [R15 + #104 (8-bit)]	# long
08f4    # TLS is in R15
08f4    movq    R11, [R15 + #120 (8-bit)]	# ptr
08f8    lock addl [rsp + #0], 0	! membar_volatile
08fe    cmpb    [R13], #0
0903    je     B47  P=0.500000 C=-1.000000

0909    B74: #	out( B76 B75 ) &lt;- in( B73 )  Freq: 9.03995e-05
0909    movb    [R13], #0	# CMS card-mark byte 0
090e    testq   R10, R10
0911    jne,s   B76  P=0.500000 C=-1.000000

0913    B75: #	out( B47 ) &lt;- in( B74 )  Freq: 4.51998e-05
0913    movq    RDI, R13	# spill
0916    # TLS is in R15
0916    movq    RSI, R15	# spill
0919    call_leaf,runtime  write_ref_field_post_entry
        No JVM State Info
        # 
0929    jmp     B47

092e    B76: #	out( B47 ) &lt;- in( B74 )  Freq: 4.51998e-05
092e    movq    [R11 + #-8 + R10], R13	# ptr
0933    addq    R10, #-8	# long
0937    # TLS is in R15
0937    movq    [R15 + #104 (8-bit)], R10	# long
093b    jmp     B47

0940    B77: #	out( B19 B78 ) &lt;- in( B18 )  Freq: 9.29874e-05
0940    movl    R11, [R14 + #20 (8-bit)]	# compressed ptr ! Field: java/util/HashMap$Node.value
0944    testl   R11, R11	# compressed ptr
0947    je     B19  P=0.500000 C=-1.000000

094d    B78: #	out( B98 B79 ) &lt;- in( B77 )  Freq: 4.64937e-05
094d    # TLS is in R15
094d    movq    R10, [R15 + #56 (8-bit)]	# long
0951    decode_heap_oop RDI,R11
097d    testq   R10, R10
0980    je     B98  P=0.001000 C=-1.000000

0986    B79: #	out( B19 ) &lt;- in( B78 )  Freq: 4.64472e-05
0986    # TLS is in R15
0986    movq    R11, [R15 + #72 (8-bit)]	# ptr
098a    movq    [R11 + #-8 + R10], RDI	# ptr
098f    addq    R10, #-8	# long
0993    # TLS is in R15
0993    movq    [R15 + #56 (8-bit)], R10	# long
0997    jmp     B19

099c    B80: #	out( B22 B81 ) &lt;- in( B21 )  Freq: 9.28027e-05
099c    # TLS is in R15
099c    movq    R10, [R15 + #104 (8-bit)]	# long
09a0    # TLS is in R15
09a0    movq    R11, [R15 + #120 (8-bit)]	# ptr
09a4    lock addl [rsp + #0], 0	! membar_volatile
09aa    cmpb    [R13], #0
09af    je     B22  P=0.500000 C=-1.000000

09b5    B81: #	out( B83 B82 ) &lt;- in( B80 )  Freq: 4.64014e-05
09b5    movb    [R13], #0	# CMS card-mark byte 0
09ba    testq   R10, R10
09bd    jne,s   B83  P=0.500000 C=-1.000000

09bf    B82: #	out( B22 ) &lt;- in( B81 )  Freq: 2.32007e-05
09bf    movq    RDI, R13	# spill
09c2    # TLS is in R15
09c2    movq    RSI, R15	# spill
09c5    call_leaf,runtime  write_ref_field_post_entry
        No JVM State Info
        # 
09d5    jmp     B22

09da    B83: #	out( B22 ) &lt;- in( B81 )  Freq: 2.32007e-05
09da    movq    [R11 + #-8 + R10], R13	# ptr
09df    addq    R10, #-8	# long
09e3    # TLS is in R15
09e3    movq    [R15 + #104 (8-bit)], R10	# long
09e7    jmp     B22

09ec    B84: #	out( B113 B85 ) &lt;- in( B49 )  Freq: 7.26146e-05
09ec    movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #8]
	movl    [rsp + #56], rax
	movq    rax, [rsp - #8]
09fe    movl    [rsp + #32], R9	# spill
0a03    movl    [rsp + #20], RDI	# spill
0a07    pushq   [rsp + #40]	# 64-bit mem-mem spill
	popq    [rsp + #48]
0a11    pushq   [rsp + #0]	# 64-bit mem-mem spill
	popq    [rsp + #40]
0a1a    movq    RSI, precise klass java/util/HashMap$Node: 0x0000000127a03610:Constant:exact *	# ptr
0a24    movq    [rsp + #0], R10	# spill
0a28    pushq   [rsp + #24]	# 64-bit mem-mem spill
	popq    [rsp + #8]
        nop 	# 2 bytes pad for loops and calls
0a34    call,static  wrapper for: _new_instance_Java
        # java.util.HashMap::newNode @ bci:0  L[0]=_ L[1]=rsp + #16 L[2]=rsp + #0 L[3]=rsp + #8 L[4]=#NULL
        # java.util.HashMap::putVal @ bci:56  L[0]=rsp + #40 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=rsp + #36 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ STK[0]=rsp + #48 STK[1]=rsp + #20
        # OopMap {rbp=Derived_oop_[48] [0]=Oop [8]=Oop [32]=NarrowOop [40]=Oop [48]=Oop [56]=NarrowOop off=2620/0xa3c}

0a3c    B85: #	out( B51 ) &lt;- in( B84 )  Freq: 7.26131e-05
        # Block is sole successor of call
0a3c    pushq   [rsp + #40]	# 64-bit mem-mem spill
	popq    [rsp + #0]
0a45    pushq   [rsp + #48]	# 64-bit mem-mem spill
	popq    [rsp + #40]
0a4f    movl    RDI, [rsp + #20]	# spill
0a53    movl    R9, [rsp + #32]	# spill
0a58    movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #56]
	movl    [rsp + #8], rax
	movq    rax, [rsp - #8]
0a6a    movq    RBX, RAX	# spill
0a6d    jmp     B51

0a72    B86: #	out( B112 B87 ) &lt;- in( B42 )  Freq: 1.8101e-05
0a72    movl    [rsp + #52], RBX	# spill
0a76    movq    [rsp + #64], R14	# spill
0a7b    movq    [rsp + #56], R13	# spill
0a80    movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #8]
	movl    [rsp + #48], rax
	movq    rax, [rsp - #8]
0a92    movl    [rsp + #20], R9	# spill
0a97    pushq   [rsp + #24]	# 64-bit mem-mem spill
	popq    [rsp + #8]
0aa1    movq    RSI, precise klass java/util/HashMap$Node: 0x0000000127a03610:Constant:exact *	# ptr
0aab    movq    RBP, R10	# spill
        nop 	# 2 bytes pad for loops and calls
0ab0    call,static  wrapper for: _new_instance_Java
        # java.util.HashMap::newNode @ bci:0  L[0]=_ L[1]=rsp + #16 L[2]=RBP L[3]=rsp + #8 L[4]=#NULL
        # java.util.HashMap::putVal @ bci:152  L[0]=rsp + #0 L[1]=rsp + #16 L[2]=_ L[3]=rsp + #8 L[4]=rsp + #32 L[5]=rsp + #36 L[6]=rsp + #40 L[7]=_ L[8]=_ L[9]=_ L[10]=#NULL L[11]=_ L[12]=rsp + #52 STK[0]=rsp + #64
        # OopMap {rbp=Oop [0]=Oop [8]=Oop [20]=NarrowOop [40]=Oop [48]=NarrowOop [64]=Oop off=2744/0xab8}

0ab8    B87: #	out( B44 ) &lt;- in( B86 )  Freq: 1.81006e-05
        # Block is sole successor of call
0ab8    pushq   [rsp + #8]	# 64-bit mem-mem spill
	popq    [rsp + #24]
0ac2    movl    R9, [rsp + #20]	# spill
0ac7    movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #48]
	movl    [rsp + #8], rax
	movq    rax, [rsp - #8]
0ad9    movq    R13, [rsp + #56]	# spill
0ade    movq    R14, [rsp + #64]	# spill
0ae3    movl    RBX, [rsp + #52]	# spill
0ae7    movq    RBP, RAX	# spill
0aea    jmp     B44

0aef    B88: #	out( N1501 ) &lt;- in( B4 )  Freq: 9.99995e-07
0aef    movl    RSI, #-28	# int
0af4    movq    RBP, [rsp + #0]	# spill
0af8    movl    R11, [rsp + #16]	# spill
0afd    movl    [rsp + #0], R11	# spill
0b01    movq    R10, [rsp + #24]	# spill
0b06    movq    [rsp + #16], R10	# spill
0b0b    movl    R10, [rsp + #32]	# spill
0b10    movl    [rsp + #4], R10	# spill
0b15    movl    R11, [rsp + #36]	# spill
0b1a    movl    [rsp + #24], R11	# spill
0b1f    movl    [rsp + #48], RDI	# spill
        nop 	# 1 bytes pad for loops and calls
0b24    call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:40  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #16 L[4]=rsp + #4 L[5]=rsp + #24 L[6]=rsp + #40 L[7]=_ L[8]=_ L[9]=rsp + #48 L[10]=_ L[11]=_ L[12]=_ STK[0]=rsp + #40 STK[1]=rsp + #48
        # OopMap {rbp=Oop [8]=Oop [16]=Oop [40]=Oop off=2860/0xb2c}
0b2c    ud2	# ShouldNotReachHere

0b40    B89: #	out( N1501 ) &lt;- in( B51 )  Freq: 7.26025e-07
0b40    movl    RSI, #-42	# int
0b45    movq    RBP, [rsp + #0]	# spill
0b49    movl    [rsp + #4], RDI	# spill
0b4d    movq    [rsp + #16], RBX	# spill
        nop 	# 2 bytes pad for loops and calls
0b54    call,static  wrapper for: uncommon_trap(reason=&apos;array_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:59  L[0]=RBP L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=rsp + #36 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ STK[0]=rsp + #40 STK[1]=rsp + #4 STK[2]=rsp + #16
        # OopMap {rbp=Oop [16]=Oop [40]=Oop off=2908/0xb5c}
0b5c    ud2	# ShouldNotReachHere

0b70    B90: #	out( N1501 ) &lt;- in( B2 )  Freq: 3.81696e-07
0b70    movl    RSI, #-187	# int
0b75    movq    RBP, [rsp + #0]	# spill
0b79    movl    [rsp + #0], RDX	# spill
0b7c    movq    [rsp + #16], R8	# spill
0b81    movl    R8, [rsp + #32]	# spill
0b86    movl    [rsp + #4], R8	# spill
0b8b    movl    [rsp + #24], RDI	# spill
0b8f    movl    [rsp + #28], R11	# spill
0b94    movl    [rsp + #36], R10	# spill
        nop 	# 3 bytes pad for loops and calls
0b9c    call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:16  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #16 L[4]=rsp + #4 L[5]=rsp + #24 L[6]=rsp + #28 L[7]=_ L[8]=rsp + #36 L[9]=_ L[10]=_ L[11]=_ L[12]=_ STK[0]=rsp + #36
        # OopMap {rbp=Oop [8]=Oop [16]=Oop [28]=NarrowOop off=2980/0xba4}
0ba4    ud2	# ShouldNotReachHere

0bb8    B91: #	out( B53 ) &lt;- in( B64 )  Freq: 3.63003e-07
0bb8    # TLS is in R15
0bb8    movq    RSI, R15	# spill
0bbb    call_leaf,runtime  write_ref_field_pre_entry
        No JVM State Info
        # 
0bcb    jmp     B53

0bd0    B92: #	out( N1501 ) &lt;- in( B23 )  Freq: 2.01109e-07
0bd0    movl    RSI, #-187	# int
0bd5    movq    RBP, [rsp + #0]	# spill
0bd9    movl    R8, [rsp + #16]	# spill
0bde    movl    [rsp + #0], R8	# spill
0be2    movq    [rsp + #8], R10	# spill
0be7    pushq   [rsp + #24]	# 64-bit mem-mem spill
	popq    [rsp + #16]
0bf1    movl    R8, [rsp + #32]	# spill
0bf6    movl    [rsp + #4], R8	# spill
0bfb    movl    R10, [rsp + #36]	# spill
0c00    movl    [rsp + #24], R10	# spill
0c05    movl    [rsp + #28], R11	# spill
        nop 	# 2 bytes pad for loops and calls
0c0c    call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:109  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #16 L[4]=rsp + #4 L[5]=rsp + #24 L[6]=rsp + #40 L[7]=rsp + #28 L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ STK[0]=#1
        # OopMap {rbp=Oop [8]=Oop [16]=Oop [28]=NarrowOop [40]=Oop off=3092/0xc14}
0c14    ud2	# ShouldNotReachHere

0c28    B93: #	out( B45 ) &lt;- in( B71 )  Freq: 9.04877e-08
0c28    # TLS is in R15
0c28    movq    RSI, R15	# spill
0c2b    call_leaf,runtime  write_ref_field_pre_entry
        No JVM State Info
        # 
0c3b    jmp     B45

0c40    B94: #	out( N1501 ) &lt;- in( B9 )  Freq: 7.5496e-08
0c40    movl    RSI, #-34	# int
0c45    movq    RBP, [rsp + #0]	# spill
0c49    movl    R8, [rsp + #16]	# spill
0c4e    movl    [rsp + #0], R8	# spill
0c52    pushq   [rsp + #24]	# 64-bit mem-mem spill
	popq    [rsp + #16]
0c5c    movl    R9, [rsp + #32]	# spill
0c61    movl    [rsp + #4], R9	# spill
0c66    movl    R8, [rsp + #36]	# spill
0c6b    movl    [rsp + #24], R8	# spill
0c70    pushq   [rsp + #40]	# 64-bit mem-mem spill
	popq    [rsp + #32]
0c7a    movl    [rsp + #28], R11	# spill
0c7f    movq    [rsp + #40], R10	# spill
0c84    movl    [rsp + #48], RCX	# spill
0c88    call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:91  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #40 L[3]=rsp + #16 L[4]=rsp + #4 L[5]=rsp + #24 L[6]=rsp + #32 L[7]=rsp + #28 L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ STK[0]=rsp + #40 STK[1]=rsp + #48
        # OopMap {rbp=Oop [16]=Oop [28]=NarrowOop [32]=Oop [40]=Oop [48]=NarrowOop off=3216/0xc90}
0c90    ud2	# ShouldNotReachHere

0ca4    B95: #	out( B97 ) &lt;- in( B14 )  Freq: 6.81026e-08
0ca4    xorl    RCX, RCX	# int
0ca6    jmp,s   B97

0ca8    B96: #	out( B97 ) &lt;- in( B15 )  Freq: 3.24738e-08
0ca8    movl    RCX, RAX	# spill

0caa    B97: #	out( N1501 ) &lt;- in( B96 B95 )  Freq: 1.00576e-07
0caa    movl    RSI, #-187	# int
0caf    movq    RBP, [rsp + #0]	# spill
0cb3    movl    R10, [rsp + #16]	# spill
0cb8    movl    [rsp + #0], R10	# spill
0cbc    movq    [rsp + #8], R9	# spill
0cc1    pushq   [rsp + #24]	# 64-bit mem-mem spill
	popq    [rsp + #16]
0ccb    movl    R8, [rsp + #32]	# spill
0cd0    movl    [rsp + #4], R8	# spill
0cd5    movl    R10, [rsp + #36]	# spill
0cda    movl    [rsp + #24], R10	# spill
0cdf    pushq   [rsp + #40]	# 64-bit mem-mem spill
	popq    [rsp + #32]
0ce9    movl    [rsp + #28], R11	# spill
0cee    movl    [rsp + #40], RCX	# spill
        nop 	# 2 bytes pad for loops and calls
0cf4    call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:94  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #16 L[4]=rsp + #4 L[5]=rsp + #24 L[6]=rsp + #32 L[7]=rsp + #28 L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ STK[0]=rsp + #40
        # OopMap {rbp=Oop [8]=Oop [16]=Oop [28]=NarrowOop [32]=Oop off=3324/0xcfc}
0cfc    ud2	# ShouldNotReachHere

0d10    B98: #	out( B19 ) &lt;- in( B78 )  Freq: 4.64931e-08
0d10    # TLS is in R15
0d10    movq    RSI, R15	# spill
0d13    call_leaf,runtime  write_ref_field_pre_entry
        No JVM State Info
        # 
0d23    jmp     B19

0d28    B99: #	out( N1501 ) &lt;- in( B17 )  Freq: 4.43404e-08
0d28    movl    RSI, #-187	# int
0d2d    movq    RBP, [rsp + #0]	# spill
0d31    movq    [rsp + #8], R14	# spill
0d36    movl    [rsp + #16], RBX	# spill
        nop 	# 2 bytes pad for loops and calls
0d3c    call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:236  L[0]=RBP L[1]=_ L[2]=_ L[3]=rsp + #24 L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=rsp + #8 L[11]=_ L[12]=rsp + #16 STK[0]=rsp + #32
        # OopMap {rbp=Oop [8]=Oop [16]=NarrowOop [24]=Oop off=3396/0xd44}
0d44    ud2	# ShouldNotReachHere

0d58    B100: #	out( N1501 ) &lt;- in( B7 )  Freq: 3.59993e-08
0d58    movl    RSI, #-187	# int
0d5d    movq    RBP, [rsp + #0]	# spill
0d61    movl    R8, [rsp + #16]	# spill
0d66    movl    [rsp + #0], R8	# spill
0d6a    pushq   [rsp + #24]	# 64-bit mem-mem spill
	popq    [rsp + #16]
0d74    movl    R9, [rsp + #32]	# spill
0d79    movl    [rsp + #4], R9	# spill
0d7e    movl    R8, [rsp + #36]	# spill
0d83    movl    [rsp + #24], R8	# spill
0d88    pushq   [rsp + #40]	# 64-bit mem-mem spill
	popq    [rsp + #32]
0d92    movl    [rsp + #28], R11	# spill
0d97    movl    [rsp + #44], RCX	# spill
0d9b    movq    [rsp + #48], R10	# spill
0da0    call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:81  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #48 L[3]=rsp + #16 L[4]=rsp + #4 L[5]=rsp + #24 L[6]=rsp + #32 L[7]=rsp + #28 L[8]=_ L[9]=_ L[10]=_ L[11]=rsp + #44 L[12]=_ STK[0]=rsp + #44 STK[1]=rsp + #48
        # OopMap {rbp=Oop [16]=Oop [28]=NarrowOop [32]=Oop [44]=NarrowOop [48]=Oop off=3496/0xda8}
0da8    ud2	# ShouldNotReachHere

0dbc    B101: #	out( N1501 ) &lt;- in( B13 )  Freq: 3.40513e-08
0dbc    movl    RSI, #-187	# int
0dc1    movq    RBP, [rsp + #0]	# spill
0dc5    movl    R10, [rsp + #16]	# spill
0dca    movl    [rsp + #0], R10	# spill
0dce    pushq   [rsp + #24]	# 64-bit mem-mem spill
	popq    [rsp + #16]
0dd8    movl    R10, [rsp + #32]	# spill
0ddd    movl    [rsp + #4], R10	# spill
0de2    movl    R8, [rsp + #36]	# spill
0de7    movl    [rsp + #24], R8	# spill
0dec    pushq   [rsp + #40]	# 64-bit mem-mem spill
	popq    [rsp + #32]
0df6    movl    [rsp + #28], R11	# spill
0dfb    movq    [rsp + #40], R9	# spill
0e00    movq    [rsp + #48], RDI	# spill
0e05    movl    [rsp + #56], RBX	# spill
0e09    movl    [rsp + #60], RCX	# spill
        nop 	# 3 bytes pad for loops and calls
0e10    call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.String::equals @ bci:33  L[0]=rsp + #40 L[1]=_ L[2]=rsp + #48 STK[0]=rsp + #56 STK[1]=rsp + #60
        # java.util.HashMap::putVal @ bci:91  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #40 L[3]=rsp + #16 L[4]=rsp + #4 L[5]=rsp + #24 L[6]=rsp + #32 L[7]=rsp + #28 L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_
        # OopMap {rbp=Oop [16]=Oop [28]=NarrowOop [32]=Oop [40]=Oop [48]=Oop off=3608/0xe18}
0e18    ud2	# ShouldNotReachHere

0e2c    B102: #	out( N1501 ) &lt;- in( B29 )  Freq: 1.7493e-08
0e2c    movl    RSI, #-34	# int
0e31    movq    RBP, [rsp + #0]	# spill
0e35    movl    RCX, [rsp + #16]	# spill
0e39    movl    [rsp + #0], RCX	# spill
0e3c    pushq   [rsp + #24]	# 64-bit mem-mem spill
	popq    [rsp + #16]
0e46    movl    RCX, [rsp + #32]	# spill
0e4a    movl    [rsp + #4], RCX	# spill
0e4e    movl    R8, [rsp + #36]	# spill
0e53    movl    [rsp + #24], R8	# spill
0e58    pushq   [rsp + #40]	# 64-bit mem-mem spill
	popq    [rsp + #32]
0e62    movq    [rsp + #40], R14	# spill
0e67    movl    [rsp + #28], R11	# spill
0e6c    movq    [rsp + #48], R10	# spill
0e71    movl    [rsp + #56], R9	# spill
        nop 	# 2 bytes pad for loops and calls
0e78    call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:203  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #48 L[3]=rsp + #16 L[4]=rsp + #4 L[5]=rsp + #24 L[6]=rsp + #32 L[7]=_ L[8]=_ L[9]=_ L[10]=rsp + #40 L[11]=_ L[12]=rsp + #28 STK[0]=rsp + #48 STK[1]=rsp + #56
        # OopMap {rbp=Oop [16]=Oop [32]=Oop [40]=Oop [48]=Oop [56]=NarrowOop off=3712/0xe80}
0e80    ud2	# ShouldNotReachHere

0e94    B103: #	out( N1501 ) &lt;- in( B27 )  Freq: 8.3413e-09
0e94    movl    RSI, #-187	# int
0e99    movq    RBP, [rsp + #0]	# spill
0e9d    movl    RCX, [rsp + #16]	# spill
0ea1    movl    [rsp + #0], RCX	# spill
0ea4    pushq   [rsp + #24]	# 64-bit mem-mem spill
	popq    [rsp + #16]
0eae    movl    RCX, [rsp + #32]	# spill
0eb2    movl    [rsp + #4], RCX	# spill
0eb6    movl    R8, [rsp + #36]	# spill
0ebb    movl    [rsp + #24], R8	# spill
0ec0    pushq   [rsp + #40]	# 64-bit mem-mem spill
	popq    [rsp + #32]
0eca    movq    [rsp + #40], R14	# spill
0ecf    movl    [rsp + #28], R11	# spill
0ed4    movq    [rsp + #48], R10	# spill
0ed9    movl    [rsp + #60], R9	# spill
        nop 	# 2 bytes pad for loops and calls
0ee0    call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:193  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #48 L[3]=rsp + #16 L[4]=rsp + #4 L[5]=rsp + #24 L[6]=rsp + #32 L[7]=_ L[8]=_ L[9]=_ L[10]=rsp + #40 L[11]=rsp + #60 L[12]=rsp + #28 STK[0]=rsp + #60 STK[1]=rsp + #48
        # OopMap {rbp=Oop [16]=Oop [32]=Oop [40]=Oop [48]=Oop [60]=NarrowOop off=3816/0xee8}
0ee8    ud2	# ShouldNotReachHere

0efc    B104: #	out( N1501 ) &lt;- in( B33 )  Freq: 7.88994e-09
0efc    movl    RSI, #-187	# int
0f01    movl    R10, [rsp + #16]	# spill
0f06    movl    [rsp + #8], R10	# spill
0f0b    pushq   [rsp + #24]	# 64-bit mem-mem spill
	popq    [rsp + #16]
0f15    movl    R10, [rsp + #32]	# spill
0f1a    movl    [rsp + #12], R10	# spill
0f1f    movl    R10, [rsp + #36]	# spill
0f24    movl    [rsp + #24], R10	# spill
0f29    pushq   [rsp + #40]	# 64-bit mem-mem spill
	popq    [rsp + #32]
0f33    movq    [rsp + #40], R14	# spill
0f38    movl    [rsp + #28], R11	# spill
0f3d    movq    [rsp + #56], R8	# spill
0f42    movq    [rsp + #64], R9	# spill
0f47    movl    [rsp + #72], RDI	# spill
        nop 	# 1 bytes pad for loops and calls
0f4c    call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.String::equals @ bci:33  L[0]=rsp + #56 L[1]=_ L[2]=rsp + #64 STK[0]=rsp + #72 STK[1]=RBP
        # java.util.HashMap::putVal @ bci:203  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=rsp + #56 L[3]=rsp + #16 L[4]=rsp + #12 L[5]=rsp + #24 L[6]=rsp + #32 L[7]=_ L[8]=_ L[9]=_ L[10]=rsp + #40 L[11]=_ L[12]=rsp + #28
        # OopMap {[0]=Oop [16]=Oop [32]=Oop [40]=Oop [56]=Oop [64]=Oop off=3924/0xf54}
0f54    ud2	# ShouldNotReachHere

0f68    B105: #	out( N1501 ) &lt;- in( B12 )  Freq: 1e-35
0f68    movl    RSI, #-34	# int
0f6d    movq    RBP, [rsp + #0]	# spill
0f71    movl    R8, [rsp + #16]	# spill
0f76    movl    [rsp + #0], R8	# spill
0f7a    pushq   [rsp + #24]	# 64-bit mem-mem spill
	popq    [rsp + #16]
0f84    movl    R8, [rsp + #32]	# spill
0f89    movl    [rsp + #4], R8	# spill
0f8e    movl    R8, [rsp + #36]	# spill
0f93    movl    [rsp + #24], R8	# spill
0f98    pushq   [rsp + #40]	# 64-bit mem-mem spill
	popq    [rsp + #32]
0fa2    movl    [rsp + #28], R11	# spill
0fa7    movq    [rsp + #40], R9	# spill
0fac    movl    [rsp + #52], RCX	# spill
0fb0    call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.String::equals @ bci:8  L[0]=rsp + #40 L[1]=rsp + #52 L[2]=_ STK[0]=rsp + #52
        # java.util.HashMap::putVal @ bci:91  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #40 L[3]=rsp + #16 L[4]=rsp + #4 L[5]=rsp + #24 L[6]=rsp + #32 L[7]=rsp + #28 L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_
        # OopMap {rbp=Oop [16]=Oop [28]=NarrowOop [32]=Oop [40]=Oop [52]=NarrowOop off=4024/0xfb8}
0fb8    ud2	# ShouldNotReachHere

0fcc    B106: #	out( N1501 ) &lt;- in( B32 )  Freq: 1e-35
0fcc    movl    RSI, #-34	# int
0fd1    movq    RBP, [rsp + #0]	# spill
0fd5    movl    RCX, [rsp + #16]	# spill
0fd9    movl    [rsp + #0], RCX	# spill
0fdc    pushq   [rsp + #24]	# 64-bit mem-mem spill
	popq    [rsp + #8]
0fe6    movl    RCX, [rsp + #32]	# spill
0fea    movl    [rsp + #4], RCX	# spill
0fee    movl    R10, [rsp + #36]	# spill
0ff3    movl    [rsp + #16], R10	# spill
0ff8    pushq   [rsp + #40]	# 64-bit mem-mem spill
	popq    [rsp + #24]
1002    movq    [rsp + #32], R14	# spill
1007    movl    [rsp + #20], R11	# spill
100c    movq    [rsp + #48], R8	# spill
1011    movl    [rsp + #60], R9	# spill
        nop 	# 2 bytes pad for loops and calls
1018    call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.String::equals @ bci:8  L[0]=rsp + #48 L[1]=rsp + #60 L[2]=_ STK[0]=rsp + #60
        # java.util.HashMap::putVal @ bci:203  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #48 L[3]=rsp + #8 L[4]=rsp + #4 L[5]=rsp + #16 L[6]=rsp + #24 L[7]=_ L[8]=_ L[9]=_ L[10]=rsp + #32 L[11]=_ L[12]=rsp + #20
        # OopMap {rbp=Oop [8]=Oop [24]=Oop [32]=Oop [48]=Oop [60]=NarrowOop off=4128/0x1020}
1020    ud2	# ShouldNotReachHere

1034    B107: #	out( N1501 ) &lt;- in( B59 )  Freq: 2.02172e-07
1034    movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
103c    call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:26  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ STK[0]=#NULL
        # OopMap {off=4164/0x1044}
1044    ud2	# ShouldNotReachHere

1058    B108: #	out( N1501 ) &lt;- in( B11 )  Freq: 6.90071e-08
1058    movl    RSI, #-12	# int
105d    movq    RBP, [rsp + #0]	# spill
1061    movl    R10, [rsp + #16]	# spill
1066    movl    [rsp + #0], R10	# spill
106a    pushq   [rsp + #24]	# 64-bit mem-mem spill
	popq    [rsp + #16]
1074    movl    R8, [rsp + #32]	# spill
1079    movl    [rsp + #4], R8	# spill
107e    movl    R10, [rsp + #36]	# spill
1083    movl    [rsp + #24], R10	# spill
1088    pushq   [rsp + #40]	# 64-bit mem-mem spill
	popq    [rsp + #32]
1092    movl    [rsp + #28], R11	# spill
1097    movq    [rsp + #40], R9	# spill
109c    call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;make_not_entrant&apos; debug_id=&apos;0&apos;)
        # java.lang.String::equals @ bci:8  L[0]=rsp + #40 L[1]=#NULL L[2]=_ STK[0]=#NULL
        # java.util.HashMap::putVal @ bci:91  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #40 L[3]=rsp + #16 L[4]=rsp + #4 L[5]=rsp + #24 L[6]=rsp + #32 L[7]=rsp + #28 L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_
        # OopMap {rbp=Oop [16]=Oop [28]=NarrowOop [32]=Oop [40]=Oop off=4260/0x10a4}
10a4    ud2	# ShouldNotReachHere

10b8    B109: #	out( N1501 ) &lt;- in( B8 )  Freq: 3.59993e-08
10b8    movl    RSI, #-187	# int
10bd    movq    RBP, [rsp + #0]	# spill
10c1    movl    R9, [rsp + #16]	# spill
10c6    movl    [rsp + #0], R9	# spill
10ca    pushq   [rsp + #24]	# 64-bit mem-mem spill
	popq    [rsp + #16]
10d4    movl    R8, [rsp + #32]	# spill
10d9    movl    [rsp + #4], R8	# spill
10de    movl    R8, [rsp + #36]	# spill
10e3    movl    [rsp + #24], R8	# spill
10e8    pushq   [rsp + #40]	# 64-bit mem-mem spill
	popq    [rsp + #32]
10f2    movl    [rsp + #28], R11	# spill
10f7    movl    [rsp + #40], RCX	# spill
10fb    movq    [rsp + #48], R10	# spill
1100    call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:85  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #48 L[3]=rsp + #16 L[4]=rsp + #4 L[5]=rsp + #24 L[6]=rsp + #32 L[7]=rsp + #28 L[8]=_ L[9]=_ L[10]=_ L[11]=rsp + #40 L[12]=_ STK[0]=rsp + #48
        # OopMap {rbp=Oop [16]=Oop [28]=NarrowOop [32]=Oop [40]=NarrowOop [48]=Oop off=4360/0x1108}
1108    ud2	# ShouldNotReachHere

111c    B110: #	out( N1501 ) &lt;- in( B31 )  Freq: 1.59894e-08
111c    movl    RSI, #-12	# int
1121    movq    RBP, [rsp + #0]	# spill
1125    movl    R10, [rsp + #16]	# spill
112a    movl    [rsp + #0], R10	# spill
112e    pushq   [rsp + #24]	# 64-bit mem-mem spill
	popq    [rsp + #8]
1138    movl    R10, [rsp + #32]	# spill
113d    movl    [rsp + #4], R10	# spill
1142    movl    R10, [rsp + #36]	# spill
1147    movl    [rsp + #16], R10	# spill
114c    pushq   [rsp + #40]	# 64-bit mem-mem spill
	popq    [rsp + #24]
1156    movq    [rsp + #32], R14	# spill
115b    movl    [rsp + #20], R11	# spill
1160    movq    [rsp + #48], R8	# spill
        nop 	# 3 bytes pad for loops and calls
1168    call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;make_not_entrant&apos; debug_id=&apos;0&apos;)
        # java.lang.String::equals @ bci:8  L[0]=rsp + #48 L[1]=#NULL L[2]=_ STK[0]=#NULL
        # java.util.HashMap::putVal @ bci:203  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #48 L[3]=rsp + #8 L[4]=rsp + #4 L[5]=rsp + #16 L[6]=rsp + #24 L[7]=_ L[8]=_ L[9]=_ L[10]=rsp + #32 L[11]=_ L[12]=rsp + #20
        # OopMap {rbp=Oop [8]=Oop [24]=Oop [32]=Oop [48]=Oop off=4464/0x1170}
1170    ud2	# ShouldNotReachHere

1184    B111: #	out( N1501 ) &lt;- in( B28 )  Freq: 8.3413e-09
1184    movl    RSI, #-187	# int
1189    movq    RBP, [rsp + #0]	# spill
118d    movl    R8, [rsp + #16]	# spill
1192    movl    [rsp + #0], R8	# spill
1196    pushq   [rsp + #24]	# 64-bit mem-mem spill
	popq    [rsp + #16]
11a0    movl    RCX, [rsp + #32]	# spill
11a4    movl    [rsp + #4], RCX	# spill
11a8    movl    R8, [rsp + #36]	# spill
11ad    movl    [rsp + #24], R8	# spill
11b2    pushq   [rsp + #40]	# 64-bit mem-mem spill
	popq    [rsp + #32]
11bc    movq    [rsp + #40], R14	# spill
11c1    movl    [rsp + #28], R11	# spill
11c6    movq    [rsp + #48], R10	# spill
11cb    movl    [rsp + #56], R9	# spill
11d0    call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:197  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #48 L[3]=rsp + #16 L[4]=rsp + #4 L[5]=rsp + #24 L[6]=rsp + #32 L[7]=_ L[8]=_ L[9]=_ L[10]=rsp + #40 L[11]=rsp + #56 L[12]=rsp + #28 STK[0]=rsp + #48
        # OopMap {rbp=Oop [16]=Oop [32]=Oop [40]=Oop [48]=Oop [56]=NarrowOop off=4568/0x11d8}
11d8    ud2	# ShouldNotReachHere

11ec    B112: #	out( B116 ) &lt;- in( B86 )  Freq: 1.8101e-10
11ec    # exception oop is in rax; no code emitted
11ec    movq    RSI, RAX	# spill
11ef    jmp,s   B116

11f1    B113: #	out( B116 ) &lt;- in( B84 )  Freq: 7.26146e-10
11f1    # exception oop is in rax; no code emitted
11f1    movq    RSI, RAX	# spill
11f4    jmp,s   B116

11f6    B114: #	out( B116 ) &lt;- in( B61 )  Freq: 3.44598e-07
11f6    # exception oop is in rax; no code emitted
11f6    movq    RSI, RAX	# spill
11f9    jmp,s   B116

11fb    B115: #	out( B116 ) &lt;- in( B58 )  Freq: 1.99526e-06
11fb    # exception oop is in rax; no code emitted
11fb    movq    RSI, RAX	# spill

11fe    B116: #	out( N1501 ) &lt;- in( B115 B113 B112 B114 )  Freq: 2.34077e-06
11fe    vzeroupper
	addq    rsp, 112	# Destroy frame
	popq    rbp

1206    jmp     rethrow_stub

--------------------------------------------------------------------------------
</opto_assembly>
<dependency_failed type='unique_concrete_method' ctxk='java/util/HashMap' x='java.util.HashMap afterNodeInsertion (Z)V' witness='java/util/LinkedHashMap' stamp='0.936'/>
<dependency_failed type='unique_concrete_method' ctxk='java/util/HashMap' x='java.util.HashMap afterNodeAccess (Ljava/util/HashMap$Node;)V' witness='java/util/LinkedHashMap' stamp='0.936'/>
<dependency_failed type='unique_concrete_method' ctxk='java/util/HashMap' x='java.util.HashMap newNode (ILjava/lang/Object;Ljava/lang/Object;Ljava/util/HashMap$Node;)Ljava/util/HashMap$Node;' witness='java/util/LinkedHashMap' stamp='0.936'/>
<writer thread='40195'/>
    935  338       3       java.util.ImmutableCollections$ListItr::hasNext (17 bytes)
<writer thread='38659'/>

============================= C2-compiled nmethod ==============================
<opto_assembly compile_id='190'>
----------------------- MetaData before Compile_id = 190 ------------------------
{method}
 - this oop:          0x0000000126d91530
 - method holder:     &apos;java/io/DataInputStream&apos;
 - constants:         0x0000000126d8ec80 constant pool [184] {0x0000000126d8ec80} for &apos;java/io/DataInputStream&apos; cache=0x0000000126d915e0
 - access:            0xc1000019  public static final 
 - name:              &apos;readUTF&apos;
 - signature:         &apos;(Ljava/io/DataInput;)Ljava/lang/String;&apos;
 - max stack:         6
 - max locals:        9
 - size of params:    1
 - method size:       13
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x000000010c0a1de0
 - adapters:          AHE@0x00007f99308e1660: 0xb0000000 i2c: 0x000000010c0e9ee0 c2i: 0x000000010c0e9fc3 c2iUV: 0x000000010c0e9f8a c2iNCI: 0x000000010c0ea000
 - compiled entry     0x000000010c80f2a0
 - code size:         501
 - code start:        0x0000000126d91268
 - code end (excl):   0x0000000126d9145d
 - method data:       0x0000000126e8ebb0
 - checked ex length: 1
 - checked ex start:  0x0000000126d9152c
 - linenumber start:  0x0000000126d9145d
 - localvar length:   12
 - localvar start:    0x0000000126d9149a
 - compiled code: nmethod    936  122       3       java.io.DataInputStream::readUTF (501 bytes)

------------------------ OptoAssembly for Compile_id = 190 -----------------------
#
#  java/lang/String:exact * ( java/io/DataInput * )
#
#r018 rsi:rsi   : parm 0: java/io/DataInput *
# -- Old rsp -- Framesize: 144 --
#r583 rsp+140: in_preserve
#r582 rsp+136: return address
#r581 rsp+132: in_preserve
#r580 rsp+128: saved fp register
#r579 rsp+124: Fixed slot 3
#r578 rsp+120: Fixed slot 2
#r577 rsp+116: Fixed slot 1
#r576 rsp+112: Fixed slot 0
#r611 rsp+108: spill
#r610 rsp+104: spill
#r609 rsp+100: spill
#r608 rsp+96: spill
#r607 rsp+92: spill
#r606 rsp+88: spill
#r605 rsp+84: spill
#r604 rsp+80: spill
#r603 rsp+76: spill
#r602 rsp+72: spill
#r601 rsp+68: spill
#r600 rsp+64: spill
#r599 rsp+60: spill
#r598 rsp+56: spill
#r597 rsp+52: spill
#r596 rsp+48: spill
#r595 rsp+44: spill
#r594 rsp+40: spill
#r593 rsp+36: spill
#r592 rsp+32: spill
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
0000    N1: #	out( B1 ) &lt;- in( B227 B147 B228 B148 B234 B145 B229 B157 B235 B146 B201 B230 B202 B233 B140 B204 B231 B166 B203 B251 B171 B232 B197 B205 B210 B182 B181 B92 )  Freq: 1

0000    B1: #	out( B227 B2 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
0000    # stack bang (592 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #128	# Create frame

000f    movl    R10, [RSI + #8 (8-bit)]	# compressed klass ptr
0013    NullCheck RSI

0013    B2: #	out( B147 B3 ) &lt;- in( B1 )  Freq: 0.999999
0013    cmpl    R10, narrowklass: precise klass java/io/DataInputStream: 0x000000012778fb60:Constant:exact *	# compressed klass ptr
001a    jne,u   B147  P=0.000001 C=-1.000000

0020    B3: #	out( B228 B4 ) &lt;- in( B2 )  Freq: 0.999998
0020    # checkcastPP of RSI
0020    movq    [rsp + #32], RSI	# spill
0025    movl    R11, [RSI + #12 (8-bit)]	# compressed ptr ! Field: volatile java/io/FilterInputStream.in
0029    MEMBAR-acquire ! (empty encoding)
0029    movl    R10, [R12 + R11 &lt;&lt; 3 + #8] (compressed oop addressing)	# compressed klass ptr
002e    NullCheck R11

002e    B4: #	out( B148 B5 ) &lt;- in( B3 )  Freq: 0.999997
002e    cmpl    R10, narrowklass: precise klass java/io/BufferedInputStream: 0x00000001275f8e30:Constant:exact *	# compressed klass ptr
0035    jne,u   B148  P=0.000001 C=-1.000000

003b    B5: #	out( B150 B6 ) &lt;- in( B4 )  Freq: 0.999996
003b    decode_heap_oop_not_null R10,R11
003f    movq    R11, R10	# spill
0042    # checkcastPP of R11
0042    movq    RAX, [R11]	# long
0045    movq    R10, RAX	# spill
0048    andq    R10, #7	# long
004c    movl    R8, narrowklass: precise klass java/io/BufferedInputStream: 0x00000001275f8e30:Constant:exact *	# compressed klass ptr
0052    decode_klass_not_null R8,R8
0062    movq    [rsp + #40], R8	# spill
0067    cmpq    R10, #5
006b    jne     B150  P=0.000001 C=-1.000000

0071    B6: #	out( B152 B7 ) &lt;- in( B5 )  Freq: 0.999995
0071    movq    R10, [R8 + #184 (32-bit)]	# long
0078    movq    R8, R10	# spill
007b    # TLS is in R15
007b    orq     R8, R15	# long
007e    movq    R9, R8	# spill
0081    xorq    R9, RAX	# long
0084    testq   R9, #-121	# long
008b    jne     B152  P=0.000001 C=-1.000000

0091    B7: #	out( B101 B8 ) &lt;- in( B151 B150 B6 B156 )  Freq: 0.999996
0091    MEMBAR-acquire (prior CMPXCHG in FastLock so empty encoding)
0091    movl    R10, [R11 + #20 (8-bit)]	# int ! Field: java/io/BufferedInputStream.pos
0095    movl    R9, [R11 + #16 (8-bit)]	# int ! Field: java/io/BufferedInputStream.count
0099    cmpl    R10, R9
009c    jge     B101  P=0.002242 C=12491.000000

00a2    B8: #	out( B234 B9 ) &lt;- in( B102 B7 )  Freq: 0.998875
00a2    movl    RCX, [R11 + #32 (8-bit)]	# compressed ptr ! Field: volatile java/io/BufferedInputStream.buf
00a6    MEMBAR-acquire ! (empty encoding)
00a6    movl    R10, [R12 + RCX &lt;&lt; 3 + #12] (compressed oop addressing)	# range
00ab    NullCheck RCX

00ab    B9: #	out( B145 B10 ) &lt;- in( B8 )  Freq: 0.998875
00ab    movl    RBP, [R11 + #20 (8-bit)]	# int ! Field: java/io/BufferedInputStream.pos
00af    movl    R9, RBP	# spill
00b2    incl    R9	# int
00b5    movl    [R11 + #20 (8-bit)], R9	# int ! Field: java/io/BufferedInputStream.pos
00b9    cmpl    RBP, R10	# unsigned
00bc    jnb,u   B145  P=0.000001 C=-1.000000

00c2    B10: #	out( B177 B11 ) &lt;- in( B9 )  Freq: 0.998874
00c2    decode_heap_oop_not_null R10,RCX
00c6    movzbl  R10, [R10 + #16 + RBP]	# ubyte
00cc    MEMBAR-release (a FastUnlock follows so empty encoding)
00cc    movl    R8, #7	# long (unsigned 32-bit)
00d2    andq    R8, [R11]	# long
00d5    cmpq    R8, #5
00d9    jne     B177  P=0.000001 C=-1.000000

00df    B11: #	out( B229 B12 ) &lt;- in( B104 B178 B177 B10 )  Freq: 0.999994
00df    movq    R11, [rsp + #32]	# spill
00e4    movl    R8, [R11 + #12 (8-bit)]	# compressed ptr ! Field: volatile java/io/FilterInputStream.in
00e8    MEMBAR-acquire ! (empty encoding)
00e8    movl    R11, [R12 + R8 &lt;&lt; 3 + #8] (compressed oop addressing)	# compressed klass ptr
00ed    NullCheck R8

00ed    B12: #	out( B157 B13 ) &lt;- in( B11 )  Freq: 0.999993
00ed    cmpl    R11, narrowklass: precise klass java/io/BufferedInputStream: 0x00000001275f8e30:Constant:exact *	# compressed klass ptr
00f4    jne,u   B157  P=0.000001 C=-1.000000

00fa    B13: #	out( B159 B14 ) &lt;- in( B12 )  Freq: 0.999992
00fa    decode_heap_oop_not_null R11,R8
00fe    movq    R8, R11	# spill
0101    # checkcastPP of R8
0101    movq    RAX, [R8]	# long
0104    movq    R11, RAX	# spill
0107    andq    R11, #7	# long
010b    cmpq    R11, #5
010f    jne     B159  P=0.000001 C=-1.000000

0115    B14: #	out( B161 B15 ) &lt;- in( B13 )  Freq: 0.999991
0115    movq    R11, [rsp + #40]	# spill
011a    movq    R11, [R11 + #184 (32-bit)]	# long
0121    movq    R9, R11	# spill
0124    # TLS is in R15
0124    orq     R9, R15	# long
0127    movq    RCX, R9	# spill
012a    xorq    RCX, RAX	# long
012d    testq   RCX, #-121	# long
0134    jne     B161  P=0.000001 C=-1.000000

013a    B15: #	out( B105 B16 ) &lt;- in( B160 B159 B14 B165 )  Freq: 0.999992
013a    MEMBAR-acquire (prior CMPXCHG in FastLock so empty encoding)
013a    movl    R11, [R8 + #20 (8-bit)]	# int ! Field: java/io/BufferedInputStream.pos
013e    movl    RCX, [R8 + #16 (8-bit)]	# int ! Field: java/io/BufferedInputStream.count
0142    cmpl    R11, RCX
0145    jge     B105  P=0.002242 C=12491.000000

014b    B16: #	out( B235 B17 ) &lt;- in( B107 B15 )  Freq: 0.998872
014b    movl    R9, [R8 + #32 (8-bit)]	# compressed ptr ! Field: volatile java/io/BufferedInputStream.buf
014f    MEMBAR-acquire ! (empty encoding)
014f    movl    R11, [R12 + R9 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
0154    NullCheck R9

0154    B17: #	out( B146 B18 ) &lt;- in( B16 )  Freq: 0.998871
0154    movl    RBP, [R8 + #20 (8-bit)]	# int ! Field: java/io/BufferedInputStream.pos
0158    movl    RCX, RBP	# spill
015a    incl    RCX	# int
015c    movl    [R8 + #20 (8-bit)], RCX	# int ! Field: java/io/BufferedInputStream.pos
0160    cmpl    RBP, R11	# unsigned
0163    jnb,u   B146  P=0.000001 C=-1.000000

0169    B18: #	out( B179 B19 ) &lt;- in( B17 )  Freq: 0.99887
0169    decode_heap_oop_not_null R11,R9
016d    movzbl  R11, [R11 + #16 + RBP]	# ubyte
0173    MEMBAR-release (a FastUnlock follows so empty encoding)
0173    movl    R9, #7	# long (unsigned 32-bit)
0179    andq    R9, [R8]	# long
017c    cmpq    R9, #5
0180    jne     B179  P=0.000001 C=-1.000000

0186    B19: #	out( B201 B20 ) &lt;- in( B109 B180 B179 B18 )  Freq: 0.999991
0186    movl    R9, R10	# spill
0189    orl     R9, R11	# int
018c    testl   R9, R9
018f    jl     B201  P=0.000000 C=4909.000000

0195    B20: #	out( B230 B21 ) &lt;- in( B19 )  Freq: 0.99999
0195    movq    R8, [rsp + #32]	# spill
019a    movl    R9, [R8 + #16 (8-bit)]	# compressed ptr ! Field: java/io/DataInputStream.bytearr
019e    movl    [rsp + #48], R9	# spill
01a3    movl    R8, [R12 + R9 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
01a8    NullCheck R9

01a8    B21: #	out( B117 B22 ) &lt;- in( B20 )  Freq: 0.999989
01a8    sall    R10, #8
01ac    addl    R10, R11	# int
01af    cmpl    R8, R10
01b2    jl     B117  P=0.000962 C=1039.000000

01b8    B22: #	out( B202 B23 ) &lt;- in( B132 B21 )  Freq: 0.999989
01b8    movq    R11, [rsp + #32]	# spill
01bd    movl    R8, [R11 + #20 (8-bit)]	# compressed ptr ! Field: java/io/DataInputStream.chararr
01c1    movl    [rsp + #8], R8	# spill
01c6    testl   R10, R10
01c9    jl     B202  P=0.000000 C=1155.000000

01cf    B23: #	out( B77 B24 ) &lt;- in( B22 )  Freq: 0.999989
01cf    testl   R10, R10
01d2    jle     B77  P=0.500000 C=2310.000000

01d8    B24: #	out( B233 B25 ) &lt;- in( B23 )  Freq: 0.499994
01d8    movl    R11, [rsp + #48]	# spill
01dd    movl    RSI, [R12 + R11 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
01e2    NullCheck R11

01e2    B25: #	out( B26 ) &lt;- in( B24 )  Freq: 0.499994
01e2    movl    R9, RSI	# spill
01e5    subl    R9, R10	# int
01e8    decode_heap_oop_not_null R11,R11
01ec    movl    R13, #7	# long (unsigned 32-bit)
01f2    movq    R14, 0x0000000117891000	# ptr
01fc    xorl    RCX, RCX	# int

01fe    B26: #	out( B231 B27 ) &lt;- in( B25 B52 ) Loop( B26-B52 ) Freq: 0.999973
01fe    movl    RDI, R10	# spill
0201    subl    RDI, RCX	# int
0203    movq    R8, [rsp + #32]	# spill
0208    movl    R8, [R8 + #12 (8-bit)]	# compressed ptr ! Field: volatile java/io/FilterInputStream.in
020c    MEMBAR-acquire ! (empty encoding)
020c    movl    RDX, [R12 + R8 &lt;&lt; 3 + #8] (compressed oop addressing)	# compressed klass ptr
0211    NullCheck R8

0211    B27: #	out( B166 B28 ) &lt;- in( B26 )  Freq: 0.999972
0211    cmpl    RDX, narrowklass: precise klass java/io/BufferedInputStream: 0x00000001275f8e30:Constant:exact *	# compressed klass ptr
0217    jne,u   B166  P=0.000001 C=-1.000000

021d    B28: #	out( B168 B29 ) &lt;- in( B27 )  Freq: 0.999971
021d    decode_heap_oop_not_null RDX,R8
0221    # checkcastPP of RDX
0221    movq    RAX, [RDX]	# long
0224    movq    R8, RAX	# spill
0227    andq    R8, #7	# long
022b    cmpq    R8, #5
022f    jne     B168  P=0.000001 C=-1.000000

0235    B29: #	out( B172 B30 ) &lt;- in( B28 )  Freq: 0.99997
0235    movq    [rsp + #24], R11	# spill
023a    movl    [rsp + #16], R9	# spill
023f    movl    [rsp + #12], RSI	# spill
0243    movq    [rsp + #0], R14	# spill
0247    movq    RBP, R13	# spill
024a    movq    R11, [rsp + #40]	# spill
024f    movq    R11, [R11 + #184 (32-bit)]	# long
0256    movq    R8, R11	# spill
0259    # TLS is in R15
0259    orq     R8, R15	# long
025c    movq    R9, R8	# spill
025f    xorq    R9, RAX	# long
0262    testq   R9, #-121	# long
0269    jne     B172  P=0.000001 C=-1.000000

026f    B30: #	out( B31 ) &lt;- in( B29 )  Freq: 0.999969
026f    movl    R9, [rsp + #16]	# spill
0274    movq    R11, [rsp + #24]	# spill

0279    B31: #	out( B203 B32 ) &lt;- in( B170 B168 B30 B176 )  Freq: 0.999971
0279    MEMBAR-acquire (prior CMPXCHG in FastLock so empty encoding)
0279    movl    RBP, [RDX + #32 (8-bit)]	# compressed ptr ! Field: volatile java/io/BufferedInputStream.buf
027c    MEMBAR-acquire ! (empty encoding)
027c    testl   RBP, RBP	# compressed ptr
027e    je     B203  P=0.000000 C=14327.000000

0284    B32: #	out( B171 B33 ) &lt;- in( B31 )  Freq: 0.999971
0284    movl    R8, RCX	# spill
0287    orl     R8, RDI	# int
028a    orl     R8, R10	# int
028d    orl     R8, R9	# int
0290    testl   R8, R8
0293    jl     B171  P=0.000001 C=-1.000000

0299    B33: #	out( B93 B34 ) &lt;- in( B32 )  Freq: 0.99997
0299    cmpl    R10, RCX
029c    je     B93  P=0.100000 C=-1.000000

02a2    B34: #	out( B244 B35 ) &lt;- in( B33 )  Freq: 0.899973
02a2    movq    [rsp + #72], RDX	# spill
02a7    movl    [rsp + #64], RDI	# spill
02ab    movl    [rsp + #52], RCX	# spill
02af    movq    [rsp + #56], R11	# spill
02b4    movl    [rsp + #28], R9	# spill
02b9    movl    [rsp + #12], RSI	# spill
02bd    movq    [rsp + #16], R14	# spill
02c2    movl    [rsp + #24], R10	# spill
02c7    movq    [rsp + #0], R13	# spill
02cb    movq    RSI, RDX	# spill
02ce    movq    RDX, R11	# spill
02d1    movl    R8, RDI	# spill
02d4    movq    RBP, RSI	# spill
        nop 	# 1 bytes pad for loops and calls
02d8    call,static  java.io.BufferedInputStream::read1
        # java.io.BufferedInputStream::read @ bci:49  L[0]=RBP L[1]=rsp + #56 L[2]=rsp + #52 L[3]=rsp + #64 L[4]=#0 L[5]=_ L[6]=_ MON-BOX0=rsp+112 MON-OBJ[0]=RBP
        # java.io.DataInputStream::readFully @ bci:34  L[0]=rsp + #32 L[1]=rsp + #48 L[2]=#0 L[3]=rsp + #24 L[4]=rsp + #52 L[5]=_
        # java.io.DataInputStream::readUTF @ bci:87  L[0]=_ L[1]=rsp + #24 L[2]=rsp + #48 L[3]=rsp + #8 L[4]=_ L[5]=_ L[6]=_ L[7]=#0 L[8]=#0
        # OopMap {rbp=Oop [8]=NarrowOop [32]=Oop [48]=NarrowOop [56]=Oop [72]=Oop off=736/0x2e0}

02e0    B35: #	out( B47 B36 ) &lt;- in( B34 )  Freq: 0.899955
        # Block is sole successor of call
02e0    testl   RAX, RAX
02e2    jle     B47  P=0.500000 C=-1.000000

02e8    B36: #	out( B37 ) &lt;- in( B35 )  Freq: 0.449977
02e8    movl    RBP, RAX	# spill

02ea    B37: #	out( B95 B38 ) &lt;- in( B36 B46 ) Loop( B37-B46 inner ) Freq: 0.811497
02ea    movl    R8, RBP	# spill
02ed    addl    R8, [RSP + #52 (32-bit)]	# int
02f2    cmpl    RBP, [RSP + #64 (32-bit)]
02f6    jge     B95  P=0.100000 C=-1.000000

02fc    B38: #	out( B98 B39 ) &lt;- in( B37 )  Freq: 0.730347
02fc    movq    R10, [rsp + #72]	# spill
0301    movl    R11, [R10 + #12 (8-bit)]	# compressed ptr ! Field: volatile java/io/FilterInputStream.in
0305    MEMBAR-acquire ! (empty encoding)
0305    testl   R11, R11	# compressed ptr
0308    je     B98  P=0.100000 C=-1.000000

030e    B39: #	out( B245 B40 ) &lt;- in( B38 )  Freq: 0.657312
030e    movl    [rsp + #68], R8	# spill
0313    decode_heap_oop_not_null RSI,R11
        nop 	# 3 bytes pad for loops and calls
031a    movq    rax, #Universe::non_oop_word()
	call,dynamic  java.io.InputStream::available
        # java.io.BufferedInputStream::read @ bci:101  L[0]=rsp + #72 L[1]=rsp + #56 L[2]=rsp + #52 L[3]=rsp + #64 L[4]=RBP L[5]=_ L[6]=_ MON-BOX0=rsp+112 MON-OBJ[0]=rsp + #72
        # java.io.DataInputStream::readFully @ bci:34  L[0]=rsp + #32 L[1]=rsp + #48 L[2]=#0 L[3]=rsp + #24 L[4]=rsp + #52 L[5]=_
        # java.io.DataInputStream::readUTF @ bci:87  L[0]=_ L[1]=rsp + #24 L[2]=rsp + #48 L[3]=rsp + #8 L[4]=_ L[5]=_ L[6]=_ L[7]=#0 L[8]=#0
        # OopMap {[8]=NarrowOop [32]=Oop [48]=NarrowOop [56]=Oop [72]=Oop off=812/0x32c}

032c    B40: #	out( B44 B41 ) &lt;- in( B39 )  Freq: 0.657299
        # Block is sole successor of call
032c    testl   RAX, RAX
032e    jg,s   B44  P=0.500000 C=-1.000000

0330    B41: #	out( B206 B42 ) &lt;- in( B40 )  Freq: 0.32865
0330    MEMBAR-release (a FastUnlock follows so empty encoding)
0330    movl    R10, #7	# long (unsigned 32-bit)
0336    movq    R11, [rsp + #72]	# spill
033b    andq    R10, [R11]	# long
033e    cmpq    R10, #5
0342    jne     B206  P=0.000001 C=-1.000000

0348    B42: #	out( B210 B43 ) &lt;- in( B207 B206 B41 )  Freq: 0.32865
0348    testl   RBP, RBP
034a    jl     B210  P=0.000000 C=1155.000000

0350    B43: #	out( B51 ) &lt;- in( B42 )  Freq: 0.328649
0350    movq    R13, [rsp + #0]	# spill
0354    movl    R10, [rsp + #24]	# spill
0359    movq    R14, [rsp + #16]	# spill
035e    movl    RSI, [rsp + #12]	# spill
0362    movl    R9, [rsp + #28]	# spill
0367    movq    R11, [rsp + #56]	# spill
036c    movl    R8, [rsp + #68]	# spill
0371    jmp,s   B51

0373    B44: #	out( B246 B45 ) &lt;- in( B40 B98 )  Freq: 0.401684
0373    movl    R8, [rsp + #64]	# spill
0378    subl    R8, RBP	# int
037b    movq    RSI, [rsp + #72]	# spill
0380    movq    RDX, [rsp + #56]	# spill
0385    movl    RCX, [rsp + #68]	# spill
        nop 	# 3 bytes pad for loops and calls
038c    call,static  java.io.BufferedInputStream::read1
        # java.io.BufferedInputStream::read @ bci:49  L[0]=rsp + #72 L[1]=rsp + #56 L[2]=rsp + #52 L[3]=rsp + #64 L[4]=RBP L[5]=_ L[6]=_ MON-BOX0=rsp+112 MON-OBJ[0]=rsp + #72
        # java.io.DataInputStream::readFully @ bci:34  L[0]=rsp + #32 L[1]=rsp + #48 L[2]=#0 L[3]=rsp + #24 L[4]=rsp + #52 L[5]=_
        # java.io.DataInputStream::readUTF @ bci:87  L[0]=_ L[1]=rsp + #24 L[2]=rsp + #48 L[3]=rsp + #8 L[4]=_ L[5]=_ L[6]=_ L[7]=#0 L[8]=#0
        # OopMap {[8]=NarrowOop [32]=Oop [48]=NarrowOop [56]=Oop [72]=Oop off=916/0x394}

0394    B45: #	out( B99 B46 ) &lt;- in( B44 )  Freq: 0.401676
        # Block is sole successor of call
0394    testl   RAX, RAX
0396    jle     B99  P=0.100000 C=-1.000000

039c    B46: #	out( B37 ) &lt;- in( B45 )  Freq: 0.361509
039c    addl    RBP, RAX	# int
039e    jmp     B37

03a3    B47: #	out( B48 ) &lt;- in( B100 B35 )  Freq: 0.453994
03a3    movl    RBP, RAX	# spill

03a5    B48: #	out( B199 B49 ) &lt;- in( B99 B47 )  Freq: 0.490145
03a5    MEMBAR-release (a FastUnlock follows so empty encoding)
03a5    movl    R10, #7	# long (unsigned 32-bit)
03ab    movq    R11, [rsp + #72]	# spill
03b0    andq    R10, [R11]	# long
03b3    cmpq    R10, #5
03b7    jne     B199  P=0.000001 C=-1.000000

03bd    B49: #	out( B210 B50 ) &lt;- in( B200 B199 B48 )  Freq: 0.490145
03bd    testl   RBP, RBP
03bf    jl     B210  P=0.000000 C=1155.000000

03c5    B50: #	out( B51 ) &lt;- in( B49 )  Freq: 0.490145
03c5    movl    R8, [rsp + #52]	# spill
03ca    addl    R8, RBP	# int
03cd    movq    R13, [rsp + #0]	# spill
03d1    movl    R10, [rsp + #24]	# spill
03d6    movq    R14, [rsp + #16]	# spill
03db    movl    RSI, [rsp + #12]	# spill
03df    movl    R9, [rsp + #28]	# spill
03e4    movq    R11, [rsp + #56]	# spill

03e9    B51: #	out( B53 B52 ) &lt;- in( B94 B97 B43 B50 )  Freq: 0.999941
03e9    # TLS is in R15
03e9    movq    RCX, [R15 + #296 (32-bit)]	# ptr
03f0    testl   rax, [RCX]	# Safepoint: poll for GC        # java.io.DataInputStream::readFully @ bci:59  L[0]=rsp + #32 L[1]=R11 L[2]=#0 L[3]=R10 L[4]=R8 L[5]=_
        # java.io.DataInputStream::readUTF @ bci:87  L[0]=_ L[1]=R10 L[2]=rsp + #48 L[3]=rsp + #8 L[4]=_ L[5]=_ L[6]=_ L[7]=#0 L[8]=#0
        # OopMap {r11=Oop [8]=NarrowOop [32]=Oop [48]=NarrowOop off=1008/0x3f0}
03f2    cmpl    R8, R10
03f5    jge,s   B53  P=0.500000 C=1155.000000

03f7    B52: #	out( B26 ) &lt;- in( B51 )  Freq: 0.49997
03f7    movl    RCX, R8	# spill
03fa    jmp     B26

03ff    B53: #	out( B197 B54 ) &lt;- in( B51 )  Freq: 0.49997
03ff    testl   RSI, RSI	# unsigned
0401    jbe,u   B197  P=0.000001 C=-1.000000

0407    B54: #	out( B197 B55 ) &lt;- in( B53 )  Freq: 0.49997
0407    movl    R8, R10	# spill
040a    decl    R8	# int
040d    cmpl    R8, RSI	# unsigned
0410    jnb,u   B197  P=0.000001 C=-1.000000

0416    B55: #	out( B197 B56 ) &lt;- in( B54 )  Freq: 0.499969
0416    movl    R9, [rsp + #8]	# spill
041b    movl    RCX, [R12 + R9 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
0420    NullCheck R9

0420    B56: #	out( B197 B57 ) &lt;- in( B55 )  Freq: 0.499969
0420    testl   RCX, RCX	# unsigned
0422    jbe,u   B197  P=0.000001 C=-1.000000

0428    B57: #	out( B197 B58 ) &lt;- in( B56 )  Freq: 0.499968
0428    cmpl    R8, RCX	# unsigned
042b    jnb,u   B197  P=0.000001 C=-1.000000

0431    B58: #	out( B208 B59 ) &lt;- in( B57 )  Freq: 0.499968
0431    movl    R9, [rsp + #48]	# spill
0436    movzbl  RCX, [R12 + R9 &lt;&lt; 3 + #16] (compressed oop addressing)	# ubyte
043c    cmpl    RCX, #127
043f    jg     B208  P=0.000000 C=32840.000000

0445    B59: #	out( B72 B60 ) &lt;- in( B58 )  Freq: 0.499968
0445    movl    R8, [rsp + #8]	# spill
044a    movw    [R12 + R8 &lt;&lt; 3 + #16] (compressed oop addressing), RCX	# char/short
0450    decode_heap_oop_not_null RDX,R8
0454    movl    RDI, R10	# spill
0457    addl    RDI, #-7	# int
045a    movl    R8, #1	# int
0460    cmpl    RDI, #1
0463    jle     B72  P=0.000001 C=-1.000000

0469    B60: #	out( B61 ) &lt;- in( B59 )  Freq: 0.499967
0469    movl    RBX, #8000	# int

046e    B61: #	out( B62 ) &lt;- in( B60 B71 ) Loop( B61-B71 ) Freq: 16.2388
046e    movl    R9, R10	# spill
0471    subl    R9, R8	# int
0474    addl    R9, #-7	# int
0478    cmpl    RBX, R9
047b    movl    RAX, #8000	# int
0480    cmovlgt RAX, R9	# min
0484    addl    RAX, R8	# int
        nop 	# 9 bytes pad for loops and calls

0490    B62: #	out( B133 B63 ) &lt;- in( B61 B70 ) Loop( B62-B70 inner main of N1221 strip mined) Freq: 529.438
0490    movslq  RSI, R8	# i2l
0493    movzbl  RCX, [R11 + #16 + RSI]	# ubyte
0499    cmpl    RCX, #127
049c    jg     B133  P=0.000000 C=32840.000000

04a2    B63: #	out( B136 B64 ) &lt;- in( B62 )  Freq: 529.438
04a2    movw    [RDX + #16 + RSI &lt;&lt; #1], RCX	# char/short
04a7    movzbl  RCX, [R11 + #17 + RSI]	# ubyte
04ad    cmpl    RCX, #127
04b0    jg     B136  P=0.000000 C=32840.000000

04b6    B64: #	out( B138 B65 ) &lt;- in( B63 )  Freq: 529.438
04b6    movw    [RDX + #18 + RSI &lt;&lt; #1], RCX	# char/short
04bb    movzbl  RCX, [R11 + #18 + RSI]	# ubyte
04c1    cmpl    RCX, #127
04c4    jg     B138  P=0.000000 C=32840.000000

04ca    B65: #	out( B134 B66 ) &lt;- in( B64 )  Freq: 529.438
04ca    movw    [RDX + #20 + RSI &lt;&lt; #1], RCX	# char/short
04cf    movzbl  RCX, [R11 + #19 + RSI]	# ubyte
04d5    cmpl    RCX, #127
04d8    jg     B134  P=0.000000 C=32840.000000

04de    B66: #	out( B140 B67 ) &lt;- in( B65 )  Freq: 529.437
04de    movw    [RDX + #22 + RSI &lt;&lt; #1], RCX	# char/short
04e3    movzbl  RCX, [R11 + #20 + RSI]	# ubyte
04e9    movl    R9, R8	# spill
04ec    addl    R9, #4	# int
04f0    cmpl    RCX, #127
04f3    jg     B140  P=0.000000 C=32840.000000

04f9    B67: #	out( B137 B68 ) &lt;- in( B66 )  Freq: 529.437
04f9    movw    [RDX + #24 + RSI &lt;&lt; #1], RCX	# char/short
04fe    movzbl  RCX, [R11 + #21 + RSI]	# ubyte
0504    cmpl    RCX, #127
0507    jg     B137  P=0.000000 C=32840.000000

050d    B68: #	out( B139 B69 ) &lt;- in( B67 )  Freq: 529.437
050d    movw    [RDX + #26 + RSI &lt;&lt; #1], RCX	# char/short
0512    movzbl  RCX, [R11 + #22 + RSI]	# ubyte
0518    cmpl    RCX, #127
051b    jg     B139  P=0.000000 C=32840.000000

0521    B69: #	out( B135 B70 ) &lt;- in( B68 )  Freq: 529.437
0521    movw    [RDX + #28 + RSI &lt;&lt; #1], RCX	# char/short
0526    movzbl  RCX, [R11 + #23 + RSI]	# ubyte
052c    cmpl    RCX, #127
052f    jg     B135  P=0.000000 C=32840.000000

0535    B70: #	out( B62 B71 ) &lt;- in( B69 )  Freq: 529.436
0535    movw    [RDX + #30 + RSI &lt;&lt; #1], RCX	# char/short
053a    addl    R8, #8	# int
053e    cmpl    R8, RAX
0541    jl     B62	# loop end  P=0.969332 C=32840.000000

0547    B71: #	out( B61 B72 ) &lt;- in( B70 )  Freq: 16.2367
0547    # TLS is in R15
0547    movq    R9, [R15 + #296 (32-bit)]	# ptr
054e    testl   rax, [R9]	# Safepoint: poll for GC        # java.io.DataInputStream::readUTF @ bci:131  L[0]=_ L[1]=R10 L[2]=R11 L[3]=RDX L[4]=_ L[5]=_ L[6]=_ L[7]=R8 L[8]=R8
        # OopMap {r11=Oop rdx=Oop [8]=NarrowOop [48]=NarrowOop off=1358/0x54e}
0551    cmpl    R8, RDI
0554    jl     B61  P=0.969332 C=32840.000000

055a    B72: #	out( B76 B73 ) &lt;- in( B59 B71 )  Freq: 0.497948
055a    cmpl    R8, R10
055d    jge,s   B76  P=0.500000 C=-1.000000

055f    B73: #	out( B74 ) &lt;- in( B72 )  Freq: 0.248974
055f    # castII of R8
        nop 	# 1 bytes pad for loops and calls

0560    B74: #	out( B209 B75 ) &lt;- in( B73 B75 ) Loop( B74-B75 inner post of N2145) Freq: 0.497948
0560    movslq  R9, R8	# i2l
0563    movzbl  RCX, [R11 + #16 + R9]	# ubyte
0569    cmpl    RCX, #127
056c    jg     B209  P=0.000000 C=32840.000000

0572    B75: #	out( B74 B76 ) &lt;- in( B74 )  Freq: 0.497948
0572    movw    [RDX + #16 + R9 &lt;&lt; #1], RCX	# char/short
0578    incl    R8	# int
057b    cmpl    R8, R10
057e    jl,s   B74	# loop end  P=0.500000 C=32840.000000

0580    B76: #	out( B78 ) &lt;- in( B75 B72 )  Freq: 0.497948
0580    movl    R11, R8	# spill
0583    jmp,s   B78

0585    B77: #	out( B78 ) &lt;- in( B23 )  Freq: 0.499994
0585    movq    R14, 0x0000000117891000	# ptr
058f    xorl    R11, R11	# int

0592    B78: #	out( B204 B79 ) &lt;- in( B77 B76 )  Freq: 0.997942
0592    cmpl    R11, R10
0595    jl     B204  P=0.000000 C=1039.000000

059b    B79: #	out( B141 B80 ) &lt;- in( B78 )  Freq: 0.997942
059b    # TLS is in R15
059b    movq    RAX, [R15 + #320 (32-bit)]	# ptr
05a2    movq    R10, RAX	# spill
05a5    addq    R10, #24	# ptr
05a9    # TLS is in R15
05a9    cmpq    R10, [R15 + #336 (32-bit)]	# raw ptr
05b0    jnb,u   B141  P=0.000100 C=-1.000000

05b6    B80: #	out( B81 ) &lt;- in( B79 )  Freq: 0.997842
05b6    # TLS is in R15
05b6    movq    [R15 + #320 (32-bit)], R10	# ptr
05bd    PREFETCHW [R10 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
05c5    movl    R10, narrowklass: precise klass java/lang/String: 0x000000010bf8aca0:Constant:exact *	# compressed klass ptr
05cb    decode_klass_not_null R10,R10
05db    movq    R10, [R10 + #184 (32-bit)]	# long
05e2    movq    [RAX], R10	# long
05e5    movl    [RAX + #8 (8-bit)], narrowklass: precise klass java/lang/String: 0x000000010bf8aca0:Constant:exact *	# compressed klass ptr
05ec    movl    [RAX + #12 (8-bit)], #0	# int
05f3    movq    [RAX + #16 (8-bit)], #0	# long

05fb    B81: #	out( B232 B82 ) &lt;- in( B142 B80 )  Freq: 0.997942
05fb    
05fb    # checkcastPP of RAX
05fb    movl    R10, [rsp + #8]	# spill
0600    movl    R8, [R12 + R10 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
0605    NullCheck R10

0605    B82: #	out( B249 B83 ) &lt;- in( B81 )  Freq: 0.997941
0605    movl    [rsp + #24], R8	# spill
060a    movq    [rsp + #16], RAX	# spill
060f    movl    [rsp + #12], R11	# spill
0614    movq    [rsp + #0], R14	# spill
0618    xorl    RSI, RSI	# int
061a    movl    RDX, R11	# spill
061d    movl    RCX, R8	# spill
0620    movq    RBP, RAX	# spill
        nop 	# 1 bytes pad for loops and calls
0624    call,static  java.lang.String::checkBoundsOffCount
        # java.lang.String::rangeCheck @ bci:4  L[0]=_ L[1]=_ L[2]=_
        # java.lang.String::&lt;init&gt; @ bci:7  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=RBP STK[1]=rsp + #8 STK[2]=#0 STK[3]=rsp + #12
        # java.io.DataInputStream::readUTF @ bci:497  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=RBP
        # OopMap {rbp=Oop [8]=NarrowOop [16]=Oop off=1580/0x62c}

062c    B83: #	out( B205 B84 ) &lt;- in( B82 )  Freq: 0.997921
        # Block is sole successor of call
062c    movl    R10, [rsp + #12]	# spill
0631    testl   R10, R10
0634    je     B205  P=0.000000 C=1211.000000

063a    B84: #	out( B143 B85 ) &lt;- in( B83 )  Freq: 0.99792
063a    # TLS is in R15
063a    movq    RBX, [R15 + #320 (32-bit)]	# ptr
0641    movl    R8, [rsp + #8]	# spill
0646    decode_heap_oop_not_null RBP,R8
064a    movslq  R11, R10	# i2l
064d    addq    R11, #23	# long
0651    andq    R11, #-8	# long
0655    movq    R9, RBX	# spill
0658    addq    R9, R11	# ptr
065b    # TLS is in R15
065b    cmpq    R9, [R15 + #336 (32-bit)]	# raw ptr
0662    jnb,u   B143  P=0.000100 C=-1.000000

0668    B85: #	out( B86 ) &lt;- in( B84 )  Freq: 0.99782
0668    # TLS is in R15
0668    movq    [R15 + #320 (32-bit)], R9	# ptr
066f    PREFETCHW [R9 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0677    movq    [RBX], #1	# long
067e    PREFETCHW [R9 + #256 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0686    movl    [RBX + #8 (8-bit)], narrowklass: precise klass [B: 0x000000012728fa90:Constant:exact *	# compressed klass ptr
068d    movl    [RBX + #12 (8-bit)], R10	# int
0691    PREFETCHW [R9 + #320 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0699    PREFETCHW [R9 + #384 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified

06a1    B86: #	out( B181 B87 ) &lt;- in( B144 B85 )  Freq: 0.99792
06a1    
06a1    # checkcastPP of RBX
06a1    movl    R9, [rsp + #24]	# spill
06a6    cmpl    R9, R10	# unsigned
06a9    jb,u   B181  P=0.000001 C=-1.000000

06af    B87: #	out( B182 B88 ) &lt;- in( B86 )  Freq: 0.997919
06af    movq    RDI, RBX	# spill
06b2    addq    RDI, #16	# ptr
06b6    leaq    RSI, [R12 + R8 &lt;&lt; 3 + #16] (compressed oop addressing)	# ptr compressedoopoff32
06bb    movl    RDX, R10	# spill
06be    String Compress RSI,RDI -&gt; RAX    // KILL RAX, RCX, RDX
077a    MEMBAR-storestore (empty encoding)
077a    cmpl    RAX, R10
077d    jne     B182  P=0.000001 C=-1.000000

0783    B88: #	out( B110 B89 ) &lt;- in( B87 )  Freq: 0.997918
0783    # TLS is in R15
0783    cmpb    [R15 + #48 (8-bit)], #0
0788    jne     B110  P=0.001000 C=-1.000000

078e    B89: #	out( B90 ) &lt;- in( B88 )  Freq: 0.99692
078e    movq    RBP, [rsp + #16]	# spill

0793    B90: #	out( B92 B91 ) &lt;- in( B198 B112 B110 B89 )  Freq: 0.997918
0793    movq    R10, RBP	# ptr -&gt; long
0796    movq    R11, RBX	# ptr -&gt; long
0799    xorq    R11, R10	# long
079c    encode_heap_oop_not_null R9,RBX
07e5    movl    [RBP + #12 (8-bit)], R9	# compressed ptr ! Field: java/lang/String.value (constant)
07e9    shrq    R11, #20
07ed    testq   R11, R11
07f0    je,s   B92  P=0.001000 C=-1.000000

07f2    B91: #	out( B113 B92 ) &lt;- in( B90 )  Freq: 0.99692
07f2    shrq    R10, #9
07f6    movq    R8, [rsp + #0]	# spill
07fa    addq    R8, R10	# ptr
07fd    cmpb    [R8], #8
0801    jne     B113  P=0.001000 C=-1.000000

0807    B92: #	out( N1 ) &lt;- in( B115 B116 B113 B91 B90 )  Freq: 0.997918
0807    movb    [RBP + #20 (8-bit)], #0	# byte ! Field: java/lang/String.coder (constant)
080b    MEMBAR-release ! (empty encoding)
080b    MEMBAR-release ! (empty encoding)
080b    movq    RAX, RBP	# spill
080e    vzeroupper
	addq    rsp, 128	# Destroy frame
	popq    rbp
	movq    rscratch1, poll_offset[r15_thread] #polling_page_address
	testl   rax, [rscratch1]	# Safepoint: poll for GC

0823    ret

0824    B93: #	out( B211 B94 ) &lt;- in( B33 )  Freq: 0.099997
0824    MEMBAR-release (a FastUnlock follows so empty encoding)
0824    movl    R8, #7	# long (unsigned 32-bit)
082a    andq    R8, [RDX]	# long
082d    cmpq    R8, #5
0831    jne     B211  P=0.000001 C=-1.000000

0837    B94: #	out( B51 ) &lt;- in( B212 B211 B93 )  Freq: 0.099997
0837    movl    R8, RCX	# spill
083a    jmp     B51

083f    B95: #	out( B217 B96 ) &lt;- in( B37 )  Freq: 0.0811497
083f    MEMBAR-release (a FastUnlock follows so empty encoding)
083f    movl    R10, #7	# long (unsigned 32-bit)
0845    movq    R11, [rsp + #72]	# spill
084a    andq    R10, [R11]	# long
084d    cmpq    R10, #5
0851    jne     B217  P=0.000001 C=-1.000000

0857    B96: #	out( B210 B97 ) &lt;- in( B218 B217 B95 )  Freq: 0.0811497
0857    testl   RBP, RBP
0859    jl     B210  P=0.000000 C=1155.000000

085f    B97: #	out( B51 ) &lt;- in( B96 )  Freq: 0.0811496
085f    movq    R13, [rsp + #0]	# spill
0863    movl    R10, [rsp + #24]	# spill
0868    movq    R14, [rsp + #16]	# spill
086d    movl    RSI, [rsp + #12]	# spill
0871    movl    R9, [rsp + #28]	# spill
0876    movq    R11, [rsp + #56]	# spill
087b    jmp     B51

0880    B98: #	out( B44 ) &lt;- in( B38 )  Freq: 0.0730347
0880    movl    [rsp + #68], R8	# spill
0885    jmp     B44

088a    B99: #	out( B48 B100 ) &lt;- in( B45 )  Freq: 0.0401676
088a    testl   RBP, RBP
088c    jne     B48  P=0.900000 C=-1.000000

0892    B100: #	out( B47 ) &lt;- in( B99 )  Freq: 0.00401676
0892    jmp     B47

0897    B101: #	out( B242 B102 ) &lt;- in( B7 )  Freq: 0.0022416
0897    movq    [rsp + #0], R11	# spill
089b    movq    RBP, [rsp + #32]	# spill
08a0    movq    RSI, R11	# spill
        nop 	# 1 bytes pad for loops and calls
08a4    call,static  java.io.BufferedInputStream::fill
        # java.io.BufferedInputStream::read @ bci:12  L[0]=rsp + #0 MON-BOX0=rsp+112 MON-OBJ[0]=rsp + #0
        # java.io.DataInputStream::readUnsignedShort @ bci:4  L[0]=RBP L[1]=_ L[2]=_
        # java.io.DataInputStream::readUTF @ bci:1  L[0]=RBP L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # OopMap {rbp=Oop [0]=Oop [32]=Oop off=2220/0x8ac}

08ac    B102: #	out( B8 B103 ) &lt;- in( B101 )  Freq: 0.00224156
        # Block is sole successor of call
08ac    movq    R11, [rsp + #0]	# spill
08b0    movl    R8, [R11 + #20 (8-bit)]	# int ! Field: java/io/BufferedInputStream.pos
08b4    movl    R10, [R11 + #16 (8-bit)]	# int ! Field: java/io/BufferedInputStream.count
08b8    cmpl    R8, R10
08bb    jl     B8  P=0.500000 C=-1.000000

08c1    B103: #	out( B219 B104 ) &lt;- in( B102 )  Freq: 0.00112078
08c1    MEMBAR-release (a FastUnlock follows so empty encoding)
08c1    movl    R10, #7	# long (unsigned 32-bit)
08c7    andq    R10, [R11]	# long
08ca    cmpq    R10, #5
08ce    jne     B219  P=0.000001 C=-1.000000

08d4    B104: #	out( B11 ) &lt;- in( B220 B219 B103 )  Freq: 0.00112078
08d4    movl    R10, #-1	# int
08da    jmp     B11

08df    B105: #	out( B240 B106 ) &lt;- in( B15 )  Freq: 0.00224159
08df    movq    [rsp + #16], R8	# spill
08e4    movl    [rsp + #8], R10	# spill
08e9    movq    RBP, [rsp + #32]	# spill
08ee    movq    RSI, R8	# spill
        nop 	# 3 bytes pad for loops and calls
08f4    call,static  java.io.BufferedInputStream::fill
        # java.io.BufferedInputStream::read @ bci:12  L[0]=rsp + #16 MON-BOX0=rsp+112 MON-OBJ[0]=rsp + #16
        # java.io.DataInputStream::readUnsignedShort @ bci:12  L[0]=_ L[1]=rsp + #8 L[2]=_
        # java.io.DataInputStream::readUTF @ bci:1  L[0]=RBP L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # OopMap {rbp=Oop [16]=Oop [32]=Oop off=2300/0x8fc}

08fc    B106: #	out( B108 B107 ) &lt;- in( B105 )  Freq: 0.00224155
        # Block is sole successor of call
08fc    movq    R8, [rsp + #16]	# spill
0901    movl    R11, [R8 + #20 (8-bit)]	# int ! Field: java/io/BufferedInputStream.pos
0905    movl    R10, [R8 + #16 (8-bit)]	# int ! Field: java/io/BufferedInputStream.count
0909    cmpl    R11, R10
090c    jge,s   B108  P=0.500000 C=-1.000000

090e    B107: #	out( B16 ) &lt;- in( B106 )  Freq: 0.00112077
090e    movl    R10, [rsp + #8]	# spill
0913    jmp     B16

0918    B108: #	out( B221 B109 ) &lt;- in( B106 )  Freq: 0.00112077
0918    MEMBAR-release (a FastUnlock follows so empty encoding)
0918    movl    R10, #7	# long (unsigned 32-bit)
091e    andq    R10, [R8]	# long
0921    cmpq    R10, #5
0925    jne     B221  P=0.000001 C=-1.000000

092b    B109: #	out( B19 ) &lt;- in( B222 B221 B108 )  Freq: 0.00112077
092b    movl    R11, #-1	# int
0931    movl    R10, [rsp + #8]	# spill
0936    jmp     B19

093b    B110: #	out( B90 B111 ) &lt;- in( B88 )  Freq: 0.000997905
093b    movq    RBP, [rsp + #16]	# spill
0940    movl    R11, [RBP + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value (constant)
0944    testl   R11, R11	# compressed ptr
0947    je     B90  P=0.500000 C=-1.000000

094d    B111: #	out( B198 B112 ) &lt;- in( B110 )  Freq: 0.000498953
094d    # TLS is in R15
094d    movq    R10, [R15 + #56 (8-bit)]	# long
0951    decode_heap_oop RDI,R11
097d    testq   R10, R10
0980    je     B198  P=0.001000 C=-1.000000

0986    B112: #	out( B90 ) &lt;- in( B111 )  Freq: 0.000498454
0986    # TLS is in R15
0986    movq    R11, [R15 + #72 (8-bit)]	# ptr
098a    movq    [R11 + #-8 + R10], RDI	# ptr
098f    addq    R10, #-8	# long
0993    # TLS is in R15
0993    movq    [R15 + #56 (8-bit)], R10	# long
0997    jmp     B90

099c    B113: #	out( B92 B114 ) &lt;- in( B91 )  Freq: 0.00099692
099c    # TLS is in R15
099c    movq    R10, [R15 + #120 (8-bit)]	# ptr
09a0    # TLS is in R15
09a0    movq    R11, [R15 + #104 (8-bit)]	# long
09a4    lock addl [rsp + #0], 0	! membar_volatile
09aa    cmpb    [R8], #0
09ae    je     B92  P=0.500000 C=-1.000000

09b4    B114: #	out( B116 B115 ) &lt;- in( B113 )  Freq: 0.00049846
09b4    movb    [R8], #0	# CMS card-mark byte 0
09b8    testq   R11, R11
09bb    jne,s   B116  P=0.500000 C=-1.000000

09bd    B115: #	out( B92 ) &lt;- in( B114 )  Freq: 0.00024923
09bd    movq    RDI, R8	# spill
09c0    # TLS is in R15
09c0    movq    RSI, R15	# spill
09c3    call_leaf,runtime  write_ref_field_post_entry
        No JVM State Info
        # 
09d3    jmp     B92

09d8    B116: #	out( B92 ) &lt;- in( B114 )  Freq: 0.00024923
09d8    movq    [R10 + #-8 + R11], R8	# ptr
09dd    addq    R11, #-8	# long
09e1    # TLS is in R15
09e1    movq    [R15 + #104 (8-bit)], R11	# long
09e5    jmp     B92

09ea    B117: #	out( B223 B118 ) &lt;- in( B21 )  Freq: 0.000962426
09ea    movl    R8, R10	# spill
09ed    sall    R8, #1
09f0    movslq  RBP, R8	# i2l
09f3    movslq  RBX, R8	# i2l
09f6    cmpl    R8, #1048576	# unsigned
09fd    jnbe,u   B223  P=0.000001 C=-1.000000

0a03    B118: #	out( B119 ) &lt;- in( B117 )  Freq: 0.000962425
0a03    movq    RCX, RBX	# spill

0a06    B119: #	out( B215 B120 ) &lt;- in( B118 B223 )  Freq: 0.000962426
0a06    cmpl    R8, #1048576	# unsigned
0a0d    jnbe,u   B215  P=0.000001 C=-1.000000

0a13    B120: #	out( B215 B121 ) &lt;- in( B119 )  Freq: 0.000962425
0a13    # TLS is in R15
0a13    movq    RDX, [R15 + #320 (32-bit)]	# ptr
0a1a    addq    RCX, #23	# long
0a1e    movq    R11, RCX	# spill
0a21    andq    R11, #-8	# long
0a25    movq    R9, RDX	# spill
0a28    addq    R9, R11	# ptr
0a2b    # TLS is in R15
0a2b    cmpq    R9, [R15 + #336 (32-bit)]	# raw ptr
0a32    jnb,u   B215  P=0.000100 C=-1.000000

0a38    B121: #	out( B122 ) &lt;- in( B120 )  Freq: 0.000962329
0a38    # TLS is in R15
0a38    movq    [R15 + #320 (32-bit)], R9	# ptr
0a3f    movq    RDI, RDX	# spill
0a42    addq    RDI, #16	# ptr
0a46    movq    [RDX], #1	# long
0a4d    PREFETCHW [R9 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0a55    movl    [RDX + #8 (8-bit)], narrowklass: precise klass [B: 0x000000012728fa90:Constant:exact *	# compressed klass ptr
0a5c    movl    [RDX + #12 (8-bit)], R8	# int
0a60    PREFETCHW [R9 + #256 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0a68    PREFETCHW [R9 + #320 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0a70    PREFETCHW [R9 + #384 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0a78    shrq    RCX, #3
0a7c    addq    RCX, #-2	# long
0a80    xorq    rax, rax	# ClearArray:
	cmp     InitArrayShortSize,rcx
	jg      LARGE
	dec     rcx
	js      DONE	# Zero length
	mov     rax,(rdi,rcx,8)	# LOOP
	dec     rcx
	jge     LOOP
	jmp     DONE
	# LARGE:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
	# DONE

0aa0    B122: #	out( B186 B123 ) &lt;- in( B216 B121 )  Freq: 0.000962426
0aa0    
0aa0    MEMBAR-storestore (empty encoding)
0aa0    # checkcastPP of RDX
0aa0    # TLS is in R15
0aa0    cmpb    [R15 + #48 (8-bit)], #0
0aa5    jne     B186  P=0.001000 C=-1.000000

0aab    B123: #	out( B125 B124 ) &lt;- in( B226 B188 B186 B122 )  Freq: 0.000962426
0aab    movq    R11, [rsp + #32]	# spill
0ab0    movq    R11, R11	# ptr -&gt; long
0ab0    encode_heap_oop_not_null R9,RDX
0af9    movq    RCX, [rsp + #32]	# spill
0afe    movl    [RCX + #16 (8-bit)], R9	# compressed ptr ! Field: java/io/DataInputStream.bytearr
0b02    movq    R9, RDX	# ptr -&gt; long
0b05    xorq    R9, R11	# long
0b08    shrq    R9, #20
0b0c    testq   R9, R9
0b0f    je,s   B125  P=0.001000 C=-1.000000

0b11    B124: #	out( B189 B125 ) &lt;- in( B123 )  Freq: 0.000961463
0b11    shrq    R11, #9
0b15    movq    RDI, 0x0000000117891000	# ptr
0b1f    addq    RDI, R11	# ptr
0b22    cmpb    [RDI], #8
0b25    jne     B189  P=0.001000 C=-1.000000

0b2b    B125: #	out( B224 B126 ) &lt;- in( B191 B192 B189 B124 B123 )  Freq: 0.000962426
0b2b    cmpl    R8, #524288	# unsigned
0b32    jnbe,u   B224  P=0.000001 C=-1.000000

0b38    B126: #	out( B213 B127 ) &lt;- in( B125 B224 )  Freq: 0.000962426
0b38    cmpl    R8, #524288	# unsigned
0b3f    jnbe,u   B213  P=0.000001 C=-1.000000

0b45    B127: #	out( B213 B128 ) &lt;- in( B126 )  Freq: 0.000962425
0b45    # TLS is in R15
0b45    movq    RDX, [R15 + #320 (32-bit)]	# ptr
0b4c    salq    RBX, #1
0b4f    addq    RBX, #23	# long
0b53    movq    R11, RBX	# spill
0b56    andq    R11, #-8	# long
0b5a    movq    R9, RDX	# spill
0b5d    addq    R9, R11	# ptr
0b60    # TLS is in R15
0b60    cmpq    R9, [R15 + #336 (32-bit)]	# raw ptr
0b67    jnb,u   B213  P=0.000100 C=-1.000000

0b6d    B128: #	out( B129 ) &lt;- in( B127 )  Freq: 0.000962329
0b6d    # TLS is in R15
0b6d    movq    [R15 + #320 (32-bit)], R9	# ptr
0b74    PREFETCHW [R9 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0b7c    movq    [RDX], #1	# long
0b83    PREFETCHW [R9 + #256 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0b8b    movl    [RDX + #8 (8-bit)], narrowklass: precise klass [C: 0x000000012728f970:Constant:exact *	# compressed klass ptr
0b92    movl    [RDX + #12 (8-bit)], R8	# int
0b96    PREFETCHW [R9 + #320 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0b9e    movq    RDI, RDX	# spill
0ba1    addq    RDI, #16	# ptr
0ba5    PREFETCHW [R9 + #384 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0bad    shrq    RBX, #3
0bb1    addq    RBX, #-2	# long
0bb5    movq    RCX, RBX	# spill
0bb8    xorq    rax, rax	# ClearArray:
	cmp     InitArrayShortSize,rcx
	jg      LARGE
	dec     rcx
	js      DONE	# Zero length
	mov     rax,(rdi,rcx,8)	# LOOP
	dec     rcx
	jge     LOOP
	jmp     DONE
	# LARGE:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
	# DONE

0bd8    B129: #	out( B183 B130 ) &lt;- in( B214 B128 )  Freq: 0.000962426
0bd8    
0bd8    MEMBAR-storestore (empty encoding)
0bd8    # checkcastPP of RDX
0bd8    # TLS is in R15
0bd8    cmpb    [R15 + #48 (8-bit)], #0
0bdd    jne     B183  P=0.001000 C=-1.000000

0be3    B130: #	out( B132 B131 ) &lt;- in( B225 B185 B183 B129 )  Freq: 0.000962426
0be3    encode_heap_oop_not_null R11,RDX
0c2c    movq    R8, [rsp + #32]	# spill
0c31    movl    [R8 + #20 (8-bit)], R11	# compressed ptr ! Field: java/io/DataInputStream.chararr
0c35    movq    R11, R8	# ptr -&gt; long
0c38    movq    R8, RDX	# ptr -&gt; long
0c3b    xorq    R8, R11	# long
0c3e    shrq    R8, #20
0c42    testq   R8, R8
0c45    je,s   B132  P=0.001000 C=-1.000000

0c47    B131: #	out( B193 B132 ) &lt;- in( B130 )  Freq: 0.000961463
0c47    shrq    R11, #9
0c4b    movq    RDI, 0x0000000117891000	# ptr
0c55    addq    RDI, R11	# ptr
0c58    cmpb    [RDI], #8
0c5b    jne     B193  P=0.001000 C=-1.000000

0c61    B132: #	out( B22 ) &lt;- in( B195 B196 B193 B131 B130 )  Freq: 0.000962426
0c61    movq    R11, [rsp + #32]	# spill
0c66    movl    R11, [R11 + #16 (8-bit)]	# compressed ptr ! Field: java/io/DataInputStream.bytearr
0c6a    movl    [rsp + #48], R11	# spill
0c6f    jmp     B22

0c74    B133: #	out( B140 ) &lt;- in( B62 )  Freq: 0.000252456
0c74    movl    R9, R8	# spill
0c77    jmp,s   B140

0c79    B134: #	out( B135 ) &lt;- in( B65 )  Freq: 0.000252456
0c79    movl    R9, R8	# spill

0c7c    B135: #	out( B137 ) &lt;- in( B134 B69 )  Freq: 0.000504911
0c7c    addl    R9, #2	# int
0c80    jmp,s   B137

0c82    B136: #	out( B137 ) &lt;- in( B63 )  Freq: 0.000252456
0c82    movl    R9, R8	# spill

0c85    B137: #	out( B140 ) &lt;- in( B136 B67 B135 )  Freq: 0.00100982
0c85    incl    R9	# int
0c88    jmp,s   B140

0c8a    B138: #	out( B139 ) &lt;- in( B64 )  Freq: 0.000252456
0c8a    movl    R9, R8	# spill

0c8d    B139: #	out( B140 ) &lt;- in( B138 B68 )  Freq: 0.000504911
0c8d    addl    R9, #2	# int

0c91    B140: #	out( N1 ) &lt;- in( B209 B208 B133 B66 B139 B137 )  Freq: 0.00202012
0c91    movl    RSI, #-187	# int
0c96    movl    RBP, R10	# spill
0c99    movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #8]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
0cab    movl    [rsp + #16], R9	# spill
0cb0    movl    [rsp + #20], RCX	# spill
0cb4    call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.io.DataInputStream::readUTF @ bci:112  L[0]=_ L[1]=RBP L[2]=rsp + #48 L[3]=rsp + #4 L[4]=rsp + #20 L[5]=_ L[6]=_ L[7]=rsp + #16 L[8]=rsp + #16 STK[0]=rsp + #20 STK[1]=#127
        # OopMap {[4]=NarrowOop [48]=NarrowOop off=3260/0xcbc}
0cbc    ud2	# ShouldNotReachHere

0cd0    B141: #	out( B239 B142 ) &lt;- in( B79 )  Freq: 9.98107e-05
0cd0    movl    [rsp + #4], R11	# spill
0cd5    movq    RBP, R14	# spill
0cd8    movq    RSI, precise klass java/lang/String: 0x000000010bf8aca0:Constant:exact *	# ptr
        nop 	# 2 bytes pad for loops and calls
0ce4    call,static  wrapper for: _new_instance_Java
        # java.io.DataInputStream::readUTF @ bci:489  L[0]=_ L[1]=_ L[2]=_ L[3]=rsp + #8 L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=rsp + #4
        # OopMap {[8]=NarrowOop off=3308/0xcec}

0cec    B142: #	out( B81 ) &lt;- in( B141 )  Freq: 9.98087e-05
        # Block is sole successor of call
0cec    movq    R14, RBP	# spill
0cef    movl    R11, [rsp + #4]	# spill
0cf4    jmp     B81

0cf9    B143: #	out( B238 B144 ) &lt;- in( B84 )  Freq: 9.98086e-05
0cf9    movq    RSI, precise klass [B: 0x000000012728fa90:Constant:exact *	# ptr
0d03    movl    RDX, R10	# spill
        nop 	# 2 bytes pad for loops and calls
0d08    call,static  wrapper for: _new_array_nozero_Java
        # java.lang.StringUTF16::compress @ bci:1  L[0]=RBP L[1]=#0 L[2]=rsp + #12 L[3]=_
        # java.lang.String::&lt;init&gt; @ bci:36  L[0]=rsp + #16 L[1]=RBP L[2]=#0 L[3]=rsp + #12 L[4]=_ L[5]=_
        # java.lang.String::&lt;init&gt; @ bci:10  L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # java.io.DataInputStream::readUTF @ bci:497  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=rsp + #16
        # OopMap {rbp=Oop [8]=NarrowOop [16]=Oop off=3344/0xd10}

0d10    B144: #	out( B86 ) &lt;- in( B143 )  Freq: 9.98066e-05
        # Block is sole successor of call
0d10    movl    R8, [rsp + #8]	# spill
0d15    movl    R10, [rsp + #12]	# spill
0d1a    movq    RBX, RAX	# spill
0d1d    jmp     B86

0d22    B145: #	out( N1 ) &lt;- in( B9 )  Freq: 1.01214e-06
0d22    movl    RSI, #-28	# int
0d27    pushq   [rsp + #32]	# 64-bit mem-mem spill
	popq    [rsp + #0]
0d30    movq    [rsp + #16], R11	# spill
0d35    movl    [rsp + #24], RCX	# spill
        nop 	# 3 bytes pad for loops and calls
0d3c    call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos; debug_id=&apos;0&apos;)
        # java.io.BufferedInputStream::read @ bci:43  L[0]=_ STK[0]=rsp + #24 STK[1]=RBP MON-BOX0=rsp+112 MON-OBJ[0]=rsp + #16
        # java.io.DataInputStream::readUnsignedShort @ bci:4  L[0]=rsp + #0 L[1]=_ L[2]=_
        # java.io.DataInputStream::readUTF @ bci:1  L[0]=rsp + #0 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # OopMap {[0]=Oop [16]=Oop [24]=NarrowOop off=3396/0xd44}
0d44    ud2	# ShouldNotReachHere

0d58    B146: #	out( N1 ) &lt;- in( B17 )  Freq: 1.01213e-06
0d58    movl    RSI, #-28	# int
0d5d    movl    [rsp + #8], R10	# spill
0d62    movq    [rsp + #16], R8	# spill
0d67    movl    [rsp + #12], R9	# spill
0d6c    call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos; debug_id=&apos;0&apos;)
        # java.io.BufferedInputStream::read @ bci:43  L[0]=_ STK[0]=rsp + #12 STK[1]=RBP MON-BOX0=rsp+112 MON-OBJ[0]=rsp + #16
        # java.io.DataInputStream::readUnsignedShort @ bci:12  L[0]=_ L[1]=rsp + #8 L[2]=_
        # java.io.DataInputStream::readUTF @ bci:1  L[0]=rsp + #32 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # OopMap {[12]=NarrowOop [16]=Oop [32]=Oop off=3444/0xd74}
0d74    ud2	# ShouldNotReachHere

0d88    B147: #	out( N1 ) &lt;- in( B2 )  Freq: 9.99999e-07
0d88    movq    [rsp + #0], RSI	# spill
0d8c    movl    RSI, #-34	# int
        nop 	# 3 bytes pad for loops and calls
0d94    call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.io.DataInputStream::readUTF @ bci:1  L[0]=rsp + #0 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=rsp + #0
        # OopMap {[0]=Oop off=3484/0xd9c}
0d9c    ud2	# ShouldNotReachHere

0db0    B148: #	out( N1 ) &lt;- in( B4 )  Freq: 9.99997e-07
0db0    movl    RSI, #-34	# int
0db5    movq    RBP, [rsp + #32]	# spill
0dba    movl    [rsp + #8], R11	# spill
        nop 	# 1 bytes pad for loops and calls
0dc0    call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.io.DataInputStream::readUnsignedShort @ bci:4  L[0]=RBP L[1]=_ L[2]=_ STK[0]=rsp + #8
        # java.io.DataInputStream::readUTF @ bci:1  L[0]=RBP L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # OopMap {rbp=Oop [8]=NarrowOop off=3528/0xdc8}
0dc8    ud2	# ShouldNotReachHere

0ddc    B149: #	out( B150 ) &lt;- in( B152 )  Freq: 9.99995e-13
0ddc    cmpxchgq [R11], R10	# If rax == [R11] then store R10 into [R11]

0de1    B150: #	out( B7 B151 ) &lt;- in( B5 B149 )  Freq: 9.99997e-07
0de1    leaq    RBX, [rsp + #112]	# box lock
0de6    fastlock R11,RBX	! kills RBX,RAX,R10
0e28    je     B7  P=0.999999 C=-1.000000

0e2e    B151: #	out( B7 ) &lt;- in( B155 B150 )  Freq: 1.99999e-12
0e2e    movq    [rsp + #0], R11	# spill
0e32    movq    RBP, RSI	# spill
0e35    movq    RSI, R11	# spill
0e38    leaq    RDX, [rsp + #112]	# box lock
        nop 	# 3 bytes pad for loops and calls
0e40    call,static  wrapper for: _complete_monitor_locking_Java
        # java.io.BufferedInputStream::read @ bci:-1  L[0]=rsp + #0 MON-BOX0=rsp+112 MON-OBJ[0]=rsp + #0
        # java.io.DataInputStream::readUnsignedShort @ bci:4  L[0]=RBP L[1]=_ L[2]=_
        # java.io.DataInputStream::readUTF @ bci:1  L[0]=RBP L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # OopMap {rbp=Oop [0]=Oop [32]=Oop off=3656/0xe48}
0e48    movq    R11, [rsp + #0]	# spill
0e4c    jmp     B7

0e51    B152: #	out( B149 B153 ) &lt;- in( B6 )  Freq: 9.99995e-07
0e51    testq   R9, #7	# long
0e58    jne     B149  P=0.000001 C=-1.000000

0e5e    B153: #	out( B155 B154 ) &lt;- in( B152 )  Freq: 9.99994e-07
0e5e    testq   R9, #768	# long
0e65    jne,s   B155  P=0.000001 C=-1.000000

0e67    B154: #	out( B155 ) &lt;- in( B153 )  Freq: 9.99993e-07
0e67    andq    RAX, #895	# long
0e6e    movq    R8, RAX	# spill
0e71    # TLS is in R15
0e71    orq     R8, R15	# long

0e74    B155: #	out( B151 B156 ) &lt;- in( B154 B153 )  Freq: 9.99994e-07
0e74    cmpxchgq [R11], R8	# If rax == [R11] then store R8 into [R11]
0e79    jne,us  B151  P=0.000001 C=-1.000000

0e7b    B156: #	out( B7 ) &lt;- in( B155 )  Freq: 9.99993e-07
0e7b    jmp     B7

0e80    B157: #	out( N1 ) &lt;- in( B12 )  Freq: 9.99993e-07
0e80    movl    RSI, #-34	# int
0e85    movq    RBP, [rsp + #32]	# spill
0e8a    movl    [rsp + #0], R10	# spill
0e8e    movl    [rsp + #4], R8	# spill
        nop 	# 1 bytes pad for loops and calls
0e94    call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.io.DataInputStream::readUnsignedShort @ bci:12  L[0]=_ L[1]=rsp + #0 L[2]=_ STK[0]=rsp + #4
        # java.io.DataInputStream::readUTF @ bci:1  L[0]=RBP L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # OopMap {rbp=Oop [4]=NarrowOop off=3740/0xe9c}
0e9c    ud2	# ShouldNotReachHere

0eb0    B158: #	out( B159 ) &lt;- in( B161 )  Freq: 9.99991e-13
0eb0    cmpxchgq [R8], R11	# If rax == [R8] then store R11 into [R8]

0eb5    B159: #	out( B15 B160 ) &lt;- in( B13 B158 )  Freq: 9.99993e-07
0eb5    leaq    RBX, [rsp + #112]	# box lock
0eba    fastlock R8,RBX	! kills RBX,RAX,R11
0efc    je     B15  P=0.999999 C=-1.000000

0f02    B160: #	out( B15 ) &lt;- in( B164 B159 )  Freq: 1.99998e-12
0f02    movq    [rsp + #16], R8	# spill
0f07    movl    [rsp + #8], R10	# spill
0f0c    movq    RBP, [rsp + #32]	# spill
0f11    movq    RSI, R8	# spill
0f14    leaq    RDX, [rsp + #112]	# box lock
        nop 	# 3 bytes pad for loops and calls
0f1c    call,static  wrapper for: _complete_monitor_locking_Java
        # java.io.BufferedInputStream::read @ bci:-1  L[0]=rsp + #16 MON-BOX0=rsp+112 MON-OBJ[0]=rsp + #16
        # java.io.DataInputStream::readUnsignedShort @ bci:12  L[0]=_ L[1]=rsp + #8 L[2]=_
        # java.io.DataInputStream::readUTF @ bci:1  L[0]=RBP L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # OopMap {rbp=Oop [16]=Oop [32]=Oop off=3876/0xf24}
0f24    movl    R10, [rsp + #8]	# spill
0f29    movq    R8, [rsp + #16]	# spill
0f2e    jmp     B15

0f33    B161: #	out( B158 B162 ) &lt;- in( B14 )  Freq: 9.99991e-07
0f33    testq   RCX, #7	# long
0f3a    jne     B158  P=0.000001 C=-1.000000

0f40    B162: #	out( B164 B163 ) &lt;- in( B161 )  Freq: 9.9999e-07
0f40    testq   RCX, #768	# long
0f47    jne,s   B164  P=0.000001 C=-1.000000

0f49    B163: #	out( B164 ) &lt;- in( B162 )  Freq: 9.99989e-07
0f49    andq    RAX, #895	# long
0f50    movq    R9, RAX	# spill
0f53    # TLS is in R15
0f53    orq     R9, R15	# long

0f56    B164: #	out( B160 B165 ) &lt;- in( B163 B162 )  Freq: 9.9999e-07
0f56    cmpxchgq [R8], R9	# If rax == [R8] then store R9 into [R8]
0f5b    jne,us  B160  P=0.000001 C=-1.000000

0f5d    B165: #	out( B15 ) &lt;- in( B164 )  Freq: 9.99989e-07
0f5d    jmp     B15

0f62    B166: #	out( N1 ) &lt;- in( B27 )  Freq: 9.99972e-07
0f62    movl    RSI, #-34	# int
0f67    movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #8]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
0f79    pushq   [rsp + #32]	# 64-bit mem-mem spill
	popq    [rsp + #8]
0f83    movl    [rsp + #20], R10	# spill
0f88    movl    [rsp + #28], R8	# spill
0f8d    movl    [rsp + #36], RCX	# spill
0f91    movl    [rsp + #40], RDI	# spill
        nop 	# 3 bytes pad for loops and calls
0f98    call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.io.DataInputStream::readFully @ bci:34  L[0]=rsp + #8 L[1]=rsp + #48 L[2]=#0 L[3]=rsp + #20 L[4]=rsp + #36 L[5]=_ STK[0]=rsp + #28 STK[1]=rsp + #48 STK[2]=rsp + #36 STK[3]=rsp + #40
        # java.io.DataInputStream::readUTF @ bci:87  L[0]=_ L[1]=rsp + #20 L[2]=rsp + #48 L[3]=rsp + #4 L[4]=_ L[5]=_ L[6]=_ L[7]=#0 L[8]=#0
        # OopMap {[4]=NarrowOop [8]=Oop [28]=NarrowOop [48]=NarrowOop off=4000/0xfa0}
0fa0    ud2	# ShouldNotReachHere

0fb4    B167: #	out( B168 ) &lt;- in( B172 )  Freq: 9.9997e-13
0fb4    cmpxchgq [RDX], R11	# If rax == [RDX] then store R11 into [RDX]
0fb9    movl    R9, [rsp + #16]	# spill
0fbe    movq    R11, [rsp + #24]	# spill

0fc3    B168: #	out( B31 B169 ) &lt;- in( B28 B167 )  Freq: 9.99972e-07
0fc3    leaq    RBX, [rsp + #112]	# box lock
0fc8    fastlock RDX,RBX	! kills RBX,RAX,R8
100a    je     B31  P=0.999999 C=-1.000000

1010    B169: #	out( B170 ) &lt;- in( B168 )  Freq: 9.99972e-13
1010    movq    RBP, R13	# spill
1013    movq    [rsp + #0], R14	# spill
1017    movl    [rsp + #12], RSI	# spill
101b    movl    [rsp + #16], R9	# spill
1020    movq    [rsp + #24], R11	# spill

1025    B170: #	out( B31 ) &lt;- in( B175 B169 )  Freq: 1.99994e-12
1025    movq    [rsp + #64], RDX	# spill
102a    movl    [rsp + #60], RDI	# spill
102e    movl    [rsp + #56], RCX	# spill
1032    movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #8]
	movl    [rsp + #52], rax
	movq    rax, [rsp - #8]
1044    movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #48]
	movl    [rsp + #20], rax
	movq    rax, [rsp - #8]
1056    movl    [rsp + #8], R10	# spill
105b    movq    RSI, RDX	# spill
105e    leaq    RDX, [rsp + #112]	# box lock
        nop 	# 1 bytes pad for loops and calls
1064    call,static  wrapper for: _complete_monitor_locking_Java
        # java.io.BufferedInputStream::read @ bci:-1  L[0]=rsp + #64 L[1]=rsp + #20 L[2]=rsp + #56 L[3]=rsp + #60 L[4]=_ L[5]=_ L[6]=_ MON-BOX0=rsp+112 MON-OBJ[0]=rsp + #64
        # java.io.DataInputStream::readFully @ bci:34  L[0]=rsp + #32 L[1]=rsp + #20 L[2]=#0 L[3]=rsp + #8 L[4]=rsp + #56 L[5]=_
        # java.io.DataInputStream::readUTF @ bci:87  L[0]=_ L[1]=rsp + #8 L[2]=rsp + #20 L[3]=rsp + #52 L[4]=_ L[5]=_ L[6]=_ L[7]=#0 L[8]=#0
        # OopMap {[20]=NarrowOop [24]=Oop [32]=Oop [52]=NarrowOop [64]=Oop off=4204/0x106c}
106c    movq    R13, RBP	# spill
106f    movl    R10, [rsp + #8]	# spill
1074    movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #20]
	movl    [rsp + #48], rax
	movq    rax, [rsp - #8]
1086    movq    R14, [rsp + #0]	# spill
108a    movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #52]
	movl    [rsp + #8], rax
	movq    rax, [rsp - #8]
109c    movl    RSI, [rsp + #12]	# spill
10a0    movl    R9, [rsp + #16]	# spill
10a5    movq    R11, [rsp + #24]	# spill
10aa    movl    RCX, [rsp + #56]	# spill
10ae    movl    RDI, [rsp + #60]	# spill
10b2    movq    RDX, [rsp + #64]	# spill
10b7    jmp     B31

10bc    B171: #	out( N1 ) &lt;- in( B32 )  Freq: 9.99971e-07
10bc    movl    RSI, #92	# int
10c1    movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #8]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
10d3    pushq   [rsp + #32]	# 64-bit mem-mem spill
	popq    [rsp + #8]
10dd    movl    [rsp + #20], R10	# spill
10e2    movl    [rsp + #24], RCX	# spill
10e6    movq    [rsp + #32], RDX	# spill
        nop 	# 1 bytes pad for loops and calls
10ec    call,static  wrapper for: uncommon_trap(reason=&apos;unloaded&apos; action=&apos;reinterpret&apos; index=&apos;92&apos; debug_id=&apos;0&apos;)
        # java.io.BufferedInputStream::read @ bci:22  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ MON-BOX0=rsp+112 MON-OBJ[0]=rsp + #32
        # java.io.DataInputStream::readFully @ bci:34  L[0]=rsp + #8 L[1]=rsp + #48 L[2]=#0 L[3]=rsp + #20 L[4]=rsp + #24 L[5]=_
        # java.io.DataInputStream::readUTF @ bci:87  L[0]=_ L[1]=rsp + #20 L[2]=rsp + #48 L[3]=rsp + #4 L[4]=_ L[5]=_ L[6]=_ L[7]=#0 L[8]=#0
        # OopMap {[4]=NarrowOop [8]=Oop [32]=Oop [48]=NarrowOop off=4340/0x10f4}
10f4    ud2	# ShouldNotReachHere

1108    B172: #	out( B167 B173 ) &lt;- in( B29 )  Freq: 9.9997e-07
1108    testq   R9, #7	# long
110f    jne     B167  P=0.000001 C=-1.000000

1115    B173: #	out( B175 B174 ) &lt;- in( B172 )  Freq: 9.99969e-07
1115    testq   R9, #768	# long
111c    jne,s   B175  P=0.000001 C=-1.000000

111e    B174: #	out( B175 ) &lt;- in( B173 )  Freq: 9.99968e-07
111e    andq    RAX, #895	# long
1125    movq    R8, RAX	# spill
1128    # TLS is in R15
1128    orq     R8, R15	# long

112b    B175: #	out( B170 B176 ) &lt;- in( B174 B173 )  Freq: 9.99969e-07
112b    cmpxchgq [RDX], R8	# If rax == [RDX] then store R8 into [RDX]
1130    jne,u   B170  P=0.000001 C=-1.000000

1136    B176: #	out( B31 ) &lt;- in( B175 )  Freq: 9.99968e-07
1136    movl    R9, [rsp + #16]	# spill
113b    movq    R11, [rsp + #24]	# spill
1140    jmp     B31

1145    B177: #	out( B11 B178 ) &lt;- in( B10 )  Freq: 9.98874e-07
1145    leaq    RAX, [rsp + #112]	# box lock
114a    fastunlock R11,RAX	! kills RAX,R8
11cf    je     B11  P=0.999999 C=-1.000000

11d5    B178: #	out( B11 ) &lt;- in( B177 )  Freq: 9.98874e-13
11d5    movl    R13, R10	# spill
11d8    movq    RDI, R11	# spill
11db    leaq    RSI, [rsp + #112]	# box lock
11e0    # TLS is in R15
11e0    movq    RDX, R15	# spill
11e3    call_leaf,runtime  complete_monitor_unlocking_C
        No JVM State Info
        # 
11f3    movl    R10, R13	# spill
11f6    jmp     B11

11fb    B179: #	out( B19 B180 ) &lt;- in( B18 )  Freq: 9.9887e-07
11fb    leaq    RAX, [rsp + #112]	# box lock
1200    fastunlock R8,RAX	! kills RAX,R9
1285    je     B19  P=0.999999 C=-1.000000

128b    B180: #	out( B19 ) &lt;- in( B179 )  Freq: 9.9887e-13
128b    movl    R14, R10	# spill
128e    movl    R13, R11	# spill
1291    movq    RDI, R8	# spill
1294    leaq    RSI, [rsp + #112]	# box lock
1299    # TLS is in R15
1299    movq    RDX, R15	# spill
129c    call_leaf,runtime  complete_monitor_unlocking_C
        No JVM State Info
        # 
12ac    movl    R11, R13	# spill
12af    movl    R10, R14	# spill
12b2    jmp     B19

12b7    B181: #	out( N1 ) &lt;- in( B86 )  Freq: 9.9792e-07
12b7    movl    RSI, #-50	# int
12bc    movl    [rsp + #0], R8	# spill
12c0    movl    [rsp + #24], R10	# spill
12c5    movq    [rsp + #40], RBX	# spill
12ca    movl    [rsp + #28], R10	# spill
        nop 	# 1 bytes pad for loops and calls
12d0    call,static  wrapper for: uncommon_trap(reason=&apos;intrinsic_or_type_checked_inlining&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.StringUTF16::compress @ bci:9  L[0]=_ L[1]=_ L[2]=rsp + #28 L[3]=rsp + #40 STK[0]=rsp + #0 STK[1]=#0 STK[2]=rsp + #40 STK[3]=#0 STK[4]=rsp + #24
        # java.lang.String::&lt;init&gt; @ bci:36  L[0]=rsp + #16 L[1]=rsp + #0 L[2]=#0 L[3]=rsp + #24 L[4]=_ L[5]=_
        # java.lang.String::&lt;init&gt; @ bci:10  L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # java.io.DataInputStream::readUTF @ bci:497  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=rsp + #16
        # OopMap {[0]=NarrowOop [16]=Oop [40]=Oop off=4824/0x12d8}
12d8    ud2	# ShouldNotReachHere

12ec    B182: #	out( N1 ) &lt;- in( B87 )  Freq: 9.97919e-07
12ec    movl    RSI, #-187	# int
12f1    movl    RBP, R8	# spill
12f4    movq    R11, [rsp + #16]	# spill
12f9    movq    [rsp + #8], R11	# spill
12fe    movl    [rsp + #16], R10	# spill
        nop 	# 1 bytes pad for loops and calls
1304    call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.String::&lt;init&gt; @ bci:43  L[0]=rsp + #8 L[1]=RBP L[2]=#0 L[3]=rsp + #16 L[4]=_ L[5]=#NULL STK[0]=#NULL
        # java.lang.String::&lt;init&gt; @ bci:10  L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # java.io.DataInputStream::readUTF @ bci:497  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=rsp + #8
        # OopMap {rbp=NarrowOop [8]=Oop off=4876/0x130c}
130c    ud2	# ShouldNotReachHere

1320    B183: #	out( B130 B184 ) &lt;- in( B129 )  Freq: 9.62414e-07
1320    movq    R11, [rsp + #32]	# spill
1325    movl    R8, [R11 + #20 (8-bit)]	# compressed ptr ! Field: java/io/DataInputStream.chararr
1329    testl   R8, R8	# compressed ptr
132c    je     B130  P=0.500000 C=-1.000000

1332    B184: #	out( B225 B185 ) &lt;- in( B183 )  Freq: 4.81207e-07
1332    # TLS is in R15
1332    movq    R11, [R15 + #56 (8-bit)]	# long
1336    decode_heap_oop RDI,R8
1362    testq   R11, R11
1365    je     B225  P=0.001000 C=-1.000000

136b    B185: #	out( B130 ) &lt;- in( B184 )  Freq: 4.80726e-07
136b    # TLS is in R15
136b    movq    R8, [R15 + #72 (8-bit)]	# ptr
136f    movq    [R8 + #-8 + R11], RDI	# ptr
1374    addq    R11, #-8	# long
1378    # TLS is in R15
1378    movq    [R15 + #56 (8-bit)], R11	# long
137c    jmp     B130

1381    B186: #	out( B123 B187 ) &lt;- in( B122 )  Freq: 9.62413e-07
1381    movq    R11, [rsp + #32]	# spill
1386    movl    R9, [R11 + #16 (8-bit)]	# compressed ptr ! Field: java/io/DataInputStream.bytearr
138a    testl   R9, R9	# compressed ptr
138d    je     B123  P=0.500000 C=-1.000000

1393    B187: #	out( B226 B188 ) &lt;- in( B186 )  Freq: 4.81207e-07
1393    # TLS is in R15
1393    movq    R11, [R15 + #56 (8-bit)]	# long
1397    decode_heap_oop RDI,R9
13c3    testq   R11, R11
13c6    je     B226  P=0.001000 C=-1.000000

13cc    B188: #	out( B123 ) &lt;- in( B187 )  Freq: 4.80726e-07
13cc    # TLS is in R15
13cc    movq    R9, [R15 + #72 (8-bit)]	# ptr
13d0    movq    [R9 + #-8 + R11], RDI	# ptr
13d5    addq    R11, #-8	# long
13d9    # TLS is in R15
13d9    movq    [R15 + #56 (8-bit)], R11	# long
13dd    jmp     B123

13e2    B189: #	out( B125 B190 ) &lt;- in( B124 )  Freq: 9.61464e-07
13e2    # TLS is in R15
13e2    movq    R11, [R15 + #104 (8-bit)]	# long
13e6    # TLS is in R15
13e6    movq    R9, [R15 + #120 (8-bit)]	# ptr
13ea    lock addl [rsp + #0], 0	! membar_volatile
13f0    cmpb    [RDI], #0
13f3    je     B125  P=0.500000 C=-1.000000

13f9    B190: #	out( B192 B191 ) &lt;- in( B189 )  Freq: 4.80732e-07
13f9    movb    [RDI], #0	# CMS card-mark byte 0
13fc    testq   R11, R11
13ff    jne,s   B192  P=0.500000 C=-1.000000

1401    B191: #	out( B125 ) &lt;- in( B190 )  Freq: 2.40366e-07
1401    movq    [rsp + #8], RBX	# spill
1406    movl    [rsp + #0], R8	# spill
140a    movl    R14, R10	# spill
140d    # TLS is in R15
140d    movq    RSI, R15	# spill
1410    call_leaf,runtime  write_ref_field_post_entry
        No JVM State Info
        # 
1420    movl    R10, R14	# spill
1423    movl    R8, [rsp + #0]	# spill
1427    movq    RBX, [rsp + #8]	# spill
142c    jmp     B125

1431    B192: #	out( B125 ) &lt;- in( B190 )  Freq: 2.40366e-07
1431    movq    [R9 + #-8 + R11], RDI	# ptr
1436    addq    R11, #-8	# long
143a    # TLS is in R15
143a    movq    [R15 + #104 (8-bit)], R11	# long
143e    jmp     B125

1443    B193: #	out( B132 B194 ) &lt;- in( B131 )  Freq: 9.61464e-07
1443    # TLS is in R15
1443    movq    R11, [R15 + #120 (8-bit)]	# ptr
1447    # TLS is in R15
1447    movq    R8, [R15 + #104 (8-bit)]	# long
144b    lock addl [rsp + #0], 0	! membar_volatile
1451    cmpb    [RDI], #0
1454    je     B132  P=0.500000 C=-1.000000

145a    B194: #	out( B196 B195 ) &lt;- in( B193 )  Freq: 4.80732e-07
145a    movb    [RDI], #0	# CMS card-mark byte 0
145d    testq   R8, R8
1460    jne,s   B196  P=0.500000 C=-1.000000

1462    B195: #	out( B132 ) &lt;- in( B194 )  Freq: 2.40366e-07
1462    movl    R14, R10	# spill
1465    # TLS is in R15
1465    movq    RSI, R15	# spill
1468    call_leaf,runtime  write_ref_field_post_entry
        No JVM State Info
        # 
1478    movl    R10, R14	# spill
147b    jmp     B132

1480    B196: #	out( B132 ) &lt;- in( B194 )  Freq: 2.40366e-07
1480    movq    [R11 + #-8 + R8], RDI	# ptr
1485    addq    R8, #-8	# long
1489    # TLS is in R15
1489    movq    [R15 + #104 (8-bit)], R8	# long
148d    jmp     B132

1492    B197: #	out( N1 ) &lt;- in( B55 B56 B53 B54 B57 )  Freq: 2.51976e-06
1492    movl    RSI, #-138	# int
1497    movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #8]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
14a9    movl    [rsp + #8], R10	# spill
        nop 	# 2 bytes pad for loops and calls
14b0    call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.io.DataInputStream::readUTF @ bci:95  L[0]=_ L[1]=rsp + #8 L[2]=rsp + #48 L[3]=rsp + #4 L[4]=_ L[5]=_ L[6]=_ L[7]=#0 L[8]=#0 STK[0]=#0 STK[1]=rsp + #8
        # OopMap {[4]=NarrowOop [48]=NarrowOop off=5304/0x14b8}
14b8    ud2	# ShouldNotReachHere

14cc    B198: #	out( B90 ) &lt;- in( B111 )  Freq: 4.98946e-07
14cc    # TLS is in R15
14cc    movq    RSI, R15	# spill
14cf    call_leaf,runtime  write_ref_field_pre_entry
        No JVM State Info
        # 
14df    jmp     B90

14e4    B199: #	out( B49 B200 ) &lt;- in( B48 )  Freq: 4.90145e-07
14e4    leaq    RAX, [rsp + #112]	# box lock
14e9    fastunlock R11,RAX	! kills RAX,R10
156e    je     B49  P=0.999999 C=-1.000000

1574    B200: #	out( B49 ) &lt;- in( B199 )  Freq: 4.90145e-13
1574    movq    RDI, [rsp + #72]	# spill
1579    leaq    RSI, [rsp + #112]	# box lock
157e    # TLS is in R15
157e    movq    RDX, R15	# spill
1581    call_leaf,runtime  complete_monitor_unlocking_C
        No JVM State Info
        # 
1591    jmp     B49

1596    B201: #	out( N1 ) &lt;- in( B19 )  Freq: 4.76833e-07
1596    movl    RSI, #-187	# int
159b    movq    RBP, [rsp + #32]	# spill
15a0    movl    [rsp + #0], R10	# spill
15a4    movl    [rsp + #4], R11	# spill
15a9    movl    [rsp + #8], R9	# spill
        nop 	# 2 bytes pad for loops and calls
15b0    call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.io.DataInputStream::readUnsignedShort @ bci:19  L[0]=_ L[1]=rsp + #0 L[2]=rsp + #4 STK[0]=rsp + #8
        # java.io.DataInputStream::readUTF @ bci:1  L[0]=RBP L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # OopMap {rbp=Oop off=5560/0x15b8}
15b8    ud2	# ShouldNotReachHere

15cc    B202: #	out( N1 ) &lt;- in( B22 )  Freq: 4.76832e-07
15cc    movl    RSI, #-187	# int
15d1    movl    [rsp + #4], R8	# spill
15d6    movl    [rsp + #20], R10	# spill
15db    movl    [rsp + #24], R10	# spill
15e0    call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.io.DataInputStream::readFully @ bci:1  L[0]=rsp + #32 L[1]=rsp + #48 L[2]=#0 L[3]=rsp + #24 L[4]=_ L[5]=_ STK[0]=rsp + #20
        # java.io.DataInputStream::readUTF @ bci:87  L[0]=_ L[1]=rsp + #20 L[2]=rsp + #48 L[3]=rsp + #4 L[4]=_ L[5]=_ L[6]=_ L[7]=#0 L[8]=#0
        # OopMap {[4]=NarrowOop [32]=Oop [48]=NarrowOop off=5608/0x15e8}
15e8    ud2	# ShouldNotReachHere

15fc    B203: #	out( N1 ) &lt;- in( B31 )  Freq: 4.76823e-07
15fc    movl    RSI, #-187	# int
1601    pushq   [rsp + #32]	# 64-bit mem-mem spill
	popq    [rsp + #16]
160b    movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #48]
	movl    [rsp + #12], rax
	movq    rax, [rsp - #8]
161d    movl    [rsp + #24], R10	# spill
1622    movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #48]
	movl    [rsp + #32], rax
	movq    rax, [rsp - #8]
1634    movl    [rsp + #36], RCX	# spill
1638    movl    [rsp + #40], RDI	# spill
163c    movq    [rsp + #56], RDX	# spill
        nop 	# 3 bytes pad for loops and calls
1644    call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.io.BufferedInputStream::getBufIfOpen @ bci:6  L[0]=_ L[1]=RBP STK[0]=RBP
        # java.io.BufferedInputStream::read @ bci:1  L[0]=rsp + #56 L[1]=rsp + #12 L[2]=rsp + #36 L[3]=rsp + #40 L[4]=_ L[5]=_ L[6]=_ MON-BOX0=rsp+112 MON-OBJ[0]=rsp + #56
        # java.io.DataInputStream::readFully @ bci:34  L[0]=rsp + #16 L[1]=rsp + #32 L[2]=#0 L[3]=rsp + #24 L[4]=rsp + #36 L[5]=_
        # java.io.DataInputStream::readUTF @ bci:87  L[0]=_ L[1]=rsp + #24 L[2]=rsp + #12 L[3]=rsp + #8 L[4]=_ L[5]=_ L[6]=_ L[7]=#0 L[8]=#0
        # OopMap {rbp=NarrowOop [8]=NarrowOop [12]=NarrowOop [16]=Oop [32]=NarrowOop [56]=Oop off=5708/0x164c}
164c    ud2	# ShouldNotReachHere

1660    B204: #	out( N1 ) &lt;- in( B78 )  Freq: 4.75856e-07
1660    movl    RSI, #-187	# int
1665    movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #8]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
1677    movl    [rsp + #8], R10	# spill
167c    movl    [rsp + #16], R11	# spill
1681    movl    [rsp + #20], R11	# spill
        nop 	# 2 bytes pad for loops and calls
1688    call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.io.DataInputStream::readUTF @ bci:137  L[0]=_ L[1]=rsp + #8 L[2]=rsp + #48 L[3]=rsp + #4 L[4]=_ L[5]=_ L[6]=_ L[7]=rsp + #16 L[8]=rsp + #20 STK[0]=rsp + #16 STK[1]=rsp + #8
        # OopMap {[4]=NarrowOop [48]=NarrowOop off=5776/0x1690}
1690    ud2	# ShouldNotReachHere

16a4    B205: #	out( N1 ) &lt;- in( B83 )  Freq: 4.75846e-07
16a4    movl    RSI, #-187	# int
16a9    movl    RBP, [rsp + #8]	# spill
16ad    movq    R11, [rsp + #16]	# spill
16b2    movq    [rsp + #8], R11	# spill
16b7    movl    [rsp + #20], R10	# spill
16bc    call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.String::&lt;init&gt; @ bci:5  L[0]=rsp + #8 L[1]=RBP L[2]=#0 L[3]=rsp + #20 L[4]=_ L[5]=_ STK[0]=rsp + #20
        # java.lang.String::&lt;init&gt; @ bci:10  L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # java.io.DataInputStream::readUTF @ bci:497  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=rsp + #8
        # OopMap {rbp=NarrowOop [8]=Oop off=5828/0x16c4}
16c4    ud2	# ShouldNotReachHere

16d8    B206: #	out( B42 B207 ) &lt;- in( B41 )  Freq: 3.2865e-07
16d8    leaq    RAX, [rsp + #112]	# box lock
16dd    fastunlock R11,RAX	! kills RAX,R10
1762    je     B42  P=0.999999 C=-1.000000

1768    B207: #	out( B42 ) &lt;- in( B206 )  Freq: 3.2865e-13
1768    movq    RDI, [rsp + #72]	# spill
176d    leaq    RSI, [rsp + #112]	# box lock
1772    # TLS is in R15
1772    movq    RDX, R15	# spill
1775    call_leaf,runtime  complete_monitor_unlocking_C
        No JVM State Info
        # 
1785    jmp     B42

178a    B208: #	out( B140 ) &lt;- in( B58 )  Freq: 2.38403e-07
178a    xorl    R9, R9	# int
178d    jmp     B140

1792    B209: #	out( B140 ) &lt;- in( B74 )  Freq: 2.3744e-07
1792    movl    R9, R8	# spill
1795    jmp     B140

179a    B210: #	out( N1 ) &lt;- in( B49 B96 B42 )  Freq: 4.29127e-07
179a    movl    RSI, #-187	# int
        nop 	# 1 bytes pad for loops and calls
17a0    call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.io.DataInputStream::readFully @ bci:41  L[0]=rsp + #32 L[1]=rsp + #48 L[2]=#0 L[3]=rsp + #24 L[4]=rsp + #52 L[5]=RBP STK[0]=RBP
        # java.io.DataInputStream::readUTF @ bci:87  L[0]=_ L[1]=rsp + #24 L[2]=rsp + #48 L[3]=rsp + #8 L[4]=_ L[5]=_ L[6]=_ L[7]=#0 L[8]=#0
        # OopMap {[8]=NarrowOop [32]=Oop [48]=NarrowOop off=6056/0x17a8}
17a8    ud2	# ShouldNotReachHere

17bc    B211: #	out( B94 B212 ) &lt;- in( B93 )  Freq: 9.9997e-08
17bc    leaq    RAX, [rsp + #112]	# box lock
17c1    fastunlock RDX,RAX	! kills RAX,R8
1846    je     B94  P=0.999999 C=-1.000000

184c    B212: #	out( B94 ) &lt;- in( B211 )  Freq: 9.9997e-14
184c    movl    [rsp + #52], RCX	# spill
1850    movq    [rsp + #24], R11	# spill
1855    movl    [rsp + #20], R9	# spill
185a    movl    [rsp + #16], RSI	# spill
185e    movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #8]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
1870    movq    [rsp + #8], R14	# spill
1875    movl    R14, R10	# spill
1878    movq    RDI, RDX	# spill
187b    leaq    RSI, [rsp + #112]	# box lock
1880    # TLS is in R15
1880    movq    RDX, R15	# spill
1883    call_leaf,runtime  complete_monitor_unlocking_C
        No JVM State Info
        # 
1893    movl    R10, R14	# spill
1896    movq    R14, [rsp + #8]	# spill
189b    movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #4]
	movl    [rsp + #8], rax
	movq    rax, [rsp - #8]
18ad    movl    RSI, [rsp + #16]	# spill
18b1    movl    R9, [rsp + #20]	# spill
18b6    movq    R11, [rsp + #24]	# spill
18bb    movl    RCX, [rsp + #52]	# spill
18bf    jmp     B94

18c4    B213: #	out( B237 B214 ) &lt;- in( B126 B127 )  Freq: 9.72337e-08
18c4    movl    [rsp + #8], R10	# spill
18c9    movq    RBP, [rsp + #32]	# spill
18ce    movq    RSI, precise klass [C: 0x000000012728f970:Constant:exact *	# ptr
18d8    movl    RDX, R8	# spill
        nop 	# 1 bytes pad for loops and calls
18dc    call,static  wrapper for: _new_array_Java
        # java.io.DataInputStream::readUTF @ bci:49  L[0]=RBP L[1]=rsp + #8 L[2]=_ L[3]=_ L[4]=RBP L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=RBP
        # OopMap {rbp=Oop [32]=Oop off=6372/0x18e4}

18e4    B214: #	out( B129 ) &lt;- in( B213 )  Freq: 9.72317e-08
        # Block is sole successor of call
18e4    movl    R10, [rsp + #8]	# spill
18e9    movq    RDX, RAX	# spill
18ec    jmp     B129

18f1    B215: #	out( B236 B216 ) &lt;- in( B119 B120 )  Freq: 9.72337e-08
18f1    movq    [rsp + #24], RBX	# spill
18f6    movl    [rsp + #20], R8	# spill
18fb    movl    [rsp + #16], R10	# spill
1900    pushq   [rsp + #40]	# 64-bit mem-mem spill
	popq    [rsp + #8]
190a    pushq   [rsp + #32]	# 64-bit mem-mem spill
	popq    [rsp + #0]
1913    movq    RSI, precise klass [B: 0x000000012728fa90:Constant:exact *	# ptr
191d    movl    RDX, R8	# spill
1920    call,static  wrapper for: _new_array_Java
        # java.io.DataInputStream::readUTF @ bci:39  L[0]=rsp + #0 L[1]=rsp + #16 L[2]=_ L[3]=_ L[4]=rsp + #0 L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=rsp + #0
        # OopMap {[0]=Oop [32]=Oop off=6440/0x1928}

1928    B216: #	out( B122 ) &lt;- in( B215 )  Freq: 9.72317e-08
        # Block is sole successor of call
1928    pushq   [rsp + #8]	# 64-bit mem-mem spill
	popq    [rsp + #40]
1932    movl    R10, [rsp + #16]	# spill
1937    movl    R8, [rsp + #20]	# spill
193c    movq    RBX, [rsp + #24]	# spill
1941    movq    RDX, RAX	# spill
1944    jmp     B122

1949    B217: #	out( B96 B218 ) &lt;- in( B95 )  Freq: 8.11497e-08
1949    leaq    RAX, [rsp + #112]	# box lock
194e    fastunlock R11,RAX	! kills RAX,R10
19d3    je     B96  P=0.999999 C=-1.000000

19d9    B218: #	out( B96 ) &lt;- in( B217 )  Freq: 8.11497e-14
19d9    movl    RBX, R8	# spill
19dc    movq    RDI, [rsp + #72]	# spill
19e1    leaq    RSI, [rsp + #112]	# box lock
19e6    # TLS is in R15
19e6    movq    RDX, R15	# spill
19e9    call_leaf,runtime  complete_monitor_unlocking_C
        No JVM State Info
        # 
19f9    movl    R8, RBX	# spill
19fc    jmp     B96

1a01    B219: #	out( B104 B220 ) &lt;- in( B103 )  Freq: 1.12078e-09
1a01    leaq    RAX, [rsp + #112]	# box lock
1a06    fastunlock R11,RAX	! kills RAX,R10
1a8b    je     B104  P=0.999999 C=-1.000000

1a91    B220: #	out( B104 ) &lt;- in( B219 )  Freq: 1.12078e-15
1a91    movq    RDI, R11	# spill
1a94    leaq    RSI, [rsp + #112]	# box lock
1a99    # TLS is in R15
1a99    movq    RDX, R15	# spill
1a9c    call_leaf,runtime  complete_monitor_unlocking_C
        No JVM State Info
        # 
1aac    jmp     B104

1ab1    B221: #	out( B109 B222 ) &lt;- in( B108 )  Freq: 1.12077e-09
1ab1    leaq    RAX, [rsp + #112]	# box lock
1ab6    fastunlock R8,RAX	! kills RAX,R10
1b3b    je     B109  P=0.999999 C=-1.000000

1b41    B222: #	out( B109 ) &lt;- in( B221 )  Freq: 1.12077e-15
1b41    movq    RDI, R8	# spill
1b44    leaq    RSI, [rsp + #112]	# box lock
1b49    # TLS is in R15
1b49    movq    RDX, R15	# spill
1b4c    call_leaf,runtime  complete_monitor_unlocking_C
        No JVM State Info
        # 
1b5c    jmp     B109

1b61    B223: #	out( B119 ) &lt;- in( B117 )  Freq: 9.75206e-10
1b61    movq    RCX, RBP	# spill
1b64    jmp     B119

1b69    B224: #	out( B126 ) &lt;- in( B125 )  Freq: 9.75206e-10
1b69    movq    RBX, RBP	# spill
1b6c    jmp     B126

1b71    B225: #	out( B130 ) &lt;- in( B184 )  Freq: 4.81201e-10
1b71    movq    R14, RDX	# spill
1b74    movl    R13, R10	# spill
1b77    # TLS is in R15
1b77    movq    RSI, R15	# spill
1b7a    call_leaf,runtime  write_ref_field_pre_entry
        No JVM State Info
        # 
1b8a    movl    R10, R13	# spill
1b8d    movq    RDX, R14	# spill
1b90    jmp     B130

1b95    B226: #	out( B123 ) &lt;- in( B187 )  Freq: 4.81201e-10
1b95    movq    [rsp + #16], RDX	# spill
1b9a    movq    [rsp + #8], RBX	# spill
1b9f    movl    [rsp + #0], R8	# spill
1ba3    movl    R14, R10	# spill
1ba6    # TLS is in R15
1ba6    movq    RSI, R15	# spill
1ba9    call_leaf,runtime  write_ref_field_pre_entry
        No JVM State Info
        # 
1bb9    movl    R10, R14	# spill
1bbc    movl    R8, [rsp + #0]	# spill
1bc0    movq    RBX, [rsp + #8]	# spill
1bc5    movq    RDX, [rsp + #16]	# spill
1bca    jmp     B123

1bcf    B227: #	out( N1 ) &lt;- in( B1 )  Freq: 1.01328e-06
1bcf    movl    RSI, #-10	# int
1bd4    call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.io.DataInputStream::readUTF @ bci:1  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=#NULL
        # OopMap {off=7132/0x1bdc}
1bdc    ud2	# ShouldNotReachHere

1bf0    B228: #	out( N1 ) &lt;- in( B3 )  Freq: 1.01328e-06
1bf0    movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
1bf8    call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.io.DataInputStream::readUnsignedShort @ bci:4  L[0]=_ L[1]=_ L[2]=_ STK[0]=#NULL
        # java.io.DataInputStream::readUTF @ bci:1  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # OopMap {off=7168/0x1c00}
1c00    ud2	# ShouldNotReachHere

1c14    B229: #	out( N1 ) &lt;- in( B11 )  Freq: 1.01327e-06
1c14    movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
1c1c    call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.io.DataInputStream::readUnsignedShort @ bci:12  L[0]=_ L[1]=_ L[2]=_ STK[0]=#NULL
        # java.io.DataInputStream::readUTF @ bci:1  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # OopMap {off=7204/0x1c24}
1c24    ud2	# ShouldNotReachHere

1c38    B230: #	out( N1 ) &lt;- in( B20 )  Freq: 1.01327e-06
1c38    movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
1c40    call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.io.DataInputStream::readUTF @ bci:29  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=#NULL
        # OopMap {off=7240/0x1c48}
1c48    ud2	# ShouldNotReachHere

1c5c    B231: #	out( N1 ) &lt;- in( B26 )  Freq: 1.01325e-06
1c5c    movl    RSI, #-10	# int
1c61    movl    [rsp + #0], RCX	# spill
1c64    movl    [rsp + #4], RDI	# spill
1c68    call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.io.DataInputStream::readFully @ bci:34  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ STK[0]=#NULL STK[1]=rsp + #48 STK[2]=rsp + #0 STK[3]=rsp + #4
        # java.io.DataInputStream::readUTF @ bci:87  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # OopMap {[48]=NarrowOop off=7280/0x1c70}
1c70    ud2	# ShouldNotReachHere

1c84    B232: #	out( N1 ) &lt;- in( B81 )  Freq: 1.01119e-06
1c84    movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
1c8c    call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.String::rangeCheck @ bci:3  L[0]=_ L[1]=_ L[2]=_ STK[0]=_ STK[1]=_ STK[2]=#NULL
        # java.lang.String::&lt;init&gt; @ bci:7  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_ STK[1]=_ STK[2]=_ STK[3]=_
        # java.io.DataInputStream::readUTF @ bci:497  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=_
        # OopMap {off=7316/0x1c94}
1c94    ud2	# ShouldNotReachHere

1ca8    B233: #	out( N1 ) &lt;- in( B24 )  Freq: 5.06634e-07
1ca8    movl    RSI, #-138	# int
1cad    movl    [rsp + #4], R8	# spill
1cb2    movl    [rsp + #20], R10	# spill
1cb7    movl    [rsp + #24], R10	# spill
1cbc    call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.io.DataInputStream::readFully @ bci:18  L[0]=rsp + #32 L[1]=rsp + #48 L[2]=#0 L[3]=rsp + #24 L[4]=#0 L[5]=_ STK[0]=#0 STK[1]=rsp + #20
        # java.io.DataInputStream::readUTF @ bci:87  L[0]=_ L[1]=rsp + #20 L[2]=rsp + #48 L[3]=rsp + #4 L[4]=_ L[5]=_ L[6]=_ L[7]=#0 L[8]=#0
        # OopMap {[4]=NarrowOop [32]=Oop [48]=NarrowOop off=7364/0x1cc4}
1cc4    ud2	# ShouldNotReachHere

1cd8    B234: #	out( N1 ) &lt;- in( B8 )  Freq: 4.76301e-07
1cd8    movl    RSI, #-187	# int
1cdd    movq    RBP, [rsp + #32]	# spill
1ce2    movq    [rsp + #16], R11	# spill
1ce7    movl    [rsp + #28], RCX	# spill
        nop 	# 1 bytes pad for loops and calls
1cec    call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.io.BufferedInputStream::getBufIfOpen @ bci:6  L[0]=_ L[1]=rsp + #28 STK[0]=rsp + #28
        # java.io.BufferedInputStream::read @ bci:29  L[0]=rsp + #16 MON-BOX0=rsp+112 MON-OBJ[0]=rsp + #16
        # java.io.DataInputStream::readUnsignedShort @ bci:4  L[0]=RBP L[1]=_ L[2]=_
        # java.io.DataInputStream::readUTF @ bci:1  L[0]=RBP L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # OopMap {rbp=Oop [16]=Oop [28]=NarrowOop off=7412/0x1cf4}
1cf4    ud2	# ShouldNotReachHere

1d08    B235: #	out( N1 ) &lt;- in( B16 )  Freq: 4.76299e-07
1d08    movl    RSI, #-187	# int
1d0d    movq    RBP, [rsp + #32]	# spill
1d12    movl    [rsp + #0], R10	# spill
1d16    movq    [rsp + #16], R8	# spill
1d1b    movl    [rsp + #24], R9	# spill
1d20    call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.io.BufferedInputStream::getBufIfOpen @ bci:6  L[0]=_ L[1]=rsp + #24 STK[0]=rsp + #24
        # java.io.BufferedInputStream::read @ bci:29  L[0]=rsp + #16 MON-BOX0=rsp+112 MON-OBJ[0]=rsp + #16
        # java.io.DataInputStream::readUnsignedShort @ bci:12  L[0]=_ L[1]=rsp + #0 L[2]=_
        # java.io.DataInputStream::readUTF @ bci:1  L[0]=RBP L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_
        # OopMap {rbp=Oop [16]=Oop [24]=NarrowOop off=7464/0x1d28}
1d28    ud2	# ShouldNotReachHere

1d3c    B236: #	out( B251 ) &lt;- in( B215 )  Freq: 9.72337e-13
1d3c    # exception oop is in rax; no code emitted
1d3c    movq    RSI, RAX	# spill
1d3f    jmp,s   B251

1d41    B237: #	out( B251 ) &lt;- in( B213 )  Freq: 9.72337e-13
1d41    # exception oop is in rax; no code emitted
1d41    movq    RSI, RAX	# spill
1d44    jmp,s   B251

1d46    B238: #	out( B250 ) &lt;- in( B143 )  Freq: 9.98086e-10
1d46    # exception oop is in rax; no code emitted
1d46    jmp,s   B250

1d48    B239: #	out( B251 ) &lt;- in( B141 )  Freq: 9.98107e-10
1d48    # exception oop is in rax; no code emitted
1d48    movq    RSI, RAX	# spill
1d4b    jmp,s   B251

1d4d    B240: #	out( B256 B241 ) &lt;- in( B105 )  Freq: 2.24159e-08
1d4d    # exception oop is in rax; no code emitted
1d4d    movq    RBX, RAX	# spill
1d50    MEMBAR-release (a FastUnlock follows so empty encoding)
1d50    movq    R11, [rsp + #16]	# spill
1d55    movl    R10, #7	# long (unsigned 32-bit)
1d5b    andq    R10, [R11]	# long
1d5e    cmpq    R10, #5
1d62    jne     B256  P=0.000001 C=-1.000000

1d68    B241: #	out( B251 ) &lt;- in( B257 B256 B240 )  Freq: 2.24159e-08
1d68    movq    RSI, RBX	# spill
1d6b    jmp,s   B251

1d6d    B242: #	out( B254 B243 ) &lt;- in( B101 )  Freq: 2.2416e-08
1d6d    # exception oop is in rax; no code emitted
1d6d    movq    RBX, RAX	# spill
1d70    MEMBAR-release (a FastUnlock follows so empty encoding)
1d70    movq    R11, [rsp + #0]	# spill
1d74    movl    R10, #7	# long (unsigned 32-bit)
1d7a    andq    R10, [R11]	# long
1d7d    cmpq    R10, #5
1d81    jne     B254  P=0.000001 C=-1.000000

1d87    B243: #	out( B251 ) &lt;- in( B255 B254 B242 )  Freq: 2.2416e-08
1d87    movq    RSI, RBX	# spill
1d8a    jmp,s   B251

1d8c    B244: #	out( B247 ) &lt;- in( B34 )  Freq: 8.99973e-06
1d8c    # exception oop is in rax; no code emitted
1d8c    movq    RBX, RAX	# spill
1d8f    jmp,s   B247

1d91    B245: #	out( B247 ) &lt;- in( B39 )  Freq: 6.57312e-06
1d91    # exception oop is in rax; no code emitted
1d91    movq    RBX, RAX	# spill
1d94    jmp,s   B247

1d96    B246: #	out( B247 ) &lt;- in( B44 )  Freq: 4.01684e-06
1d96    # exception oop is in rax; no code emitted
1d96    movq    RBX, RAX	# spill

1d99    B247: #	out( B252 B248 ) &lt;- in( B244 B245 B246 )  Freq: 1.95897e-05
1d99    MEMBAR-release (a FastUnlock follows so empty encoding)
1d99    movq    R11, [rsp + #72]	# spill
1d9e    movq    R10, [rsp + #0]	# spill
1da2    andq    R10, [R11]	# long
1da5    cmpq    R10, #5
1da9    jne,s   B252  P=0.000001 C=-1.000000

1dab    B248: #	out( B251 ) &lt;- in( B253 B252 B247 )  Freq: 1.95897e-05
1dab    movq    RSI, RBX	# spill
1dae    jmp,s   B251

1db0    B249: #	out( B250 ) &lt;- in( B82 )  Freq: 9.97941e-06
1db0    # exception oop is in rax; no code emitted

1db0    B250: #	out( B251 ) &lt;- in( B249 B238 )  Freq: 9.9804e-06
1db0    movq    RSI, RAX	# spill

1db3    B251: #	out( N1 ) &lt;- in( B243 B241 B236 B237 B248 B239 B250 )  Freq: 2.96159e-05
1db3    vzeroupper
	addq    rsp, 128	# Destroy frame
	popq    rbp

1dbe    jmp     rethrow_stub

1dc3    B252: #	out( B248 B253 ) &lt;- in( B247 )  Freq: 1.95897e-11
1dc3    leaq    RAX, [rsp + #112]	# box lock
1dc8    fastunlock R11,RAX	! kills RAX,R10
1e4d    je     B248  P=0.999999 C=-1.000000

1e53    B253: #	out( B248 ) &lt;- in( B252 )  Freq: 1.95897e-17
1e53    movq    RDI, [rsp + #72]	# spill
1e58    leaq    RSI, [rsp + #112]	# box lock
1e5d    # TLS is in R15
1e5d    movq    RDX, R15	# spill
1e60    call_leaf,runtime  complete_monitor_unlocking_C
        No JVM State Info
        # 
1e70    jmp     B248

1e75    B254: #	out( B243 B255 ) &lt;- in( B242 )  Freq: 2.2416e-14
1e75    leaq    RAX, [rsp + #112]	# box lock
1e7a    fastunlock R11,RAX	! kills RAX,R10
1eff    je     B243  P=0.999999 C=-1.000000

1f05    B255: #	out( B243 ) &lt;- in( B254 )  Freq: 2.2416e-20
1f05    movq    RDI, R11	# spill
1f08    leaq    RSI, [rsp + #112]	# box lock
1f0d    # TLS is in R15
1f0d    movq    RDX, R15	# spill
1f10    call_leaf,runtime  complete_monitor_unlocking_C
        No JVM State Info
        # 
1f20    jmp     B243

1f25    B256: #	out( B241 B257 ) &lt;- in( B240 )  Freq: 2.24159e-14
1f25    leaq    RAX, [rsp + #112]	# box lock
1f2a    fastunlock R11,RAX	! kills RAX,R10
1faf    je     B241  P=0.999999 C=-1.000000

1fb5    B257: #	out( B241 ) &lt;- in( B256 )  Freq: 2.24159e-20
1fb5    movq    RDI, R11	# spill
1fb8    leaq    RSI, [rsp + #112]	# box lock
1fbd    # TLS is in R15
1fbd    movq    RDX, R15	# spill
1fc0    call_leaf,runtime  complete_monitor_unlocking_C
        No JVM State Info
        # 
1fd0    jmp     B241

--------------------------------------------------------------------------------
</opto_assembly>
<writer thread='24067'/>
    977  340       3       java.lang.Class::getComponentType (14 bytes)
<writer thread='42499'/>
    977  342       3       java.util.HashSet::size (8 bytes)
<writer thread='40963'/>
             
<writer thread='24323'/>
                              @ 20   java.util.HashMap::resize (356 bytes)   hot method too big
                              @ 56   java.util.HashMap::newNode (13 bytes)   inline (hot)
                                @ 9   java.util.HashMap$Node::&lt;init&gt; (26 bytes)   inline (hot)
                                  @ 1   java.lang.Object::&lt;init&gt; (1 bytes)   inline (hot)
                              @ 91   java.lang.String::equals (50 bytes)   inline (hot)
                               \-&gt; TypeProfile (543/543 counts) = java/lang/String
                                @ 44   java.lang.StringLatin1::equals (36 bytes)   (intrinsic)
                              @ 203   java.lang.String::equals (50 bytes)   inline (hot)
                               \-&gt; TypeProfile (126/126 counts) = java/lang/String
                                @ 44   java.lang.StringLatin1::equals (36 bytes)   (intrinsic)
                              @ 152   java.util.HashMap::newNode (13 bytes)   inline (hot)
                                @ 9   java.util.HashMap$Node::&lt;init&gt; (26 bytes)   inline (hot)
                                  @ 1   java.lang.Object::&lt;init&gt; (1 bytes)   inline (hot)
                              @ 253   java.util.HashMap::afterNodeAccess (1 bytes)   inline (hot)
                              @ 288   java.util.HashMap::resize (356 bytes)   hot method too big
                              @ 295   java.util.HashMap::afterNodeInsertion (1 bytes)   inline (hot)
<writer thread='38147'/>
    977  363       4       java.lang.Character::charCount (12 bytes)
<writer thread='40963'/>
                 
<writer thread='40195'/>
    977  347       3       java.net.URI$Parser::scan (76 bytes)
<writer thread='40963'/>
  @ 6  
<writer thread='38659'/>
    977  122       3       java.io.DataInputStream::readUTF (501 bytes)   made not entrant
<writer thread='40963'/>
 java.lang.Object::&lt;init&gt;
<writer thread='38659'/>
                              @ 1   java.io.DataInputStream::readUnsignedShort (39 bytes)   inline (hot)
                               \-&gt; TypeProfile (1039/1039 counts) = java/io/DataInputStream
              s                 @ 4   java.io.BufferedInputStream::read (49 bytes)   inline (hot)
                                 \-&gt; TypeProfile (4505/4505 counts) = java/io/BufferedInputStream
                                  @ 12   java.io.BufferedInputStream::fill (203 bytes)   too big
                                  @ 29   java.io.BufferedInputStream::getBufIfOpen (21 bytes)   inline (hot)
              s                 @ 12   java.io.BufferedInputStream::read (49 bytes)   inline (hot)
                                 \-&gt; TypeProfile (4505/4505 counts) = java/io/BufferedInputStream
                                  @ 12   java.io.BufferedInputStream::fill (203 bytes)   too big
                                  @ 29   java.io.BufferedInputStream::getBufIfOpen (21 bytes)   inline (hot)
                              @ 87   java.io.DataInputStream::readFully (63 bytes)   inline (hot)
              s                 @ 34   java.io.BufferedInputStream::read (113 bytes)   inline (hot)
                                 \-&gt; TypeProfile (1039/1039 counts) = java/io/BufferedInputStream
                                  @ 1   java.io.BufferedInputStream::getBufIfOpen (21 bytes)   inline (hot)
                                  @ 49   java.io.BufferedInputStream::read1 (108 bytes)   too big
                                  @ 101   java.io.InputStream::available (2 bytes)   virtual call
                                  @ 49   java.io.BufferedInputStream::read1 (108 bytes)   too big
                              @ 497   java.lang.String::&lt;init&gt; (14 bytes)   inline (hot)
                                @ 7   java.lang.String::rangeCheck (9 bytes)   inline (hot)
                                  @ 4   java.lang.String::checkBoundsOffCount (64 bytes)   too big
                                @ 10   java.lang.String::&lt;init&gt; (74 bytes)   inline (hot)
                                  @ 1   java.lang.Object::&lt;init&gt; (1 bytes)   inline (hot)
                                  @ 36   java.lang.StringUTF16::compress (20 bytes)   inline (hot)
                                    @ 9   java.lang.StringUTF16::compress (50 bytes)   (intrinsic)
<writer thread='40963'/>
 (1 bytes)
<writer thread='42499'/>
             
<writer thread='24067'/>
                     
<writer thread='42499'/>
      
<writer thread='24323'/>
    977 
<writer thread='42499'/>
           
<writer thread='24323'/>
 245 
<writer thread='42499'/>
@ 4   java.util.HashMap::
<writer thread='40195'/>
        
<writer thread='42499'/>
size
<writer thread='40195'/>
             
<writer thread='42499'/>
 (5 bytes)
<writer thread='40963'/>
             
<writer thread='40195'/>
         
<writer thread='24323'/>
      4      
<writer thread='40195'/>
@ 15  
<writer thread='40963'/>
                   
<writer thread='24323'/>
 java.util.HashMap::
<writer thread='24067'/>
         @ 1  
<writer thread='24323'/>
putVal
<writer thread='40963'/>
@ 14   java.util.ImmutableCollections$Set12::
<writer thread='24067'/>
 java.lang.Class::
<writer thread='24323'/>
 (300 bytes)   COMPILE SKIPPED: concurrent class loading
<writer thread='24067'/>
isArray (0 bytes)   native method
<writer thread='40963'/>
size
<writer thread='40195'/>
 java.lang.String::
<writer thread='40963'/>
 (13 bytes)
<writer thread='40195'/>
charAt (25 bytes)
                                @ 1   java.lang.String::isLatin1 (19 bytes)
<writer thread='42499'/>
    979  374       3       jdk.internal.module.Checks::isJavaIdentifier (76 bytes)
<writer thread='24323'/>
    979  381       4       java.util.HashMap$HashIterator::nextNode (100 bytes)
<writer thread='37379'/>
    979  380       4       java.lang.StringLatin1::lastIndexOf (40 bytes)
<writer thread='38659'/>
    979  353       4       java.io.DataInputStream::readUnsignedShort (39 bytes)
<writer thread='36611'/>
    979  354       4       java.lang.String::checkIndex (48 bytes)
<writer thread='40195'/>
                                @ 12   java.lang.StringLatin1::charAt (28 bytes)
<writer thread='42499'/>
                              @ 1  
<writer thread='24067'/>
    979  351       3       sun.nio.fs.UnixPath::compareTo (92 bytes)
<writer thread='42499'/>
 java.lang.String::isEmpty (14 bytes)
<writer thread='38147'/>

============================= C2-compiled nmethod ==============================
<opto_assembly compile_id='363'>
----------------------- MetaData before Compile_id = 363 ------------------------
{method}
 - this oop:          0x0000000126a9ac68
 - method holder:     &apos;java/lang/Character&apos;
 - constants:         0x0000000126a98610 constant pool [554] {0x0000000126a98610} for &apos;java/lang/Character&apos; cache=0x0000000126bac710
 - access:            0x81000009  public static 
 - name:              &apos;charCount&apos;
 - signature:         &apos;(I)I&apos;
 - max stack:         3
 - max locals:        1
 - size of params:    1
 - method size:       13
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x000000010c0a1de0
 - adapters:          AHE@0x00007f99308e1750: 0xa0000000 i2c: 0x000000010c0e9460 c2i: 0x000000010c0e9542 c2iUV: 0x000000010c0e9509 c2iNCI: 0x000000010c0e957f
 - compiled entry     0x000000010c7e1e40
 - code size:         12
 - code start:        0x0000000126a9ac48
 - code end (excl):   0x0000000126a9ac54
 - method data:       0x0000000126dd1508
 - checked ex length: 0
 - linenumber start:  0x0000000126a9ac54
 - localvar length:   1
 - localvar start:    0x0000000126a9ac5a
 - compiled code: nmethod    980   58       3       java.lang.Character::charCount (12 bytes)

------------------------ OptoAssembly for Compile_id = 363 -----------------------
#
#  int ( int )
#
#r018 rsi   : parm 0: int
# -- Old rsp -- Framesize: 32 --
#r583 rsp+28: in_preserve
#r582 rsp+24: return address
#r581 rsp+20: in_preserve
#r580 rsp+16: saved fp register
#r579 rsp+12: pad2, stack alignment
#r578 rsp+ 8: pad2, stack alignment
#r577 rsp+ 4: Fixed slot 1
#r576 rsp+ 0: Fixed slot 0
#
000     N1: #	out( B1 ) &lt;- in( B3 B2 )  Freq: 1

000     B1: #	out( B3 B2 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
000     # stack bang (120 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

00c     cmpl    RSI, #65536
012     jge,s   B3  P=0.000000 C=22122.000000

014     B2: #	out( N1 ) &lt;- in( B1 )  Freq: 1
014     movl    RAX, #1	# int
019     addq    rsp, 16	# Destroy frame
	popq    rbp
	movq    rscratch1, poll_offset[r15_thread] #polling_page_address
	testl   rax, [rscratch1]	# Safepoint: poll for GC

028     ret

029     B3: #	out( N1 ) &lt;- in( B1 )  Freq: 4.76837e-07
029     movl    RBP, RSI	# spill
02b     movl    RSI, #-187	# int
        nop 	# 3 bytes pad for loops and calls
033     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.Character::charCount @ bci:3  L[0]=_ STK[0]=RBP STK[1]=#65536
        # OopMap {off=56/0x38}
038     ud2	# ShouldNotReachHere

--------------------------------------------------------------------------------
</opto_assembly>
<writer thread='40195'/>
             
<writer thread='24067'/>
             
<writer thread='40195'/>
      
<writer thread='42499'/>
             
<writer thread='40195'/>
       
<writer thread='42499'/>
        
<writer thread='38147'/>
    980   58       3       java.lang.Character::charCount (12 bytes)   made not entrant
<writer thread='24067'/>
             
<writer thread='38147'/>
<writer thread='40195'/>
      
<writer thread='24067'/>
    
<writer thread='40963'/>
    980  367       3       java.util.HashMap::afterNodeAccess (1 bytes)
<writer thread='40195'/>
  @ 15  
<writer thread='24067'/>
@ 17  
<writer thread='42499'/>
         @ 11  
<writer thread='40195'/>
java/lang/StringIndexOutOfBoundsException
<writer thread='24067'/>
 java.lang.Math::
<writer thread='38147'/>
    981  348       4       java.lang.String::codePointAt (50 bytes)
<writer thread='42499'/>
 java.util.ImmutableCollections$SetN::contains (26 bytes)
<writer thread='40195'/>
::
<writer thread='42499'/>

<writer thread='24067'/>
min (11 bytes)
<writer thread='9219'/>
    981  395     n 0       java.lang.invoke.MethodHandle::linkToStatic(LLL)V (native)   (static)
<writer thread='40195'/>
&lt;init&gt; (not loaded)   not inlineable
<writer thread='42499'/>
                                @ 1   java.util.Objects::requireNonNull (14 bytes)
<writer thread='36611'/>

============================= C2-compiled nmethod ==============================
<opto_assembly compile_id='354'>
----------------------- MetaData before Compile_id = 354 ------------------------
{method}
 - this oop:          0x00000001269a5ef0
 - method holder:     &apos;java/lang/String&apos;
 - constants:         0x000000012699b360 constant pool [1059]/operands[28] {0x000000012699b360} for &apos;java/lang/String&apos; cache=0x0000000126aba220
 - access:            0x81000008  static 
 - name:              &apos;checkIndex&apos;
 - signature:         &apos;(II)V&apos;
 - max stack:         5
 - max locals:        2
 - size of params:    2
 - method size:       13
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x000000010c0a1de0
 - adapters:          AHE@0x00007f99308e17a0: 0xaa000000 i2c: 0x000000010c0e90e0 c2i: 0x000000010c0e91c5 c2iUV: 0x000000010c0e918c c2iNCI: 0x000000010c0e9202
 - compiled entry     0x000000010c7e6580
 - code size:         48
 - code start:        0x00000001269a5e98
 - code end (excl):   0x00000001269a5ec8
 - method data:       0x0000000126d5bcb0
 - checked ex length: 0
 - linenumber start:  0x00000001269a5ec8
 - localvar length:   2
 - localvar start:    0x00000001269a5ed6
 - compiled code: nmethod    981   63       3       java.lang.String::checkIndex (48 bytes)

------------------------ OptoAssembly for Compile_id = 354 -----------------------
#
#  void ( int, int )
#
#r018 rsi   : parm 0: int
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 48 --
#r583 rsp+44: in_preserve
#r582 rsp+40: return address
#r581 rsp+36: in_preserve
#r580 rsp+32: saved fp register
#r579 rsp+28: pad2, stack alignment
#r578 rsp+24: pad2, stack alignment
#r577 rsp+20: Fixed slot 1
#r576 rsp+16: Fixed slot 0
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N1: #	out( B1 ) &lt;- in( B4 B5 B3 )  Freq: 1

000     B1: #	out( B4 B2 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
000     # stack bang (144 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

00c     testl   RSI, RSI
00e     jl,s   B4  P=0.000000 C=14948.000000

010     B2: #	out( B5 B3 ) &lt;- in( B1 )  Freq: 1
010     cmpl    RSI, RDX
012     jge,s   B5  P=0.000000 C=14948.000000

014     B3: #	out( N1 ) &lt;- in( B2 )  Freq: 0.999999
014     addq    rsp, 32	# Destroy frame
	popq    rbp
	movq    rscratch1, poll_offset[r15_thread] #polling_page_address
	testl   rax, [rscratch1]	# Safepoint: poll for GC

023     ret

024     B4: #	out( N1 ) &lt;- in( B1 )  Freq: 5e-07
024     movl    [rsp + #0], RDX	# spill
027     movl    [rsp + #4], RSI	# spill
02b     movl    RSI, #-187	# int
        nop 	# 3 bytes pad for loops and calls
033     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.String::checkIndex @ bci:1  L[0]=rsp + #4 L[1]=rsp + #0 STK[0]=rsp + #4
        # OopMap {off=56/0x38}
038     ud2	# ShouldNotReachHere

04c     B5: #	out( N1 ) &lt;- in( B2 )  Freq: 4.76837e-07
04c     movl    [rsp + #4], RSI	# spill
050     movl    [rsp + #8], RDX	# spill
054     movl    RSI, #-187	# int
        nop 	# 2 bytes pad for loops and calls
05b     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.String::checkIndex @ bci:6  L[0]=rsp + #4 L[1]=rsp + #8 STK[0]=rsp + #4 STK[1]=rsp + #8
        # OopMap {off=96/0x60}
060     ud2	# ShouldNotReachHere

--------------------------------------------------------------------------------
</opto_assembly>
<writer thread='42499'/>
             
<writer thread='40195'/>
        
<writer thread='40963'/>
    982  358       3       java.lang.module.ModuleDescriptor::packageName (24 bytes)
<writer thread='40195'/>
                  
<writer thread='42499'/>
        
<writer thread='40195'/>
    
<writer thread='36611'/>
    982   63       3       java.lang.String::checkIndex (48 bytes)   made not entrant
<writer thread='40195'/>
  @ 21  
<writer thread='36611'/>
<writer thread='42499'/>
             
<writer thread='40195'/>
 java.lang.StringUTF16::
<writer thread='42499'/>
@ 8  
<writer thread='40195'/>
charAt
<writer thread='42499'/>
 java.lang.NullPointerException::
<writer thread='36611'/>
    982  285       4       java.util.HashSet::add (20 bytes)
<writer thread='40195'/>
 (11 bytes)
<writer thread='40963'/>
                              
<writer thread='42499'/>
&lt;init&gt; (5 bytes)   don&apos;t inline Throwable constructors
<writer thread='40963'/>
@ 3   java.lang.String::lastIndexOf (12 bytes)
<writer thread='40195'/>
                                  @ 2   java.lang.StringUTF16::checkIndex
<writer thread='40963'/>
                                @ 3  
<writer thread='40195'/>
 (9 bytes)
<writer thread='40963'/>
 java.lang.String::length (11 bytes)
<writer thread='42499'/>
                                @ 14   java.util.ImmutableCollections$SetN::probe (56 bytes)   callee is too large
<writer thread='40195'/>
                                    @ 2   java.lang.StringUTF16::length (5 bytes)
<writer thread='40963'/>
                                  @ 6   java.lang.String::coder (15 bytes)
<writer thread='40195'/>
                                    @ 5   java.lang.String::checkIndex (48 bytes)   callee is too large
<writer thread='42499'/>
                              @ 23  
<writer thread='40195'/>
                              
<writer thread='40963'/>
                   
<writer thread='42499'/>
 java.lang.Character::
<writer thread='40195'/>
    @ 7  
<writer thread='40963'/>
             
<writer thread='42499'/>
codePointAt
<writer thread='40963'/>
@ 8   java.lang.String::
<writer thread='42499'/>
 (51 bytes)   callee is too large
<writer thread='40195'/>
 java.lang.StringUTF16::
<writer thread='40963'/>
lastIndexOf
<writer thread='42499'/>

<writer thread='40195'/>
getChar (60 bytes)   intrinsic
<writer thread='40963'/>
 (29 bytes)
<writer thread='42499'/>
                              @ 28   java.lang.Character::isJavaIdentifierStart (9 bytes)
<writer thread='40195'/>
                              @ 25   java.net.URI::match (56 bytes)   callee is too large
<writer thread='42499'/>
                                @ 1  
<writer thread='40963'/>
                          
<writer thread='42499'/>
 java.lang.CharacterData::
<writer thread='40963'/>
        @ 1   java.lang.String::isLatin1 (19 bytes)
<writer thread='42499'/>
of (120 bytes)   callee is too large
<writer thread='40195'/>
             
<writer thread='42499'/>
                                @ 5  
<writer thread='40195'/>
                 @ 51  
<writer thread='42499'/>
 java.lang.CharacterData::
<writer thread='40195'/>
 java.net.URI$Parser::scanEscape (115 bytes)   callee is too large
<writer thread='42499'/>
isJavaIdentifierStart (0 bytes)   no static binding
<writer thread='24067'/>
    984  344       3       jdk.internal.misc.Unsafe::checkPrimitivePointer (19 bytes)
<writer thread='42499'/>
                              @ 37   java.lang.Character::charCount (12 bytes)
                              @ 43   java.lang.String::length (11 bytes)
<writer thread='40963'/>
             
<writer thread='42499'/>
             
<writer thread='40963'/>
        
<writer thread='42499'/>
                 
<writer thread='24067'/>
             
<writer thread='42499'/>
  @ 6  
<writer thread='40963'/>
         
<writer thread='24067'/>
                 
<writer thread='40963'/>
    @ 13   java.lang.StringLatin1::
<writer thread='42499'/>
 java.lang.String::
<writer thread='24067'/>
@ 3  
<writer thread='40963'/>
lastIndexOf
<writer thread='42499'/>
coder
<writer thread='24067'/>
 jdk.internal.misc.Unsafe::
<writer thread='40963'/>
 (40 bytes)   callee is too large
<writer thread='42499'/>
 (15 bytes)
<writer thread='24067'/>
checkPointer
<writer thread='40963'/>

<writer thread='42499'/>

<writer thread='24067'/>
 (19 bytes)
<writer thread='40963'/>
                                  @ 25  
<writer thread='24067'/>
             
<writer thread='40963'/>
 java.lang.StringUTF16::
<writer thread='24067'/>
                   @ 6   jdk.internal.misc.Unsafe::checkNativeAddress (28 bytes)
<writer thread='40963'/>
lastIndexOf (47 bytes)   callee is too large
<writer thread='42499'/>
                              @ 51   java.lang.Character::codePointAt (51 bytes)   callee is too large
<writer thread='40963'/>
                   
<writer thread='24067'/>
        
<writer thread='40963'/>
       
<writer thread='24067'/>
           
<writer thread='40963'/>
    
<writer thread='42499'/>
                   
<writer thread='24067'/>
           
<writer thread='40963'/>
@ 20  
<writer thread='24067'/>
  @ 15  
<writer thread='42499'/>
  
<writer thread='24067'/>
 jdk.internal.misc.Unsafe::
<writer thread='42499'/>
         
<writer thread='40963'/>
 java.lang.String::
<writer thread='42499'/>
@ 56  
<writer thread='24067'/>
checkOffset
<writer thread='40963'/>
substring
<writer thread='42499'/>
 java.lang.Character::
<writer thread='24067'/>
 (32 bytes)   callee is too large
<writer thread='40963'/>
 (58 bytes)   callee is too large
<writer thread='42499'/>
isJavaIdentifierPart (9 bytes)
                                @ 1   java.lang.CharacterData::of (120 bytes)   callee is too large
                                @ 5   java.lang.CharacterData::isJavaIdentifierPart (0 bytes)   no static binding
<writer thread='24067'/>
                              @ 12  
<writer thread='42499'/>
                     
<writer thread='24067'/>
 java.lang.Object::
<writer thread='42499'/>
         @ 66  
<writer thread='24067'/>
getClass (0 bytes)   intrinsic
<writer thread='42499'/>
 java.lang.Character::charCount (12 bytes)
<writer thread='24067'/>
                              @ 15   jdk.internal.misc.Unsafe::checkPrimitiveArray (22 bytes)
<writer thread='38147'/>

============================= C2-compiled nmethod ==============================
<opto_assembly compile_id='348'>
----------------------- MetaData before Compile_id = 348 ------------------------
{method}
 - this oop:          0x00000001269a0258
 - method holder:     &apos;java/lang/String&apos;
 - constants:         0x000000012699b360 constant pool [1059]/operands[28] {0x000000012699b360} for &apos;java/lang/String&apos; cache=0x0000000126aba220
 - access:            0x81000001  public 
 - name:              &apos;codePointAt&apos;
 - signature:         &apos;(I)I&apos;
 - max stack:         4
 - max locals:        3
 - size of params:    2
 - method size:       13
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x000000010c0a1de0
 - adapters:          AHE@0x00007f99308e1840: 0xba000000 i2c: 0x000000010c0e89e0 c2i: 0x000000010c0e8ac6 c2iUV: 0x000000010c0e8a8d c2iNCI: 0x000000010c0e8b03
 - compiled entry     0x000000010c7e2ea0
 - code size:         50
 - code start:        0x00000001269a01f0
 - code end (excl):   0x00000001269a0222
 - method data:       0x0000000126dd16c0
 - checked ex length: 0
 - linenumber start:  0x00000001269a0222
 - localvar length:   3
 - localvar start:    0x00000001269a0232
 - compiled code: nmethod    986   64       3       java.lang.String::codePointAt (50 bytes)

------------------------ OptoAssembly for Compile_id = 348 -----------------------
#
#  int ( java/lang/String:NotNull:exact *, int )
#
#r018 rsi:rsi   : parm 0: java/lang/String:NotNull:exact *
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 64 --
#r583 rsp+60: in_preserve
#r582 rsp+56: return address
#r581 rsp+52: in_preserve
#r580 rsp+48: saved fp register
#r579 rsp+44: pad2, stack alignment
#r578 rsp+40: pad2, stack alignment
#r577 rsp+36: Fixed slot 1
#r576 rsp+32: Fixed slot 0
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N69: #	out( B1 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B5 B2 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (256 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

02c     movsbl  R10, [RSI + #20 (8-bit)]	# byte ! Field: java/lang/String.coder (constant)
031     testl   R10, R10
034     jne,s   B5  P=0.000000 C=87055.000000

036     B2: #	out( B7 B3 ) &lt;- in( B1 )  Freq: 1
036     movl    R10, [RSI + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value (constant)
03a     movl    RBP, [R12 + R10 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
03f     NullCheck R10

03f     B3: #	out( B6 B4 ) &lt;- in( B2 )  Freq: 0.999999
03f     cmpl    RDX, RBP	# unsigned
041     jnb,us  B6  P=0.000000 C=14948.000000

043     B4: #	out( N69 ) &lt;- in( B3 )  Freq: 0.999998
043     decode_heap_oop_not_null R10,R10
047     movzbl  RAX, [R10 + #16 + RDX]	# ubyte
04d     addq    rsp, 48	# Destroy frame
	popq    rbp
	movq    rscratch1, poll_offset[r15_thread] #polling_page_address
	testl   rax, [rscratch1]	# Safepoint: poll for GC

05c     ret

05d     B5: #	out( N69 ) &lt;- in( B1 )  Freq: 5e-07
05d     movq    RBP, RSI	# spill
060     movl    [rsp + #0], RDX	# spill
063     movl    [rsp + #4], R10	# spill
068     movl    RSI, #-187	# int
        nop 	# 2 bytes pad for loops and calls
06f     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.String::isLatin1 @ bci:10  L[0]=_ STK[0]=rsp + #4
        # java.lang.String::codePointAt @ bci:1  L[0]=RBP L[1]=rsp + #0 L[2]=_
        # OopMap {rbp=Oop off=116/0x74}
074     ud2	# ShouldNotReachHere

088     B6: #	out( N69 ) &lt;- in( B3 )  Freq: 4.76836e-07
088     movq    [rsp + #0], RSI	# spill
08c     movl    [rsp + #12], RDX	# spill
090     movl    [rsp + #16], RDX	# spill
094     movl    RSI, #-27	# int
        nop 	# 2 bytes pad for loops and calls
09b     call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.String::checkIndex @ bci:1  L[0]=rsp + #16 L[1]=RBP STK[0]=rsp + #12
        # java.lang.String::codePointAt @ bci:13  L[0]=rsp + #0 L[1]=rsp + #12 L[2]=_
        # OopMap {[0]=Oop off=160/0xa0}
0a0     ud2	# ShouldNotReachHere

0b4     B7: #	out( N69 ) &lt;- in( B2 )  Freq: 1.01328e-06
0b4     movl    RSI, #-10	# int
        nop 	# 2 bytes pad for loops and calls
0bb     call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.String::codePointAt @ bci:12  L[0]=_ L[1]=_ L[2]=_ STK[0]=_ STK[1]=#NULL
        # OopMap {off=192/0xc0}
0c0     ud2	# ShouldNotReachHere

--------------------------------------------------------------------------------
</opto_assembly>
<writer thread='24067'/>
                                @ 1   java.lang.Class::getComponentType (14 bytes)
<writer thread='38147'/>
    988   64       3       java.lang.String::codePointAt (50 bytes)   made not entrant
                              @ 1   java.lang.String::isLatin1 (19 bytes)   inline (hot)
                              @ 13   java.lang.String::checkIndex (48 bytes)   inline (hot)
<writer thread='24067'/>
                                  @ 1   java.lang.Class::isArray (0 bytes)   native method
<writer thread='38147'/>
    988  355       4       java.net.URI::match (56 bytes)
<writer thread='9219'/>
    988  397     n 0       java.lang.invoke.MethodHandle::linkToStatic(LLLL)V (native)   (static)
<writer thread='24067'/>
                                @ 10   java.lang.Class::isPrimitive (0 bytes)   intrinsic
                                @ 17   jdk.internal.misc.Unsafe::invalidInput (8 bytes)
                                  @ 4   java.lang.IllegalArgumentException::&lt;init&gt; (5 bytes)   don&apos;t inline Throwable constructors
<writer thread='40963'/>
    990  345       3       jdk.internal.misc.Unsafe::checkPointer (19 bytes)
                              @ 6   jdk.internal.misc.Unsafe::checkNativeAddress (28 bytes)
                              @ 15   jdk.internal.misc.Unsafe::checkOffset (32 bytes)
                                @ 27   jdk.internal.misc.Unsafe::invalidInput (8 bytes)
                                  @ 4   java.lang.IllegalArgumentException::&lt;init&gt; (5 bytes)   don&apos;t inline Throwable constructors
<writer thread='38147'/>

============================= C2-compiled nmethod ==============================
<opto_assembly compile_id='355'>
----------------------- MetaData before Compile_id = 355 ------------------------
{method}
 - this oop:          0x0000000126bd2188
 - method holder:     &apos;java/net/URI&apos;
 - constants:         0x0000000126bcbab8 constant pool [721] {0x0000000126bcbab8} for &apos;java/net/URI&apos; cache=0x0000000126bd2f80
 - access:            0x8100000a  private static 
 - name:              &apos;match&apos;
 - signature:         &apos;(CJJ)Z&apos;
 - max stack:         5
 - max locals:        5
 - size of params:    5
 - method size:       13
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x000000010c0a1de0
 - adapters:          AHE@0x00007f992d8263f0: 0xabebe000 i2c: 0x000000010c2370e0 c2i: 0x000000010c2371ca c2iUV: 0x000000010c237191 c2iNCI: 0x000000010c237207
 - compiled entry     0x000000010c7e27c0
 - code size:         56
 - code start:        0x0000000126bd2118
 - code end (excl):   0x0000000126bd2150
 - method data:       0x0000000126dd2ba0
 - checked ex length: 0
 - linenumber start:  0x0000000126bd2150
 - localvar length:   3
 - localvar start:    0x0000000126bd2162
 - compiled code: nmethod    993   62       3       java.net.URI::match (56 bytes)

------------------------ OptoAssembly for Compile_id = 355 -----------------------
#
#  bool ( int, long, half, long, half )
#
#r018 rsi   : parm 0: int
#r016 rdx:rdx   : parm 1: long
#r010 rcx:rcx   : parm 3: long
# -- Old rsp -- Framesize: 64 --
#r583 rsp+60: in_preserve
#r582 rsp+56: return address
#r581 rsp+52: in_preserve
#r580 rsp+48: saved fp register
#r579 rsp+44: pad2, stack alignment
#r578 rsp+40: pad2, stack alignment
#r577 rsp+36: Fixed slot 1
#r576 rsp+32: Fixed slot 0
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N1: #	out( B1 ) &lt;- in( B8 B7 B9 B10 B5 )  Freq: 1

000     B1: #	out( B8 B2 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
000     # stack bang (168 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

00c     movq    R10, RCX	# spill
00f     movl    RCX, RSI	# spill
011     testl   RSI, RSI
013     je,s   B8  P=0.000000 C=13886.000000

015     B2: #	out( B6 B3 ) &lt;- in( B1 )  Freq: 1
015     xorl    R11, R11	# long
018     movl    R8, #1	# long (unsigned 32-bit)
01e     cmpl    RSI, #64
021     jl,s   B6  P=0.199553 C=13886.000000

023     B3: #	out( B9 B4 ) &lt;- in( B2 )  Freq: 0.800446
023     cmpl    RSI, #128
029     jge     B9  P=0.000000 C=11115.000000

02f     B4: #	out( B10 B5 ) &lt;- in( B3 )  Freq: 0.800446
02f     addl    RCX, #-64	# int
032     salq    R8, RCX
035     andq    R8, R10	# long
038     testq   R8, R8
03b     je     B10  P=0.000000 C=11115.000000

041     B5: #	out( N1 ) &lt;- in( B6 B4 )  Freq: 0.999999
041     movl    RAX, #1	# int
046     addq    rsp, 48	# Destroy frame
	popq    rbp
	movq    rscratch1, poll_offset[r15_thread] #polling_page_address
	testl   rax, [rscratch1]	# Safepoint: poll for GC

055     ret

056     B6: #	out( B5 B7 ) &lt;- in( B2 )  Freq: 0.199553
056     salq    R8, RCX
059     andq    R8, RDX	# long
05c     testq   R8, R8
05f     jne,s   B5  P=1.000000 C=2771.000000

061     B7: #	out( N1 ) &lt;- in( B6 )  Freq: 9.51545e-08
061     cmpq    R8, R11	# CmpL3
	movl    RBP, -1
	jl,s    done
	setne   RBP
	movzbl  RBP, RBP
	done:
073     movl    RSI, #-187	# int
        nop 	# 3 bytes pad for loops and calls
07b     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.net.URI::match @ bci:19  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=RBP
        # OopMap {off=128/0x80}
080     ud2	# ShouldNotReachHere

094     B8: #	out( N1 ) &lt;- in( B1 )  Freq: 4.76837e-07
094     movl    RSI, #-187	# int
099     movq    [rsp + #0], RDX	# spill
09d     movq    [rsp + #8], R10	# spill
0a2     movl    [rsp + #16], RCX	# spill
        nop 	# 1 bytes pad for loops and calls
0a7     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.net.URI::match @ bci:1  L[0]=rsp + #16 L[1]=rsp + #0 L[2]=_ L[3]=rsp + #8 L[4]=_ STK[0]=rsp + #16
        # OopMap {off=172/0xac}
0ac     ud2	# ShouldNotReachHere

0c0     B9: #	out( N1 ) &lt;- in( B3 )  Freq: 3.81682e-07
0c0     movl    RSI, #-187	# int
0c5     movq    [rsp + #0], R10	# spill
0c9     movl    [rsp + #8], RCX	# spill
        nop 	# 2 bytes pad for loops and calls
0cf     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.net.URI::match @ bci:32  L[0]=rsp + #8 L[1]=_ L[2]=_ L[3]=rsp + #0 L[4]=_ STK[0]=rsp + #8 STK[1]=#128
        # OopMap {off=212/0xd4}
0d4     ud2	# ShouldNotReachHere

0e8     B10: #	out( N1 ) &lt;- in( B4 )  Freq: 3.81682e-07
0e8     cmpq    R8, R11	# CmpL3
	movl    RBP, -1
	jl,s    done
	setne   RBP
	movzbl  RBP, RBP
	done:
0fa     movl    RSI, #-187	# int
0ff     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.net.URI::match @ bci:45  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=RBP
        # OopMap {off=260/0x104}
104     ud2	# ShouldNotReachHere

--------------------------------------------------------------------------------
</opto_assembly>
<writer thread='40195'/>
    995  398       1       java.lang.module.ModuleDescriptor::packages (5 bytes)
<writer thread='40963'/>
    995  376       3       jdk.internal.module.ModuleInfo$ConstantPool::getClassName (73 bytes)
<writer thread='24067'/>
    995  400       3       jdk.internal.module.IllegalAccessMaps$$Lambda$28/0x000000080007bc40::accept (16 bytes)
<writer thread='38147'/>
    995   62       3       java.net.URI::match (56 bytes)   made not entrant
<writer thread='42499'/>
    995  401       3       jdk.internal.module.IllegalAccessMaps::lambda$generate$0 (10 bytes)
<writer thread='38147'/>
    995  399       4       java.util.HashMap::putVal (300 bytes)
<writer thread='40963'/>
                              @ 2   jdk.internal.module.ModuleInfo$ConstantPool::checkIndex (21 bytes)
<writer thread='24067'/>
                              @ 12   jdk.internal.module.IllegalAccessMaps::lambda$generate$0 (10 bytes)
<writer thread='42499'/>
                              @ 3   java.util.Map::putIfAbsent
<writer thread='40195'/>
    996  360       3       jdk.internal.module.ModuleInfo$ConstantPool::getModuleName (63 bytes)
<writer thread='42499'/>
 (23 bytes)   no static binding
<writer thread='24067'/>
                                @ 3  
<writer thread='40963'/>
                   
<writer thread='24067'/>
 java.util.Map::
<writer thread='40963'/>
           
<writer thread='24067'/>
putIfAbsent
<writer thread='40963'/>
  @ 16  
<writer thread='24067'/>
 (23 bytes)   no static binding
<writer thread='40963'/>
jdk/internal/module/ModuleInfo::invalidModuleDescriptor (not loaded)   not inlineable
<writer thread='40195'/>
                              @ 2   jdk.internal.module.ModuleInfo$ConstantPool::checkIndex (21 bytes)
<writer thread='40963'/>
                              @ 25   java.lang.StringBuilder::&lt;init&gt; (7 bytes)
                                @ 3  
<writer thread='40195'/>
                   
<writer thread='40963'/>
 java.lang.AbstractStringBuilder::
<writer thread='40195'/>
             
<writer thread='40963'/>
&lt;init&gt;
<writer thread='40195'/>
@ 16  jdk/internal/module/ModuleInfo::invalidModuleDescriptor (not loaded)
<writer thread='40963'/>
 (39 bytes)   callee is too large
<writer thread='40195'/>
   not inlineable
<writer thread='40963'/>
                              @ 30   java.lang.StringBuilder::append (8 bytes)
<writer thread='40195'/>
                              @ 25   java.lang.StringBuilder::&lt;init&gt; (7 bytes)
<writer thread='40963'/>
                                @ 2   java.lang.AbstractStringBuilder::append (45 bytes)   callee is too large
<writer thread='40195'/>
                                @ 3   java.lang.AbstractStringBuilder::&lt;init&gt; (39 bytes)   callee is too large
<writer thread='40963'/>
                              @ 34   java.lang.StringBuilder::append (8 bytes)
<writer thread='42499'/>
    998  368       3       java.util.ImmutableCollections$AbstractImmutableSet::&lt;init&gt; (5 bytes)
<writer thread='40195'/>
             
<writer thread='40963'/>
        
<writer thread='24067'/>
    998  359       3       java.util.Collections$UnmodifiableCollection$1::next (10 bytes)
<writer thread='40963'/>
                        @ 2  
<writer thread='40195'/>
        
<writer thread='40963'/>
 java.lang.AbstractStringBuilder::
<writer thread='40195'/>
         @ 30  
<writer thread='42499'/>
             
<writer thread='40963'/>
append (55 bytes)
<writer thread='42499'/>
      
<writer thread='40195'/>
 java.lang.StringBuilder::
<writer thread='42499'/>
       
<writer thread='40963'/>
   callee is too large
<writer thread='40195'/>
append
<writer thread='42499'/>
    @ 1  
<writer thread='24067'/>
             
<writer thread='40195'/>
 (8 bytes)
<writer thread='42499'/>
 java.util.ImmutableCollections$AbstractImmutableCollection::
<writer thread='40195'/>

<writer thread='24067'/>
                 
<writer thread='40963'/>
             
<writer thread='24067'/>
@ 4  
<writer thread='40963'/>
        
<writer thread='42499'/>
&lt;init&gt;
<writer thread='40963'/>
         
<writer thread='24067'/>
 java.util.Iterator::
<writer thread='40963'/>
@ 37   java.lang.StringBuilder::
<writer thread='40195'/>
             
<writer thread='42499'/>
 (5 bytes)
<writer thread='40195'/>
        
<writer thread='40963'/>
toString
<writer thread='40195'/>
         
<writer thread='24067'/>
next
<writer thread='40195'/>
  @ 2  
<writer thread='40963'/>
 (35 bytes)
<writer thread='24067'/>
 (0 bytes)   no static binding
<writer thread='40195'/>
 java.lang.AbstractStringBuilder::
<writer thread='42499'/>
                                @ 1  
<writer thread='40195'/>
append
<writer thread='40963'/>
             
<writer thread='42499'/>
 java.util.AbstractCollection::
<writer thread='40195'/>
 (45 bytes)   callee is too large
<writer thread='40963'/>
                   
<writer thread='42499'/>
&lt;init&gt; (5 bytes)
<writer thread='40963'/>
@ 1   java.lang.AbstractStringBuilder::isLatin1 (19 bytes)
<writer thread='40195'/>
                              @ 34   java.lang.StringBuilder::append (8 bytes)
<writer thread='42499'/>
                                  @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
<writer thread='40195'/>
                                @ 2   java.lang.AbstractStringBuilder::append (55 bytes)   callee is too large
                              @ 37   java.lang.StringBuilder::toString (35 bytes)
                                @ 1   java.lang.AbstractStringBuilder::isLatin1 (19 bytes)
<writer thread='40963'/>
                                @ 16   java.lang.StringLatin1::newString (17 bytes)
                                  @ 9   java.util.Arrays::copyOfRange (64 bytes)   callee is too large
                                  @ 13   java.lang.String::
<writer thread='24067'/>
    999  372       3       java.lang.module.ModuleDescriptor$Exports::&lt;init&gt; (26 bytes)
<writer thread='40963'/>
&lt;init&gt; (15 bytes)
<writer thread='40195'/>
                                @ 16   java.lang.StringLatin1::
<writer thread='40963'/>
                              
<writer thread='40195'/>
newString
<writer thread='40963'/>
    
<writer thread='24067'/>
                     
<writer thread='40963'/>
  
<writer thread='40195'/>
 (17 bytes)
<writer thread='24067'/>
     
<writer thread='40963'/>
@ 1  
<writer thread='24067'/>
    @ 1  
<writer thread='40195'/>

<writer thread='24067'/>
 java.lang.Object::
<writer thread='40963'/>
 java.lang.Object::
<writer thread='24067'/>
&lt;init&gt; (1 bytes)
<writer thread='40963'/>
&lt;init&gt; (1 bytes)
<writer thread='40195'/>
                                  @ 9   java.util.Arrays::copyOfRange (64 bytes)   callee is too large
<writer thread='42499'/>
   1000  373       3       java.lang.module.ModuleDescriptor$Builder::exports (92 bytes)
<writer thread='24067'/>
                              
<writer thread='40195'/>
                                  @ 13   java.lang.String::
<writer thread='24067'/>
@ 6   java.util.Set::
<writer thread='40195'/>
&lt;init&gt;
<writer thread='24067'/>
copyOf (27 bytes)
<writer thread='40195'/>
 (15 bytes)
                                    @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
<writer thread='24067'/>
                                @ 17   java.util.HashSet::&lt;init&gt; (40 bytes)   callee is too large
<writer thread='40963'/>
                                @ 31   java.lang.StringUTF16::newString (50 bytes)   callee is too large
<writer thread='24067'/>
                                @ 20   java.util.HashSet::toArray (18 bytes)
<writer thread='40963'/>
                     
<writer thread='42499'/>
             
<writer thread='40963'/>
         @ 40  
<writer thread='42499'/>
        
<writer thread='40963'/>
jdk/internal/module/ModuleInfo::
<writer thread='42499'/>
         
<writer thread='40963'/>
invalidModuleDescriptor (not loaded)   not inlineable
<writer thread='42499'/>
@ 13  
<writer thread='40195'/>
             
<writer thread='42499'/>
java/lang/IllegalStateException::
<writer thread='40195'/>
        
<writer thread='24067'/>
             
<writer thread='40195'/>
     
<writer thread='42499'/>
&lt;init&gt;
<writer thread='40195'/>
      
<writer thread='24067'/>
        
<writer thread='40195'/>
@ 31  
<writer thread='24067'/>
           
<writer thread='40195'/>
 java.lang.StringUTF16::
<writer thread='42499'/>
 (not loaded)
<writer thread='24067'/>
  
<writer thread='40963'/>
             
<writer thread='42499'/>
   not inlineable
<writer thread='40963'/>
        
<writer thread='24067'/>
@ 8  
<writer thread='40963'/>
         
<writer thread='40195'/>
newString
<writer thread='24067'/>
 java.util.HashMap::
<writer thread='40963'/>
@ 52  
<writer thread='40195'/>
 (50 bytes)   callee is too large
<writer thread='24067'/>
size
<writer thread='42499'/>
             
<writer thread='40195'/>

<writer thread='24067'/>
 (5 bytes)
<writer thread='40963'/>
 jdk.internal.module.ModuleInfo$ConstantPool::
<writer thread='42499'/>
                 @ 18  
<writer thread='40963'/>
getUtf8
<writer thread='42499'/>
 java.lang.module.ModuleDescriptor$Exports::source
<writer thread='40963'/>
 (54 bytes)   callee is too large
<writer thread='42499'/>
 (5 bytes)
<writer thread='40195'/>
                              @ 40  jdk/internal/module/ModuleInfo::invalidModuleDescriptor (not loaded)   not inlineable
<writer thread='40963'/>
                              @ 61   jdk.internal.module.ModuleInfo$ConstantPool::checkUnqualifiedName (131 bytes)   callee is too large
<writer thread='42499'/>
                              @ 27   java.util.Map::
<writer thread='24067'/>
             
<writer thread='42499'/>
containsKey
<writer thread='40963'/>
             
<writer thread='24067'/>
      
<writer thread='42499'/>
 (0 bytes)
<writer thread='40195'/>
             
<writer thread='24067'/>
  
<writer thread='42499'/>
   no static binding
<writer thread='40963'/>
      
<writer thread='40195'/>
      
<writer thread='24067'/>
         
<writer thread='40963'/>
  
<writer thread='40195'/>
           
<writer thread='40963'/>
     
<writer thread='42499'/>

<writer thread='40195'/>
@ 52   jdk.internal.module.ModuleInfo$ConstantPool::getUtf8 (54 bytes)   callee is too large
<writer thread='24067'/>
  
<writer thread='40963'/>
    @ 69  
<writer thread='40195'/>

<writer thread='24067'/>
  @ 14  
<writer thread='40963'/>
 java.lang.String::
<writer thread='24067'/>
 java.util.HashMap::keysToArray
<writer thread='40963'/>
replace
<writer thread='24067'/>
 (81 bytes)   no static binding
<writer thread='40963'/>
 (42 bytes)   callee is too large
<writer thread='42499'/>
                              @ 43   java.lang.StringBuilder::&lt;init&gt; (7 bytes)
<writer thread='24067'/>
                                @ 23  
<writer thread='42499'/>
             
<writer thread='40195'/>
        
<writer thread='24067'/>
 java.util.Set::
<writer thread='40195'/>
     
<writer thread='24067'/>
of (68 bytes)   callee is too large
<writer thread='40195'/>
        
<writer thread='24067'/>

<writer thread='40195'/>
         
<writer thread='42499'/>
                 
<writer thread='40195'/>
@ 59  
<writer thread='42499'/>
  @ 3  
<writer thread='40195'/>
 jdk.internal.module.ModuleInfo$ConstantPool::
<writer thread='42499'/>
 java.lang.AbstractStringBuilder::&lt;init&gt;
<writer thread='40195'/>
decodeModuleName
<writer thread='42499'/>
 (39 bytes)   callee is too large
<writer thread='40195'/>
 (142 bytes)   callee is too large
<writer thread='24067'/>
                              @ 19   java.util.Set::copyOf (27 bytes)
<writer thread='42499'/>
                              @ 48   java.lang.StringBuilder::append (8 bytes)
<writer thread='24067'/>
                                @ 17   java.util.HashSet::&lt;init&gt; (40 bytes)   callee is too large
<writer thread='37379'/>

============================= C2-compiled nmethod ==============================
<opto_assembly compile_id='380'>
----------------------- MetaData before Compile_id = 380 ------------------------
{method}
 - this oop:          0x0000000126b1e1d0
 - method holder:     &apos;java/lang/StringLatin1&apos;
 - constants:         0x0000000126b1b920 constant pool [372] {0x0000000126b1b920} for &apos;java/lang/StringLatin1&apos; cache=0x0000000126b202b0
 - access:            0xc1000009  public static 
 - name:              &apos;lastIndexOf&apos;
 - signature:         &apos;([BII)I&apos;
 - max stack:         4
 - max locals:        4
 - size of params:    3
 - method size:       13
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x000000010c0a1de0
 - adapters:          AHE@0x00007f99308e17f0: 0xbaa00000 i2c: 0x000000010c0e8d60 c2i: 0x000000010c0e8e49 c2iUV: 0x000000010c0e8e10 c2iNCI: 0x000000010c0e8e86
 - compiled entry     0x000000010c7f1c00
 - code size:         40
 - code start:        0x0000000126b1e168
 - code end (excl):   0x0000000126b1e190
 - method data:       0x0000000126e501a0
 - checked ex length: 0
 - linenumber start:  0x0000000126b1e190
 - localvar length:   4
 - localvar start:    0x0000000126b1e19e
 - compiled code: nmethod   1002   94       3       java.lang.StringLatin1::lastIndexOf (40 bytes)

------------------------ OptoAssembly for Compile_id = 380 -----------------------
#
#  int ( byte[int:&gt;=0]:exact *, int, int )
#
#r018 rsi:rsi   : parm 0: byte[int:&gt;=0]:exact *
#r016 rdx   : parm 1: int
#r010 rcx   : parm 2: int
# -- Old rsp -- Framesize: 48 --
#r583 rsp+44: in_preserve
#r582 rsp+40: return address
#r581 rsp+36: in_preserve
#r580 rsp+32: saved fp register
#r579 rsp+28: pad2, stack alignment
#r578 rsp+24: pad2, stack alignment
#r577 rsp+20: Fixed slot 1
#r576 rsp+16: Fixed slot 0
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N1: #	out( B1 ) &lt;- in( B36 B37 B35 B28 )  Freq: 1

000     B1: #	out( B36 B2 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
000     # stack bang (240 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

00c     movl    RBP, RDX	# spill
00e     shrl    RBP, #8
011     testl   RBP, RBP
013     jne     B36  P=0.000000 C=20512.000000

019     B2: #	out( B37 B3 ) &lt;- in( B1 )  Freq: 1
019     movl    R11, [RSI + #12 (8-bit)]	# range
01d     NullCheck RSI

01d     B3: #	out( B26 B4 ) &lt;- in( B2 )  Freq: 0.999999
01d     movl    RAX, R11	# spill
020     decl    RAX	# int
022     cmpl    RCX, RAX
024     cmovll RAX, RCX	# signed, int
027     testl   RAX, RAX
029     jl     B26  P=0.000704 C=38331.000000

02f     B4: #	out( B35 B5 ) &lt;- in( B3 )  Freq: 0.999294
02f     testl   R11, R11	# unsigned
032     jbe,u   B35  P=0.000001 C=-1.000000

038     B5: #	out( B35 B6 ) &lt;- in( B4 )  Freq: 0.999293
038     cmpl    RAX, R11	# unsigned
03b     jnb,u   B35  P=0.000001 C=-1.000000

041     B6: #	out( B7 ) &lt;- in( B5 )  Freq: 0.999292
041     movl    R10, RAX	# spill
044     decl    R10	# int
047     movsbl  R9, RDX	# i2b

04b     B7: #	out( B28 B8 ) &lt;- in( B6 B8 ) Loop( B7-B8 inner pre of N206) Freq: 1.93391
04b     movsbl  R11, [RSI + #16 + RAX]	# byte
051     cmpl    R11, R9
054     je     B28  P=0.033443 C=38304.000000

05a     B8: #	out( B7 B9 ) &lt;- in( B7 )  Freq: 1.86923
05a     decl    RAX	# int
05c     cmpl    RAX, R10
05f     jg,s   B7	# loop end  P=0.500000 C=37023.000000

061     B9: #	out( B22 B10 ) &lt;- in( B8 )  Freq: 0.934616
061     cmpl    RAX, #6
064     jle     B22  P=0.000001 C=-1.000000

06a     B10: #	out( B11 ) &lt;- in( B9 )  Freq: 0.934615
06a     # castII of RAX
06a     movl    R10, #8000	# int

070     B11: #	out( B12 ) &lt;- in( B10 B21 ) Loop( B11-B21 ) Freq: 0.936719
070     movl    R11, RAX	# spill
073     addl    R11, #-6	# int
077     cmpl    R11, R10
07a     cmovlgt R11, R10	# min
07e     movl    RCX, RAX	# spill
080     subl    RCX, R11	# int

083     B12: #	out( B28 B13 ) &lt;- in( B11 B20 ) Loop( B12-B20 inner main of N124 strip mined) Freq: 3.92304
083     movslq  R8, RAX	# i2l
086     movsbl  R11, [RSI + #16 + R8]	# byte
08c     cmpl    R11, R9
08f     je     B28  P=0.033443 C=38304.000000

095     B13: #	out( B27 B14 ) &lt;- in( B12 )  Freq: 3.79184
095     movsbl  R11, [RSI + #15 + R8]	# byte
09b     cmpl    R11, R9
09e     je     B27  P=0.033443 C=38304.000000

0a4     B14: #	out( B29 B15 ) &lt;- in( B13 )  Freq: 3.66503
0a4     movsbl  R11, [RSI + #14 + R8]	# byte
0aa     cmpl    R11, R9
0ad     je     B29  P=0.033443 C=38304.000000

0b3     B15: #	out( B30 B16 ) &lt;- in( B14 )  Freq: 3.54246
0b3     movsbl  R11, [RSI + #13 + R8]	# byte
0b9     cmpl    R11, R9
0bc     je     B30  P=0.033443 C=38304.000000

0c2     B16: #	out( B31 B17 ) &lt;- in( B15 )  Freq: 3.42399
0c2     movsbl  R11, [RSI + #12 + R8]	# byte
0c8     cmpl    R11, R9
0cb     je,s   B31  P=0.033443 C=38304.000000

0cd     B17: #	out( B32 B18 ) &lt;- in( B16 )  Freq: 3.30949
0cd     movsbl  R11, [RSI + #11 + R8]	# byte
0d3     cmpl    R11, R9
0d6     je,s   B32  P=0.033443 C=38304.000000

0d8     B18: #	out( B33 B19 ) &lt;- in( B17 )  Freq: 3.19881
0d8     movsbl  R11, [RSI + #10 + R8]	# byte
0de     cmpl    R11, R9
0e1     je,s   B33  P=0.033443 C=38304.000000

0e3     B19: #	out( B34 B20 ) &lt;- in( B18 )  Freq: 3.09183
0e3     movsbl  R11, [RSI + #9 + R8]	# byte
0e9     cmpl    R11, R9
0ec     je,s   B34  P=0.033443 C=38304.000000

0ee     B20: #	out( B12 B21 ) &lt;- in( B19 )  Freq: 2.98843
0ee     addl    RAX, #-8	# int
0f1     cmpl    RAX, RCX
0f3     jg,s   B12	# loop end  P=0.999296 C=37023.000000

0f5     B21: #	out( B11 B22 ) &lt;- in( B20 )  Freq: 0.00210507
0f5     # TLS is in R15
0f5     movq    R11, [R15 + #296 (32-bit)]	# ptr
0fc     testl   rax, [R11]	# Safepoint: poll for GC        # java.lang.StringLatin1::lastIndexOf @ bci:35  L[0]=RSI L[1]=RDX L[2]=_ L[3]=RAX
        # OopMap {rsi=Oop off=252/0xfc}
0ff     cmpl    RAX, #6
102     jg     B11  P=0.999296 C=37023.000000

108     B22: #	out( B26 B23 ) &lt;- in( B9 B21 )  Freq: 2.42986e-06
108     cmpl    RAX, #-1
10b     jle,s   B26  P=0.500000 C=-1.000000

10d     B23: #	out( B24 ) &lt;- in( B22 )  Freq: 1.21493e-06
10d     # castII of RAX
        nop 	# 3 bytes pad for loops and calls

110     B24: #	out( B28 B25 ) &lt;- in( B23 B25 ) Loop( B24-B25 inner post of N206) Freq: 2.35122e-06
110     movsbl  R10, [RSI + #16 + RAX]	# byte
116     cmpl    R10, R9
119     je,s   B28  P=0.033443 C=38304.000000

11b     B25: #	out( B24 B26 ) &lt;- in( B24 )  Freq: 2.27259e-06
11b     decl    RAX	# int
11d     cmpl    RAX, #-1
120     jg,s   B24	# loop end  P=0.500000 C=37023.000000

122     B26: #	out( B28 ) &lt;- in( B22 B3 B25 )  Freq: 0.000706741
122     movl    RAX, #-1	# int
127     jmp,s   B28

129     B27: #	out( B28 ) &lt;- in( B13 )  Freq: 0.126811
129     decl    RAX	# int

12b     B28: #	out( N1 ) &lt;- in( B24 B7 B12 B31 B29 B33 B27 B32 B30 B34 B26 )  Freq: 0.999996
12b     addq    rsp, 32	# Destroy frame
	popq    rbp
	movq    rscratch1, poll_offset[r15_thread] #polling_page_address
	testl   rax, [rscratch1]	# Safepoint: poll for GC

13a     ret

13b     B29: #	out( B28 ) &lt;- in( B14 )  Freq: 0.12257
13b     addl    RAX, #-2	# int
13e     jmp,s   B28

140     B30: #	out( B28 ) &lt;- in( B15 )  Freq: 0.118471
140     addl    RAX, #-3	# int
143     jmp,s   B28

145     B31: #	out( B28 ) &lt;- in( B16 )  Freq: 0.114509
145     addl    RAX, #-4	# int
148     jmp,s   B28

14a     B32: #	out( B28 ) &lt;- in( B17 )  Freq: 0.110679
14a     addl    RAX, #-5	# int
14d     jmp,s   B28

14f     B33: #	out( B28 ) &lt;- in( B18 )  Freq: 0.106978
14f     addl    RAX, #-6	# int
152     jmp,s   B28

154     B34: #	out( B28 ) &lt;- in( B19 )  Freq: 0.1034
154     addl    RAX, #-7	# int
157     jmp,s   B28

159     B35: #	out( N1 ) &lt;- in( B5 B4 )  Freq: 2.01186e-06
159     movq    RBP, RSI	# spill
15c     movl    [rsp + #4], RAX	# spill
160     movl    [rsp + #8], RDX	# spill
164     movl    RSI, #-138	# int
        nop 	# 2 bytes pad for loops and calls
16b     call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.StringLatin1::lastIndexOf @ bci:19  L[0]=RBP L[1]=rsp + #8 L[2]=_ L[3]=rsp + #4 STK[0]=rsp + #4
        # OopMap {rbp=Oop off=368/0x170}
170     ud2	# ShouldNotReachHere

184     B36: #	out( N1 ) &lt;- in( B1 )  Freq: 5e-07
184     movq    [rsp + #0], RSI	# spill
188     movl    [rsp + #8], RDX	# spill
18c     movl    [rsp + #12], RCX	# spill
190     movl    RSI, #-187	# int
        nop 	# 2 bytes pad for loops and calls
197     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.StringLatin1::canEncode @ bci:4  L[0]=_ STK[0]=RBP
        # java.lang.StringLatin1::lastIndexOf @ bci:1  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=rsp + #12 L[3]=_
        # OopMap {[0]=Oop off=412/0x19c}
19c     ud2	# ShouldNotReachHere

1b0     B37: #	out( N1 ) &lt;- in( B2 )  Freq: 1.01328e-06
1b0     movl    RSI, #-10	# int
        nop 	# 2 bytes pad for loops and calls
1b7     call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.StringLatin1::lastIndexOf @ bci:11  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_ STK[1]=#NULL
        # OopMap {off=444/0x1bc}
1bc     ud2	# ShouldNotReachHere

--------------------------------------------------------------------------------
</opto_assembly>
<writer thread='24067'/>
             
<writer thread='42499'/>
             
<writer thread='24067'/>
                 
<writer thread='42499'/>
                 
<writer thread='24067'/>
  @ 20  
<writer thread='42499'/>
  @ 2  
<writer thread='24067'/>
 java.util.HashSet::
<writer thread='42499'/>
 java.lang.AbstractStringBuilder::
<writer thread='24067'/>
toArray
<writer thread='42499'/>
append
<writer thread='24067'/>
 (18 bytes)
<writer thread='42499'/>
 (45 bytes)   callee is too large
<writer thread='40195'/>
   1010  366       3       java.nio.ByteBuffer::position (8 bytes)
<writer thread='42499'/>
             
<writer thread='24067'/>
             
<writer thread='42499'/>
                 @ 52  
<writer thread='24067'/>
        
<writer thread='42499'/>
 java.lang.StringBuilder::
<writer thread='24067'/>
         
<writer thread='42499'/>
append
<writer thread='24067'/>
    @ 8  
<writer thread='42499'/>
 (8 bytes)
<writer thread='37379'/>
   1010   94       3       java.lang.StringLatin1::lastIndexOf (40 bytes)   made not entrant
<writer thread='42499'/>

<writer thread='37379'/>
                              @ 1   java.lang.StringLatin1::canEncode (13 bytes)   inline (hot)
                              @ 14   java.lang.Math::min (11 bytes)   (intrinsic)
<writer thread='24067'/>
 java.util.HashMap::
<writer thread='40963'/>
   1010  364       3       java.lang.Character::isJavaIdentifierStart (9 bytes)
<writer thread='24067'/>
size
<writer thread='40195'/>
             
<writer thread='24067'/>
 (5 bytes)
<writer thread='42499'/>
        
<writer thread='40195'/>
        
<writer thread='42499'/>
     
<writer thread='24067'/>

<writer thread='42499'/>
                   
<writer thread='40195'/>
         
<writer thread='42499'/>
@ 2  
<writer thread='40195'/>
@ 2  
<writer thread='42499'/>
 java.lang.AbstractStringBuilder::
<writer thread='40195'/>
 java.nio.Buffer::
<writer thread='42499'/>
append
<writer thread='40195'/>
position
<writer thread='37379'/>
   1010  304       4       java.lang.String::equals (50 bytes)
<writer thread='42499'/>
 (45 bytes)   callee is too large
<writer thread='40195'/>
 (55 bytes)
<writer thread='40963'/>
             
<writer thread='40195'/>
   callee is too large
<writer thread='42499'/>

<writer thread='40195'/>

<writer thread='40963'/>
                 @ 1   java.lang.CharacterData::of (120 bytes)   callee is too large
<writer thread='24067'/>
                                  @ 14   java.util.HashMap::keysToArray
<writer thread='42499'/>
             
<writer thread='24067'/>
 (81 bytes)
<writer thread='40963'/>
        
<writer thread='42499'/>
      
<writer thread='40963'/>
           
<writer thread='42499'/>
           
<writer thread='40963'/>
       
<writer thread='42499'/>
@ 57  
<writer thread='24067'/>
   no static binding
<writer thread='40963'/>
    @ 5  
<writer thread='42499'/>
 java.lang.StringBuilder::
<writer thread='40963'/>
 java.lang.CharacterData::
<writer thread='42499'/>
append
<writer thread='40963'/>
isJavaIdentifierStart
<writer thread='42499'/>
 (8 bytes)
<writer thread='40963'/>
 (0 bytes)   no static binding
<writer thread='24067'/>
                                @ 23  
<writer thread='42499'/>
                                
<writer thread='24067'/>
 java.util.Set::
<writer thread='42499'/>
@ 2   java.lang.AbstractStringBuilder::
<writer thread='24067'/>
of
<writer thread='42499'/>
append (45 bytes)   callee is too large
<writer thread='24067'/>
 (68 bytes)   callee is too large
<writer thread='42499'/>
                              @ 60   java.lang.StringBuilder::toString (35 bytes)
                                @ 1   java.lang.AbstractStringBuilder::isLatin1 (19 bytes)
<writer thread='40195'/>
   1011  365       3       java.lang.CharacterDataLatin1::isJavaIdentifierStart (23 bytes)
<writer thread='42499'/>
                                @ 16   java.lang.StringLatin1::newString (17 bytes)
<writer thread='40195'/>
                              @ 2   java.lang.CharacterDataLatin1::getProperties (11 bytes)
<writer thread='42499'/>
                                  @ 9   java.util.Arrays::copyOfRange (64 bytes)   callee is too large
<writer thread='40963'/>
   1012  379       3       java.util.ArrayList$Itr::hasNext (20 bytes)
<writer thread='42499'/>
                                  @ 13   java.lang.String::&lt;init&gt; (15 bytes)
                                    @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
                                @ 31   java.lang.StringUTF16::newString (50 bytes)   callee is too large
                              @ 63  java/lang/IllegalStateException::&lt;init&gt; (not loaded)   not inlineable
                              @ 73   java.util.Map::put (0 bytes)   no static binding
                              @ 84   java.util.Set::add (0 bytes)   no static binding
<writer thread='40963'/>
   1013  362       3       java.net.URI$Parser::at (23 bytes)
<writer thread='40195'/>
   1013  346       3       sun.nio.fs.UnixPath::toUnixPath (32 bytes)
<writer thread='40963'/>
                              @ 10   java.lang.String::charAt (25 bytes)
<writer thread='40195'/>
                              @ 8   java.lang.NullPointerException::&lt;init&gt; (5 bytes)   don&apos;t inline Throwable constructors
<writer thread='40963'/>
                                @ 1   java.lang.String::isLatin1 (19 bytes)
<writer thread='40195'/>
                              @ 23  java/nio/file/ProviderMismatchException::&lt;init&gt; (not loaded)   not inlineable
<writer thread='40963'/>
                                @ 12   java.lang.StringLatin1::charAt (28 bytes)
                                  @ 15  java/lang/StringIndexOutOfBoundsException::&lt;init&gt; (not loaded)   not inlineable
                                @ 21   java.lang.StringUTF16::charAt (11 bytes)
                                  @ 2   java.lang.StringUTF16::checkIndex (9 bytes)
                                    @ 2   java.lang.StringUTF16::length (5 bytes)
                                    @ 5   java.lang.String::checkIndex (48 bytes)   callee is too large
                                  @ 7   java.lang.StringUTF16::getChar (60 bytes)   intrinsic
<writer thread='40195'/>
   1016  369       3       java.util.Arrays::copyOf (19 bytes)
                              @ 11   java.lang.Math::min (11 bytes)
                              @ 14   java.lang.System::arraycopy (0 bytes)   intrinsic
<writer thread='24067'/>
   1017  341       3       java.nio.Buffer::limit (74 bytes)
                              @ 28   java.nio.Buffer::createLimitException (104 bytes)   callee is too large
<writer thread='40195'/>
   1018  356       3       sun.nio.fs.UnixPath::getFileSystem (5 bytes)
<writer thread='37379'/>

============================= C2-compiled nmethod ==============================
<opto_assembly compile_id='304'>
----------------------- MetaData before Compile_id = 304 ------------------------
{method}
 - this oop:          0x00000001269a0b38
 - method holder:     &apos;java/lang/String&apos;
 - constants:         0x000000012699b360 constant pool [1059]/operands[28] {0x000000012699b360} for &apos;java/lang/String&apos; cache=0x0000000126aba220
 - access:            0x81000001  public 
 - name:              &apos;equals&apos;
 - signature:         &apos;(Ljava/lang/Object;)Z&apos;
 - max stack:         3
 - max locals:        3
 - size of params:    2
 - method size:       13
 - highest level:     3
 - vtable index:      1
 - i2i entry:         0x000000010c0a1de0
 - adapters:          AHE@0x00007f99308e16b0: 0xbb000000 i2c: 0x000000010c0e9b60 c2i: 0x000000010c0e9c47 c2iUV: 0x000000010c0e9c0e c2iNCI: 0x000000010c0e9c84
 - compiled entry     0x000000010c7def40
 - code size:         50
 - code start:        0x00000001269a0ad0
 - code end (excl):   0x00000001269a0b02
 - method data:       0x0000000126dbc2d8
 - checked ex length: 0
 - linenumber start:  0x00000001269a0b02
 - localvar length:   3
 - localvar start:    0x00000001269a0b12
 - compiled code: nmethod   1018   45       3       java.lang.String::equals (50 bytes)

------------------------ OptoAssembly for Compile_id = 304 -----------------------
#
#  bool ( java/lang/String:NotNull:exact *, java/lang/Object * )
#
#r018 rsi:rsi   : parm 0: java/lang/String:NotNull:exact *
#r016 rdx:rdx   : parm 1: java/lang/Object *
# -- Old rsp -- Framesize: 64 --
#r583 rsp+60: in_preserve
#r582 rsp+56: return address
#r581 rsp+52: in_preserve
#r580 rsp+48: saved fp register
#r579 rsp+44: pad2, stack alignment
#r578 rsp+40: pad2, stack alignment
#r577 rsp+36: Fixed slot 1
#r576 rsp+32: Fixed slot 0
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N100: #	out( B1 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B8 B2 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (136 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

02c     cmpq    RSI, RDX	# ptr
02f     je,u   B8  P=0.034001 C=15617.000000

035     B2: #	out( B7 B3 ) &lt;- in( B1 )  Freq: 0.965999
035     xorl    RAX, RAX	# int
037     testq   RDX, RDX	# ptr
03a     je     B7  P=0.001000 C=-1.000000

040     B3: #	out( B10 B4 ) &lt;- in( B2 )  Freq: 0.965033
040     movl    R11, [RDX + #8 (8-bit)]	# compressed klass ptr
044     cmpl    R11, narrowklass: precise klass java/lang/String: 0x000000010bf8aca0:Constant:exact *	# compressed klass ptr
04b     jne,u   B10  P=0.000000 C=-1.000000

051     B4: #	out( B9 B5 ) &lt;- in( B3 )  Freq: 0.965033
051     # checkcastPP of RDX
051     movsbl  R10, [RSI + #20 (8-bit)]	# byte ! Field: java/lang/String.coder (constant)
056     movsbl  RBP, [RDX + #20 (8-bit)]	# byte ! Field: java/lang/String.coder (constant)
05a     cmpl    R10, RBP
05d     jne     B9  P=0.000000 C=13329.000000

063     B5: #	out( B7 B6 ) &lt;- in( B4 )  Freq: 0.965032
063     movl    R10, [RDX + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value (constant)
067     movl    R8, [RSI + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value (constant)
06b     movl    R11, [R12 + R10 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
070     movl    RCX, [R12 + R8 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
075     cmpl    RCX, R11
078     jne     B7  P=0.001000 C=-1.000000

07e     B6: #	out( B7 ) &lt;- in( B5 )  Freq: 0.964067
07e     decode_heap_oop_not_null R11,R10
082     leaq    RSI, [R12 + R10 &lt;&lt; 3 + #16] (compressed oop addressing)	# ptr compressedoopoff32
087     decode_heap_oop_not_null R10,R8
08b     leaq    RDI, [R12 + R8 &lt;&lt; 3 + #16] (compressed oop addressing)	# ptr compressedoopoff32
090     String Equals RDI,RSI,RCX -&gt; RAX    // KILL XMM1, XMM0, RBX

14c     B7: #	out( N100 ) &lt;- in( B8 B6 B5 B2 )  Freq: 1
14c     vzeroupper
	addq    rsp, 48	# Destroy frame
	popq    rbp
	movq    rscratch1, poll_offset[r15_thread] #polling_page_address
	testl   rax, [rscratch1]	# Safepoint: poll for GC

15e     ret

15f     B8: #	out( B7 ) &lt;- in( B1 )  Freq: 0.0340014
15f     movl    RAX, #1	# int
164     jmp,s   B7

166     B9: #	out( N100 ) &lt;- in( B4 )  Freq: 4.82516e-07
166     movq    [rsp + #0], RSI	# spill
16a     movq    [rsp + #8], RDX	# spill
16f     movl    [rsp + #16], R10	# spill
174     movl    RSI, #-187	# int
        nop 	# 3 bytes pad for loops and calls
17c     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.String::equals @ bci:33  L[0]=rsp + #0 L[1]=_ L[2]=rsp + #8 STK[0]=rsp + #16 STK[1]=RBP
        # OopMap {[0]=Oop [8]=Oop off=388/0x184}
184     ud2	# ShouldNotReachHere

198     B10: #	out( N100 ) &lt;- in( B3 )  Freq: 1e-35
198     movq    RBP, RSI	# spill
19b     movq    [rsp + #8], RDX	# spill
1a0     movl    RSI, #-34	# int
        nop 	# 3 bytes pad for loops and calls
1a8     call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.String::equals @ bci:8  L[0]=RBP L[1]=rsp + #8 L[2]=_ STK[0]=rsp + #8
        # OopMap {rbp=Oop [8]=Oop off=432/0x1b0}
1b0     ud2	# ShouldNotReachHere

--------------------------------------------------------------------------------
</opto_assembly>
<writer thread='40195'/>
                     
<writer thread='24067'/>
   1021  377       3       java.util.ArrayList::add (25 bytes)
<writer thread='40195'/>
         @ 1   sun.nio.fs.UnixPath::getFileSystem (5 bytes)
<writer thread='37379'/>
   1021   45       3       java.lang.String::equals (50 bytes)   made not entrant
                              @ 44   java.lang.StringLatin1::equals (36 bytes)   (intrinsic)
<writer thread='42499'/>
   1021  378       3       java.util.ArrayList::add (23 bytes)
<writer thread='37379'/>
   1021  349       4       java.lang.StringBuilder::append (8 bytes)
<writer thread='24067'/>
                              @ 20   java.util.ArrayList::add (23 bytes)
<writer thread='40963'/>
   1022  352       3       sun.nio.fs.UnixPath::isEmpty (14 bytes)
<writer thread='24067'/>
             
<writer thread='42499'/>
             
<writer thread='24067'/>
        
<writer thread='42499'/>
        
<writer thread='24067'/>
         
<writer thread='42499'/>
         
<writer thread='24067'/>
  @ 7  
<writer thread='42499'/>
@ 7  
<writer thread='24067'/>
 java.util.ArrayList::
<writer thread='42499'/>
 java.util.ArrayList::grow
<writer thread='24067'/>
grow
<writer thread='42499'/>
 (11 bytes)
<writer thread='24067'/>
 (11 bytes)
<writer thread='40195'/>
   1022  361       3       jdk.internal.misc.Unsafe::checkSize (32 bytes)
<writer thread='42499'/>
                                
<writer thread='24067'/>
                                
<writer thread='42499'/>
@ 7  
<writer thread='24067'/>
  @ 7  
<writer thread='42499'/>
 java.util.ArrayList::
<writer thread='24067'/>
 java.util.ArrayList::
<writer thread='42499'/>
grow
<writer thread='24067'/>
grow
<writer thread='42499'/>
 (60 bytes)   callee is too large
<writer thread='24067'/>
 (60 bytes)   callee is too large
<writer thread='40195'/>
                              @ 27   jdk.internal.misc.Unsafe::invalidInput (8 bytes)
                                @ 4   java.lang.IllegalArgumentException::&lt;init&gt; (5 bytes)   don&apos;t inline Throwable constructors
<writer thread='40963'/>
   1023  357       3       java.util.HashMap::isEmpty (13 bytes)
<writer thread='40195'/>
   1024  370       1       java.nio.file.Files$AcceptAllFilter::accept (2 bytes)
<writer thread='40963'/>
   1024  371       1       sun.nio.fs.UnixPath::asByteArray (5 bytes)
<writer thread='40195'/>
   1024  375       1       java.lang.module.ModuleDescriptor$Provides::providers (5 bytes)
<writer thread='42499'/>
   1025  384       1       java.nio.charset.CharsetEncoder::maxBytesPerChar (5 bytes)
<writer thread='40963'/>
   1025  385       1       java.nio.DirectByteBuffer::address (5 bytes)
<writer thread='24067'/>
   1025  386       1       java.lang.AbstractStringBuilder::length (5 bytes)
<writer thread='40195'/>
   1025  387       1       java.nio.HeapByteBuffer::isReadOnly (2 bytes)
<writer thread='42499'/>
   1025  388       1       java.nio.DirectByteBuffer::isDirect (2 bytes)
<writer thread='40963'/>
   1025  389       1       java.util.Collections$EmptyIterator::hasNext (2 bytes)
<writer thread='24067'/>
   1025  390       1       jdk.internal.module.ModuleInfo$Attributes::descriptor (5 bytes)
<writer thread='40195'/>
   1026  391       1       jdk.internal.module.ModuleInfo$Attributes::target (5 bytes)
<writer thread='42499'/>
   1026  392       1       jdk.internal.module.ModuleInfo$Attributes::recordedHashes (5 bytes)
<writer thread='40963'/>
   1026  393       1       jdk.internal.module.ModuleInfo$Attributes::moduleResolution (5 bytes)
<writer thread='24067'/>
   1026  396       1       java.lang.invoke.MethodHandles$Lookup::lookupClass (5 bytes)
<writer thread='24323'/>

============================= C2-compiled nmethod ==============================
<opto_assembly compile_id='381'>
----------------------- MetaData before Compile_id = 381 ------------------------
{method}
 - this oop:          0x0000000126b2dab8
 - method holder:     &apos;java/util/HashMap$HashIterator&apos;
 - constants:         0x0000000126b2d430 constant pool [90] {0x0000000126b2d430} for &apos;java/util/HashMap$HashIterator&apos; cache=0x0000000126b2dc70
 - access:            0xc1000010  final 
 - name:              &apos;nextNode&apos;
 - signature:         &apos;()Ljava/util/HashMap$Node;&apos;
 - max stack:         7
 - max locals:        3
 - size of params:    1
 - method size:       13
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x000000010c0a1de0
 - adapters:          AHE@0x00007f99308e1660: 0xb0000000 i2c: 0x000000010c0e9ee0 c2i: 0x000000010c0e9fc3 c2iUV: 0x000000010c0e9f8a c2iNCI: 0x000000010c0ea000
 - compiled entry     0x000000010c8041e0
 - code size:         100
 - code start:        0x0000000126b2da20
 - code end (excl):   0x0000000126b2da84
 - method data:       0x0000000126e92910
 - checked ex length: 0
 - linenumber start:  0x0000000126b2da84
 - localvar length:   3
 - localvar start:    0x0000000126b2da90
 - compiled code: nmethod   1030  133       3       java.util.HashMap$HashIterator::nextNode (100 bytes)

------------------------ OptoAssembly for Compile_id = 381 -----------------------
#
#  java/util/HashMap$Node * ( java/util/HashMap$HashIterator:NotNull * )
#
#r018 rsi:rsi   : parm 0: java/util/HashMap$HashIterator:NotNull *
# -- Old rsp -- Framesize: 80 --
#r583 rsp+76: in_preserve
#r582 rsp+72: return address
#r581 rsp+68: in_preserve
#r580 rsp+64: saved fp register
#r579 rsp+60: pad2, stack alignment
#r578 rsp+56: pad2, stack alignment
#r577 rsp+52: Fixed slot 1
#r576 rsp+48: Fixed slot 0
#r595 rsp+44: spill
#r594 rsp+40: spill
#r593 rsp+36: spill
#r592 rsp+32: spill
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N700: #	out( B1 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B51 B2 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (168 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #64	# Create frame

02c     movq    R13, RSI	# spill
02f     movl    R11, [RSI + #28 (8-bit)]	# compressed ptr ! Field: java/util/HashMap$HashIterator.this$0
033     movl    R10, [R12 + R11 &lt;&lt; 3 + #24] (compressed oop addressing)	# int ! Field: java/util/HashMap.modCount
038     NullCheck R11

038     B2: #	out( B49 B3 ) &lt;- in( B1 )  Freq: 0.999999
038     movl    R8, [RSI + #20 (8-bit)]	# compressed ptr ! Field: java/util/HashMap$HashIterator.next
03c     movl    [rsp + #16], R8	# spill
041     movl    RBP, [RSI + #12 (8-bit)]	# int ! Field: java/util/HashMap$HashIterator.expectedModCount
044     cmpl    R10, RBP
047     jne     B49  P=0.000000 C=10535.000000

04d     B3: #	out( B50 B4 ) &lt;- in( B2 )  Freq: 0.999999
04d     testl   R8, R8	# compressed ptr
050     je     B50  P=0.000000 C=10535.000000

056     B4: #	out( B34 B5 ) &lt;- in( B3 )  Freq: 0.999998
056     # TLS is in R15
056     cmpb    [R15 + #48 (8-bit)], #0
05b     jne     B34  P=0.001000 C=-1.000000

061     B5: #	out( B7 B6 ) &lt;- in( B48 B36 B34 B4 )  Freq: 0.999998
061     movl    R10, [rsp + #16]	# spill
066     movl    [R13 + #24 (8-bit)], R10	# compressed ptr ! Field: java/util/HashMap$HashIterator.current
06a     decode_heap_oop_not_null R10,R10
06e     movq    [rsp + #0], R10	# spill
072     movq    R10, R13	# ptr -&gt; long
075     movq    R11, [rsp + #0]	# spill
079     movq    R11, R11	# ptr -&gt; long
079     xorq    R11, R10	# long
07c     shrq    R11, #20
080     testq   R11, R11
083     je,s   B7  P=0.001000 C=-1.000000

085     B6: #	out( B37 B7 ) &lt;- in( B5 )  Freq: 0.998998
085     shrq    R10, #9
089     movq    RDI, 0x0000000117891000	# ptr
093     addq    RDI, R10	# ptr
096     cmpb    [RDI], #8
099     jne     B37  P=0.001000 C=-1.000000

09f     B7: #	out( B31 B8 ) &lt;- in( B39 B40 B37 B6 B5 )  Freq: 0.999998
09f     # TLS is in R15
09f     cmpb    [R15 + #48 (8-bit)], #0
0a4     jne     B31  P=0.001000 C=-1.000000

0aa     B8: #	out( B11 B9 ) &lt;- in( B47 B33 B31 B7 )  Freq: 0.999998
0aa     movl    R10, [rsp + #16]	# spill
0af     movl    RBP, [R12 + R10 &lt;&lt; 3 + #24] (compressed oop addressing)	# compressed ptr ! Field: java/util/HashMap$Node.next
0b4     movl    [R13 + #20 (8-bit)], RBP	# compressed ptr ! Field: java/util/HashMap$HashIterator.next
0b8     movq    R10, R13	# ptr -&gt; long
0bb     decode_heap_oop R11,RBP
0e7     movq    R11, R11	# ptr -&gt; long
0e7     xorq    R11, R10	# long
0ea     shrq    R11, #20
0ee     testq   R11, R11
0f1     je,s   B11  P=0.001000 C=-1.000000

0f3     B9: #	out( B11 B10 ) &lt;- in( B8 )  Freq: 0.998998
0f3     testl   RBP, RBP	# compressed ptr
0f5     je,s   B11  P=0.001000 C=-1.000000

0f7     B10: #	out( B41 B11 ) &lt;- in( B9 )  Freq: 0.997999
0f7     shrq    R10, #9
0fb     movq    RDI, 0x0000000117891000	# ptr
105     addq    RDI, R10	# ptr
108     cmpb    [RDI], #8
10b     jne     B41  P=0.001000 C=-1.000000

111     B11: #	out( B23 B12 ) &lt;- in( B43 B44 B41 B10 B9 B8 )  Freq: 0.999998
111     testl   RBP, RBP	# compressed ptr
113     jne     B23  P=0.153014 C=10535.000000

119     B12: #	out( B52 B13 ) &lt;- in( B11 )  Freq: 0.846985
119     movl    R10, [R13 + #28 (8-bit)]	# compressed ptr ! Field: java/util/HashMap$HashIterator.this$0
11d     movl    R10, [R12 + R10 &lt;&lt; 3 + #36] (compressed oop addressing)	# compressed ptr ! Field: java/util/HashMap.table
122     NullCheck R10

122     B13: #	out( B53 B14 ) &lt;- in( B12 )  Freq: 0.846984
122     movl    [rsp + #20], R10	# spill
127     movl    RBP, [R12 + R10 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
12c     NullCheck R10

12c     B14: #	out( B23 B15 ) &lt;- in( B13 )  Freq: 0.846983
12c     movl    RBX, [R13 + #16 (8-bit)]	# int ! Field: java/util/HashMap$HashIterator.index
130     cmpl    RBX, RBP
132     jge     B23  P=0.072702 C=30783.000000

138     B15: #	out( B16 ) &lt;- in( B14 )  Freq: 0.785406
138     decode_heap_oop_not_null R10,R10
13c     movq    [rsp + #8], R10	# spill

141     B16: #	out( B45 B17 ) &lt;- in( B15 B22 ) Loop( B16-B22 inner ) Freq: 2.70952
141     movl    R11, RBX	# spill
144     incl    R11	# int
147     movl    [R13 + #16 (8-bit)], R11	# int ! Field: java/util/HashMap$HashIterator.index
14b     cmpl    RBX, RBP	# unsigned
14d     jnb,u   B45  P=0.000001 C=-1.000000

153     B17: #	out( B24 B18 ) &lt;- in( B16 )  Freq: 2.70952
153     # TLS is in R15
153     cmpb    [R15 + #48 (8-bit)], #0
158     jne     B24  P=0.001000 C=-1.000000

15e     B18: #	out( B21 B19 ) &lt;- in( B46 B26 B24 B17 )  Freq: 2.70952
15e     movq    R10, [rsp + #8]	# spill
163     movl    RBX, [R10 + #16 + RBX &lt;&lt; #2]	# compressed ptr
168     movl    [R13 + #20 (8-bit)], RBX	# compressed ptr ! Field: java/util/HashMap$HashIterator.next
16c     movq    R10, R13	# ptr -&gt; long
16f     decode_heap_oop R14,RBX
19b     movq    R11, R14	# ptr -&gt; long
19e     xorq    R11, R10	# long
1a1     shrq    R11, #20
1a5     testq   R11, R11
1a8     je,s   B21  P=0.001000 C=-1.000000

1aa     B19: #	out( B21 B20 ) &lt;- in( B18 )  Freq: 2.70681
1aa     testl   RBX, RBX	# compressed ptr
1ac     je,s   B21  P=0.001000 C=-1.000000

1ae     B20: #	out( B27 B21 ) &lt;- in( B19 )  Freq: 2.7041
1ae     shrq    R10, #9
1b2     movq    RDI, 0x0000000117891000	# ptr
1bc     addq    RDI, R10	# ptr
1bf     cmpb    [RDI], #8
1c2     jne     B27  P=0.001000 C=-1.000000

1c8     B21: #	out( B23 B22 ) &lt;- in( B29 B30 B27 B20 B19 B18 )  Freq: 2.70952
1c8     # TLS is in R15
1c8     movq    R10, [R15 + #296 (32-bit)]	# ptr
1cf     testl   rax, [R10]	# Safepoint: poll for GC        # java.util.HashMap$HashIterator::nextNode @ bci:95  L[0]=R13 L[1]=rsp + #8 L[2]=rsp + #0 STK[0]=R14
        # OopMap {rbx=NarrowOop r13=Oop r14=Oop [0]=Oop [8]=Oop [16]=NarrowOop [20]=NarrowOop off=463/0x1cf}
1d2     testl   RBX, RBX	# compressed ptr
1d4     jne,s   B23  P=0.234192 C=28545.000000

1d6     B22: #	out( B16 B23 ) &lt;- in( B21 )  Freq: 2.07497
1d6     movl    RBX, [R13 + #16 (8-bit)]	# int ! Field: java/util/HashMap$HashIterator.index
1da     cmpl    RBX, RBP
1dc     jl     B16  P=0.927298 C=30783.000000

1e2     B23: #	out( N700 ) &lt;- in( B11 B22 B21 B14 )  Freq: 0.999994
1e2     movq    RAX, [rsp + #0]	# spill
1e6     addq    rsp, 64	# Destroy frame
	popq    rbp
	movq    rscratch1, poll_offset[r15_thread] #polling_page_address
	testl   rax, [rscratch1]	# Safepoint: poll for GC

1f5     ret

1f6     B24: #	out( B18 B25 ) &lt;- in( B17 )  Freq: 0.00270949
1f6     movl    R11, [R13 + #20 (8-bit)]	# compressed ptr ! Field: java/util/HashMap$HashIterator.next
1fa     testl   R11, R11	# compressed ptr
1fd     je     B18  P=0.500000 C=-1.000000

203     B25: #	out( B46 B26 ) &lt;- in( B24 )  Freq: 0.00135474
203     # TLS is in R15
203     movq    R10, [R15 + #56 (8-bit)]	# long
207     decode_heap_oop RDI,R11
233     testq   R10, R10
236     je     B46  P=0.001000 C=-1.000000

23c     B26: #	out( B18 ) &lt;- in( B25 )  Freq: 0.00135339
23c     # TLS is in R15
23c     movq    R11, [R15 + #72 (8-bit)]	# ptr
240     movq    [R11 + #-8 + R10], RDI	# ptr
245     addq    R10, #-8	# long
249     # TLS is in R15
249     movq    [R15 + #56 (8-bit)], R10	# long
24d     jmp     B18

252     B27: #	out( B21 B28 ) &lt;- in( B20 )  Freq: 0.0027041
252     # TLS is in R15
252     movq    R10, [R15 + #120 (8-bit)]	# ptr
256     # TLS is in R15
256     movq    R11, [R15 + #104 (8-bit)]	# long
25a     lock addl [rsp + #0], 0	! membar_volatile
260     cmpb    [RDI], #0
263     je     B21  P=0.500000 C=-1.000000

269     B28: #	out( B30 B29 ) &lt;- in( B27 )  Freq: 0.00135205
269     movb    [RDI], #0	# CMS card-mark byte 0
26c     testq   R11, R11
26f     jne,s   B30  P=0.500000 C=-1.000000

271     B29: #	out( B21 ) &lt;- in( B28 )  Freq: 0.000676026
271     pushq   [rsp + #8]	# 64-bit mem-mem spill
	popq    [rsp + #32]
27b     movl    [rsp + #24], RBP	# spill
27f     pushq   [rsp + #0]	# 64-bit mem-mem spill
	popq    [rsp + #8]
288     # TLS is in R15
288     movq    RSI, R15	# spill
28b     call_leaf,runtime  write_ref_field_post_entry
        No JVM State Info
        # 
298     pushq   [rsp + #8]	# 64-bit mem-mem spill
	popq    [rsp + #0]
2a1     movl    RBP, [rsp + #24]	# spill
2a5     pushq   [rsp + #32]	# 64-bit mem-mem spill
	popq    [rsp + #8]
2af     jmp     B21

2b4     B30: #	out( B21 ) &lt;- in( B28 )  Freq: 0.000676026
2b4     movq    [R10 + #-8 + R11], RDI	# ptr
2b9     addq    R11, #-8	# long
2bd     # TLS is in R15
2bd     movq    [R15 + #104 (8-bit)], R11	# long
2c1     jmp     B21

2c6     B31: #	out( B8 B32 ) &lt;- in( B7 )  Freq: 0.000999985
2c6     movl    R10, [R13 + #20 (8-bit)]	# compressed ptr ! Field: java/util/HashMap$HashIterator.next
2ca     testl   R10, R10	# compressed ptr
2cd     je     B8  P=0.500000 C=-1.000000

2d3     B32: #	out( B47 B33 ) &lt;- in( B31 )  Freq: 0.000499993
2d3     # TLS is in R15
2d3     movq    R11, [R15 + #56 (8-bit)]	# long
2d7     decode_heap_oop RDI,R10
303     testq   R11, R11
306     je     B47  P=0.001000 C=-1.000000

30c     B33: #	out( B8 ) &lt;- in( B32 )  Freq: 0.000499493
30c     # TLS is in R15
30c     movq    R10, [R15 + #72 (8-bit)]	# ptr
310     movq    [R10 + #-8 + R11], RDI	# ptr
315     addq    R11, #-8	# long
319     # TLS is in R15
319     movq    [R15 + #56 (8-bit)], R11	# long
31d     jmp     B8

322     B34: #	out( B5 B35 ) &lt;- in( B4 )  Freq: 0.000999985
322     movl    R11, [RSI + #24 (8-bit)]	# compressed ptr ! Field: java/util/HashMap$HashIterator.current
326     testl   R11, R11	# compressed ptr
329     je     B5  P=0.500000 C=-1.000000

32f     B35: #	out( B48 B36 ) &lt;- in( B34 )  Freq: 0.000499993
32f     # TLS is in R15
32f     movq    R10, [R15 + #56 (8-bit)]	# long
333     decode_heap_oop RDI,R11
35f     testq   R10, R10
362     je     B48  P=0.001000 C=-1.000000

368     B36: #	out( B5 ) &lt;- in( B35 )  Freq: 0.000499493
368     # TLS is in R15
368     movq    R11, [R15 + #72 (8-bit)]	# ptr
36c     movq    [R11 + #-8 + R10], RDI	# ptr
371     addq    R10, #-8	# long
375     # TLS is in R15
375     movq    [R15 + #56 (8-bit)], R10	# long
379     jmp     B5

37e     B37: #	out( B7 B38 ) &lt;- in( B6 )  Freq: 0.000998998
37e     # TLS is in R15
37e     movq    R10, [R15 + #104 (8-bit)]	# long
382     # TLS is in R15
382     movq    R11, [R15 + #120 (8-bit)]	# ptr
386     lock addl [rsp + #0], 0	! membar_volatile
38c     cmpb    [RDI], #0
38f     je     B7  P=0.500000 C=-1.000000

395     B38: #	out( B40 B39 ) &lt;- in( B37 )  Freq: 0.000499499
395     movb    [RDI], #0	# CMS card-mark byte 0
398     testq   R10, R10
39b     jne,s   B40  P=0.500000 C=-1.000000

39d     B39: #	out( B7 ) &lt;- in( B38 )  Freq: 0.00024975
39d     # TLS is in R15
39d     movq    RSI, R15	# spill
3a0     call_leaf,runtime  write_ref_field_post_entry
        No JVM State Info
        # 
3ad     jmp     B7

3b2     B40: #	out( B7 ) &lt;- in( B38 )  Freq: 0.00024975
3b2     movq    [R11 + #-8 + R10], RDI	# ptr
3b7     addq    R10, #-8	# long
3bb     # TLS is in R15
3bb     movq    [R15 + #104 (8-bit)], R10	# long
3bf     jmp     B7

3c4     B41: #	out( B11 B42 ) &lt;- in( B10 )  Freq: 0.000997999
3c4     # TLS is in R15
3c4     movq    R10, [R15 + #104 (8-bit)]	# long
3c8     # TLS is in R15
3c8     movq    R11, [R15 + #120 (8-bit)]	# ptr
3cc     lock addl [rsp + #0], 0	! membar_volatile
3d2     cmpb    [RDI], #0
3d5     je     B11  P=0.500000 C=-1.000000

3db     B42: #	out( B44 B43 ) &lt;- in( B41 )  Freq: 0.000499
3db     movb    [RDI], #0	# CMS card-mark byte 0
3de     testq   R10, R10
3e1     jne,s   B44  P=0.500000 C=-1.000000

3e3     B43: #	out( B11 ) &lt;- in( B42 )  Freq: 0.0002495
3e3     # TLS is in R15
3e3     movq    RSI, R15	# spill
3e6     call_leaf,runtime  write_ref_field_post_entry
        No JVM State Info
        # 
3f3     jmp     B11

3f8     B44: #	out( B11 ) &lt;- in( B42 )  Freq: 0.0002495
3f8     movq    [R11 + #-8 + R10], RDI	# ptr
3fd     addq    R10, #-8	# long
401     # TLS is in R15
401     movq    [R15 + #104 (8-bit)], R10	# long
405     jmp     B11

40a     B45: #	out( N700 ) &lt;- in( B16 )  Freq: 2.7455e-06
40a     movl    RSI, #-28	# int
40f     movq    [rsp + #0], R13	# spill
413     movl    [rsp + #8], RBX	# spill
417     movl    R11, [rsp + #16]	# spill
41c     movl    [rsp + #12], R11	# spill
        nop 	# 2 bytes pad for loops and calls
423     call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap$HashIterator::nextNode @ bci:90  L[0]=rsp + #0 L[1]=rsp + #20 L[2]=rsp + #12 STK[0]=rsp + #0 STK[1]=rsp + #20 STK[2]=rsp + #8
        # OopMap {[0]=Oop [12]=NarrowOop [20]=NarrowOop off=1064/0x428}
428     ud2	# ShouldNotReachHere

43c     B46: #	out( B18 ) &lt;- in( B25 )  Freq: 1.35473e-06
43c     # TLS is in R15
43c     movq    RSI, R15	# spill
43f     call_leaf,runtime  write_ref_field_pre_entry
        No JVM State Info
        # 
44c     jmp     B18

451     B47: #	out( B8 ) &lt;- in( B32 )  Freq: 4.99986e-07
451     # TLS is in R15
451     movq    RSI, R15	# spill
454     call_leaf,runtime  write_ref_field_pre_entry
        No JVM State Info
        # 
461     jmp     B8

466     B48: #	out( B5 ) &lt;- in( B35 )  Freq: 4.99986e-07
466     # TLS is in R15
466     movq    RSI, R15	# spill
469     call_leaf,runtime  write_ref_field_pre_entry
        No JVM State Info
        # 
476     jmp     B5

47b     B49: #	out( N700 ) &lt;- in( B2 )  Freq: 4.76837e-07
47b     movl    RSI, #-187	# int
480     movq    [rsp + #0], R13	# spill
484     movl    [rsp + #12], R10	# spill
        nop 	# 2 bytes pad for loops and calls
48b     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap$HashIterator::nextNode @ bci:16  L[0]=rsp + #0 L[1]=_ L[2]=rsp + #16 STK[0]=rsp + #12 STK[1]=RBP
        # OopMap {[0]=Oop [16]=NarrowOop off=1168/0x490}
490     ud2	# ShouldNotReachHere

4a4     B50: #	out( N700 ) &lt;- in( B3 )  Freq: 4.76836e-07
4a4     movl    RSI, #-187	# int
4a9     movq    RBP, R13	# spill
4ac     movl    [rsp + #4], R8	# spill
        nop 	# 2 bytes pad for loops and calls
4b3     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap$HashIterator::nextNode @ bci:28  L[0]=RBP L[1]=_ L[2]=rsp + #4 STK[0]=rsp + #16
        # OopMap {rbp=Oop [4]=NarrowOop [16]=NarrowOop off=1208/0x4b8}
4b8     ud2	# ShouldNotReachHere

4cc     B51: #	out( N700 ) &lt;- in( B1 )  Freq: 1.01328e-06
4cc     movl    RSI, #-10	# int
        nop 	# 2 bytes pad for loops and calls
4d3     call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap$HashIterator::nextNode @ bci:9  L[0]=_ L[1]=_ L[2]=_ STK[0]=#NULL
        # OopMap {off=1240/0x4d8}
4d8     ud2	# ShouldNotReachHere

4ec     B52: #	out( N700 ) &lt;- in( B12 )  Freq: 8.58232e-07
4ec     movl    RSI, #-10	# int
        nop 	# 2 bytes pad for loops and calls
4f3     call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap$HashIterator::nextNode @ bci:60  L[0]=_ L[1]=_ L[2]=_ STK[0]=#NULL
        # OopMap {off=1272/0x4f8}
4f8     ud2	# ShouldNotReachHere

50c     B53: #	out( N700 ) &lt;- in( B13 )  Freq: 4.03873e-07
50c     movl    RSI, #-187	# int
511     movq    RBP, R13	# spill
514     movl    [rsp + #8], R10	# spill
        nop 	# 2 bytes pad for loops and calls
51b     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap$HashIterator::nextNode @ bci:65  L[0]=RBP L[1]=rsp + #8 L[2]=rsp + #16 STK[0]=rsp + #20
        # OopMap {rbp=Oop [8]=NarrowOop [16]=NarrowOop [20]=NarrowOop off=1312/0x520}
520     ud2	# ShouldNotReachHere

--------------------------------------------------------------------------------
</opto_assembly>
   1041  133       3       java.util.HashMap$HashIterator::nextNode (100 bytes)   made not entrant
<writer thread='40195'/>
   1041  402       3       java.lang.invoke.MemberName::getReferenceKind (12 bytes)
<writer thread='42499'/>
   1041  403       1       java.lang.Class::getModule (5 bytes)
<writer thread='9219'/>
   1042  404     n 0       java.lang.invoke.MethodHandle::linkToStatic(LLLLL)V (native)   (static)
<writer thread='38659'/>

============================= C2-compiled nmethod ==============================
<opto_assembly compile_id='353'>
----------------------- MetaData before Compile_id = 353 ------------------------
{method}
 - this oop:          0x0000000126d90a20
 - method holder:     &apos;java/io/DataInputStream&apos;
 - constants:         0x0000000126d8ec80 constant pool [184] {0x0000000126d8ec80} for &apos;java/io/DataInputStream&apos; cache=0x0000000126d915e0
 - access:            0x81000011  public final 
 - name:              &apos;readUnsignedShort&apos;
 - signature:         &apos;()I&apos;
 - max stack:         4
 - max locals:        3
 - size of params:    1
 - method size:       13
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x000000010c0a1de0
 - adapters:          AHE@0x00007f99308e1660: 0xb0000000 i2c: 0x000000010c0e9ee0 c2i: 0x000000010c0e9fc3 c2iUV: 0x000000010c0e9f8a c2iNCI: 0x000000010c0ea000
 - compiled entry     0x000000010c7e3fe0
 - code size:         39
 - code start:        0x0000000126d909c0
 - code end (excl):   0x0000000126d909e7
 - method data:       0x0000000126dd6000
 - checked ex length: 1
 - checked ex start:  0x0000000126d90a1c
 - linenumber start:  0x0000000126d909e7
 - localvar length:   3
 - localvar start:    0x0000000126d909f6
 - compiled code: nmethod   1046   65       3       java.io.DataInputStream::readUnsignedShort (39 bytes)

------------------------ OptoAssembly for Compile_id = 353 -----------------------
#
#  int ( java/io/DataInputStream:NotNull * )
#
#r018 rsi:rsi   : parm 0: java/io/DataInputStream:NotNull *
# -- Old rsp -- Framesize: 80 --
#r583 rsp+76: in_preserve
#r582 rsp+72: return address
#r581 rsp+68: in_preserve
#r580 rsp+64: saved fp register
#r579 rsp+60: Fixed slot 3
#r578 rsp+56: Fixed slot 2
#r577 rsp+52: Fixed slot 1
#r576 rsp+48: Fixed slot 0
#r595 rsp+44: spill
#r594 rsp+40: spill
#r593 rsp+36: spill
#r592 rsp+32: spill
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N719: #	out( B1 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B52 B2 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (360 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #64	# Create frame

02c     movq    [rsp + #32], RSI	# spill
031     movl    R10, [RSI + #12 (8-bit)]	# compressed ptr ! Field: volatile java/io/FilterInputStream.in
035     MEMBAR-acquire ! (empty encoding)
035     movl    R8, [R12 + R10 &lt;&lt; 3 + #8] (compressed oop addressing)	# compressed klass ptr
03a     NullCheck R10

03a     B2: #	out( B27 B3 ) &lt;- in( B1 )  Freq: 0.999999
03a     cmpl    R8, narrowklass: precise klass java/io/BufferedInputStream: 0x00000001278200a0:Constant:exact *	# compressed klass ptr
041     jne,u   B27  P=0.000001 C=-1.000000

047     B3: #	out( B29 B4 ) &lt;- in( B2 )  Freq: 0.999998
047     decode_heap_oop_not_null R10,R10
04b     # checkcastPP of R10
04b     movq    [rsp + #24], R10	# spill
050     movq    RAX, [R10]	# long
053     movq    R10, RAX	# spill
056     andq    R10, #7	# long
05a     movl    R8, narrowklass: precise klass java/io/BufferedInputStream: 0x00000001278200a0:Constant:exact *	# compressed klass ptr
060     decode_klass_not_null R11,R8
06d     movq    [rsp + #16], R11	# spill
072     cmpq    R10, #5
076     jne     B29  P=0.000001 C=-1.000000

07c     B4: #	out( B31 B5 ) &lt;- in( B3 )  Freq: 0.999997
07c     movq    R10, [R11 + #184 (32-bit)]	# long
083     movq    R11, R10	# spill
086     # TLS is in R15
086     orq     R11, R15	# long
089     movq    R8, R11	# spill
08c     xorq    R8, RAX	# long
08f     testq   R8, #-121	# long
096     jne     B31  P=0.000001 C=-1.000000

09c     B5: #	out( B19 B6 ) &lt;- in( B30 B29 B4 B35 )  Freq: 0.999998
09c     MEMBAR-acquire (prior CMPXCHG in FastLock so empty encoding)
09c     movq    R10, [rsp + #24]	# spill
0a1     movl    R11, [R10 + #20 (8-bit)]	# int ! Field: java/io/BufferedInputStream.pos
0a5     movl    R10, [R10 + #16 (8-bit)]	# int ! Field: java/io/BufferedInputStream.count
0a9     cmpl    R11, R10
0ac     jge     B19  P=0.002960 C=23646.000000

0b2     B6: #	out( B54 B7 ) &lt;- in( B21 B5 )  Freq: 0.999998
0b2     movq    R10, [rsp + #24]	# spill
0b7     movl    R10, [R10 + #32 (8-bit)]	# compressed ptr ! Field: volatile java/io/BufferedInputStream.buf
0bb     MEMBAR-acquire ! (empty encoding)
0bb     movl    R8, [R12 + R10 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
0c0     NullCheck R10

0c0     B7: #	out( B25 B8 ) &lt;- in( B6 )  Freq: 0.999997
0c0     movq    R11, [rsp + #24]	# spill
0c5     movl    RBP, [R11 + #20 (8-bit)]	# int ! Field: java/io/BufferedInputStream.pos
0c9     movl    R11, RBP	# spill
0cc     incl    R11	# int
0cf     movq    R9, [rsp + #24]	# spill
0d4     movl    [R9 + #20 (8-bit)], R11	# int ! Field: java/io/BufferedInputStream.pos
0d8     cmpl    RBP, R8	# unsigned
0db     jnb,u   B25  P=0.000001 C=-1.000000

0e1     B8: #	out( B36 B9 ) &lt;- in( B7 )  Freq: 0.999996
0e1     decode_heap_oop_not_null R10,R10
0e5     movzbl  R13, [R10 + #16 + RBP]	# ubyte
0eb     MEMBAR-release (a FastUnlock follows so empty encoding)
0eb     movl    R10, #7	# long (unsigned 32-bit)
0f1     andq    R10, [R9]	# long
0f4     cmpq    R10, #5
0f8     jne     B36  P=0.000001 C=-1.000000

0fe     B9: #	out( B53 B10 ) &lt;- in( B37 B36 B8 )  Freq: 0.999996
0fe     movq    R10, [rsp + #32]	# spill
103     movl    RBP, [R10 + #12 (8-bit)]	# compressed ptr ! Field: volatile java/io/FilterInputStream.in
107     MEMBAR-acquire ! (empty encoding)
107     movl    R11, [R12 + RBP &lt;&lt; 3 + #8] (compressed oop addressing)	# compressed klass ptr
10c     NullCheck RBP

10c     B10: #	out( B38 B11 ) &lt;- in( B9 )  Freq: 0.999995
10c     cmpl    R11, narrowklass: precise klass java/io/BufferedInputStream: 0x00000001278200a0:Constant:exact *	# compressed klass ptr
113     jne,u   B38  P=0.000001 C=-1.000000

119     B11: #	out( B40 B12 ) &lt;- in( B10 )  Freq: 0.999994
119     decode_heap_oop_not_null R10,RBP
11d     movq    R9, R10	# spill
120     # checkcastPP of R9
120     movq    RAX, [R9]	# long
123     movq    R10, RAX	# spill
126     andq    R10, #7	# long
12a     cmpq    R10, #5
12e     jne     B40  P=0.000001 C=-1.000000

134     B12: #	out( B42 B13 ) &lt;- in( B11 )  Freq: 0.999993
134     movq    R10, [rsp + #16]	# spill
139     movq    R10, [R10 + #184 (32-bit)]	# long
140     movq    R11, R10	# spill
143     # TLS is in R15
143     orq     R11, R15	# long
146     movq    R8, R11	# spill
149     xorq    R8, RAX	# long
14c     testq   R8, #-121	# long
153     jne     B42  P=0.000001 C=-1.000000

159     B13: #	out( B22 B14 ) &lt;- in( B41 B40 B12 B46 )  Freq: 0.999994
159     MEMBAR-acquire (prior CMPXCHG in FastLock so empty encoding)
159     movl    R10, [R9 + #20 (8-bit)]	# int ! Field: java/io/BufferedInputStream.pos
15d     movl    R8, [R9 + #16 (8-bit)]	# int ! Field: java/io/BufferedInputStream.count
161     cmpl    R10, R8
164     jge     B22  P=0.002960 C=23646.000000

16a     B14: #	out( B55 B15 ) &lt;- in( B24 B13 )  Freq: 0.999994
16a     movl    RCX, [R9 + #32 (8-bit)]	# compressed ptr ! Field: volatile java/io/BufferedInputStream.buf
16e     MEMBAR-acquire ! (empty encoding)
16e     movl    R10, [R12 + RCX &lt;&lt; 3 + #12] (compressed oop addressing)	# range
173     NullCheck RCX

173     B15: #	out( B26 B16 ) &lt;- in( B14 )  Freq: 0.999994
173     movl    RBP, [R9 + #20 (8-bit)]	# int ! Field: java/io/BufferedInputStream.pos
177     movl    R8, RBP	# spill
17a     incl    R8	# int
17d     movl    [R9 + #20 (8-bit)], R8	# int ! Field: java/io/BufferedInputStream.pos
181     cmpl    RBP, R10	# unsigned
184     jnb,u   B26  P=0.000001 C=-1.000000

18a     B16: #	out( B47 B17 ) &lt;- in( B15 )  Freq: 0.999993
18a     decode_heap_oop_not_null R10,RCX
18e     movzbl  RBX, [R10 + #16 + RBP]	# ubyte
194     MEMBAR-release (a FastUnlock follows so empty encoding)
194     movl    R10, #7	# long (unsigned 32-bit)
19a     andq    R10, [R9]	# long
19d     cmpq    R10, #5
1a1     jne     B47  P=0.000001 C=-1.000000

1a7     B17: #	out( B49 B18 ) &lt;- in( B48 B47 B16 )  Freq: 0.999993
1a7     movl    RBP, RBX	# spill
1a9     orl     RBP, R13	# int
1ac     testl   RBP, RBP
1ae     jl     B49  P=0.000000 C=18430.000000

1b4     B18: #	out( N719 ) &lt;- in( B17 )  Freq: 0.999992
1b4     sall    R13, #8
1b8     movl    RAX, R13	# spill
1bb     addl    RAX, RBX	# int
1bd     addq    rsp, 64	# Destroy frame
	popq    rbp
	movq    rscratch1, poll_offset[r15_thread] #polling_page_address
	testl   rax, [rscratch1]	# Safepoint: poll for GC

1cc     ret

1cd     B19: #	out( B56 B20 ) &lt;- in( B5 )  Freq: 0.00296032
1cd     pushq   [rsp + #16]	# 64-bit mem-mem spill
	popq    [rsp + #8]
1d7     movq    RBP, [rsp + #24]	# spill
1dc     pushq   [rsp + #32]	# 64-bit mem-mem spill
	popq    [rsp + #0]
1e5     movq    RSI, RBP	# spill
        nop 	# 3 bytes pad for loops and calls
1eb     call,static  java.io.BufferedInputStream::fill
        # java.io.BufferedInputStream::read @ bci:12  L[0]=RBP MON-BOX0=rsp+48 MON-OBJ[0]=RBP
        # java.io.DataInputStream::readUnsignedShort @ bci:4  L[0]=rsp + #0 L[1]=_ L[2]=_
        # OopMap {rbp=Oop [0]=Oop [24]=Oop [32]=Oop off=496/0x1f0}

1f0     B20: #	out( B50 B21 ) &lt;- in( B19 )  Freq: 0.00296026
        # Block is sole successor of call
1f0     movq    R10, RBP	# spill
1f3     movl    R11, [R10 + #20 (8-bit)]	# int ! Field: java/io/BufferedInputStream.pos
1f7     movl    RBP, [R10 + #16 (8-bit)]	# int ! Field: java/io/BufferedInputStream.count
1fb     cmpl    R11, RBP
1fe     jge     B50  P=0.000000 C=70.000000

204     B21: #	out( B6 ) &lt;- in( B20 )  Freq: 0.00296026
204     pushq   [rsp + #8]	# 64-bit mem-mem spill
	popq    [rsp + #16]
20e     jmp     B6

213     B22: #	out( B58 B23 ) &lt;- in( B13 )  Freq: 0.00296031
213     movq    RBP, R9	# spill
216     movl    [rsp + #0], R13	# spill
21a     movq    RSI, R9	# spill
        nop 	# 2 bytes pad for loops and calls
21f     call,static  java.io.BufferedInputStream::fill
        # java.io.BufferedInputStream::read @ bci:12  L[0]=RBP MON-BOX0=rsp+48 MON-OBJ[0]=RBP
        # java.io.DataInputStream::readUnsignedShort @ bci:12  L[0]=_ L[1]=rsp + #0 L[2]=_
        # OopMap {rbp=Oop off=548/0x224}

224     B23: #	out( B51 B24 ) &lt;- in( B22 )  Freq: 0.00296025
        # Block is sole successor of call
224     movq    R9, RBP	# spill
227     movl    R10, [R9 + #20 (8-bit)]	# int ! Field: java/io/BufferedInputStream.pos
22b     movl    RBP, [R9 + #16 (8-bit)]	# int ! Field: java/io/BufferedInputStream.count
22f     cmpl    R10, RBP
232     jge     B51  P=0.000000 C=70.000000

238     B24: #	out( B14 ) &lt;- in( B23 )  Freq: 0.00296025
238     movl    R13, [rsp + #0]	# spill
23c     jmp     B14

241     B25: #	out( N719 ) &lt;- in( B7 )  Freq: 1.01328e-06
241     movl    RSI, #-28	# int
246     movl    [rsp + #8], R10	# spill
24b     call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos; debug_id=&apos;0&apos;)
        # java.io.BufferedInputStream::read @ bci:43  L[0]=_ STK[0]=rsp + #8 STK[1]=RBP MON-BOX0=rsp+48 MON-OBJ[0]=rsp + #24
        # java.io.DataInputStream::readUnsignedShort @ bci:4  L[0]=rsp + #32 L[1]=_ L[2]=_
        # OopMap {[8]=NarrowOop [24]=Oop [32]=Oop off=592/0x250}
250     ud2	# ShouldNotReachHere

264     B26: #	out( N719 ) &lt;- in( B15 )  Freq: 1.01327e-06
264     movl    RSI, #-28	# int
269     movl    [rsp + #0], R13	# spill
26d     movl    [rsp + #4], RCX	# spill
271     movq    [rsp + #8], R9	# spill
        nop 	# 1 bytes pad for loops and calls
277     call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos; debug_id=&apos;0&apos;)
        # java.io.BufferedInputStream::read @ bci:43  L[0]=_ STK[0]=rsp + #4 STK[1]=RBP MON-BOX0=rsp+48 MON-OBJ[0]=rsp + #8
        # java.io.DataInputStream::readUnsignedShort @ bci:12  L[0]=_ L[1]=rsp + #0 L[2]=_
        # OopMap {[4]=NarrowOop [8]=Oop off=636/0x27c}
27c     ud2	# ShouldNotReachHere

290     B27: #	out( N719 ) &lt;- in( B2 )  Freq: 9.99999e-07
290     movl    RSI, #-34	# int
295     movq    RBP, [rsp + #32]	# spill
29a     movl    [rsp + #0], R10	# spill
        nop 	# 1 bytes pad for loops and calls
29f     call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.io.DataInputStream::readUnsignedShort @ bci:4  L[0]=RBP L[1]=_ L[2]=_ STK[0]=rsp + #0
        # OopMap {rbp=Oop [0]=NarrowOop off=676/0x2a4}
2a4     ud2	# ShouldNotReachHere

2b8     B28: #	out( B29 ) &lt;- in( B31 )  Freq: 9.99997e-13
2b8     movq    R11, [rsp + #24]	# spill
2bd     cmpxchgq [R11], R10	# If rax == [R11] then store R10 into [R11]

2c2     B29: #	out( B5 B30 ) &lt;- in( B3 B28 )  Freq: 9.99999e-07
2c2     leaq    RBX, [rsp + #48]	# box lock
2c7     movq    R11, [rsp + #24]	# spill
2cc     fastlock R11,RBX	! kills RBX,RAX,R10
30e     je     B5  P=0.999999 C=-1.000000

314     B30: #	out( B5 ) &lt;- in( B34 B29 )  Freq: 1.99999e-12
314     movq    RSI, [rsp + #24]	# spill
319     leaq    RDX, [rsp + #48]	# box lock
31e     movq    RBP, [rsp + #32]	# spill
323     movq    [rsp + #8], RSI	# spill
        nop 	# 3 bytes pad for loops and calls
32b     call,static  wrapper for: _complete_monitor_locking_Java
        # java.io.BufferedInputStream::read @ bci:-1  L[0]=rsp + #8 MON-BOX0=rsp+48 MON-OBJ[0]=rsp + #24
        # java.io.DataInputStream::readUnsignedShort @ bci:4  L[0]=RBP L[1]=_ L[2]=_
        # OopMap {rbp=Oop [8]=Oop [24]=Oop [32]=Oop off=816/0x330}
330     jmp     B5

335     B31: #	out( B28 B32 ) &lt;- in( B4 )  Freq: 9.99997e-07
335     testq   R8, #7	# long
33c     jne     B28  P=0.000001 C=-1.000000

342     B32: #	out( B34 B33 ) &lt;- in( B31 )  Freq: 9.99996e-07
342     testq   R8, #768	# long
349     jne,s   B34  P=0.000001 C=-1.000000

34b     B33: #	out( B34 ) &lt;- in( B32 )  Freq: 9.99995e-07
34b     andq    RAX, #895	# long
352     movq    R11, RAX	# spill
355     # TLS is in R15
355     orq     R11, R15	# long

358     B34: #	out( B30 B35 ) &lt;- in( B33 B32 )  Freq: 9.99996e-07
358     movq    R10, [rsp + #24]	# spill
35d     cmpxchgq [R10], R11	# If rax == [R10] then store R11 into [R10]
362     jne,us  B30  P=0.000001 C=-1.000000

364     B35: #	out( B5 ) &lt;- in( B34 )  Freq: 9.99995e-07
364     jmp     B5

369     B36: #	out( B9 B37 ) &lt;- in( B8 )  Freq: 9.99996e-07
369     leaq    RAX, [rsp + #48]	# box lock
36e     fastunlock R9,RAX	! kills RAX,R10
3f3     je     B9  P=0.999999 C=-1.000000

3f9     B37: #	out( B9 ) &lt;- in( B36 )  Freq: 9.99996e-13
3f9     movq    RDI, R9	# spill
3fc     leaq    RSI, [rsp + #48]	# box lock
401     # TLS is in R15
401     movq    RDX, R15	# spill
404     call_leaf,runtime  complete_monitor_unlocking_C
        No JVM State Info
        # 
411     jmp     B9

416     B38: #	out( N719 ) &lt;- in( B10 )  Freq: 9.99995e-07
416     movl    RSI, #-34	# int
41b     movl    [rsp + #0], R13	# spill
41f     call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.io.DataInputStream::readUnsignedShort @ bci:12  L[0]=_ L[1]=rsp + #0 L[2]=_ STK[0]=RBP
        # OopMap {rbp=NarrowOop off=1060/0x424}
424     ud2	# ShouldNotReachHere

438     B39: #	out( B40 ) &lt;- in( B42 )  Freq: 9.99993e-13
438     cmpxchgq [R9], R10	# If rax == [R9] then store R10 into [R9]

43d     B40: #	out( B13 B41 ) &lt;- in( B11 B39 )  Freq: 9.99995e-07
43d     leaq    RBX, [rsp + #48]	# box lock
442     fastlock R9,RBX	! kills RBX,RAX,R10
484     je     B13  P=0.999999 C=-1.000000

48a     B41: #	out( B13 ) &lt;- in( B45 B40 )  Freq: 1.99999e-12
48a     movq    [rsp + #0], R9	# spill
48e     movl    RBP, R13	# spill
491     movq    RSI, R9	# spill
494     leaq    RDX, [rsp + #48]	# box lock
        nop 	# 2 bytes pad for loops and calls
49b     call,static  wrapper for: _complete_monitor_locking_Java
        # java.io.BufferedInputStream::read @ bci:-1  L[0]=rsp + #0 MON-BOX0=rsp+48 MON-OBJ[0]=rsp + #0
        # java.io.DataInputStream::readUnsignedShort @ bci:12  L[0]=_ L[1]=RBP L[2]=_
        # OopMap {[0]=Oop off=1184/0x4a0}
4a0     movl    R13, RBP	# spill
4a3     movq    R9, [rsp + #0]	# spill
4a7     jmp     B13

4ac     B42: #	out( B39 B43 ) &lt;- in( B12 )  Freq: 9.99993e-07
4ac     testq   R8, #7	# long
4b3     jne     B39  P=0.000001 C=-1.000000

4b9     B43: #	out( B45 B44 ) &lt;- in( B42 )  Freq: 9.99992e-07
4b9     testq   R8, #768	# long
4c0     jne,s   B45  P=0.000001 C=-1.000000

4c2     B44: #	out( B45 ) &lt;- in( B43 )  Freq: 9.99991e-07
4c2     andq    RAX, #895	# long
4c9     movq    R11, RAX	# spill
4cc     # TLS is in R15
4cc     orq     R11, R15	# long

4cf     B45: #	out( B41 B46 ) &lt;- in( B44 B43 )  Freq: 9.99992e-07
4cf     cmpxchgq [R9], R11	# If rax == [R9] then store R11 into [R9]
4d4     jne,us  B41  P=0.000001 C=-1.000000

4d6     B46: #	out( B13 ) &lt;- in( B45 )  Freq: 9.99991e-07
4d6     jmp     B13

4db     B47: #	out( B17 B48 ) &lt;- in( B16 )  Freq: 9.99993e-07
4db     leaq    RAX, [rsp + #48]	# box lock
4e0     fastunlock R9,RAX	! kills RAX,R10
565     je     B17  P=0.999999 C=-1.000000

56b     B48: #	out( B17 ) &lt;- in( B47 )  Freq: 9.99993e-13
56b     movq    RDI, R9	# spill
56e     leaq    RSI, [rsp + #48]	# box lock
573     # TLS is in R15
573     movq    RDX, R15	# spill
576     call_leaf,runtime  complete_monitor_unlocking_C
        No JVM State Info
        # 
583     jmp     B17

588     B49: #	out( N719 ) &lt;- in( B17 )  Freq: 4.76834e-07
588     movl    RSI, #-187	# int
58d     movl    [rsp + #0], R13	# spill
591     movl    [rsp + #4], RBX	# spill
        nop 	# 2 bytes pad for loops and calls
597     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.io.DataInputStream::readUnsignedShort @ bci:19  L[0]=_ L[1]=rsp + #0 L[2]=rsp + #4 STK[0]=RBP
        # OopMap {off=1436/0x59c}
59c     ud2	# ShouldNotReachHere

5b0     B50: #	out( N719 ) &lt;- in( B20 )  Freq: 1.41156e-09
5b0     movl    RSI, #-187	# int
5b5     movl    [rsp + #16], R11	# spill
        nop 	# 1 bytes pad for loops and calls
5bb     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.io.BufferedInputStream::read @ bci:23  L[0]=rsp + #24 STK[0]=rsp + #16 STK[1]=RBP MON-BOX0=rsp+48 MON-OBJ[0]=rsp + #24
        # java.io.DataInputStream::readUnsignedShort @ bci:4  L[0]=rsp + #0 L[1]=_ L[2]=_
        # OopMap {[0]=Oop [24]=Oop off=1472/0x5c0}
5c0     ud2	# ShouldNotReachHere

5d4     B51: #	out( N719 ) &lt;- in( B23 )  Freq: 1.41156e-09
5d4     movl    RSI, #-187	# int
5d9     movl    [rsp + #4], R10	# spill
5de     movq    [rsp + #16], R9	# spill
5e3     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.io.BufferedInputStream::read @ bci:23  L[0]=rsp + #16 STK[0]=rsp + #4 STK[1]=RBP MON-BOX0=rsp+48 MON-OBJ[0]=rsp + #16
        # java.io.DataInputStream::readUnsignedShort @ bci:12  L[0]=_ L[1]=rsp + #0 L[2]=_
        # OopMap {[16]=Oop off=1512/0x5e8}
5e8     ud2	# ShouldNotReachHere

5fc     B52: #	out( N719 ) &lt;- in( B1 )  Freq: 1.01328e-06
5fc     movl    RSI, #-10	# int
        nop 	# 2 bytes pad for loops and calls
603     call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.io.DataInputStream::readUnsignedShort @ bci:4  L[0]=_ L[1]=_ L[2]=_ STK[0]=#NULL
        # OopMap {off=1544/0x608}
608     ud2	# ShouldNotReachHere

61c     B53: #	out( N719 ) &lt;- in( B9 )  Freq: 1.01328e-06
61c     movl    RSI, #-10	# int
        nop 	# 2 bytes pad for loops and calls
623     call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.io.DataInputStream::readUnsignedShort @ bci:12  L[0]=_ L[1]=_ L[2]=_ STK[0]=#NULL
        # OopMap {off=1576/0x628}
628     ud2	# ShouldNotReachHere

63c     B54: #	out( N719 ) &lt;- in( B6 )  Freq: 4.76836e-07
63c     movl    RSI, #-187	# int
641     movq    RBP, [rsp + #32]	# spill
646     pushq   [rsp + #24]	# 64-bit mem-mem spill
	popq    [rsp + #0]
64f     movl    [rsp + #20], R10	# spill
        nop 	# 3 bytes pad for loops and calls
657     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.io.BufferedInputStream::getBufIfOpen @ bci:6  L[0]=_ L[1]=rsp + #20 STK[0]=rsp + #20
        # java.io.BufferedInputStream::read @ bci:29  L[0]=rsp + #0 MON-BOX0=rsp+48 MON-OBJ[0]=rsp + #0
        # java.io.DataInputStream::readUnsignedShort @ bci:4  L[0]=RBP L[1]=_ L[2]=_
        # OopMap {rbp=Oop [0]=Oop [20]=NarrowOop off=1628/0x65c}
65c     ud2	# ShouldNotReachHere

670     B55: #	out( N719 ) &lt;- in( B14 )  Freq: 4.76834e-07
670     movl    RSI, #-187	# int
675     movl    RBP, R13	# spill
678     movq    [rsp + #8], R9	# spill
67d     movl    [rsp + #20], RCX	# spill
        nop 	# 2 bytes pad for loops and calls
683     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.io.BufferedInputStream::getBufIfOpen @ bci:6  L[0]=_ L[1]=rsp + #20 STK[0]=rsp + #20
        # java.io.BufferedInputStream::read @ bci:29  L[0]=rsp + #8 MON-BOX0=rsp+48 MON-OBJ[0]=rsp + #8
        # java.io.DataInputStream::readUnsignedShort @ bci:12  L[0]=_ L[1]=RBP L[2]=_
        # OopMap {[8]=Oop [20]=NarrowOop off=1672/0x688}
688     ud2	# ShouldNotReachHere

69c     B56: #	out( B61 B57 ) &lt;- in( B19 )  Freq: 2.96032e-08
69c     # exception oop is in rax; no code emitted
69c     movq    RBX, RAX	# spill
69f     MEMBAR-release (a FastUnlock follows so empty encoding)
69f     movq    R11, RBP	# spill
6a2     movl    R10, #7	# long (unsigned 32-bit)
6a8     andq    R10, [R11]	# long
6ab     cmpq    R10, #5
6af     jne,s   B61  P=0.000001 C=-1.000000

6b1     B57: #	out( B60 ) &lt;- in( B62 B61 B56 )  Freq: 2.96032e-08
6b1     movq    RSI, RBX	# spill
6b4     jmp,s   B60

6b6     B58: #	out( B63 B59 ) &lt;- in( B22 )  Freq: 2.96031e-08
6b6     # exception oop is in rax; no code emitted
6b6     movq    RBX, RAX	# spill
6b9     MEMBAR-release (a FastUnlock follows so empty encoding)
6b9     movq    R11, RBP	# spill
6bc     movl    R10, #7	# long (unsigned 32-bit)
6c2     andq    R10, [R11]	# long
6c5     cmpq    R10, #5
6c9     jne     B63  P=0.000001 C=-1.000000

6cf     B59: #	out( B60 ) &lt;- in( B64 B63 B58 )  Freq: 2.96031e-08
6cf     movq    RSI, RBX	# spill

6d2     B60: #	out( N719 ) &lt;- in( B57 B59 )  Freq: 5.92063e-08
6d2     addq    rsp, 64	# Destroy frame
	popq    rbp

6d7     jmp     rethrow_stub

6dc     B61: #	out( B57 B62 ) &lt;- in( B56 )  Freq: 2.96032e-14
6dc     leaq    RAX, [rsp + #48]	# box lock
6e1     fastunlock R11,RAX	! kills RAX,R10
766     je     B57  P=0.999999 C=-1.000000

76c     B62: #	out( B57 ) &lt;- in( B61 )  Freq: 2.96032e-20
76c     movq    RDI, R11	# spill
76f     leaq    RSI, [rsp + #48]	# box lock
774     # TLS is in R15
774     movq    RDX, R15	# spill
777     call_leaf,runtime  complete_monitor_unlocking_C
        No JVM State Info
        # 
784     jmp     B57

789     B63: #	out( B59 B64 ) &lt;- in( B58 )  Freq: 2.96031e-14
789     leaq    RAX, [rsp + #48]	# box lock
78e     fastunlock R11,RAX	! kills RAX,R10
813     je     B59  P=0.999999 C=-1.000000

819     B64: #	out( B59 ) &lt;- in( B63 )  Freq: 2.96031e-20
819     movq    RDI, R11	# spill
81c     leaq    RSI, [rsp + #48]	# box lock
821     # TLS is in R15
821     movq    RDX, R15	# spill
824     call_leaf,runtime  complete_monitor_unlocking_C
        No JVM State Info
        # 
831     jmp     B59

--------------------------------------------------------------------------------
</opto_assembly>
   1062   65       3       java.io.DataInputStream::readUnsignedShort (39 bytes)   made not entrant
<writer thread='9219'/>
   1062  405     n 0       java.lang.invoke.MethodHandle::invokeBasic(LLL)L (native)   
<writer thread='37379'/>

============================= C2-compiled nmethod ==============================
<opto_assembly compile_id='349'>
----------------------- MetaData before Compile_id = 349 ------------------------
{method}
 - this oop:          0x0000000126a53e48
 - method holder:     &apos;java/lang/StringBuilder&apos;
 - constants:         0x0000000126a52280 constant pool [404] {0x0000000126a52280} for &apos;java/lang/StringBuilder&apos; cache=0x0000000126b95c80
 - access:            0x81000001  public 
 - name:              &apos;append&apos;
 - signature:         &apos;(C)Ljava/lang/StringBuilder;&apos;
 - max stack:         3
 - max locals:        2
 - size of params:    2
 - method size:       13
 - intrinsic id:      287 _StringBuilder_append_char
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x000000010c0a1de0
 - adapters:          AHE@0x00007f99308e1840: 0xba000000 i2c: 0x000000010c0e89e0 c2i: 0x000000010c0e8ac6 c2iUV: 0x000000010c0e8a8d c2iNCI: 0x000000010c0e8b03
 - compiled entry     0x000000010c7dfb60
 - code size:         8
 - code start:        0x0000000126a53e18
 - code end (excl):   0x0000000126a53e20
 - method data:       0x0000000126dcb9c8
 - checked ex length: 0
 - linenumber start:  0x0000000126a53e20
 - localvar length:   2
 - localvar start:    0x0000000126a53e26
 - compiled code: nmethod   1062   53       3       java.lang.StringBuilder::append (8 bytes)

------------------------ OptoAssembly for Compile_id = 349 -----------------------
#
#  java/lang/StringBuilder:exact * ( java/lang/StringBuilder:NotNull:exact *, int )
#
#r018 rsi:rsi   : parm 0: java/lang/StringBuilder:NotNull:exact *
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 96 --
#r583 rsp+92: in_preserve
#r582 rsp+88: return address
#r581 rsp+84: in_preserve
#r580 rsp+80: saved fp register
#r579 rsp+76: pad2, stack alignment
#r578 rsp+72: pad2, stack alignment
#r577 rsp+68: Fixed slot 1
#r576 rsp+64: Fixed slot 0
#r599 rsp+60: spill
#r598 rsp+56: spill
#r597 rsp+52: spill
#r596 rsp+48: spill
#r595 rsp+44: spill
#r594 rsp+40: spill
#r593 rsp+36: spill
#r592 rsp+32: spill
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N610: #	out( B1 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B46 B2 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (496 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #80	# Create frame

02c     movl    [rsp + #16], RDX	# spill
030     movq    [rsp + #32], RSI	# spill
035     movl    R11, [RSI + #20 (8-bit)]	# compressed ptr ! Field: java/lang/AbstractStringBuilder.value
039     movl    RBP, [R12 + R11 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
03e     NullCheck R11

03e     B2: #	out( B9 B3 ) &lt;- in( B1 )  Freq: 0.999999
03e     movsbl  RCX, [RSI + #16 (8-bit)]	# byte ! Field: java/lang/AbstractStringBuilder.coder
042     movl    RDX, [RSI + #12 (8-bit)]	# int ! Field: java/lang/AbstractStringBuilder.count
045     movl    R8, RBP	# spill
048     sarl    R8, RCX
04b     movl    R10, RDX	# spill
04e     subl    R10, R8	# int
051     incl    R10	# int
054     testl   R10, R10
057     jg,s   B9  P=0.072289 C=7802.000000

059     B3: #	out( B40 B4 ) &lt;- in( B28 B2 )  Freq: 0.999998
059     testl   RCX, RCX
05b     jne     B40  P=0.000000 C=14448.000000

061     B4: #	out( B41 B5 ) &lt;- in( B3 )  Freq: 0.999997
061     movl    RBP, [rsp + #16]	# spill
065     shrl    RBP, #8
068     testl   RBP, RBP
06a     jne     B41  P=0.000000 C=20572.000000

070     B5: #	out( B47 B6 ) &lt;- in( B4 )  Freq: 0.999997
070     movq    R10, [rsp + #32]	# spill
075     movl    R8, [R10 + #20 (8-bit)]	# compressed ptr ! Field: java/lang/AbstractStringBuilder.value
079     movl    R9, [R10 + #12 (8-bit)]	# int ! Field: java/lang/AbstractStringBuilder.count
07d     movsbl  RBP, [RSP + #16 (32-bit)]	# int -&gt; byte
082     movl    R10, R9	# spill
085     incl    R10	# int
088     movq    R11, [rsp + #32]	# spill
08d     movl    [R11 + #12 (8-bit)], R10	# int ! Field: java/lang/AbstractStringBuilder.count
091     movl    R10, [R12 + R8 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
096     NullCheck R8

096     B6: #	out( B39 B7 ) &lt;- in( B5 )  Freq: 0.999996
096     cmpl    R9, R10	# unsigned
099     jnb,u   B39  P=0.000001 C=-1.000000

09f     B7: #	out( N610 ) &lt;- in( B6 )  Freq: 0.999995
09f     decode_heap_oop_not_null R10,R8
0a3     movl    R8, [rsp + #16]	# spill
0a8     movb    [R10 + #16 + R9], R8	# byte
0ad     movq    RAX, R11	# spill
0b0     vzeroupper
	addq    rsp, 80	# Destroy frame
	popq    rbp
	movq    rscratch1, poll_offset[r15_thread] #polling_page_address
	testl   rax, [rscratch1]	# Safepoint: poll for GC

0c2     ret

0c3     B8: #	out( B11 ) &lt;- in( B9 )  Freq: 0.0361445
0c3     movl    R8, RDX	# spill
0c6     jmp,s   B11

0c8     B9: #	out( B8 B10 ) &lt;- in( B2 )  Freq: 0.0722891
0c8     sall    R8, #1
0cb     movl    R9, R8	# spill
0ce     subl    R9, RDX	# int
0d1     incl    RDX	# int
0d3     incl    R9	# int
0d6     testl   R9, R9
0d9     jl,s   B8  P=0.500000 C=-1.000000

0db     B10: #	out( B11 ) &lt;- in( B9 )  Freq: 0.0361445
0db     addl    R8, #2	# int

0df     B11: #	out( B13 B12 ) &lt;- in( B8 B10 )  Freq: 0.0722891
0df     testl   R8, R8
0e2     jle,s   B13  P=0.500000 C=-1.000000

0e4     B12: #	out( B15 B13 ) &lt;- in( B11 )  Freq: 0.0361445
0e4     movl    R9, #2147483639	# int
0ea     sarl    R9, RCX
0ed     subl    R9, R8	# int
0f0     testl   R9, R9
0f3     jge,s   B15  P=0.500000 C=-1.000000

0f5     B13: #	out( B49 B14 ) &lt;- in( B12 B11 )  Freq: 0.0542168
0f5     movl    [rsp + #20], R11	# spill
0fa     movq    [rsp + #8], RSI	# spill
0ff     movq    [rsp + #24], RSI	# spill
104     call,static  java.lang.AbstractStringBuilder::hugeCapacity
        # java.lang.AbstractStringBuilder::newCapacity @ bci:47  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.lang.AbstractStringBuilder::ensureCapacityInternal @ bci:24  L[0]=rsp + #8 L[1]=_ L[2]=_ STK[0]=rsp + #8 STK[1]=rsp + #20
        # java.lang.AbstractStringBuilder::append @ bci:7  L[0]=rsp + #24 L[1]=rsp + #16
        # java.lang.StringBuilder::append @ bci:2  L[0]=rsp + #8 L[1]=_
        # OopMap {[8]=Oop [20]=NarrowOop [24]=Oop [32]=Oop off=268/0x10c}

10c     B14: #	out( B15 ) &lt;- in( B13 )  Freq: 0.0542157
        # Block is sole successor of call
10c     movq    R11, [rsp + #8]	# spill
111     movsbl  RCX, [R11 + #16 (8-bit)]	# byte ! Field: java/lang/AbstractStringBuilder.coder
116     movl    R8, RAX	# spill
119     movl    R11, [rsp + #20]	# spill

11e     B15: #	out( B42 B16 ) &lt;- in( B14 B12 )  Freq: 0.072288
11e     sall    R8, RCX
121     cmpl    R8, #1048576	# unsigned
128     jnbe,u   B42  P=0.000001 C=-1.000000

12e     B16: #	out( B17 ) &lt;- in( B15 )  Freq: 0.0722879
12e     movslq  R9, R8	# i2l

131     B17: #	out( B44 B18 ) &lt;- in( B16 B42 )  Freq: 0.072288
131     movl    RBX, R8	# spill
134     # castII of RBX
134     cmpl    RBP, RBX
136     movl    R10, RBX	# spill
139     cmovll R10, RBP	# signed, int
13d     cmpl    RBP, R10	# unsigned
140     jb,u   B44  P=0.000001 C=-1.000000

146     B18: #	out( B44 B19 ) &lt;- in( B17 )  Freq: 0.0722879
146     cmpl    RBX, R10	# unsigned
149     jb,u   B44  P=0.000001 C=-1.000000

14f     B19: #	out( B37 B20 ) &lt;- in( B18 )  Freq: 0.0722879
14f     addq    R9, #23	# long
153     movq    RCX, R9	# spill
156     andq    RCX, #-8	# long
15a     cmpl    R8, #1048576	# unsigned
161     jnbe,u   B37  P=0.000001 C=-1.000000

167     B20: #	out( B37 B21 ) &lt;- in( B19 )  Freq: 0.0722878
167     # TLS is in R15
167     movq    RBP, [R15 + #320 (32-bit)]	# ptr
16e     movq    RBX, RBP	# spill
171     addq    RBX, RCX	# ptr
174     # TLS is in R15
174     cmpq    RBX, [R15 + #336 (32-bit)]	# raw ptr
17b     jnb,u   B37  P=0.000100 C=-1.000000

181     B21: #	out( B22 ) &lt;- in( B20 )  Freq: 0.0722806
181     # TLS is in R15
181     movq    [R15 + #320 (32-bit)], RBX	# ptr
188     PREFETCHW [RBX + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
18f     movq    [RBP], #1	# long
197     PREFETCHW [RBX + #256 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
19e     movl    [RBP + #8 (8-bit)], narrowklass: precise klass [B: 0x000000012728fa90:Constant:exact *	# compressed klass ptr
1a5     movl    [RBP + #12 (8-bit)], R8	# int
1a9     PREFETCHW [RBX + #320 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
1b0     PREFETCHW [RBX + #384 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified

1b7     B22: #	out( B43 B23 ) &lt;- in( B38 B21 )  Freq: 0.0722879
1b7     
1b7     # checkcastPP of RBP
1b7     movq    RSI, RBP	# spill
1ba     addq    RSI, #16	# ptr
1be     shrq    R9, #3
1c2     encode_heap_oop_not_null RBX,RBP
20b     testl   R10, R10
20e     je     B43  P=0.000001 C=-1.000000

214     B23: #	out( B29 B24 ) &lt;- in( B22 )  Freq: 0.0722878
214     decode_heap_oop_not_null RDI,R11
218     leaq    R11, [R12 + R11 &lt;&lt; 3 + #16] (compressed oop addressing)	# ptr compressedoopoff32
21d     cmpl    R10, R8
220     jl,s   B29  P=0.001000 C=-1.000000

222     B24: #	out( B25 ) &lt;- in( B23 )  Freq: 0.0722155
222     addq    RCX, #-16	# long
226     shrq    RCX, #3
22a     movq    RDI, R11	# spill
22d     movq    RDX, RCX	# spill
230     call_leaf_nofp,runtime  jlong_disjoint_arraycopy
        No JVM State Info
        # 

240     B25: #	out( B30 B26 ) &lt;- in( B29 B24 B43 )  Freq: 0.0722879
240     MEMBAR-storestore (empty encoding)
240     # TLS is in R15
240     cmpb    [R15 + #48 (8-bit)], #0
245     jne     B30  P=0.001000 C=-1.000000

24b     B26: #	out( B28 B27 ) &lt;- in( B45 B32 B30 B25 )  Freq: 0.0722879
24b     movq    R10, [rsp + #32]	# spill
250     movl    [R10 + #20 (8-bit)], RBX	# compressed ptr ! Field: java/lang/AbstractStringBuilder.value
254     movq    R10, RBP	# ptr -&gt; long
257     movq    R11, [rsp + #32]	# spill
25c     movq    R11, R11	# ptr -&gt; long
25c     xorq    R10, R11	# long
25f     shrq    R10, #20
263     testq   R10, R10
266     je,s   B28  P=0.001000 C=-1.000000

268     B27: #	out( B33 B28 ) &lt;- in( B26 )  Freq: 0.0722156
268     shrq    R11, #9
26c     movq    RDI, 0x0000000117891000	# ptr
276     addq    RDI, R11	# ptr
279     cmpb    [RDI], #8
27c     jne     B33  P=0.001000 C=-1.000000

282     B28: #	out( B3 ) &lt;- in( B35 B36 B33 B27 B26 )  Freq: 0.0722879
282     movq    R10, [rsp + #32]	# spill
287     movsbl  RCX, [R10 + #16 (8-bit)]	# byte ! Field: java/lang/AbstractStringBuilder.coder
28c     jmp     B3

291     B29: #	out( B25 ) &lt;- in( B23 )  Freq: 7.22878e-05
291     movslq  RDX, R10	# i2l
294     movq    R10, RDX	# spill
297     addq    R10, #16	# long
29b     movq    R8, R10	# spill
29e     andq    R8, #-8	# long
2a2     movq    RDI, RBP	# spill
2a5     addq    RDI, R8	# ptr
2a8     shrq    R10, #3
2ac     subq    R9, R10	# long
2af     movq    RCX, R9	# spill
2b2     xorq    rax, rax	# ClearArray:
	cmp     InitArrayShortSize,rcx
	jg      LARGE
	dec     rcx
	js      DONE	# Zero length
	mov     rax,(rdi,rcx,8)	# LOOP
	dec     rcx
	jge     LOOP
	jmp     DONE
	# LARGE:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
	# DONE
2d2     movq    RDI, R11	# spill
2d5     call_leaf_nofp,runtime  arrayof_jbyte_disjoint_arraycopy
        No JVM State Info
        # 
2e5     jmp     B25

2ea     B30: #	out( B26 B31 ) &lt;- in( B25 )  Freq: 7.22869e-05
2ea     movq    R10, [rsp + #32]	# spill
2ef     movl    R10, [R10 + #20 (8-bit)]	# compressed ptr ! Field: java/lang/AbstractStringBuilder.value
2f3     testl   R10, R10	# compressed ptr
2f6     je     B26  P=0.500000 C=-1.000000

2fc     B31: #	out( B45 B32 ) &lt;- in( B30 )  Freq: 3.61435e-05
2fc     # TLS is in R15
2fc     movq    R11, [R15 + #56 (8-bit)]	# long
300     decode_heap_oop RDI,R10
32c     testq   R11, R11
32f     je     B45  P=0.001000 C=-1.000000

335     B32: #	out( B26 ) &lt;- in( B31 )  Freq: 3.61073e-05
335     # TLS is in R15
335     movq    R10, [R15 + #72 (8-bit)]	# ptr
339     movq    [R10 + #-8 + R11], RDI	# ptr
33e     addq    R11, #-8	# long
342     # TLS is in R15
342     movq    [R15 + #56 (8-bit)], R11	# long
346     jmp     B26

34b     B33: #	out( B28 B34 ) &lt;- in( B27 )  Freq: 7.22156e-05
34b     # TLS is in R15
34b     movq    R10, [R15 + #120 (8-bit)]	# ptr
34f     # TLS is in R15
34f     movq    R11, [R15 + #104 (8-bit)]	# long
353     lock addl [rsp + #0], 0	! membar_volatile
359     cmpb    [RDI], #0
35c     je     B28  P=0.500000 C=-1.000000

362     B34: #	out( B36 B35 ) &lt;- in( B33 )  Freq: 3.61078e-05
362     movb    [RDI], #0	# CMS card-mark byte 0
365     testq   R11, R11
368     jne,s   B36  P=0.500000 C=-1.000000

36a     B35: #	out( B28 ) &lt;- in( B34 )  Freq: 1.80539e-05
36a     # TLS is in R15
36a     movq    RSI, R15	# spill
36d     call_leaf,runtime  write_ref_field_post_entry
        No JVM State Info
        # 
37d     jmp     B28

382     B36: #	out( B28 ) &lt;- in( B34 )  Freq: 1.80539e-05
382     movq    [R10 + #-8 + R11], RDI	# ptr
387     addq    R11, #-8	# long
38b     # TLS is in R15
38b     movq    [R15 + #104 (8-bit)], R11	# long
38f     jmp     B28

394     B37: #	out( B48 B38 ) &lt;- in( B19 B20 )  Freq: 7.30323e-06
394     movl    [rsp + #48], R10	# spill
399     movl    [rsp + #20], R11	# spill
39e     movq    [rsp + #24], RCX	# spill
3a3     movq    [rsp + #8], R9	# spill
3a8     movl    [rsp + #0], R8	# spill
3ac     movq    RBP, [rsp + #32]	# spill
3b1     movq    RSI, precise klass [B: 0x000000012728fa90:Constant:exact *	# ptr
3bb     movl    RDX, R8	# spill
        nop 	# 2 bytes pad for loops and calls
3c0     call,static  wrapper for: _new_array_nozero_Java
        # java.util.Arrays::copyOf @ bci:1  L[0]=rsp + #20 L[1]=rsp + #0 L[2]=_
        # java.lang.AbstractStringBuilder::ensureCapacityInternal @ bci:32  L[0]=_ L[1]=_ L[2]=_ STK[0]=RBP
        # java.lang.AbstractStringBuilder::append @ bci:7  L[0]=RBP L[1]=rsp + #16
        # java.lang.StringBuilder::append @ bci:2  L[0]=RBP L[1]=_
        # OopMap {rbp=Oop [20]=NarrowOop [32]=Oop off=968/0x3c8}

3c8     B38: #	out( B22 ) &lt;- in( B37 )  Freq: 7.30308e-06
        # Block is sole successor of call
3c8     movl    R8, [rsp + #0]	# spill
3cc     movq    R9, [rsp + #8]	# spill
3d1     movq    RCX, [rsp + #24]	# spill
3d6     movq    RBP, RAX	# spill
3d9     movl    R11, [rsp + #20]	# spill
3de     movl    R10, [rsp + #48]	# spill
3e3     jmp     B22

3e8     B39: #	out( N610 ) &lt;- in( B6 )  Freq: 1.01327e-06
3e8     movl    RSI, #-28	# int
3ed     movq    [rsp + #8], R11	# spill
3f2     movl    [rsp + #16], R8	# spill
3f7     movl    [rsp + #20], R9	# spill
3fc     call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos; debug_id=&apos;0&apos;)
        # java.lang.AbstractStringBuilder::append @ bci:41  L[0]=rsp + #32 L[1]=_ STK[0]=rsp + #16 STK[1]=rsp + #20 STK[2]=RBP
        # java.lang.StringBuilder::append @ bci:2  L[0]=rsp + #8 L[1]=_
        # OopMap {[8]=Oop [16]=NarrowOop [32]=Oop off=1028/0x404}
404     ud2	# ShouldNotReachHere

418     B40: #	out( N610 ) &lt;- in( B3 )  Freq: 4.99999e-07
418     movl    RSI, #-187	# int
41d     movq    RBP, [rsp + #32]	# spill
422     movl    [rsp + #12], RCX	# spill
        nop 	# 2 bytes pad for loops and calls
428     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.AbstractStringBuilder::isLatin1 @ bci:10  L[0]=_ STK[0]=rsp + #12
        # java.lang.AbstractStringBuilder::append @ bci:11  L[0]=RBP L[1]=rsp + #16
        # java.lang.StringBuilder::append @ bci:2  L[0]=RBP L[1]=_
        # OopMap {rbp=Oop off=1072/0x430}
430     ud2	# ShouldNotReachHere

444     B41: #	out( N610 ) &lt;- in( B4 )  Freq: 4.99999e-07
444     movl    RSI, #-187	# int
449     pushq   [rsp + #32]	# 64-bit mem-mem spill
	popq    [rsp + #0]
        nop 	# 2 bytes pad for loops and calls
454     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.StringLatin1::canEncode @ bci:4  L[0]=_ STK[0]=RBP
        # java.lang.AbstractStringBuilder::append @ bci:18  L[0]=rsp + #0 L[1]=rsp + #16
        # java.lang.StringBuilder::append @ bci:2  L[0]=rsp + #0 L[1]=_
        # OopMap {[0]=Oop off=1116/0x45c}
45c     ud2	# ShouldNotReachHere

470     B42: #	out( B17 ) &lt;- in( B15 )  Freq: 7.32479e-08
470     movslq  R9, R8	# i2l
473     jmp     B17

478     B43: #	out( B25 ) &lt;- in( B22 )  Freq: 7.32478e-08
478     addq    R9, #-2	# long
47c     movq    RCX, R9	# spill
47f     movq    RDI, RSI	# spill
482     xorq    rax, rax	# ClearArray:
	cmp     InitArrayShortSize,rcx
	jg      LARGE
	dec     rcx
	js      DONE	# Zero length
	mov     rax,(rdi,rcx,8)	# LOOP
	dec     rcx
	jge     LOOP
	jmp     DONE
	# LARGE:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
	# DONE
4a2     
4a2     jmp     B25

4a7     B44: #	out( N610 ) &lt;- in( B17 B18 )  Freq: 1.44576e-07
4a7     movl    RSI, #-52	# int
4ac     movq    RBP, [rsp + #32]	# spill
4b1     movl    R9, [rsp + #16]	# spill
4b6     movl    [rsp + #8], R9	# spill
4bb     movl    [rsp + #12], R11	# spill
4c0     movl    [rsp + #28], R8	# spill
        nop 	# 3 bytes pad for loops and calls
4c8     call,static  wrapper for: uncommon_trap(reason=&apos;intrinsic_or_type_checked_inlining&apos; action=&apos;make_not_entrant&apos; debug_id=&apos;0&apos;)
        # java.util.Arrays::copyOf @ bci:1  L[0]=rsp + #12 L[1]=rsp + #28 L[2]=_ STK[0]=rsp + #28
        # java.lang.AbstractStringBuilder::ensureCapacityInternal @ bci:32  L[0]=_ L[1]=_ L[2]=_ STK[0]=RBP
        # java.lang.AbstractStringBuilder::append @ bci:7  L[0]=RBP L[1]=rsp + #8
        # java.lang.StringBuilder::append @ bci:2  L[0]=RBP L[1]=_
        # OopMap {rbp=Oop [12]=NarrowOop off=1232/0x4d0}
4d0     ud2	# ShouldNotReachHere

4e4     B45: #	out( B26 ) &lt;- in( B31 )  Freq: 3.6143e-08
4e4     # TLS is in R15
4e4     movq    RSI, R15	# spill
4e7     call_leaf,runtime  write_ref_field_pre_entry
        No JVM State Info
        # 
4f7     jmp     B26

4fc     B46: #	out( N610 ) &lt;- in( B1 )  Freq: 1.01328e-06
4fc     movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
504     call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.AbstractStringBuilder::ensureCapacityInternal @ bci:4  L[0]=_ L[1]=_ L[2]=_ STK[0]=#NULL
        # java.lang.AbstractStringBuilder::append @ bci:7  L[0]=_ L[1]=_
        # java.lang.StringBuilder::append @ bci:2  L[0]=_ L[1]=_
        # OopMap {off=1292/0x50c}
50c     ud2	# ShouldNotReachHere

520     B47: #	out( N610 ) &lt;- in( B5 )  Freq: 1.01328e-06
520     movl    RSI, #-10	# int
525     movl    [rsp + #0], R9	# spill
        nop 	# 3 bytes pad for loops and calls
52c     call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.AbstractStringBuilder::append @ bci:41  L[0]=_ L[1]=_ STK[0]=#NULL STK[1]=rsp + #0 STK[2]=RBP
        # java.lang.StringBuilder::append @ bci:2  L[0]=_ L[1]=_
        # OopMap {off=1332/0x534}
534     ud2	# ShouldNotReachHere

548     B48: #	out( B50 ) &lt;- in( B37 )  Freq: 7.30323e-11
548     # exception oop is in rax; no code emitted
548     movq    RSI, RAX	# spill
54b     jmp,s   B50

54d     B49: #	out( B50 ) &lt;- in( B13 )  Freq: 5.42168e-07
54d     # exception oop is in rax; no code emitted
54d     movq    RSI, RAX	# spill

550     B50: #	out( N610 ) &lt;- in( B49 B48 )  Freq: 5.42241e-07
550     vzeroupper
	addq    rsp, 80	# Destroy frame
	popq    rbp

558     jmp     rethrow_stub

--------------------------------------------------------------------------------
</opto_assembly>
<writer thread='38659'/>
              s               @ 4   java.io.BufferedInputStream::read (49 bytes)   inline (hot)
                               \-&gt; TypeProfile (18026/18026 counts) = java/io/BufferedInputStream
                                @ 12   java.io.BufferedInputStream::fill (203 bytes)   too big
                                @ 29   java.io.BufferedInputStream::getBufIfOpen (21 bytes)   inline (hot)
              s               @ 12   java.io.BufferedInputStream::read (49 bytes)   inline (hot)
                               \-&gt; TypeProfile (18026/18026 counts) = java/io/BufferedInputStream
                                @ 12   java.io.BufferedInputStream::fill (203 bytes)   too big
                                @ 29   java.io.BufferedInputStream::getBufIfOpen (21 bytes)   inline (hot)
<writer thread='43011'/>

============================= C2-compiled nmethod ==============================
<opto_assembly compile_id='313'>
----------------------- MetaData before Compile_id = 313 ------------------------
{method}
 - this oop:          0x0000000126af3948
 - method holder:     &apos;java/util/HashMap&apos;
 - constants:         0x0000000126af0d88 constant pool [593] {0x0000000126af0d88} for &apos;java/util/HashMap&apos; cache=0x0000000126af6970
 - access:            0xc1000010  final 
 - name:              &apos;resize&apos;
 - signature:         &apos;()[Ljava/util/HashMap$Node;&apos;
 - max stack:         6
 - max locals:        14
 - size of params:    1
 - method size:       13
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x000000010c0a1de0
 - adapters:          AHE@0x00007f99308e1660: 0xb0000000 i2c: 0x000000010c0e9ee0 c2i: 0x000000010c0e9fc3 c2iUV: 0x000000010c0e9f8a c2iNCI: 0x000000010c0ea000
 - compiled entry     0x000000010c81b280
 - code size:         356
 - code start:        0x0000000126af36d8
 - code end (excl):   0x0000000126af383c
 - method data:       0x0000000126e913f0
 - checked ex length: 0
 - linenumber start:  0x0000000126af383c
 - localvar length:   17
 - localvar start:    0x0000000126af3878
 - compiled code: nmethod   1071  170       3       java.util.HashMap::resize (356 bytes)

------------------------ OptoAssembly for Compile_id = 313 -----------------------
#
#  narrowoop: java/util/HashMap$Node *[int:&gt;=0] * ( java/util/HashMap:NotNull * )
#
#r018 rsi:rsi   : parm 0: java/util/HashMap:NotNull *
# -- Old rsp -- Framesize: 128 --
#r583 rsp+124: in_preserve
#r582 rsp+120: return address
#r581 rsp+116: in_preserve
#r580 rsp+112: saved fp register
#r579 rsp+108: pad2, stack alignment
#r578 rsp+104: pad2, stack alignment
#r577 rsp+100: Fixed slot 1
#r576 rsp+96: Fixed slot 0
#r607 rsp+92: spill
#r606 rsp+88: spill
#r605 rsp+84: spill
#r604 rsp+80: spill
#r603 rsp+76: spill
#r602 rsp+72: spill
#r601 rsp+68: spill
#r600 rsp+64: spill
#r599 rsp+60: spill
#r598 rsp+56: spill
#r597 rsp+52: spill
#r596 rsp+48: spill
#r595 rsp+44: spill
#r594 rsp+40: spill
#r593 rsp+36: spill
#r592 rsp+32: spill
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N1981: #	out( B1 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B3 B2 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (248 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #112	# Create frame

02c     movq    [rsp + #16], RSI	# spill
031     movl    R13, [RSI + #28 (8-bit)]	# int ! Field: java/util/HashMap.threshold
035     movl    R10, [RSI + #36 (8-bit)]	# compressed ptr ! Field: java/util/HashMap.table
039     testl   R10, R10	# compressed ptr
03c     je,s   B3  P=0.782388 C=2169.000000

03e     B2: #	out( B4 ) &lt;- in( B1 )  Freq: 0.217612
03e     movl    RBX, [R12 + R10 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
043     decode_heap_oop_not_null R14,R10
047     jmp,s   B4

049     B3: #	out( B4 ) &lt;- in( B1 )  Freq: 0.782388
049     xorl    RBX, RBX	# int
04b     xorl    R14, R14	# ptr

04e     B4: #	out( B10 B5 ) &lt;- in( B2 B3 )  Freq: 1
04e     testl   RBX, RBX
050     jle,s   B10  P=0.782388 C=2169.000000

052     B5: #	out( B145 B6 ) &lt;- in( B4 )  Freq: 0.217612
052     cmpl    RBX, #1073741824
058     jge     B145  P=0.000000 C=472.000000

05e     B6: #	out( B146 B7 ) &lt;- in( B5 )  Freq: 0.217612
05e     movl    RBP, RBX	# spill
060     sall    RBP, #1
062     cmpl    RBP, #1073741824
068     jge     B146  P=0.000000 C=472.000000

06e     B7: #	out( B9 B8 ) &lt;- in( B6 )  Freq: 0.217612
06e     cmpl    RBX, #16
071     jge,s   B9  P=0.622881 C=472.000000

073     B8: #	out( B13 ) &lt;- in( B7 )  Freq: 0.0820654
073     movl    R13, RBP	# spill
076     xorl    R11, R11	# int
079     jmp,s   B13

07b     B9: #	out( B13 ) &lt;- in( B7 )  Freq: 0.135546
07b     movl    R11, R13	# spill
07e     sall    R11, #1
081     movl    R13, RBP	# spill
084     jmp,s   B13

086     B10: #	out( B12 B11 ) &lt;- in( B4 )  Freq: 0.782388
086     testl   R13, R13
089     jle,s   B12  P=0.385386 C=1697.000000

08b     B11: #	out( B13 ) &lt;- in( B10 )  Freq: 0.480867
08b     xorl    R11, R11	# int
08e     jmp,s   B13

090     B12: #	out( B13 ) &lt;- in( B10 )  Freq: 0.301521
090     movl    R11, #12	# int
096     movl    R13, #16	# int

09c     B13: #	out( B17 B14 ) &lt;- in( B8 B12 B11 B9 )  Freq: 1
09c     testl   R11, R11
09f     jne,s   B17  P=0.437068 C=2169.000000

0a1     B14: #	out( B140 B15 ) &lt;- in( B13 )  Freq: 0.562932
0a1     cvtsi2ssl XMM1, R13	# i2f
0a6     vmulss  XMM1, XMM1, [RSI + #32 (8-bit)]
0ab     cmpl    R13, #1073741824
0b2     jge     B140  P=0.000000 C=1221.000000

0b8     B15: #	out( B139 B16 ) &lt;- in( B14 )  Freq: 0.562932
0b8     # MachConstantBaseNode (empty encoding)
0b8     movss   XMM2, [constant table base + #0]	# load from constant table: float=#1073741824.000000
0c0     ucomiss XMM2, XMM1
0c4     jbe,u   B139  P=0.000000 C=1221.000000

0ca     B16: #	out( B17 ) &lt;- in( B15 )  Freq: 0.562932
0ca     cvttss2sil R11, XMM1	# f2i
	cmpl    R11, #0x80000000
	jne,s   done
	subq    rsp, #8
	movss   [rsp], XMM1
	call    f2i_fixup
	popq    R11
done:   

0e7     B17: #	out( B131 B18 ) &lt;- in( B16 B13 )  Freq: 0.999999
0e7     cmpl    R13, #262144	# unsigned
0ee     jnbe,u   B131  P=0.000001 C=-1.000000

0f4     B18: #	out( B19 ) &lt;- in( B17 )  Freq: 0.999998
0f4     movslq  RCX, R13	# i2l

0f7     B19: #	out( B126 B20 ) &lt;- in( B18 B131 )  Freq: 0.999999
0f7     movl    [RSI + #28 (8-bit)], R11	# int ! Field: java/util/HashMap.threshold
0fb     cmpl    R13, #262144	# unsigned
102     jnbe,u   B126  P=0.000001 C=-1.000000

108     B20: #	out( B126 B21 ) &lt;- in( B19 )  Freq: 0.999998
108     # TLS is in R15
108     movq    R8, [R15 + #320 (32-bit)]	# ptr
10f     salq    RCX, #2
113     addq    RCX, #23	# long
117     movq    R10, RCX	# spill
11a     andq    R10, #-8	# long
11e     movq    R11, R8	# spill
121     addq    R11, R10	# ptr
124     # TLS is in R15
124     cmpq    R11, [R15 + #336 (32-bit)]	# raw ptr
12b     jnb,u   B126  P=0.000100 C=-1.000000

131     B21: #	out( B22 ) &lt;- in( B20 )  Freq: 0.999898
131     # TLS is in R15
131     movq    [R15 + #320 (32-bit)], R11	# ptr
138     PREFETCHW [R11 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
140     movq    [R8], #1	# long
147     PREFETCHW [R11 + #256 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
14f     movl    [R8 + #8 (8-bit)], narrowklass: precise klass [Ljava/util/HashMap$Node;: 0x0000000127e9bf60:Constant:exact *	# compressed klass ptr
157     movl    [R8 + #12 (8-bit)], R13	# int
15b     PREFETCHW [R11 + #320 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
163     movq    RDI, R8	# spill
166     addq    RDI, #16	# ptr
16a     PREFETCHW [R11 + #384 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
172     shrq    RCX, #3
176     addq    RCX, #-2	# long
17a     xorq    rax, rax	# ClearArray:
	cmp     InitArrayShortSize,rcx
	jg      LARGE
	dec     rcx
	js      DONE	# Zero length
	mov     rax,(rdi,rcx,8)	# LOOP
	dec     rcx
	jge     LOOP
	jmp     DONE
	# LARGE:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
	# DONE

19a     B22: #	out( B92 B23 ) &lt;- in( B127 B21 )  Freq: 0.999999
19a     
19a     MEMBAR-storestore (empty encoding)
19a     # checkcastPP of R8
19a     movq    [rsp + #32], R8	# spill
19f     # TLS is in R15
19f     cmpb    [R15 + #48 (8-bit)], #0
1a4     jne     B92  P=0.001000 C=-1.000000

1aa     B23: #	out( B25 B24 ) &lt;- in( B134 B94 B92 B22 )  Freq: 0.999999
1aa     movq    R10, [rsp + #16]	# spill
1af     movq    R10, R10	# ptr -&gt; long
1af     movq    R11, [rsp + #32]	# spill
1b4     movq    R11, R11	# ptr -&gt; long
1b4     xorq    R11, R10	# long
1b7     movq    R8, [rsp + #32]	# spill
1bc     encode_heap_oop_not_null R9,R8
205     movq    R8, [rsp + #16]	# spill
20a     movl    [R8 + #36 (8-bit)], R9	# compressed ptr ! Field: java/util/HashMap.table
20e     shrq    R11, #20
212     testq   R11, R11
215     je,s   B25  P=0.001000 C=-1.000000

217     B24: #	out( B95 B25 ) &lt;- in( B23 )  Freq: 0.998999
217     shrq    R10, #9
21b     movq    RDI, 0x0000000117891000	# ptr
225     addq    RDI, R10	# ptr
228     cmpb    [RDI], #8
22b     jne     B95  P=0.001000 C=-1.000000

231     B25: #	out( B31 B26 ) &lt;- in( B97 B98 B95 B24 B23 )  Freq: 0.999999
231     testq   R14, R14	# ptr
234     je,s   B31  P=0.782388 C=2169.000000

236     B26: #	out( B31 B27 ) &lt;- in( B25 )  Freq: 0.217612
236     testl   RBX, RBX
238     jle,s   B31  P=0.033508 C=14086.000000

23a     B27: #	out( B143 B28 ) &lt;- in( B26 )  Freq: 0.21032
23a     movl    R11, [R14 + #12 (8-bit)]	# range
23e     # castII of R13
23e     movl    [rsp + #28], R13	# spill
243     testl   R11, R11	# unsigned
246     jbe,u   B143  P=0.000001 C=-1.000000

24c     B28: #	out( B143 B29 ) &lt;- in( B27 )  Freq: 0.21032
24c     movl    R8, RBX	# spill
24f     decl    R8	# int
252     cmpl    R8, R11	# unsigned
255     jnb,u   B143  P=0.000001 C=-1.000000

25b     B29: #	out( B144 B30 ) &lt;- in( B28 )  Freq: 0.210319
25b     testl   R13, R13
25e     jle     B144  P=0.000001 C=-1.000000

264     B30: #	out( B35 ) &lt;- in( B29 )  Freq: 0.210319
264     movl    R10, R13	# spill
267     decl    R10	# int
26a     movslq  R11, RBX	# i2l
26d     xorl    R13, R13	# int
270     jmp,s   B35

272     B31: #	out( N1981 ) &lt;- in( B34 B26 B25 )  Freq: 0.999996
272     movq    RAX, [rsp + #32]	# spill
277     addq    rsp, 112	# Destroy frame
	popq    rbp
	movq    rscratch1, poll_offset[r15_thread] #polling_page_address
	testl   rax, [rscratch1]	# Safepoint: poll for GC

286     ret

287     B32: #	out( B33 ) &lt;- in( B45 )  Freq: 0.000543361
287     movl    RBP, RBX	# spill
289     # TLS is in R15
289     movq    RSI, R15	# spill
28c     call_leaf,runtime  write_ref_field_post_entry
        No JVM State Info
        # 
299     movl    RBX, RBP	# spill

29b     B33: #	out( B34 ) &lt;- in( B32 B46 B44 B43 B42 ) top-of-loop Freq: 2.17562
29b     movl    R10, [rsp + #24]	# spill
2a0     movq    R11, [rsp + #40]	# spill
2a5     movl    R13, [rsp + #72]	# spill

2aa     B34: #	out( B31 B35 ) &lt;- in( B35 B66 B59 B33 )  Freq: 6.27652
2aa     # TLS is in R15
2aa     movq    R8, [R15 + #296 (32-bit)]	# ptr
2b1     incl    R13	# int
2b4     testl   rax, [R8]	# Safepoint: poll for GC        # java.util.HashMap::resize @ bci:350  L[0]=rsp + #16 L[1]=R14 L[2]=RBX L[3]=_ L[4]=rsp + #28 L[5]=_ L[6]=rsp + #32 L[7]=R13 L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ L[13]=_
        # OopMap {r14=Oop [16]=Oop [32]=Oop off=692/0x2b4}
2b7     cmpl    R13, RBX
2ba     jge,s   B31	# loop end  P=0.033508 C=13614.000000

2bc     B35: #	out( B34 B36 ) &lt;- in( B30 B34 ) Loop( B35-B34 ) Freq: 6.27652
2bc     movslq  RCX, R13	# i2l
2bf     movq    RBP, RCX	# spill
2c2     salq    RBP, #2
2c6     movl    R8, [R14 + #16 + RBP]	# compressed ptr
2cb     movl    [rsp + #76], R8	# spill
2d0     testl   R8, R8	# compressed ptr
2d3     je,s   B34  P=0.466578 C=13614.000000

2d5     B36: #	out( B87 B37 ) &lt;- in( B35 )  Freq: 3.34803
2d5     # TLS is in R15
2d5     cmpb    [R15 + #48 (8-bit)], #0
2da     jne     B87  P=0.001000 C=-1.000000

2e0     B37: #	out( B38 ) &lt;- in( B36 )  Freq: 3.34468
2e0     movl    [rsp + #24], R10	# spill
2e5     movq    [rsp + #40], R11	# spill
2ea     movl    [rsp + #72], R13	# spill
2ef     movq    [rsp + #80], RCX	# spill

2f4     B38: #	out( B41 B39 ) &lt;- in( B128 B88 B37 )  Freq: 3.34803
2f4     movl    [R14 + #16 + RBP], narrowoop: NULL	# compressed ptr
2fd     movl    R13, [rsp + #76]	# spill
302     movl    R13, [R12 + R13 &lt;&lt; 3 + #24] (compressed oop addressing)	# compressed ptr ! Field: java/util/HashMap$Node.next
307     movl    [rsp + #8], R13	# spill
30c     movl    R13, [rsp + #76]	# spill
311     decode_heap_oop_not_null R10,R13
315     movq    [rsp + #88], R10	# spill
31a     movl    R11, [R12 + R13 &lt;&lt; 3 + #12] (compressed oop addressing)	# int ! Field: java/util/HashMap$Node.hash
31f     movl    R13, [rsp + #8]	# spill
324     testl   R13, R13	# compressed ptr
327     je,s   B41  P=0.649821 C=7262.000000

329     B39: #	out( B129 B40 ) &lt;- in( B38 )  Freq: 1.17241
329     movl    R13, [rsp + #76]	# spill
32e     movl    R9, [R12 + R13 &lt;&lt; 3 + #8] (compressed oop addressing)	# compressed klass ptr
333     cmpl    R9, narrowklass: precise klass java/util/HashMap$TreeNode: 0x0000000127a6e620:Constant:exact *	# compressed klass ptr
33a     je,u   B129  P=0.000001 C=-1.000000

340     B40: #	out( B68 ) &lt;- in( B39 )  Freq: 1.17241
340     movq    [rsp + #0], R14	# spill
344     movl    R14, RBX	# spill
347     xorl    RBX, RBX	# ptr
349     xorl    R9, R9	# ptr
34c     xorl    R8, R8	# ptr
34f     xorl    R10, R10	# ptr
352     movq    [rsp + #64], R9	# spill
357     movq    [rsp + #56], R8	# spill
35c     movq    [rsp + #48], R10	# spill
361     jmp     B68

366     B41: #	out( B89 B42 ) &lt;- in( B38 )  Freq: 2.17562
366     movl    R10, [rsp + #24]	# spill
36b     andl    R10, R11	# int
36e     movq    R11, [rsp + #32]	# spill
373     leaq    RBP, [R11 + #16 + R10 &lt;&lt; #2]	# ptr posidxscaleoff
378     # TLS is in R15
378     cmpb    [R15 + #48 (8-bit)], #0
37d     jne     B89  P=0.001000 C=-1.000000

383     B42: #	out( B33 B43 ) &lt;- in( B130 B91 B89 B41 )  Freq: 2.17562
383     movl    R13, [rsp + #76]	# spill
388     movl    [RBP], R13	# compressed ptr
38c     movq    R10, [rsp + #88]	# spill
391     movq    R10, R10	# ptr -&gt; long
391     movq    R11, RBP	# ptr -&gt; long
394     xorq    R10, R11	# long
397     shrq    R10, #20
39b     testq   R10, R10
39e     je     B33  P=0.001000 C=-1.000000

3a4     B43: #	out( B33 B44 ) &lt;- in( B42 )  Freq: 2.17345
3a4     shrq    R11, #9
3a8     movq    RDI, 0x0000000117891000	# ptr
3b2     addq    RDI, R11	# ptr
3b5     cmpb    [RDI], #8
3b8     je     B33  P=0.999000 C=-1.000000

3be     B44: #	out( B33 B45 ) &lt;- in( B43 )  Freq: 0.00217345
3be     # TLS is in R15
3be     movq    R10, [R15 + #120 (8-bit)]	# ptr
3c2     # TLS is in R15
3c2     movq    R11, [R15 + #104 (8-bit)]	# long
3c6     lock addl [rsp + #0], 0	! membar_volatile
3cc     cmpb    [RDI], #0
3cf     je     B33  P=0.500000 C=-1.000000

3d5     B45: #	out( B32 B46 ) &lt;- in( B44 )  Freq: 0.00108672
3d5     movb    [RDI], #0	# CMS card-mark byte 0
3d8     testq   R11, R11
3db     je     B32  P=0.500000 C=-1.000000

3e1     B46: #	out( B33 ) &lt;- in( B45 )  Freq: 0.000543361
3e1     movq    [R10 + #-8 + R11], RDI	# ptr
3e6     addq    R11, #-8	# long
3ea     # TLS is in R15
3ea     movq    [R15 + #104 (8-bit)], R11	# long
3ee     jmp     B33
        nop 	# 13 bytes pad for loops and calls

400     B47: #	out( B48 ) &lt;- in( B79 ) top-of-loop Freq: 0.892561
400     movq    RBX, [rsp + #88]	# spill
405     movq    [rsp + #56], RBX	# spill
40a     movq    R13, [rsp + #88]	# spill

40f     B48: #	out( B49 ) &lt;- in( B85 B86 B83 B82 B81 B47 ) top-of-loop Freq: 1.35452
40f     movq    RBX, R13	# spill

412     B49: #	out( B67 B50 ) &lt;- in( B78 B48 )  Freq: 2.69981
412     # TLS is in R15
412     movq    R10, [R15 + #296 (32-bit)]	# ptr
419     testl   rax, [R10]	# Safepoint: poll for GC        # java.util.HashMap::resize @ bci:306  L[0]=rsp + #16 L[1]=rsp + #0 L[2]=R14 L[3]=_ L[4]=rsp + #28 L[5]=_ L[6]=rsp + #32 L[7]=rsp + #72 L[8]=rsp + #8 L[9]=rsp + #56 L[10]=RBX L[11]=rsp + #48 L[12]=rsp + #64 L[13]=_ STK[0]=rsp + #8
        # OopMap {rbx=Oop [0]=Oop [8]=NarrowOop [16]=Oop [32]=Oop [48]=Oop [56]=Oop [64]=Oop off=1049/0x419}
41c     movl    R13, [rsp + #8]	# spill
421     testl   R13, R13	# compressed ptr
424     jne     B67  P=0.565745 C=5856.000000

42a     B50: #	out( B52 B51 ) &lt;- in( B49 )  Freq: 1.17241
42a     testq   RBX, RBX	# ptr
42d     jne,s   B52  P=0.761306 C=2543.000000

42f     B51: #	out( B58 ) &lt;- in( B50 )  Freq: 0.279847
42f     movl    R13, [rsp + #72]	# spill
434     jmp     B58

439     B52: #	out( B109 B53 ) &lt;- in( B50 )  Freq: 0.892561
439     # TLS is in R15
439     cmpb    [R15 + #48 (8-bit)], #0
43e     jne     B109  P=0.001000 C=-1.000000

444     B53: #	out( B133 B54 ) &lt;- in( B137 B111 B109 B52 )  Freq: 0.892561
444     movl    [RBX + #24 (8-bit)], narrowoop: NULL	# compressed ptr ! Field: java/util/HashMap$Node.next
44b     movl    R13, [rsp + #72]	# spill
450     cmpl    R13, [RSP + #28 (32-bit)]	# unsigned
455     jnb,u   B133  P=0.000001 C=-1.000000

45b     B54: #	out( B112 B55 ) &lt;- in( B53 )  Freq: 0.892561
45b     movq    R10, [rsp + #32]	# spill
460     leaq    RBX, [R10 + #16 + RBP]	# ptr idxoff
465     # TLS is in R15
465     cmpb    [R15 + #48 (8-bit)], #0
46a     jne     B112  P=0.001000 C=-1.000000

470     B55: #	out( B58 B56 ) &lt;- in( B115 B112 B54 )  Freq: 0.892561
470     movq    R8, [rsp + #56]	# spill
475     movq    R11, R8	# ptr -&gt; long
478     encode_heap_oop R10,R8
4a4     movl    [RBX], R10	# compressed ptr
4a7     movq    R10, RBX	# ptr -&gt; long
4aa     xorq    R11, R10	# long
4ad     shrq    R11, #20
4b1     testq   R11, R11
4b4     je,s   B58  P=0.001000 C=-1.000000

4b6     B56: #	out( B58 B57 ) &lt;- in( B55 )  Freq: 0.891668
4b6     testq   R8, R8	# ptr
4b9     je,s   B58  P=0.001000 C=-1.000000

4bb     B57: #	out( B116 B58 ) &lt;- in( B56 )  Freq: 0.890776
4bb     shrq    R10, #9
4bf     movq    RDI, 0x0000000117891000	# ptr
4c9     addq    RDI, R10	# ptr
4cc     cmpb    [RDI], #8
4cf     jne     B116  P=0.001000 C=-1.000000

4d5     B58: #	out( B60 B59 ) &lt;- in( B118 B119 B116 B57 B56 B55 B51 )  Freq: 1.17241
4d5     movq    R8, [rsp + #64]	# spill
4da     testq   R8, R8	# ptr
4dd     jne,s   B60  P=0.777821 C=2543.000000

4df     B59: #	out( B34 ) &lt;- in( B58 )  Freq: 0.260484
4df     movl    RBX, R14	# spill
4e2     movq    R14, [rsp + #0]	# spill
4e6     movl    R10, [rsp + #24]	# spill
4eb     movq    R11, [rsp + #40]	# spill
4f0     jmp     B34

4f5     B60: #	out( B99 B61 ) &lt;- in( B58 )  Freq: 0.911924
4f5     # TLS is in R15
4f5     cmpb    [R15 + #48 (8-bit)], #0
4fa     jne     B99  P=0.001000 C=-1.000000

500     B61: #	out( B132 B62 ) &lt;- in( B135 B101 B99 B60 )  Freq: 0.911924
500     movl    [R8 + #24 (8-bit)], narrowoop: NULL	# compressed ptr ! Field: java/util/HashMap$Node.next
508     movl    RBP, R13	# spill
50b     addl    RBP, R14	# int
50e     cmpl    RBP, [RSP + #28 (32-bit)]	# unsigned
512     jnb,u   B132  P=0.000001 C=-1.000000

518     B62: #	out( B102 B63 ) &lt;- in( B61 )  Freq: 0.911923
518     movq    R10, [rsp + #40]	# spill
51d     addq    R10, [RSP + #80 (32-bit)]	# long
522     movq    R11, [rsp + #32]	# spill
527     leaq    RBX, [R11 + #16 + R10 &lt;&lt; #2]	# ptr idxscaleoff
52c     # TLS is in R15
52c     cmpb    [R15 + #48 (8-bit)], #0
531     jne     B102  P=0.001000 C=-1.000000

537     B63: #	out( B66 B64 ) &lt;- in( B136 B104 B102 B62 )  Freq: 0.911923
537     movq    R8, [rsp + #48]	# spill
53c     movq    R10, R8	# ptr -&gt; long
53f     encode_heap_oop R11,R8
56b     movl    [RBX], R11	# compressed ptr
56e     movq    R11, RBX	# ptr -&gt; long
571     xorq    R10, R11	# long
574     shrq    R10, #20
578     testq   R10, R10
57b     je,s   B66  P=0.001000 C=-1.000000

57d     B64: #	out( B66 B65 ) &lt;- in( B63 )  Freq: 0.911011
57d     testq   R8, R8	# ptr
580     je,s   B66  P=0.001000 C=-1.000000

582     B65: #	out( B105 B66 ) &lt;- in( B64 )  Freq: 0.9101
582     shrq    R11, #9
586     movq    RDI, 0x0000000117891000	# ptr
590     addq    RDI, R11	# ptr
593     cmpb    [RDI], #8
596     jne     B105  P=0.001000 C=-1.000000

59c     B66: #	out( B34 ) &lt;- in( B107 B108 B105 B65 B64 B63 )  Freq: 0.911923
59c     movl    RBX, R14	# spill
59f     movq    R14, [rsp + #0]	# spill
5a3     movl    R10, [rsp + #24]	# spill
5a8     movq    R11, [rsp + #40]	# spill
5ad     jmp     B34

5b2     B67: #	out( B68 ) &lt;- in( B49 )  Freq: 1.5274
5b2     movl    R11, [R12 + R13 &lt;&lt; 3 + #12] (compressed oop addressing)	# int ! Field: java/util/HashMap$Node.hash
5b7     movl    R8, [R12 + R13 &lt;&lt; 3 + #24] (compressed oop addressing)	# compressed ptr ! Field: java/util/HashMap$Node.next
5bc     decode_heap_oop_not_null R10,R13
5c0     encode_heap_oop_not_null R13,R10
609     movl    [rsp + #76], R13	# spill
60e     movl    [rsp + #8], R8	# spill
613     movq    [rsp + #88], R10	# spill

618     B68: #	out( B79 B69 ) &lt;- in( B40 B67 ) Loop( B68-B67 inner ) Freq: 2.69981
618     andl    R11, R14	# int
61b     testl   R11, R11
61e     je     B79  P=0.501708 C=5856.000000

624     B69: #	out( B77 B70 ) &lt;- in( B68 )  Freq: 1.3453
624     movq    R10, [rsp + #64]	# spill
629     testq   R10, R10	# ptr
62c     je     B77  P=0.677862 C=2918.000000

632     B70: #	out( B123 B71 ) &lt;- in( B69 )  Freq: 0.433372
632     # TLS is in R15
632     cmpb    [R15 + #48 (8-bit)], #0
637     jne     B123  P=0.001000 C=-1.000000

63d     B71: #	out( B78 B72 ) &lt;- in( B142 B125 B123 B70 )  Freq: 0.433372
63d     movq    R10, [rsp + #64]	# spill
642     movl    R13, [rsp + #76]	# spill
647     movl    [R10 + #24 (8-bit)], R13	# compressed ptr ! Field: java/util/HashMap$Node.next
64b     movq    R13, [rsp + #88]	# spill
650     movq    R10, R13	# ptr -&gt; long
653     movq    R11, [rsp + #64]	# spill
658     movq    R11, R11	# ptr -&gt; long
658     xorq    R10, R11	# long
65b     shrq    R10, #20
65f     testq   R10, R10
662     je,s   B78  P=0.001000 C=-1.000000

664     B72: #	out( B78 B73 ) &lt;- in( B71 )  Freq: 0.432938
664     shrq    R11, #9
668     movq    RDI, 0x0000000117891000	# ptr
672     addq    RDI, R11	# ptr
675     cmpb    [RDI], #8
678     je,s   B78  P=0.999000 C=-1.000000

67a     B73: #	out( B78 B74 ) &lt;- in( B72 )  Freq: 0.000432938
67a     # TLS is in R15
67a     movq    R10, [R15 + #120 (8-bit)]	# ptr
67e     # TLS is in R15
67e     movq    R11, [R15 + #104 (8-bit)]	# long
682     lock addl [rsp + #0], 0	! membar_volatile
688     cmpb    [RDI], #0
68b     je,s   B78  P=0.500000 C=-1.000000

68d     B74: #	out( B76 B75 ) &lt;- in( B73 )  Freq: 0.000216469
68d     movb    [RDI], #0	# CMS card-mark byte 0
690     testq   R11, R11
693     jne,s   B76  P=0.500000 C=-1.000000

695     B75: #	out( B78 ) &lt;- in( B74 )  Freq: 0.000108235
695     # TLS is in R15
695     movq    RSI, R15	# spill
698     call_leaf,runtime  write_ref_field_post_entry
        No JVM State Info
        # 
6a5     jmp,s   B78

6a7     B76: #	out( B78 ) &lt;- in( B74 )  Freq: 0.000108235
6a7     movq    [R10 + #-8 + R11], RDI	# ptr
6ac     addq    R11, #-8	# long
6b0     # TLS is in R15
6b0     movq    [R15 + #104 (8-bit)], R11	# long
6b4     jmp,s   B78

6b6     B77: #	out( B78 ) &lt;- in( B69 )  Freq: 0.911925
6b6     movq    R13, [rsp + #88]	# spill
6bb     movq    [rsp + #48], R13	# spill

6c0     B78: #	out( B49 ) &lt;- in( B75 B76 B73 B72 B71 B77 )  Freq: 1.3453
6c0     movq    [rsp + #64], R13	# spill
6c5     jmp     B49

6ca     B79: #	out( B47 B80 ) &lt;- in( B68 )  Freq: 1.35452
6ca     testq   RBX, RBX	# ptr
6cd     je     B47  P=0.658952 C=2938.000000

6d3     B80: #	out( B120 B81 ) &lt;- in( B79 )  Freq: 0.461956
6d3     # TLS is in R15
6d3     cmpb    [R15 + #48 (8-bit)], #0
6d8     jne     B120  P=0.001000 C=-1.000000

6de     B81: #	out( B48 B82 ) &lt;- in( B141 B122 B120 B80 )  Freq: 0.461956
6de     movl    R13, [rsp + #76]	# spill
6e3     movl    [RBX + #24 (8-bit)], R13	# compressed ptr ! Field: java/util/HashMap$Node.next
6e7     movq    R13, [rsp + #88]	# spill
6ec     movq    R10, R13	# ptr -&gt; long
6ef     movq    R11, RBX	# ptr -&gt; long
6f2     xorq    R10, R11	# long
6f5     shrq    R10, #20
6f9     testq   R10, R10
6fc     je     B48  P=0.001000 C=-1.000000

702     B82: #	out( B48 B83 ) &lt;- in( B81 )  Freq: 0.461494
702     shrq    R11, #9
706     movq    RDI, 0x0000000117891000	# ptr
710     addq    RDI, R11	# ptr
713     cmpb    [RDI], #8
716     je     B48  P=0.999000 C=-1.000000

71c     B83: #	out( B48 B84 ) &lt;- in( B82 )  Freq: 0.000461494
71c     # TLS is in R15
71c     movq    R10, [R15 + #120 (8-bit)]	# ptr
720     # TLS is in R15
720     movq    R11, [R15 + #104 (8-bit)]	# long
724     lock addl [rsp + #0], 0	! membar_volatile
72a     cmpb    [RDI], #0
72d     je     B48  P=0.500000 C=-1.000000

733     B84: #	out( B86 B85 ) &lt;- in( B83 )  Freq: 0.000230747
733     movb    [RDI], #0	# CMS card-mark byte 0
736     testq   R11, R11
739     jne,s   B86  P=0.500000 C=-1.000000

73b     B85: #	out( B48 ) &lt;- in( B84 )  Freq: 0.000115373
73b     # TLS is in R15
73b     movq    RSI, R15	# spill
73e     call_leaf,runtime  write_ref_field_post_entry
        No JVM State Info
        # 
74b     jmp     B48

750     B86: #	out( B48 ) &lt;- in( B84 )  Freq: 0.000115373
750     movq    [R10 + #-8 + R11], RDI	# ptr
755     addq    R11, #-8	# long
759     # TLS is in R15
759     movq    [R15 + #104 (8-bit)], R11	# long
75d     jmp     B48

762     B87: #	out( B128 B88 ) &lt;- in( B36 )  Freq: 0.00334799
762     # TLS is in R15
762     movq    R8, [R15 + #56 (8-bit)]	# long
766     movl    R9, [rsp + #76]	# spill
76b     decode_heap_oop RDI,R9
797     testq   R8, R8
79a     je     B128  P=0.001000 C=-1.000000

7a0     B88: #	out( B38 ) &lt;- in( B87 )  Freq: 0.00334464
7a0     movq    [rsp + #80], RCX	# spill
7a5     movl    [rsp + #72], R13	# spill
7aa     movq    [rsp + #40], R11	# spill
7af     movl    [rsp + #24], R10	# spill
7b4     # TLS is in R15
7b4     movq    R10, [R15 + #72 (8-bit)]	# ptr
7b8     movq    [R10 + #-8 + R8], RDI	# ptr
7bd     addq    R8, #-8	# long
7c1     # TLS is in R15
7c1     movq    [R15 + #56 (8-bit)], R8	# long
7c5     jmp     B38

7ca     B89: #	out( B42 B90 ) &lt;- in( B41 )  Freq: 0.00217559
7ca     movl    R10, [RBP]	# compressed ptr
7ce     testl   R10, R10	# compressed ptr
7d1     je     B42  P=0.500000 C=-1.000000

7d7     B90: #	out( B130 B91 ) &lt;- in( B89 )  Freq: 0.0010878
7d7     # TLS is in R15
7d7     movq    R11, [R15 + #56 (8-bit)]	# long
7db     decode_heap_oop RDI,R10
807     testq   R11, R11
80a     je     B130  P=0.001000 C=-1.000000

810     B91: #	out( B42 ) &lt;- in( B90 )  Freq: 0.00108671
810     # TLS is in R15
810     movq    R10, [R15 + #72 (8-bit)]	# ptr
814     movq    [R10 + #-8 + R11], RDI	# ptr
819     addq    R11, #-8	# long
81d     # TLS is in R15
81d     movq    [R15 + #56 (8-bit)], R11	# long
821     jmp     B42

826     B92: #	out( B23 B93 ) &lt;- in( B22 )  Freq: 0.000999986
826     movq    R10, [rsp + #16]	# spill
82b     movl    R11, [R10 + #36 (8-bit)]	# compressed ptr ! Field: java/util/HashMap.table
82f     testl   R11, R11	# compressed ptr
832     je     B23  P=0.500000 C=-1.000000

838     B93: #	out( B134 B94 ) &lt;- in( B92 )  Freq: 0.000499993
838     # TLS is in R15
838     movq    R10, [R15 + #56 (8-bit)]	# long
83c     decode_heap_oop RDI,R11
868     testq   R10, R10
86b     je     B134  P=0.001000 C=-1.000000

871     B94: #	out( B23 ) &lt;- in( B93 )  Freq: 0.000499493
871     # TLS is in R15
871     movq    R11, [R15 + #72 (8-bit)]	# ptr
875     movq    [R11 + #-8 + R10], RDI	# ptr
87a     addq    R10, #-8	# long
87e     # TLS is in R15
87e     movq    [R15 + #56 (8-bit)], R10	# long
882     jmp     B23

887     B95: #	out( B25 B96 ) &lt;- in( B24 )  Freq: 0.000998999
887     # TLS is in R15
887     movq    R10, [R15 + #104 (8-bit)]	# long
88b     # TLS is in R15
88b     movq    R11, [R15 + #120 (8-bit)]	# ptr
88f     lock addl [rsp + #0], 0	! membar_volatile
895     cmpb    [RDI], #0
898     je     B25  P=0.500000 C=-1.000000

89e     B96: #	out( B98 B97 ) &lt;- in( B95 )  Freq: 0.0004995
89e     movb    [RDI], #0	# CMS card-mark byte 0
8a1     testq   R10, R10
8a4     jne,s   B98  P=0.500000 C=-1.000000

8a6     B97: #	out( B25 ) &lt;- in( B96 )  Freq: 0.00024975
8a6     # TLS is in R15
8a6     movq    RSI, R15	# spill
8a9     call_leaf,runtime  write_ref_field_post_entry
        No JVM State Info
        # 
8b6     jmp     B25

8bb     B98: #	out( B25 ) &lt;- in( B96 )  Freq: 0.00024975
8bb     movq    [R11 + #-8 + R10], RDI	# ptr
8c0     addq    R10, #-8	# long
8c4     # TLS is in R15
8c4     movq    [R15 + #104 (8-bit)], R10	# long
8c8     jmp     B25

8cd     B99: #	out( B61 B100 ) &lt;- in( B60 )  Freq: 0.000911912
8cd     movl    R10, [R8 + #24 (8-bit)]	# compressed ptr ! Field: java/util/HashMap$Node.next
8d1     testl   R10, R10	# compressed ptr
8d4     je     B61  P=0.500000 C=-1.000000

8da     B100: #	out( B135 B101 ) &lt;- in( B99 )  Freq: 0.000455956
8da     # TLS is in R15
8da     movq    R11, [R15 + #56 (8-bit)]	# long
8de     decode_heap_oop RDI,R10
90a     testq   R11, R11
90d     je     B135  P=0.001000 C=-1.000000

913     B101: #	out( B61 ) &lt;- in( B100 )  Freq: 0.0004555
913     # TLS is in R15
913     movq    R10, [R15 + #72 (8-bit)]	# ptr
917     movq    [R10 + #-8 + R11], RDI	# ptr
91c     addq    R11, #-8	# long
920     # TLS is in R15
920     movq    [R15 + #56 (8-bit)], R11	# long
924     jmp     B61

929     B102: #	out( B63 B103 ) &lt;- in( B62 )  Freq: 0.000911911
929     movl    R11, [RBX]	# compressed ptr
92c     testl   R11, R11	# compressed ptr
92f     je     B63  P=0.500000 C=-1.000000

935     B103: #	out( B136 B104 ) &lt;- in( B102 )  Freq: 0.000455956
935     # TLS is in R15
935     movq    R10, [R15 + #56 (8-bit)]	# long
939     decode_heap_oop RDI,R11
965     testq   R10, R10
968     je     B136  P=0.001000 C=-1.000000

96e     B104: #	out( B63 ) &lt;- in( B103 )  Freq: 0.0004555
96e     # TLS is in R15
96e     movq    R11, [R15 + #72 (8-bit)]	# ptr
972     movq    [R11 + #-8 + R10], RDI	# ptr
977     addq    R10, #-8	# long
97b     # TLS is in R15
97b     movq    [R15 + #56 (8-bit)], R10	# long
97f     jmp     B63

984     B105: #	out( B66 B106 ) &lt;- in( B65 )  Freq: 0.0009101
984     # TLS is in R15
984     movq    R10, [R15 + #120 (8-bit)]	# ptr
988     # TLS is in R15
988     movq    R11, [R15 + #104 (8-bit)]	# long
98c     lock addl [rsp + #0], 0	! membar_volatile
992     cmpb    [RDI], #0
995     je     B66  P=0.500000 C=-1.000000

99b     B106: #	out( B108 B107 ) &lt;- in( B105 )  Freq: 0.00045505
99b     movb    [RDI], #0	# CMS card-mark byte 0
99e     testq   R11, R11
9a1     jne,s   B108  P=0.500000 C=-1.000000

9a3     B107: #	out( B66 ) &lt;- in( B106 )  Freq: 0.000227525
9a3     # TLS is in R15
9a3     movq    RSI, R15	# spill
9a6     call_leaf,runtime  write_ref_field_post_entry
        No JVM State Info
        # 
9b3     jmp     B66

9b8     B108: #	out( B66 ) &lt;- in( B106 )  Freq: 0.000227525
9b8     movq    [R10 + #-8 + R11], RDI	# ptr
9bd     addq    R11, #-8	# long
9c1     # TLS is in R15
9c1     movq    [R15 + #104 (8-bit)], R11	# long
9c5     jmp     B66

9ca     B109: #	out( B53 B110 ) &lt;- in( B52 )  Freq: 0.00089255
9ca     movl    R11, [RBX + #24 (8-bit)]	# compressed ptr ! Field: java/util/HashMap$Node.next
9ce     testl   R11, R11	# compressed ptr
9d1     je     B53  P=0.500000 C=-1.000000

9d7     B110: #	out( B137 B111 ) &lt;- in( B109 )  Freq: 0.000446275
9d7     # TLS is in R15
9d7     movq    R10, [R15 + #56 (8-bit)]	# long
9db     decode_heap_oop RDI,R11
a07     testq   R10, R10
a0a     je     B137  P=0.001000 C=-1.000000

a10     B111: #	out( B53 ) &lt;- in( B110 )  Freq: 0.000445829
a10     # TLS is in R15
a10     movq    R11, [R15 + #72 (8-bit)]	# ptr
a14     movq    [R11 + #-8 + R10], RDI	# ptr
a19     addq    R10, #-8	# long
a1d     # TLS is in R15
a1d     movq    [R15 + #56 (8-bit)], R10	# long
a21     jmp     B53

a26     B112: #	out( B55 B113 ) &lt;- in( B54 )  Freq: 0.000892549
a26     movl    R11, [RBX]	# compressed ptr
a29     testl   R11, R11	# compressed ptr
a2c     je     B55  P=0.500000 C=-1.000000

a32     B113: #	out( B138 B114 ) &lt;- in( B112 )  Freq: 0.000446275
a32     # TLS is in R15
a32     movq    R10, [R15 + #56 (8-bit)]	# long
a36     decode_heap_oop RDI,R11
a62     testq   R10, R10
a65     je     B138  P=0.001000 C=-1.000000

a6b     B114: #	out( B115 ) &lt;- in( B113 )  Freq: 0.000445828
a6b     movq    RBP, [rsp + #32]	# spill
a70     # TLS is in R15
a70     movq    R11, [R15 + #72 (8-bit)]	# ptr
a74     movq    [R11 + #-8 + R10], RDI	# ptr
a79     addq    R10, #-8	# long
a7d     # TLS is in R15
a7d     movq    [R15 + #56 (8-bit)], R10	# long

a81     B115: #	out( B55 ) &lt;- in( B138 B114 )  Freq: 0.000446275
a81     movq    [rsp + #32], RBP	# spill
a86     jmp     B55

a8b     B116: #	out( B58 B117 ) &lt;- in( B57 )  Freq: 0.000890776
a8b     # TLS is in R15
a8b     movq    R10, [R15 + #120 (8-bit)]	# ptr
a8f     # TLS is in R15
a8f     movq    R11, [R15 + #104 (8-bit)]	# long
a93     lock addl [rsp + #0], 0	! membar_volatile
a99     cmpb    [RDI], #0
a9c     je     B58  P=0.500000 C=-1.000000

aa2     B117: #	out( B119 B118 ) &lt;- in( B116 )  Freq: 0.000445388
aa2     movb    [RDI], #0	# CMS card-mark byte 0
aa5     testq   R11, R11
aa8     jne,s   B119  P=0.500000 C=-1.000000

aaa     B118: #	out( B58 ) &lt;- in( B117 )  Freq: 0.000222694
aaa     # TLS is in R15
aaa     movq    RSI, R15	# spill
aad     call_leaf,runtime  write_ref_field_post_entry
        No JVM State Info
        # 
aba     jmp     B58

abf     B119: #	out( B58 ) &lt;- in( B117 )  Freq: 0.000222694
abf     movq    [R10 + #-8 + R11], RDI	# ptr
ac4     addq    R11, #-8	# long
ac8     # TLS is in R15
ac8     movq    [R15 + #104 (8-bit)], R11	# long
acc     jmp     B58

ad1     B120: #	out( B81 B121 ) &lt;- in( B80 )  Freq: 0.00046195
ad1     movl    R11, [RBX + #24 (8-bit)]	# compressed ptr ! Field: java/util/HashMap$Node.next
ad5     testl   R11, R11	# compressed ptr
ad8     je     B81  P=0.500000 C=-1.000000

ade     B121: #	out( B141 B122 ) &lt;- in( B120 )  Freq: 0.000230975
ade     # TLS is in R15
ade     movq    R10, [R15 + #56 (8-bit)]	# long
ae2     decode_heap_oop RDI,R11
b0e     testq   R10, R10
b11     je     B141  P=0.001000 C=-1.000000

b17     B122: #	out( B81 ) &lt;- in( B121 )  Freq: 0.000230744
b17     # TLS is in R15
b17     movq    R11, [R15 + #72 (8-bit)]	# ptr
b1b     movq    [R11 + #-8 + R10], RDI	# ptr
b20     addq    R10, #-8	# long
b24     # TLS is in R15
b24     movq    [R15 + #56 (8-bit)], R10	# long
b28     jmp     B81

b2d     B123: #	out( B71 B124 ) &lt;- in( B70 )  Freq: 0.000433366
b2d     movl    R10, [R10 + #24 (8-bit)]	# compressed ptr ! Field: java/util/HashMap$Node.next
b31     testl   R10, R10	# compressed ptr
b34     je     B71  P=0.500000 C=-1.000000

b3a     B124: #	out( B142 B125 ) &lt;- in( B123 )  Freq: 0.000216683
b3a     # TLS is in R15
b3a     movq    R11, [R15 + #56 (8-bit)]	# long
b3e     decode_heap_oop RDI,R10
b6a     testq   R11, R11
b6d     je     B142  P=0.001000 C=-1.000000

b73     B125: #	out( B71 ) &lt;- in( B124 )  Freq: 0.000216466
b73     # TLS is in R15
b73     movq    R10, [R15 + #72 (8-bit)]	# ptr
b77     movq    [R10 + #-8 + R11], RDI	# ptr
b7c     addq    R11, #-8	# long
b80     # TLS is in R15
b80     movq    [R15 + #56 (8-bit)], R11	# long
b84     jmp     B71

b89     B126: #	out( B147 B127 ) &lt;- in( B19 B20 )  Freq: 0.00010103
b89     movq    [rsp + #8], R14	# spill
b8e     movl    [rsp + #4], RBX	# spill
b92     movl    [rsp + #0], R13	# spill
b96     movq    RBP, RSI	# spill
b99     movq    RSI, precise klass [Ljava/util/HashMap$Node;: 0x0000000127e9bf60:Constant:exact *	# ptr
ba3     movl    RDX, R13	# spill
        nop 	# 1 bytes pad for loops and calls
ba7     call,static  wrapper for: _new_array_Java
        # java.util.HashMap::resize @ bci:133  L[0]=RBP L[1]=rsp + #8 L[2]=rsp + #4 L[3]=_ L[4]=rsp + #0 L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ L[13]=_
        # OopMap {rbp=Oop [8]=Oop [16]=Oop off=2988/0xbac}

bac     B127: #	out( B22 ) &lt;- in( B126 )  Freq: 0.000101028
        # Block is sole successor of call
bac     movl    R13, [rsp + #0]	# spill
bb0     movl    RBX, [rsp + #4]	# spill
bb4     movq    R14, [rsp + #8]	# spill
bb9     movq    R8, RAX	# spill
bbc     jmp     B22

bc1     B128: #	out( B38 ) &lt;- in( B87 )  Freq: 3.34794e-06
bc1     movq    [rsp + #80], RCX	# spill
bc6     movl    [rsp + #72], R13	# spill
bcb     movq    [rsp + #40], R11	# spill
bd0     movl    [rsp + #24], R10	# spill
bd5     movq    [rsp + #0], R14	# spill
bd9     movl    R13, RBX	# spill
bdc     # TLS is in R15
bdc     movq    RSI, R15	# spill
bdf     call_leaf,runtime  write_ref_field_pre_entry
        No JVM State Info
        # 
bec     movl    RBX, R13	# spill
bef     movq    R14, [rsp + #0]	# spill
bf3     jmp     B38

bf8     B129: #	out( N1981 ) &lt;- in( B39 )  Freq: 1.18798e-06
bf8     movl    RSI, #-187	# int
bfd     movl    RBP, #1	# int
c02     xorl    R10, R10	# int
c05     cmpl    R9, narrowklass: precise klass java/util/HashMap$TreeNode: 0x0000000127a6e620:Constant:exact *	# compressed klass ptr
c0c     cmovlne RBP, R10	# unsigned, int
c10     movq    [rsp + #0], R14	# spill
c14     movl    [rsp + #24], RBX	# spill
        nop 	# 3 bytes pad for loops and calls
c1b     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::resize @ bci:203  L[0]=rsp + #16 L[1]=rsp + #0 L[2]=rsp + #24 L[3]=_ L[4]=rsp + #28 L[5]=_ L[6]=rsp + #32 L[7]=rsp + #72 L[8]=rsp + #76 L[9]=_ L[10]=_ L[11]=_ L[12]=_ L[13]=_ STK[0]=RBP
        # OopMap {[0]=Oop [16]=Oop [32]=Oop [76]=NarrowOop off=3104/0xc20}
c20     ud2	# ShouldNotReachHere

c34     B130: #	out( B42 ) &lt;- in( B90 )  Freq: 1.08778e-06
c34     movq    [rsp + #0], R14	# spill
c38     movl    R13, RBX	# spill
c3b     # TLS is in R15
c3b     movq    RSI, R15	# spill
c3e     call_leaf,runtime  write_ref_field_pre_entry
        No JVM State Info
        # 
c4b     movl    RBX, R13	# spill
c4e     movq    R14, [rsp + #0]	# spill
c52     jmp     B42

c57     B131: #	out( B19 ) &lt;- in( B17 )  Freq: 1.01328e-06
c57     movslq  RCX, R13	# i2l
c5a     jmp     B19

c5f     B132: #	out( N1981 ) &lt;- in( B61 )  Freq: 9.24034e-07
c5f     movl    RSI, #-28	# int
c64     movl    [rsp + #8], R13	# spill
c69     movl    [rsp + #12], R14	# spill
        nop 	# 1 bytes pad for loops and calls
c6f     call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::resize @ bci:346  L[0]=rsp + #16 L[1]=rsp + #0 L[2]=rsp + #12 L[3]=_ L[4]=rsp + #28 L[5]=_ L[6]=rsp + #32 L[7]=rsp + #8 L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ L[13]=_ STK[0]=rsp + #32 STK[1]=RBP STK[2]=rsp + #48
        # OopMap {[0]=Oop [16]=Oop [32]=Oop [48]=Oop off=3188/0xc74}
c74     ud2	# ShouldNotReachHere

c88     B133: #	out( N1981 ) &lt;- in( B53 )  Freq: 9.04414e-07
c88     movl    RSI, #-28	# int
c8d     movq    RBP, [rsp + #0]	# spill
c91     movq    R10, [rsp + #16]	# spill
c96     movq    [rsp + #8], R10	# spill
c9b     movl    [rsp + #16], R14	# spill
ca0     movl    R10, [rsp + #28]	# spill
ca5     movl    [rsp + #20], R10	# spill
caa     movq    R10, [rsp + #48]	# spill
caf     movq    [rsp + #40], R10	# spill
        nop 	# 3 bytes pad for loops and calls
cb7     call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::resize @ bci:326  L[0]=rsp + #8 L[1]=RBP L[2]=rsp + #16 L[3]=_ L[4]=rsp + #20 L[5]=_ L[6]=rsp + #32 L[7]=rsp + #72 L[8]=_ L[9]=_ L[10]=_ L[11]=rsp + #40 L[12]=rsp + #64 L[13]=_ STK[0]=rsp + #32 STK[1]=rsp + #72 STK[2]=rsp + #56
        # OopMap {rbp=Oop [8]=Oop [32]=Oop [40]=Oop [56]=Oop [64]=Oop off=3260/0xcbc}
cbc     ud2	# ShouldNotReachHere

cd0     B134: #	out( B23 ) &lt;- in( B93 )  Freq: 4.99987e-07
cd0     # TLS is in R15
cd0     movq    RSI, R15	# spill
cd3     call_leaf,runtime  write_ref_field_pre_entry
        No JVM State Info
        # 
ce0     jmp     B23

ce5     B135: #	out( B61 ) &lt;- in( B100 )  Freq: 4.5595e-07
ce5     # TLS is in R15
ce5     movq    RSI, R15	# spill
ce8     call_leaf,runtime  write_ref_field_pre_entry
        No JVM State Info
        # 
cf5     movq    R8, [rsp + #64]	# spill
cfa     jmp     B61

cff     B136: #	out( B63 ) &lt;- in( B103 )  Freq: 4.5595e-07
cff     # TLS is in R15
cff     movq    RSI, R15	# spill
d02     call_leaf,runtime  write_ref_field_pre_entry
        No JVM State Info
        # 
d0f     jmp     B63

d14     B137: #	out( B53 ) &lt;- in( B110 )  Freq: 4.46269e-07
d14     # TLS is in R15
d14     movq    RSI, R15	# spill
d17     call_leaf,runtime  write_ref_field_pre_entry
        No JVM State Info
        # 
d24     jmp     B53

d29     B138: #	out( B115 ) &lt;- in( B113 )  Freq: 4.46269e-07
d29     movq    RBP, [rsp + #32]	# spill
d2e     # TLS is in R15
d2e     movq    RSI, R15	# spill
d31     call_leaf,runtime  write_ref_field_pre_entry
        No JVM State Info
        # 
d3e     jmp     B115

d43     B139: #	out( N1981 ) &lt;- in( B15 )  Freq: 2.81466e-07
d43     ucomiss XMM2, XMM1
	movl    RBP, #-1
	jp,s    done
	jb,s    done
	setne   RBP
	movzbl  RBP, RBP
done:
d60     negl    RBP	# int
d62     movl    RSI, #-187	# int
d67     movq    [rsp + #0], R14	# spill
d6b     movq    R10, [rsp + #16]	# spill
d70     movq    [rsp + #8], R10	# spill
d75     movl    [rsp + #16], RBX	# spill
d79     movl    [rsp + #20], R13	# spill
d7e     movss   [rsp + #24], XMM1	# spill
        nop 	# 3 bytes pad for loops and calls
d87     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::resize @ bci:112  L[0]=rsp + #8 L[1]=rsp + #0 L[2]=rsp + #16 L[3]=_ L[4]=rsp + #20 L[5]=_ L[6]=rsp + #24 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ L[13]=_ STK[0]=RBP
        # OopMap {[0]=Oop [8]=Oop off=3468/0xd8c}
d8c     ud2	# ShouldNotReachHere

da0     B140: #	out( N1981 ) &lt;- in( B14 )  Freq: 2.68427e-07
da0     movl    RSI, #-187	# int
da5     movq    RBP, R14	# spill
da8     movq    R10, [rsp + #16]	# spill
dad     movq    [rsp + #0], R10	# spill
db1     movl    [rsp + #8], RBX	# spill
db5     movss   [rsp + #16], XMM1	# spill
dbb     movl    [rsp + #20], R13	# spill
        nop 	# 3 bytes pad for loops and calls
dc3     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::resize @ bci:104  L[0]=rsp + #0 L[1]=RBP L[2]=rsp + #8 L[3]=_ L[4]=rsp + #20 L[5]=_ L[6]=rsp + #16 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ L[13]=_ STK[0]=rsp + #20 STK[1]=#1073741824
        # OopMap {rbp=Oop [0]=Oop off=3528/0xdc8}
dc8     ud2	# ShouldNotReachHere

ddc     B141: #	out( B81 ) &lt;- in( B121 )  Freq: 2.30972e-07
ddc     # TLS is in R15
ddc     movq    RSI, R15	# spill
ddf     call_leaf,runtime  write_ref_field_pre_entry
        No JVM State Info
        # 
dec     jmp     B81

df1     B142: #	out( B71 ) &lt;- in( B124 )  Freq: 2.1668e-07
df1     # TLS is in R15
df1     movq    RSI, R15	# spill
df4     call_leaf,runtime  write_ref_field_pre_entry
        No JVM State Info
        # 
e01     jmp     B71

e06     B143: #	out( N1981 ) &lt;- in( B28 B27 )  Freq: 4.23432e-07
e06     movl    RSI, #-138	# int
e0b     movq    RBP, R14	# spill
e0e     movq    R10, [rsp + #16]	# spill
e13     movq    [rsp + #0], R10	# spill
e17     movl    [rsp + #24], RBX	# spill
e1b     call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::resize @ bci:154  L[0]=rsp + #0 L[1]=RBP L[2]=rsp + #24 L[3]=_ L[4]=rsp + #28 L[5]=_ L[6]=rsp + #32 L[7]=#0 L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ L[13]=_ STK[0]=#0 STK[1]=rsp + #24
        # OopMap {rbp=Oop [0]=Oop [32]=Oop off=3616/0xe20}
e20     ud2	# ShouldNotReachHere

e34     B144: #	out( N1981 ) &lt;- in( B29 )  Freq: 2.10319e-07
e34     movl    RSI, #-66	# int
e39     movq    RBP, R14	# spill
e3c     movq    R10, [rsp + #16]	# spill
e41     movq    [rsp + #0], R10	# spill
e45     movl    [rsp + #24], RBX	# spill
        nop 	# 2 bytes pad for loops and calls
e4b     call,static  wrapper for: uncommon_trap(reason=&apos;profile_predicate&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::resize @ bci:154  L[0]=rsp + #0 L[1]=RBP L[2]=rsp + #24 L[3]=_ L[4]=rsp + #28 L[5]=_ L[6]=rsp + #32 L[7]=#0 L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ L[13]=_ STK[0]=#0 STK[1]=rsp + #24
        # OopMap {rbp=Oop [0]=Oop [32]=Oop off=3664/0xe50}
e50     ud2	# ShouldNotReachHere

e64     B145: #	out( N1981 ) &lt;- in( B5 )  Freq: 1.03765e-07
e64     movl    RSI, #-187	# int
e69     movq    RBP, R14	# spill
e6c     movq    R10, [rsp + #16]	# spill
e71     movq    [rsp + #0], R10	# spill
e75     movl    [rsp + #12], R13	# spill
e7a     movl    [rsp + #16], RBX	# spill
        nop 	# 1 bytes pad for loops and calls
e7f     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::resize @ bci:31  L[0]=rsp + #0 L[1]=RBP L[2]=rsp + #16 L[3]=rsp + #12 L[4]=_ L[5]=#0 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ L[13]=_ STK[0]=rsp + #16 STK[1]=#1073741824
        # OopMap {rbp=Oop [0]=Oop off=3716/0xe84}
e84     ud2	# ShouldNotReachHere

e98     B146: #	out( N1981 ) &lt;- in( B6 )  Freq: 1.03765e-07
e98     movl    RSI, #-187	# int
e9d     movq    [rsp + #0], R14	# spill
ea1     movq    R10, [rsp + #16]	# spill
ea6     movq    [rsp + #8], R10	# spill
eab     movl    [rsp + #16], RBX	# spill
eaf     movl    [rsp + #20], R13	# spill
        nop 	# 3 bytes pad for loops and calls
eb7     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::resize @ bci:50  L[0]=rsp + #8 L[1]=rsp + #0 L[2]=rsp + #16 L[3]=rsp + #20 L[4]=RBP L[5]=#0 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ L[13]=_ STK[0]=RBP STK[1]=#1073741824
        # OopMap {[0]=Oop [8]=Oop off=3772/0xebc}
ebc     ud2	# ShouldNotReachHere

ed0     B147: #	out( N1981 ) &lt;- in( B126 )  Freq: 1.0103e-09
ed0     # exception oop is in rax; no code emitted
ed0     movq    RSI, RAX	# spill
ed3     addq    rsp, 112	# Destroy frame
	popq    rbp

ed8     jmp     rethrow_stub

--------------------------------------------------------------------------------
</opto_assembly>
<writer thread='9219'/>
   1089  406     n 0       java.lang.invoke.MethodHandle::linkToSpecial(LLLLL)L (native)   (static)
<writer thread='37379'/>
   1089   53       3       java.lang.StringBuilder::append (8 bytes)   made not entrant
<writer thread='24323'/>
<writer thread='37379'/>
                              @ 2   java.lang.AbstractStringBuilder::append (77 bytes)   inline (hot)
                                @ 7   java.lang.AbstractStringBuilder::ensureCapacityInternal (39 bytes)   inline (hot)
                                  @ 24   java.lang.AbstractStringBuilder::newCapacity (55 bytes)   inline (hot)
                                    @ 47   java.lang.AbstractStringBuilder::hugeCapacity (41 bytes)   too big
                                  @ 32   java.util.Arrays::copyOf (19 bytes)   inline (hot)
                                    @ 11   java.lang.Math::min (11 bytes)   (intrinsic)
                                    @ 14   java.lang.System::arraycopy (0 bytes)   (intrinsic)
                                @ 11   java.lang.AbstractStringBuilder::isLatin1 (19 bytes)   inline (hot)
                                @ 18   java.lang.StringLatin1::canEncode (13 bytes)   inline (hot)
<writer thread='38659'/>
   1089  350       4       java.lang.AbstractStringBuilder::append (77 bytes)
<writer thread='24323'/>
   1089  383       4       java.lang.String::indexOf (29 bytes)
<writer thread='25091'/>

============================= C2-compiled nmethod ==============================
<opto_assembly compile_id='286'>
----------------------- MetaData before Compile_id = 286 ------------------------
{method}
 - this oop:          0x0000000126af3368
 - method holder:     &apos;java/util/HashMap&apos;
 - constants:         0x0000000126af0d88 constant pool [593] {0x0000000126af0d88} for &apos;java/util/HashMap&apos; cache=0x0000000126af6970
 - access:            0x81000001  public 
 - name:              &apos;put&apos;
 - signature:         &apos;(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;&apos;
 - max stack:         7
 - max locals:        3
 - size of params:    3
 - method size:       13
 - highest level:     3
 - vtable index:      7
 - i2i entry:         0x000000010c0a1de0
 - adapters:          AHE@0x00007f99308e18e0: 0xbbb00000 i2c: 0x000000010c0e82e0 c2i: 0x000000010c0e83cb c2iUV: 0x000000010c0e8392 c2iNCI: 0x000000010c0e8408
 - compiled entry     0x000000010c0e83cb
 - code size:         13
 - code start:        0x0000000126af3328
 - code end (excl):   0x0000000126af3335
 - method data:       0x0000000126e92598
 - checked ex length: 0
 - linenumber start:  0x0000000126af3335
 - localvar length:   3
 - localvar start:    0x0000000126af3340

------------------------ OptoAssembly for Compile_id = 286 -----------------------
#
#  java/lang/Object * ( java/util/HashMap:NotNull *, java/lang/Object *, java/lang/Object * )
#
#r018 rsi:rsi   : parm 0: java/util/HashMap:NotNull *
#r016 rdx:rdx   : parm 1: java/lang/Object *
#r010 rcx:rcx   : parm 2: java/lang/Object *
# -- Old rsp -- Framesize: 144 --
#r583 rsp+140: in_preserve
#r582 rsp+136: return address
#r581 rsp+132: in_preserve
#r580 rsp+128: saved fp register
#r579 rsp+124: pad2, stack alignment
#r578 rsp+120: pad2, stack alignment
#r577 rsp+116: Fixed slot 1
#r576 rsp+112: Fixed slot 0
#r611 rsp+108: spill
#r610 rsp+104: spill
#r609 rsp+100: spill
#r608 rsp+96: spill
#r607 rsp+92: spill
#r606 rsp+88: spill
#r605 rsp+84: spill
#r604 rsp+80: spill
#r603 rsp+76: spill
#r602 rsp+72: spill
#r601 rsp+68: spill
#r600 rsp+64: spill
#r599 rsp+60: spill
#r598 rsp+56: spill
#r597 rsp+52: spill
#r596 rsp+48: spill
#r595 rsp+44: spill
#r594 rsp+40: spill
#r593 rsp+36: spill
#r592 rsp+32: spill
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
0000    N1711: #	out( B1 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
0000    movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


0020    B1: #	out( B122 B2 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
0020    # stack bang (504 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #128	# Create frame

002f    movq    [rsp + #32], RSI	# spill
0034    movq    [rsp + #56], RCX	# spill
0039    movq    [rsp + #48], RDX	# spill
003e    movl    RBP, [RDX + #8 (8-bit)]	# compressed klass ptr
0041    NullCheck RDX

0041    B2: #	out( B75 B3 ) &lt;- in( B1 )  Freq: 1
0041    decode_klass_not_null R10,RBP
004e    movq    R10, [R10 + #504 (32-bit)]	# ptr
0055    movq    R11, metadataptr:Constant0x0000000127918f40	# ptr
005f    cmpq    R10, R11	# ptr
0062    jne,u   B75  P=0.001000 C=-1.000000

0068    B3: #	out( B75 B4 ) &lt;- in( B2 )  Freq: 0.999
0068    movq    R10, [RDX]	# long
006b    movq    R11, R10	# spill
006e    andq    R11, #7	# long
0072    cmpq    R11, #1
0076    jne     B75  P=0.001000 C=-1.000000

007c    B4: #	out( B75 B5 ) &lt;- in( B3 )  Freq: 0.998001
007c    shrq    R10, #8
0080    movl    RAX, R10	# l2i
0083    andl    RAX, #2147483647	# int
0089    testl   RAX, RAX
008b    je     B75  P=0.001000 C=-1.000000

0091    B5: #	out( B40 B6 ) &lt;- in( B76 B4 )  Freq: 0.999999
0091    movq    R10, [rsp + #32]	# spill
0096    movl    R10, [R10 + #36 (8-bit)]	# compressed ptr ! Field: java/util/HashMap.table
009a    movl    R11, RAX	# spill
009d    shrl    R11, #16
00a1    xorl    R11, RAX	# int
00a4    movl    [rsp + #40], R11	# spill
00a9    testl   R10, R10	# compressed ptr
00ac    je     B40  P=0.131838 C=14806.000000

00b2    B6: #	out( B104 B7 ) &lt;- in( B5 )  Freq: 0.868161
00b2    movl    R11, [R12 + R10 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
00b7    testl   R11, R11	# unsigned
00ba    jbe,u   B104  P=0.000000 C=12854.000000

00c0    B7: #	out( B8 ) &lt;- in( B6 )  Freq: 0.868161
00c0    decode_heap_oop_not_null R14,R10

00c4    B8: #	out( B102 B9 ) &lt;- in( B42 B7 )  Freq: 0.999996
00c4    movl    R8, R11	# spill
00c7    decl    R8	# int
00ca    andl    R8, [RSP + #40 (32-bit)]	# int
00cf    testl   R11, R11
00d2    jle     B102  P=0.000001 C=-1.000000

00d8    B9: #	out( B27 B10 ) &lt;- in( B8 )  Freq: 0.999995
00d8    leaq    RBX, [R14 + #16 + R8 &lt;&lt; #2]	# ptr posidxscaleoff
00dd    movq    R10, [rsp + #32]	# spill
00e2    movl    RCX, [R10 + #8 (8-bit)]	# compressed klass ptr
00e6    movl    R11, [RBX]	# compressed ptr
00e9    movq    R10, [rsp + #48]	# spill
00ee    encode_heap_oop_not_null RDI,R10
0137    movq    R10, [rsp + #56]	# spill
013c    encode_heap_oop R13,R10
0168    movl    [rsp + #0], R13	# spill
016c    movl    R10, narrowklass: precise klass java/util/HashMap$Node: 0x000000012791c250:Constant:exact *	# compressed klass ptr
0172    decode_klass_not_null RDX,R10
017f    xorl    R9, R9	# ptr
0182    testl   R11, R11	# compressed ptr
0185    je     B27  P=0.686951 C=14806.000000

018b    B10: #	out( B43 B11 ) &lt;- in( B9 )  Freq: 0.313047
018b    movl    R8, [R12 + R11 &lt;&lt; 3 + #12] (compressed oop addressing)	# int ! Field: java/util/HashMap$Node.hash
0190    decode_heap_oop_not_null R10,R11
0194    movq    [rsp + #64], R10	# spill
0199    cmpl    R8, [RSP + #40 (32-bit)]
019e    je     B43  P=0.122951 C=4636.000000

01a4    B11: #	out( B106 B12 ) &lt;- in( B10 )  Freq: 0.274558
01a4    movl    R10, [R12 + R11 &lt;&lt; 3 + #8] (compressed oop addressing)	# compressed klass ptr
01a9    cmpl    R10, narrowklass: precise klass java/util/HashMap$TreeNode: 0x000000012802dcc0:Constant:exact *	# compressed klass ptr
01b0    je,u   B106  P=0.000001 C=-1.000000

01b6    B12: #	out( B18 B13 ) &lt;- in( B11 )  Freq: 0.274558
01b6    movl    R11, [R12 + R11 &lt;&lt; 3 + #24] (compressed oop addressing)	# compressed ptr ! Field: java/util/HashMap$Node.next
01bb    testl   R11, R11	# compressed ptr
01be    je,s   B18  P=0.754938 C=5215.000000

01c0    B13: #	out( B14 ) &lt;- in( B12 )  Freq: 0.0672837
01c0    decode_heap_oop_not_null R10,R11
01c4    movq    [rsp + #64], R10	# spill
01c9    xorl    R10, R10	# int
01cc    movq    R13, 0x0000000117891000	# ptr
01d6    xorl    R8, R8	# int

01d9    B14: #	out( B60 B15 ) &lt;- in( B13 B16 ) Loop( B14-B16 inner ) Freq: 0.0863163
01d9    movq    R11, [rsp + #64]	# spill
01de    movl    R11, [R11 + #12 (8-bit)]	# int ! Field: java/util/HashMap$Node.hash
01e2    movl    RBX, [rsp + #40]	# spill
01e6    cmpl    R11, RBX
01e9    je     B60  P=0.100235 C=1277.000000

01ef    B15: #	out( B17 B16 ) &lt;- in( B14 )  Freq: 0.0776644
01ef    # TLS is in R15
01ef    movq    RSI, [R15 + #296 (32-bit)]	# ptr
01f6    incl    R10	# int
01f9    movq    R11, [rsp + #32]	# spill
01fe    movl    R9, RBX	# spill
0201    movq    RBX, [rsp + #48]	# spill
0206    movq    RAX, [rsp + #56]	# spill
020b    testl   rax, [RSI]	# Safepoint: poll for GC        # java.util.HashMap::putVal @ bci:219  L[0]=R11 L[1]=R9 L[2]=RBX L[3]=RAX L[4]=#0 L[5]=#1 L[6]=R14 L[7]=rsp + #64 L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=R10
        # java.util.HashMap::put @ bci:9  L[0]=_ L[1]=_ L[2]=_
        # OopMap {r11=Oop rbx=Oop rdi=NarrowOop rax=Oop r14=Oop [0]=NarrowOop [32]=Oop [48]=Oop [56]=Oop [64]=Oop off=523/0x20b}
020d    movq    R11, [rsp + #64]	# spill
0212    movl    R9, [R11 + #24 (8-bit)]	# compressed ptr ! Field: java/util/HashMap$Node.next
0216    testl   R9, R9	# compressed ptr
0219    je,s   B17  P=0.754938 C=1149.000000

021b    B16: #	out( B14 ) &lt;- in( B15 )  Freq: 0.0190326
021b    decode_heap_oop_not_null R11,R9
021f    movq    [rsp + #64], R11	# spill
0224    jmp,s   B14

0226    B17: #	out( B19 ) &lt;- in( B15 )  Freq: 0.0586318
0226    movl    RBX, R10	# spill
0229    jmp,s   B19

022b    B18: #	out( B19 ) &lt;- in( B12 )  Freq: 0.207274
022b    movq    R13, 0x0000000117891000	# ptr
0235    xorl    RBX, RBX	# int

0237    B19: #	out( B107 B20 ) &lt;- in( B17 B18 )  Freq: 0.265906
0237    cmpl    RCX, narrowklass: precise klass java/util/HashMap: 0x0000000127915b60:Constant:exact *	# compressed klass ptr
023d    jne,u   B107  P=0.000001 C=-1.000000

0243    B20: #	out( B100 B21 ) &lt;- in( B19 )  Freq: 0.265905
0243    movq    RBP, [rsp + #32]	# spill
0248    # checkcastPP of RBP
0248    # TLS is in R15
0248    movq    R8, [R15 + #320 (32-bit)]	# ptr
024f    movq    R10, R8	# spill
0252    addq    R10, #32	# ptr
0256    # TLS is in R15
0256    cmpq    R10, [R15 + #336 (32-bit)]	# raw ptr
025d    jnb,u   B100  P=0.000100 C=-1.000000

0263    B21: #	out( B22 ) &lt;- in( B20 )  Freq: 0.265879
0263    # TLS is in R15
0263    movq    [R15 + #320 (32-bit)], R10	# ptr
026a    PREFETCHW [R10 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0272    movq    R10, [RDX + #184 (32-bit)]	# long
0279    movq    [R8], R10	# long
027c    movl    [R8 + #8 (8-bit)], narrowklass: precise klass java/util/HashMap$Node: 0x000000012791c250:Constant:exact *	# compressed klass ptr
0284    movl    [R8 + #12 (8-bit)], #0	# int
028c    movl    [R8 + #16 (8-bit)], #0	# int
0294    movq    [R8 + #24 (8-bit)], #0	# long

029c    B22: #	out( B84 B23 ) &lt;- in( B101 B21 )  Freq: 0.265905
029c    movl    R11, [rsp + #0]	# spill
02a0    movl    [R8 + #20 (8-bit)], R11	# compressed ptr
02a4    
02a4    # checkcastPP of R8
02a4    movl    R10, [rsp + #40]	# spill
02a9    movl    [R8 + #12 (8-bit)], R10	# int ! Field: java/util/HashMap$Node.hash
02ad    movl    [R8 + #16 (8-bit)], RDI	# compressed ptr ! Field: java/util/HashMap$Node.key
02b1    MEMBAR-release ! (empty encoding)
02b1    # TLS is in R15
02b1    cmpb    [R15 + #48 (8-bit)], #0
02b6    jne     B84  P=0.001000 C=-1.000000

02bc    B23: #	out( B25 B24 ) &lt;- in( B108 B86 B84 B22 )  Freq: 0.265905
02bc    movq    R10, [rsp + #64]	# spill
02c1    movq    R10, R10	# ptr -&gt; long
02c1    encode_heap_oop_not_null R11,R8
030a    movq    R9, [rsp + #64]	# spill
030f    movl    [R9 + #24 (8-bit)], R11	# compressed ptr ! Field: java/util/HashMap$Node.next
0313    movq    R11, R8	# ptr -&gt; long
0316    xorq    R11, R10	# long
0319    shrq    R11, #20
031d    testq   R11, R11
0320    je,s   B25  P=0.001000 C=-1.000000

0322    B24: #	out( B87 B25 ) &lt;- in( B23 )  Freq: 0.265639
0322    shrq    R10, #9
0326    addq    R13, R10	# ptr
0329    cmpb    [R13], #8
032e    jne     B87  P=0.001000 C=-1.000000

0334    B25: #	out( B36 B26 ) &lt;- in( B89 B90 B87 B24 B23 )  Freq: 0.265905
0334    cmpl    RBX, #7
0337    jl     B36  P=1.000000 C=3937.000000

033d    B26: #	out( N1711 ) &lt;- in( B25 )  Freq: 1.26794e-07
033d    movl    RSI, #-187	# int
0342    movq    [rsp + #16], R14	# spill
0347    movl    [rsp + #4], RBX	# spill
        nop 	# 1 bytes pad for loops and calls
034c    call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:162  L[0]=RBP L[1]=rsp + #40 L[2]=_ L[3]=rsp + #56 L[4]=#0 L[5]=#1 L[6]=rsp + #16 L[7]=_ L[8]=_ L[9]=_ L[10]=#NULL L[11]=_ L[12]=_ STK[0]=rsp + #4 STK[1]=#7
        # java.util.HashMap::put @ bci:9  L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=Oop [16]=Oop [56]=Oop off=852/0x354}
0354    ud2	# ShouldNotReachHere

0368    B27: #	out( B71 B28 ) &lt;- in( B9 )  Freq: 0.686948
0368    cmpl    RCX, narrowklass: precise klass java/util/HashMap: 0x0000000127915b60:Constant:exact *	# compressed klass ptr
036e    jne,u   B71  P=0.006111 C=-1.000000

0374    B28: #	out( B91 B29 ) &lt;- in( B27 )  Freq: 0.68275
0374    # TLS is in R15
0374    movq    RBP, [R15 + #320 (32-bit)]	# ptr
037b    movq    R10, RBP	# spill
037e    addq    R10, #32	# ptr
0382    # TLS is in R15
0382    cmpq    R10, [R15 + #336 (32-bit)]	# raw ptr
0389    jnb,u   B91  P=0.000100 C=-1.000000

038f    B29: #	out( B30 ) &lt;- in( B28 )  Freq: 0.682682
038f    # TLS is in R15
038f    movq    [R15 + #320 (32-bit)], R10	# ptr
0396    PREFETCHW [R10 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
039e    movq    R10, [RDX + #184 (32-bit)]	# long
03a5    movq    [RBP], R10	# long
03a9    movl    [RBP + #8 (8-bit)], narrowklass: precise klass java/util/HashMap$Node: 0x000000012791c250:Constant:exact *	# compressed klass ptr
03b0    movl    [RBP + #12 (8-bit)], #0	# int
03b7    movl    [RBP + #16 (8-bit)], #0	# int
03be    movq    [RBP + #24 (8-bit)], #0	# long

03c6    B30: #	out( B31 ) &lt;- in( B92 B29 )  Freq: 0.68275
03c6    movl    R11, [rsp + #0]	# spill
03ca    movl    [RBP + #20 (8-bit)], R11	# compressed ptr
03ce    
03ce    # checkcastPP of RBP
03ce    movl    R10, [rsp + #40]	# spill
03d3    movl    [RBP + #12 (8-bit)], R10	# int ! Field: java/util/HashMap$Node.hash
03d7    movl    [RBP + #16 (8-bit)], RDI	# compressed ptr ! Field: java/util/HashMap$Node.key
03da    MEMBAR-release ! (empty encoding)

03da    B31: #	out( B103 B32 ) &lt;- in( B30 B72 )  Freq: 0.686948
03da    movl    R11, [R14 + #8 (8-bit)]	# compressed klass ptr
03de    cmpl    R11, narrowklass: precise klass [Ljava/util/HashMap$Node;: 0x000000012791c320:Constant:exact *	# compressed klass ptr
03e5    jne,u   B103  P=0.000001 C=-1.000000

03eb    B32: #	out( B77 B33 ) &lt;- in( B31 )  Freq: 0.686947
03eb    # TLS is in R15
03eb    cmpb    [R15 + #48 (8-bit)], #0
03f0    jne     B77  P=0.001000 C=-1.000000

03f6    B33: #	out( B36 B34 ) &lt;- in( B105 B79 B77 B32 )  Freq: 0.686947
03f6    movq    R10, RBX	# ptr -&gt; long
03f9    encode_heap_oop R8,RBP
0425    movl    [RBX], R8	# compressed ptr
0428    movq    R11, RBP	# ptr -&gt; long
042b    xorq    R11, R10	# long
042e    shrq    R11, #20
0432    testq   R11, R11
0435    je,s   B36  P=0.001000 C=-1.000000

0437    B34: #	out( B36 B35 ) &lt;- in( B33 )  Freq: 0.68626
0437    testq   RBP, RBP	# ptr
043a    je,s   B36  P=0.001000 C=-1.000000

043c    B35: #	out( B80 B36 ) &lt;- in( B34 )  Freq: 0.685574
043c    shrq    R10, #9
0440    movq    R8, 0x0000000117891000	# ptr
044a    addq    R8, R10	# ptr
044d    cmpb    [R8], #8
0451    jne     B80  P=0.001000 C=-1.000000

0457    B36: #	out( B58 B37 ) &lt;- in( B25 B82 B83 B80 B35 B34 B33 )  Freq: 0.952853
0457    movq    R10, [rsp + #32]	# spill
045c    incl    [R10 + #24 (8-bit)]	# int ! Field: java/util/HashMap.modCount
0460    movl    R10, [R10 + #28 (8-bit)]	# int ! Field: java/util/HashMap.threshold
0464    movq    R11, [rsp + #32]	# spill
0469    movl    R8, [R11 + #20 (8-bit)]	# int ! Field: java/util/HashMap.size
046d    incl    R8	# int
0470    movl    [R11 + #20 (8-bit)], R8	# int ! Field: java/util/HashMap.size
0474    cmpl    R8, R10
0477    jg     B58  P=0.034519 C=14108.000000

047d    B37: #	out( B73 B38 ) &lt;- in( B59 B36 )  Freq: 0.952852
047d    movq    R10, [rsp + #32]	# spill
0482    movl    R10, [R10 + #8 (8-bit)]	# compressed klass ptr
0486    cmpl    R10, narrowklass: precise klass java/util/HashMap: 0x0000000127915b60:Constant:exact *	# compressed klass ptr
048d    jne,u   B73  P=0.004406 C=-1.000000

0493    B38: #	out( B39 ) &lt;- in( B37 B74 )  Freq: 0.952852
0493    xorl    RAX, RAX	# ptr

0495    B39: #	out( N1711 ) &lt;- in( B57 B38 )  Freq: 0.999993
0495    vzeroupper
	addq    rsp, 128	# Destroy frame
	popq    rbp
	movq    rscratch1, poll_offset[r15_thread] #polling_page_address
	testl   rax, [rscratch1]	# Safepoint: poll for GC

04aa    ret

04ab    B40: #	out( B130 B41 ) &lt;- in( B5 )  Freq: 0.131838
04ab    movq    RSI, [rsp + #32]	# spill
04b0    call,static  java.util.HashMap::resize
        # java.util.HashMap::putVal @ bci:20  L[0]=rsp + #32 L[1]=rsp + #40 L[2]=rsp + #48 L[3]=rsp + #56 L[4]=#0 L[5]=#1 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_
        # java.util.HashMap::put @ bci:9  L[0]=_ L[1]=_ L[2]=_
        # OopMap {[32]=Oop [48]=Oop [56]=Oop off=1208/0x4b8}

04b8    B41: #	out( B123 B42 ) &lt;- in( B40 )  Freq: 0.131836
        # Block is sole successor of call
04b8    movl    R11, [RAX + #12 (8-bit)]	# range
04bc    NullCheck RAX

04bc    B42: #	out( B8 ) &lt;- in( B41 )  Freq: 0.131836
04bc    movq    R14, RAX	# spill
04bf    jmp     B8

04c4    B43: #	out( B51 B44 ) &lt;- in( B10 )  Freq: 0.0384894
04c4    movl    R10, [R12 + R11 &lt;&lt; 3 + #16] (compressed oop addressing)	# compressed ptr ! Field: java/util/HashMap$Node.key
04c9    decode_heap_oop RCX,R10
04f5    movq    R8, [rsp + #48]	# spill
04fa    cmpq    RCX, R8	# ptr
04fd    je,u   B51  P=0.028120 C=569.000000

0503    B44: #	out( B110 B45 ) &lt;- in( B43 )  Freq: 0.0374071
0503    cmpl    RBP, narrowklass: precise klass java/lang/String: 0x000000010bf8aca0:Constant:exact *	# compressed klass ptr
0509    jne,u   B110  P=0.000001 C=-1.000000

050f    B45: #	out( B51 B46 ) &lt;- in( B44 )  Freq: 0.0374071
050f    movq    R9, R8	# spill
0512    # checkcastPP of R9
0512    cmpq    R9, RCX	# ptr
0515    je,u   B51  P=0.038659 C=12287.000000

051b    B46: #	out( B113 B47 ) &lt;- in( B45 )  Freq: 0.035961
051b    movl    R8, [R12 + R10 &lt;&lt; 3 + #8] (compressed oop addressing)	# compressed klass ptr
0520    NullCheck R10

0520    B47: #	out( B121 B48 ) &lt;- in( B46 )  Freq: 0.0359609
0520    cmpl    R8, narrowklass: precise klass java/lang/String: 0x000000010bf8aca0:Constant:exact *	# compressed klass ptr
0527    jne,u   B121  P=0.000000 C=-1.000000

052d    B48: #	out( B116 B49 ) &lt;- in( B47 )  Freq: 0.0359609
052d    movsbl  R8, [R9 + #20 (8-bit)]	# byte ! Field: java/lang/String.coder (constant)
0532    decode_heap_oop_not_null R10,R10
0536    # checkcastPP of R10
0536    movsbl  RBP, [R10 + #20 (8-bit)]	# byte ! Field: java/lang/String.coder (constant)
053b    cmpl    R8, RBP
053e    jne     B116  P=0.000000 C=10045.000000

0544    B49: #	out( B111 B50 ) &lt;- in( B48 )  Freq: 0.0359609
0544    movl    R10, [R10 + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value (constant)
0548    movl    RBX, [R9 + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value (constant)
054c    movl    R8, [R12 + R10 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
0551    movl    RCX, [R12 + RBX &lt;&lt; 3 + #12] (compressed oop addressing)	# range
0556    cmpl    RCX, R8
0559    jne     B111  P=0.000001 C=-1.000000

055f    B50: #	out( B112 B51 ) &lt;- in( B49 )  Freq: 0.0359609
055f    decode_heap_oop_not_null R8,R10
0563    leaq    RSI, [R12 + R10 &lt;&lt; 3 + #16] (compressed oop addressing)	# ptr compressedoopoff32
0568    decode_heap_oop_not_null R10,RBX
056c    leaq    RDI, [R12 + RBX &lt;&lt; 3 + #16] (compressed oop addressing)	# ptr compressedoopoff32
0571    String Equals RDI,RSI,RCX -&gt; RAX    // KILL XMM0, XMM1, RBX
062d    movl    R8, RAX	# spill
0630    testl   RAX, RAX
0632    je     B112  P=0.000000 C=553.000000

0638    B51: #	out( B52 ) &lt;- in( B50 B43 B45 )  Freq: 0.0384893
0638    movq    R13, 0x0000000117891000	# ptr

0642    B52: #	out( B93 B53 ) &lt;- in( B51 B62 B67 )  Freq: 0.0471411
0642    # TLS is in R15
0642    cmpb    [R15 + #48 (8-bit)], #0
0647    jne     B93  P=0.001000 C=-1.000000

064d    B53: #	out( B56 B54 ) &lt;- in( B115 B95 B93 B52 )  Freq: 0.0471411
064d    movq    R10, [rsp + #32]	# spill
0652    movl    R14, [R10 + #8 (8-bit)]	# compressed klass ptr
0656    movq    R10, [rsp + #64]	# spill
065b    movl    RBP, [R10 + #20 (8-bit)]	# compressed ptr ! Field: java/util/HashMap$Node.value
065f    movl    R11, [rsp + #0]	# spill
0663    movl    [R10 + #20 (8-bit)], R11	# compressed ptr ! Field: java/util/HashMap$Node.value
0667    movq    R10, [rsp + #56]	# spill
066c    movq    R10, R10	# ptr -&gt; long
066c    movq    R11, [rsp + #64]	# spill
0671    movq    R11, R11	# ptr -&gt; long
0671    xorq    R10, R11	# long
0674    shrq    R10, #20
0678    testq   R10, R10
067b    je,s   B56  P=0.001000 C=-1.000000

067d    B54: #	out( B56 B55 ) &lt;- in( B53 )  Freq: 0.047094
067d    movq    R10, [rsp + #56]	# spill
0682    testq   R10, R10	# ptr
0685    je,s   B56  P=0.001000 C=-1.000000

0687    B55: #	out( B96 B56 ) &lt;- in( B54 )  Freq: 0.0470469
0687    shrq    R11, #9
068b    addq    R13, R11	# ptr
068e    cmpb    [R13], #8
0693    jne     B96  P=0.001000 C=-1.000000

0699    B56: #	out( B109 B57 ) &lt;- in( B98 B99 B96 B55 B54 B53 )  Freq: 0.0471411
0699    cmpl    R14, narrowklass: precise klass java/util/HashMap: 0x0000000127915b60:Constant:exact *	# compressed klass ptr
06a0    jne,u   B109  P=0.000001 C=-1.000000

06a6    B57: #	out( B39 ) &lt;- in( B56 )  Freq: 0.0471411
06a6    decode_heap_oop RAX,RBP
06d2    jmp     B39

06d7    B58: #	out( B129 B59 ) &lt;- in( B36 )  Freq: 0.0328919
06d7    movq    RSI, [rsp + #32]	# spill
06dc    call,static  java.util.HashMap::resize
        # java.util.HashMap::putVal @ bci:288  L[0]=rsp + #32 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=#1 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_
        # java.util.HashMap::put @ bci:9  L[0]=_ L[1]=_ L[2]=_
        # OopMap {[32]=Oop off=1764/0x6e4}

06e4    B59: #	out( B37 ) &lt;- in( B58 )  Freq: 0.0328913
        # Block is sole successor of call
06e4    jmp     B37

06e9    B60: #	out( B119 B61 ) &lt;- in( B14 )  Freq: 0.00865191
06e9    movq    R11, [rsp + #64]	# spill
06ee    movl    R9, [R11 + #16 (8-bit)]	# compressed ptr ! Field: java/util/HashMap$Node.key
06f2    decode_heap_oop RCX,R9
071e    movq    R11, [rsp + #48]	# spill
0723    cmpq    RCX, R11	# ptr
0726    je,u   B119  P=0.000000 C=128.000000

072c    B61: #	out( B117 B62 ) &lt;- in( B60 )  Freq: 0.00865191
072c    cmpl    RBP, narrowklass: precise klass java/lang/String: 0x000000010bf8aca0:Constant:exact *	# compressed klass ptr
0732    jne,u   B117  P=0.000001 C=-1.000000

0738    B62: #	out( B52 B63 ) &lt;- in( B61 )  Freq: 0.0086519
0738    # checkcastPP of R11
0738    cmpq    R11, RCX	# ptr
073b    je,u   B52  P=0.038659 C=12287.000000

0741    B63: #	out( B69 B64 ) &lt;- in( B62 )  Freq: 0.00831743
0741    movl    RCX, [R12 + R9 &lt;&lt; 3 + #8] (compressed oop addressing)	# compressed klass ptr
0746    NullCheck R9

0746    B64: #	out( B120 B65 ) &lt;- in( B63 )  Freq: 0.00831742
0746    cmpl    RCX, narrowklass: precise klass java/lang/String: 0x000000010bf8aca0:Constant:exact *	# compressed klass ptr
074c    jne,u   B120  P=0.000000 C=-1.000000

0752    B65: #	out( B118 B66 ) &lt;- in( B64 )  Freq: 0.00831742
0752    movsbl  RCX, [R11 + #20 (8-bit)]	# byte ! Field: java/lang/String.coder (constant)
0757    decode_heap_oop_not_null RBX,R9
075b    # checkcastPP of RBX
075b    movsbl  RBP, [RBX + #20 (8-bit)]	# byte ! Field: java/lang/String.coder (constant)
075f    cmpl    RCX, RBP
0761    jne     B118  P=0.000000 C=10045.000000

0767    B66: #	out( B68 B67 ) &lt;- in( B65 )  Freq: 0.00831742
0767    movl    R9, [RBX + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value (constant)
076b    movl    RDI, [R11 + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value (constant)
076f    movl    RBX, [R12 + R9 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
0774    movl    RCX, [R12 + RDI &lt;&lt; 3 + #12] (compressed oop addressing)	# range
0779    cmpl    RCX, RBX
077b    jne     B68  P=0.000001 C=-1.000000

0781    B67: #	out( B52 B68 ) &lt;- in( B66 )  Freq: 0.00831741
0781    decode_heap_oop_not_null R8,R9
0785    leaq    RSI, [R12 + R9 &lt;&lt; 3 + #16] (compressed oop addressing)	# ptr compressedoopoff32
078a    decode_heap_oop_not_null R8,RDI
078e    leaq    RDI, [R12 + RDI &lt;&lt; 3 + #16] (compressed oop addressing)	# ptr compressedoopoff32
0793    String Equals RDI,RSI,RCX -&gt; RAX    // KILL XMM1, XMM0, RBX
084f    movl    R8, RAX	# spill
0852    testl   RAX, RAX
0854    jne     B52  P=1.000000 C=128.000000

085a    B68: #	out( B70 ) &lt;- in( B67 B66 )  Freq: 1.22835e-08
085a    movl    RBP, R8	# spill
085d    jmp,s   B70

085f    B69: #	out( B70 ) &lt;- in( B63 )  Freq: 8.42787e-09
085f    xorl    RBP, RBP	# int

0861    B70: #	out( N1711 ) &lt;- in( B69 B68 )  Freq: 2.07113e-08
0861    movl    RSI, #-187	# int
0866    movq    R8, [rsp + #32]	# spill
086b    movq    [rsp + #0], R8	# spill
086f    movl    R8, [rsp + #40]	# spill
0874    movl    [rsp + #8], R8	# spill
0879    movq    [rsp + #24], R14	# spill
087e    movl    [rsp + #12], R10	# spill
0883    movq    [rsp + #40], R11	# spill
0888    call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:206  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=rsp + #40 L[3]=rsp + #56 L[4]=#0 L[5]=#1 L[6]=rsp + #24 L[7]=_ L[8]=_ L[9]=_ L[10]=rsp + #64 L[11]=_ L[12]=rsp + #12 STK[0]=RBP
        # java.util.HashMap::put @ bci:9  L[0]=_ L[1]=_ L[2]=_
        # OopMap {[0]=Oop [24]=Oop [40]=Oop [56]=Oop [64]=Oop off=2192/0x890}
0890    ud2	# ShouldNotReachHere

08a4    B71: #	out( B128 B72 ) &lt;- in( B27 )  Freq: 0.00419796
08a4    movq    [rsp + #16], RBX	# spill
08a9    movl    [rsp + #8], R8	# spill
08ae    movq    [rsp + #0], R14	# spill
08b2    movl    RCX, [rsp + #40]	# spill
08b6    movq    RBP, [rsp + #32]	# spill
08bb    movq    R11, [rsp + #56]	# spill
08c0    movq    R10, [rsp + #48]	# spill
08c5    movq    RSI, RBP	# spill
08c8    movl    RDX, RCX	# spill
08ca    movq    RCX, R10	# spill
08cd    movq    R8, R11	# spill
        nop 	# 2 bytes pad for loops and calls
08d2    movq    rax, #Universe::non_oop_word()
	call,dynamic  java.util.HashMap::newNode
        # java.util.HashMap::putVal @ bci:56  L[0]=RBP L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=#1 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ STK[0]=rsp + #0 STK[1]=rsp + #8
        # java.util.HashMap::put @ bci:9  L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=Oop [0]=Oop [16]=Derived_oop_[0] [32]=Oop off=2276/0x8e4}

08e4    B72: #	out( B31 ) &lt;- in( B71 )  Freq: 0.00419787
        # Block is sole successor of call
08e4    movq    R14, [rsp + #0]	# spill
08e8    movl    R8, [rsp + #8]	# spill
08ed    movq    RBX, [rsp + #16]	# spill
08f2    movq    RBP, RAX	# spill
08f5    jmp     B31

08fa    B73: #	out( B127 B74 ) &lt;- in( B37 )  Freq: 0.0041979
08fa    movl    RDX, #1	# int
08ff    movq    RSI, [rsp + #32]	# spill
        nop 	# 2 bytes pad for loops and calls
0906    movq    rax, #Universe::non_oop_word()
	call,dynamic  java.util.HashMap::afterNodeInsertion
        # java.util.HashMap::putVal @ bci:295  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_
        # java.util.HashMap::put @ bci:9  L[0]=_ L[1]=_ L[2]=_
        # OopMap {off=2328/0x918}

0918    B74: #	out( B38 ) &lt;- in( B73 )  Freq: 0.00419782
        # Block is sole successor of call
0918    jmp     B38

091d    B75: #	out( B126 B76 ) &lt;- in( B2 B3 B4 )  Freq: 0.00299699
091d    movq    RSI, RDX	# spill
        nop 	# 2 bytes pad for loops and calls
0922    movq    rax, #Universe::non_oop_word()
	call,dynamic  java.lang.Object::hashCode
        # java.util.HashMap::hash @ bci:9  L[0]=_ L[1]=_
        # java.util.HashMap::put @ bci:2  L[0]=_ L[1]=rsp + #48 L[2]=rsp + #56 STK[0]=rsp + #32
        # OopMap {[32]=Oop [48]=Oop [56]=Oop off=2356/0x934}

0934    B76: #	out( B5 ) &lt;- in( B75 )  Freq: 0.00299693
        # Block is sole successor of call
0934    jmp     B5

0939    B77: #	out( B33 B78 ) &lt;- in( B32 )  Freq: 0.000686938
0939    movl    R10, [RBX]	# compressed ptr
093c    testl   R10, R10	# compressed ptr
093f    je     B33  P=0.500000 C=-1.000000

0945    B78: #	out( B105 B79 ) &lt;- in( B77 )  Freq: 0.000343469
0945    # TLS is in R15
0945    movq    R11, [R15 + #56 (8-bit)]	# long
0949    decode_heap_oop RDI,R10
0975    testq   R11, R11
0978    je     B105  P=0.001000 C=-1.000000

097e    B79: #	out( B33 ) &lt;- in( B78 )  Freq: 0.000343126
097e    # TLS is in R15
097e    movq    R10, [R15 + #72 (8-bit)]	# ptr
0982    movq    [R10 + #-8 + R11], RDI	# ptr
0987    addq    R11, #-8	# long
098b    # TLS is in R15
098b    movq    [R15 + #56 (8-bit)], R11	# long
098f    jmp     B33

0994    B80: #	out( B36 B81 ) &lt;- in( B35 )  Freq: 0.000685574
0994    # TLS is in R15
0994    movq    R10, [R15 + #104 (8-bit)]	# long
0998    # TLS is in R15
0998    movq    R11, [R15 + #120 (8-bit)]	# ptr
099c    lock addl [rsp + #0], 0	! membar_volatile
09a2    cmpb    [R8], #0
09a6    je     B36  P=0.500000 C=-1.000000

09ac    B81: #	out( B83 B82 ) &lt;- in( B80 )  Freq: 0.000342787
09ac    movb    [R8], #0	# CMS card-mark byte 0
09b0    testq   R10, R10
09b3    jne,s   B83  P=0.500000 C=-1.000000

09b5    B82: #	out( B36 ) &lt;- in( B81 )  Freq: 0.000171394
09b5    movq    RDI, R8	# spill
09b8    # TLS is in R15
09b8    movq    RSI, R15	# spill
09bb    call_leaf,runtime  write_ref_field_post_entry
        No JVM State Info
        # 
09cb    jmp     B36

09d0    B83: #	out( B36 ) &lt;- in( B81 )  Freq: 0.000171394
09d0    movq    [R11 + #-8 + R10], R8	# ptr
09d5    addq    R10, #-8	# long
09d9    # TLS is in R15
09d9    movq    [R15 + #104 (8-bit)], R10	# long
09dd    jmp     B36

09e2    B84: #	out( B23 B85 ) &lt;- in( B22 )  Freq: 0.000265902
09e2    movq    R10, [rsp + #64]	# spill
09e7    movl    R10, [R10 + #24 (8-bit)]	# compressed ptr ! Field: java/util/HashMap$Node.next
09eb    testl   R10, R10	# compressed ptr
09ee    je     B23  P=0.500000 C=-1.000000

09f4    B85: #	out( B108 B86 ) &lt;- in( B84 )  Freq: 0.000132951
09f4    # TLS is in R15
09f4    movq    R11, [R15 + #56 (8-bit)]	# long
09f8    decode_heap_oop RDI,R10
0a24    testq   R11, R11
0a27    je     B108  P=0.001000 C=-1.000000

0a2d    B86: #	out( B23 ) &lt;- in( B85 )  Freq: 0.000132818
0a2d    # TLS is in R15
0a2d    movq    R10, [R15 + #72 (8-bit)]	# ptr
0a31    movq    [R10 + #-8 + R11], RDI	# ptr
0a36    addq    R11, #-8	# long
0a3a    # TLS is in R15
0a3a    movq    [R15 + #56 (8-bit)], R11	# long
0a3e    jmp     B23

0a43    B87: #	out( B25 B88 ) &lt;- in( B24 )  Freq: 0.00026564
0a43    # TLS is in R15
0a43    movq    R10, [R15 + #104 (8-bit)]	# long
0a47    # TLS is in R15
0a47    movq    R11, [R15 + #120 (8-bit)]	# ptr
0a4b    lock addl [rsp + #0], 0	! membar_volatile
0a51    cmpb    [R13], #0
0a56    je     B25  P=0.500000 C=-1.000000

0a5c    B88: #	out( B90 B89 ) &lt;- in( B87 )  Freq: 0.00013282
0a5c    movb    [R13], #0	# CMS card-mark byte 0
0a61    testq   R10, R10
0a64    jne,s   B90  P=0.500000 C=-1.000000

0a66    B89: #	out( B25 ) &lt;- in( B88 )  Freq: 6.64099e-05
0a66    movq    RDI, R13	# spill
0a69    # TLS is in R15
0a69    movq    RSI, R15	# spill
0a6c    call_leaf,runtime  write_ref_field_post_entry
        No JVM State Info
        # 
0a7c    jmp     B25

0a81    B90: #	out( B25 ) &lt;- in( B88 )  Freq: 6.64099e-05
0a81    movq    [R11 + #-8 + R10], R13	# ptr
0a86    addq    R10, #-8	# long
0a8a    # TLS is in R15
0a8a    movq    [R15 + #104 (8-bit)], R10	# long
0a8e    jmp     B25

0a93    B91: #	out( B125 B92 ) &lt;- in( B28 )  Freq: 6.82863e-05
0a93    movl    [rsp + #80], R13	# spill
0a98    movl    [rsp + #44], RDI	# spill
0a9c    movq    [rsp + #72], RBX	# spill
0aa1    movl    [rsp + #28], R8	# spill
0aa6    movq    [rsp + #64], R14	# spill
0aab    movl    R11, [rsp + #40]	# spill
0ab0    movl    [rsp + #24], R11	# spill
0ab5    movq    R10, [rsp + #32]	# spill
0aba    movq    [rsp + #16], R10	# spill
0abf    movq    RBP, R10	# spill
0ac2    # checkcastPP of RBP
0ac2    movq    RSI, precise klass java/util/HashMap$Node: 0x000000012791c250:Constant:exact *	# ptr
0acc    call,static  wrapper for: _new_instance_Java
        # java.util.HashMap::newNode @ bci:0  L[0]=_ L[1]=rsp + #24 L[2]=rsp + #48 L[3]=rsp + #56 L[4]=#NULL
        # java.util.HashMap::putVal @ bci:56  L[0]=RBP L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=#1 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ STK[0]=rsp + #64 STK[1]=rsp + #28
        # java.util.HashMap::put @ bci:9  L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=Oop [16]=Oop [44]=NarrowOop [48]=Oop [56]=Oop [64]=Oop [72]=Derived_oop_[64] [80]=NarrowOop off=2772/0xad4}

0ad4    B92: #	out( B30 ) &lt;- in( B91 )  Freq: 6.8285e-05
        # Block is sole successor of call
0ad4    movq    R11, [rsp + #16]	# spill
0ad9    movq    [rsp + #32], R11	# spill
0ade    movq    R14, [rsp + #64]	# spill
0ae3    movl    R8, [rsp + #28]	# spill
0ae8    movq    RBX, [rsp + #72]	# spill
0aed    movl    RDI, [rsp + #44]	# spill
0af1    movl    R9, [rsp + #80]	# spill
0af6    movl    [rsp + #0], R9	# spill
0afa    movq    RBP, RAX	# spill
0afd    jmp     B30

0b02    B93: #	out( B53 B94 ) &lt;- in( B52 )  Freq: 4.71405e-05
0b02    movq    R10, [rsp + #64]	# spill
0b07    movl    R11, [R10 + #20 (8-bit)]	# compressed ptr ! Field: java/util/HashMap$Node.value
0b0b    testl   R11, R11	# compressed ptr
0b0e    je     B53  P=0.500000 C=-1.000000

0b14    B94: #	out( B115 B95 ) &lt;- in( B93 )  Freq: 2.35703e-05
0b14    # TLS is in R15
0b14    movq    R10, [R15 + #56 (8-bit)]	# long
0b18    decode_heap_oop RDI,R11
0b44    testq   R10, R10
0b47    je     B115  P=0.001000 C=-1.000000

0b4d    B95: #	out( B53 ) &lt;- in( B94 )  Freq: 2.35467e-05
0b4d    # TLS is in R15
0b4d    movq    R11, [R15 + #72 (8-bit)]	# ptr
0b51    movq    [R11 + #-8 + R10], RDI	# ptr
0b56    addq    R10, #-8	# long
0b5a    # TLS is in R15
0b5a    movq    [R15 + #56 (8-bit)], R10	# long
0b5e    jmp     B53

0b63    B96: #	out( B56 B97 ) &lt;- in( B55 )  Freq: 4.70469e-05
0b63    # TLS is in R15
0b63    movq    R10, [R15 + #104 (8-bit)]	# long
0b67    # TLS is in R15
0b67    movq    R11, [R15 + #120 (8-bit)]	# ptr
0b6b    lock addl [rsp + #0], 0	! membar_volatile
0b71    cmpb    [R13], #0
0b76    je     B56  P=0.500000 C=-1.000000

0b7c    B97: #	out( B99 B98 ) &lt;- in( B96 )  Freq: 2.35235e-05
0b7c    movb    [R13], #0	# CMS card-mark byte 0
0b81    testq   R10, R10
0b84    jne,s   B99  P=0.500000 C=-1.000000

0b86    B98: #	out( B56 ) &lt;- in( B97 )  Freq: 1.17617e-05
0b86    movq    RDI, R13	# spill
0b89    # TLS is in R15
0b89    movq    RSI, R15	# spill
0b8c    call_leaf,runtime  write_ref_field_post_entry
        No JVM State Info
        # 
0b9c    jmp     B56

0ba1    B99: #	out( B56 ) &lt;- in( B97 )  Freq: 1.17617e-05
0ba1    movq    [R11 + #-8 + R10], R13	# ptr
0ba6    addq    R10, #-8	# long
0baa    # TLS is in R15
0baa    movq    [R15 + #104 (8-bit)], R10	# long
0bae    jmp     B56

0bb3    B100: #	out( B124 B101 ) &lt;- in( B20 )  Freq: 2.6595e-05
0bb3    movl    [rsp + #88], RBX	# spill
0bb7    pushq   [rsp + #64]	# 64-bit mem-mem spill
	popq    [rsp + #80]
0bc1    movq    [rsp + #72], R13	# spill
0bc6    movl    R11, [rsp + #0]	# spill
0bca    movl    [rsp + #44], R11	# spill
0bcf    movl    [rsp + #28], RDI	# spill
0bd3    movq    [rsp + #64], R14	# spill
0bd8    movl    R10, [rsp + #40]	# spill
0bdd    movl    [rsp + #24], R10	# spill
0be2    movq    R10, [rsp + #32]	# spill
0be7    movq    [rsp + #16], R10	# spill
0bec    movq    R10, [rsp + #56]	# spill
0bf1    movq    [rsp + #8], R10	# spill
0bf6    movq    RSI, precise klass java/util/HashMap$Node: 0x000000012791c250:Constant:exact *	# ptr
0c00    movq    R10, [rsp + #48]	# spill
0c05    movq    [rsp + #0], R10	# spill
        nop 	# 3 bytes pad for loops and calls
0c0c    call,static  wrapper for: _new_instance_Java
        # java.util.HashMap::newNode @ bci:0  L[0]=_ L[1]=rsp + #24 L[2]=rsp + #0 L[3]=rsp + #8 L[4]=#NULL
        # java.util.HashMap::putVal @ bci:152  L[0]=RBP L[1]=rsp + #24 L[2]=_ L[3]=rsp + #8 L[4]=#0 L[5]=#1 L[6]=rsp + #64 L[7]=_ L[8]=_ L[9]=_ L[10]=#NULL L[11]=_ L[12]=rsp + #88 STK[0]=rsp + #80
        # java.util.HashMap::put @ bci:9  L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=Oop [0]=Oop [8]=Oop [16]=Oop [28]=NarrowOop [44]=NarrowOop [64]=Oop [80]=Oop off=3092/0xc14}

0c14    B101: #	out( B22 ) &lt;- in( B100 )  Freq: 2.65944e-05
        # Block is sole successor of call
0c14    movq    R11, [rsp + #8]	# spill
0c19    movq    [rsp + #56], R11	# spill
0c1e    movq    R11, [rsp + #16]	# spill
0c23    movq    [rsp + #32], R11	# spill
0c28    movl    R11, [rsp + #24]	# spill
0c2d    movl    [rsp + #40], R11	# spill
0c32    movq    R14, [rsp + #64]	# spill
0c37    movl    RDI, [rsp + #28]	# spill
0c3b    movl    R8, [rsp + #44]	# spill
0c40    movl    [rsp + #0], R8	# spill
0c44    movq    R13, [rsp + #72]	# spill
0c49    pushq   [rsp + #80]	# 64-bit mem-mem spill
	popq    [rsp + #64]
0c53    movl    RBX, [rsp + #88]	# spill
0c57    movq    R8, RAX	# spill
0c5a    jmp     B22

0c5f    B102: #	out( N1711 ) &lt;- in( B8 )  Freq: 9.99996e-07
0c5f    movl    RSI, #-28	# int
0c64    movq    RBP, [rsp + #32]	# spill
0c69    movl    R11, [rsp + #40]	# spill
0c6e    movl    [rsp + #0], R11	# spill
0c72    movq    [rsp + #32], R14	# spill
0c77    movl    [rsp + #40], R8	# spill
0c7c    call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:40  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #48 L[3]=rsp + #56 L[4]=#0 L[5]=#1 L[6]=rsp + #32 L[7]=_ L[8]=_ L[9]=rsp + #40 L[10]=_ L[11]=_ L[12]=_ STK[0]=rsp + #32 STK[1]=rsp + #40
        # java.util.HashMap::put @ bci:9  L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=Oop [32]=Oop [48]=Oop [56]=Oop off=3204/0xc84}
0c84    ud2	# ShouldNotReachHere

0c98    B103: #	out( N1711 ) &lt;- in( B31 )  Freq: 6.86948e-07
0c98    movl    RSI, #-42	# int
0c9d    movq    [rsp + #8], R14	# spill
0ca2    movl    [rsp + #16], R8	# spill
        nop 	# 1 bytes pad for loops and calls
0ca8    call,static  wrapper for: uncommon_trap(reason=&apos;array_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:59  L[0]=rsp + #32 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=#1 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ STK[0]=rsp + #8 STK[1]=rsp + #16 STK[2]=RBP
        # java.util.HashMap::put @ bci:9  L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=Oop [8]=Oop [32]=Oop off=3248/0xcb0}
0cb0    ud2	# ShouldNotReachHere

0cc4    B104: #	out( N1711 ) &lt;- in( B6 )  Freq: 4.13971e-07
0cc4    movl    RSI, #-187	# int
0cc9    movq    RBP, [rsp + #32]	# spill
0cce    movl    [rsp + #4], R10	# spill
0cd3    movl    [rsp + #28], R11	# spill
0cd8    call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:16  L[0]=RBP L[1]=rsp + #40 L[2]=rsp + #48 L[3]=rsp + #56 L[4]=#0 L[5]=#1 L[6]=rsp + #4 L[7]=_ L[8]=rsp + #28 L[9]=_ L[10]=_ L[11]=_ L[12]=_ STK[0]=rsp + #28
        # java.util.HashMap::put @ bci:9  L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=Oop [4]=NarrowOop [48]=Oop [56]=Oop off=3296/0xce0}
0ce0    ud2	# ShouldNotReachHere

0cf4    B105: #	out( B33 ) &lt;- in( B78 )  Freq: 3.43465e-07
0cf4    # TLS is in R15
0cf4    movq    RSI, R15	# spill
0cf7    call_leaf,runtime  write_ref_field_pre_entry
        No JVM State Info
        # 
0d07    jmp     B33

0d0c    B106: #	out( N1711 ) &lt;- in( B11 )  Freq: 2.78204e-07
0d0c    movl    RSI, #-187	# int
0d11    movq    RBP, [rsp + #32]	# spill
0d16    movq    [rsp + #24], R14	# spill
0d1b    movl    [rsp + #4], R11	# spill
0d20    call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:109  L[0]=RBP L[1]=rsp + #40 L[2]=rsp + #48 L[3]=rsp + #56 L[4]=#0 L[5]=#1 L[6]=rsp + #24 L[7]=rsp + #4 L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ STK[0]=#1
        # java.util.HashMap::put @ bci:9  L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=Oop [4]=NarrowOop [24]=Oop [48]=Oop [56]=Oop off=3368/0xd28}
0d28    ud2	# ShouldNotReachHere

0d3c    B107: #	out( N1711 ) &lt;- in( B19 )  Freq: 2.65906e-07
0d3c    movl    RSI, #-34	# int
0d41    movq    RBP, [rsp + #32]	# spill
0d46    movq    [rsp + #16], R14	# spill
0d4b    movl    [rsp + #4], RBX	# spill
        nop 	# 1 bytes pad for loops and calls
0d50    call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:152  L[0]=RBP L[1]=rsp + #40 L[2]=_ L[3]=rsp + #56 L[4]=#0 L[5]=#1 L[6]=rsp + #16 L[7]=_ L[8]=_ L[9]=_ L[10]=#NULL L[11]=_ L[12]=rsp + #4 STK[0]=rsp + #64 STK[1]=RBP STK[2]=rsp + #40 STK[3]=rsp + #48 STK[4]=rsp + #56 STK[5]=#NULL
        # java.util.HashMap::put @ bci:9  L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=Oop [16]=Oop [48]=Oop [56]=Oop [64]=Oop off=3416/0xd58}
0d58    ud2	# ShouldNotReachHere

0d6c    B108: #	out( B23 ) &lt;- in( B85 )  Freq: 1.32949e-07
0d6c    movq    [rsp + #48], R8	# spill
0d71    movl    [rsp + #24], RBX	# spill
0d75    movq    [rsp + #8], R13	# spill
0d7a    movq    [rsp + #0], R14	# spill
0d7e    # TLS is in R15
0d7e    movq    RSI, R15	# spill
0d81    call_leaf,runtime  write_ref_field_pre_entry
        No JVM State Info
        # 
0d91    movq    R14, [rsp + #0]	# spill
0d95    movq    R13, [rsp + #8]	# spill
0d9a    movl    RBX, [rsp + #24]	# spill
0d9e    movq    R8, [rsp + #48]	# spill
0da3    jmp     B23

0da8    B109: #	out( N1711 ) &lt;- in( B56 )  Freq: 4.71411e-08
0da8    movl    RSI, #-34	# int
        nop 	# 3 bytes pad for loops and calls
0db0    call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:253  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=RBP STK[0]=rsp + #32 STK[1]=rsp + #64
        # java.util.HashMap::put @ bci:9  L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=NarrowOop [32]=Oop [64]=Oop off=3512/0xdb8}
0db8    ud2	# ShouldNotReachHere

0dcc    B110: #	out( N1711 ) &lt;- in( B44 )  Freq: 3.74071e-08
0dcc    movl    RSI, #-34	# int
0dd1    movq    RBP, [rsp + #32]	# spill
0dd6    movl    R9, [rsp + #40]	# spill
0ddb    movl    [rsp + #0], R9	# spill
0ddf    movq    [rsp + #8], R8	# spill
0de4    movq    [rsp + #24], R14	# spill
0de9    movl    [rsp + #4], R11	# spill
0dee    movl    [rsp + #40], R10	# spill
        nop 	# 1 bytes pad for loops and calls
0df4    call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:91  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #56 L[4]=#0 L[5]=#1 L[6]=rsp + #24 L[7]=rsp + #4 L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ STK[0]=rsp + #8 STK[1]=rsp + #40
        # java.util.HashMap::put @ bci:9  L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=Oop [4]=NarrowOop [8]=Oop [24]=Oop [40]=NarrowOop [56]=Oop off=3580/0xdfc}
0dfc    ud2	# ShouldNotReachHere

0e10    B111: #	out( B112 ) &lt;- in( B49 )  Freq: 3.59609e-08
0e10    xorl    R8, R8	# int

0e13    B112: #	out( B114 ) &lt;- in( B50 B111 )  Freq: 5.31084e-08
0e13    movl    RBP, R8	# spill
0e16    jmp,s   B114

0e18    B113: #	out( B114 ) &lt;- in( B46 )  Freq: 3.64385e-08
0e18    xorl    RBP, RBP	# int

0e1a    B114: #	out( N1711 ) &lt;- in( B113 B112 )  Freq: 8.95469e-08
0e1a    movl    RSI, #-187	# int
0e1f    movq    R10, [rsp + #32]	# spill
0e24    movq    [rsp + #0], R10	# spill
0e28    movq    [rsp + #24], R14	# spill
0e2d    movl    [rsp + #12], R11	# spill
0e32    movq    [rsp + #32], R9	# spill
        nop 	# 1 bytes pad for loops and calls
0e38    call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:94  L[0]=rsp + #0 L[1]=rsp + #40 L[2]=rsp + #32 L[3]=rsp + #56 L[4]=#0 L[5]=#1 L[6]=rsp + #24 L[7]=rsp + #12 L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ STK[0]=RBP
        # java.util.HashMap::put @ bci:9  L[0]=_ L[1]=_ L[2]=_
        # OopMap {[0]=Oop [12]=NarrowOop [24]=Oop [32]=Oop [56]=Oop off=3648/0xe40}
0e40    ud2	# ShouldNotReachHere

0e54    B115: #	out( B53 ) &lt;- in( B94 )  Freq: 2.357e-08
0e54    # TLS is in R15
0e54    movq    RSI, R15	# spill
0e57    call_leaf,runtime  write_ref_field_pre_entry
        No JVM State Info
        # 
0e67    jmp     B53

0e6c    B116: #	out( N1711 ) &lt;- in( B48 )  Freq: 1.79805e-08
0e6c    movl    RSI, #-187	# int
0e71    movq    RCX, [rsp + #32]	# spill
0e76    movq    [rsp + #0], RCX	# spill
0e7a    movl    RBX, [rsp + #40]	# spill
0e7e    movl    [rsp + #8], RBX	# spill
0e82    movq    RCX, [rsp + #56]	# spill
0e87    movq    [rsp + #16], RCX	# spill
0e8c    movq    [rsp + #24], R14	# spill
0e91    movl    [rsp + #12], R11	# spill
0e96    movq    [rsp + #40], R9	# spill
0e9b    movq    [rsp + #48], R10	# spill
0ea0    movl    [rsp + #56], R8	# spill
        nop 	# 3 bytes pad for loops and calls
0ea8    call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.String::equals @ bci:33  L[0]=rsp + #40 L[1]=_ L[2]=rsp + #48 STK[0]=rsp + #56 STK[1]=RBP
        # java.util.HashMap::putVal @ bci:91  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=rsp + #40 L[3]=rsp + #16 L[4]=#0 L[5]=#1 L[6]=rsp + #24 L[7]=rsp + #12 L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_
        # java.util.HashMap::put @ bci:9  L[0]=_ L[1]=_ L[2]=_
        # OopMap {[0]=Oop [12]=NarrowOop [16]=Oop [24]=Oop [40]=Oop [48]=Oop off=3760/0xeb0}
0eb0    ud2	# ShouldNotReachHere

0ec4    B117: #	out( N1711 ) &lt;- in( B61 )  Freq: 8.65191e-09
0ec4    movl    RSI, #-34	# int
0ec9    movq    RBP, [rsp + #32]	# spill
0ece    movl    [rsp + #0], RBX	# spill
0ed1    movq    [rsp + #8], R11	# spill
0ed6    movq    [rsp + #24], R14	# spill
0edb    movl    [rsp + #4], R10	# spill
0ee0    movl    [rsp + #48], R9	# spill
        nop 	# 3 bytes pad for loops and calls
0ee8    call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:203  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #56 L[4]=#0 L[5]=#1 L[6]=rsp + #24 L[7]=_ L[8]=_ L[9]=_ L[10]=rsp + #64 L[11]=_ L[12]=rsp + #4 STK[0]=rsp + #8 STK[1]=rsp + #48
        # java.util.HashMap::put @ bci:9  L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=Oop [8]=Oop [24]=Oop [48]=NarrowOop [56]=Oop [64]=Oop off=3824/0xef0}
0ef0    ud2	# ShouldNotReachHere

0f04    B118: #	out( N1711 ) &lt;- in( B65 )  Freq: 4.15871e-09
0f04    movl    RSI, #-187	# int
0f09    movq    R8, [rsp + #32]	# spill
0f0e    movq    [rsp + #0], R8	# spill
0f12    movl    R9, [rsp + #40]	# spill
0f17    movl    [rsp + #8], R9	# spill
0f1c    movq    R8, [rsp + #56]	# spill
0f21    movq    [rsp + #16], R8	# spill
0f26    movq    [rsp + #24], R14	# spill
0f2b    pushq   [rsp + #64]	# 64-bit mem-mem spill
	popq    [rsp + #32]
0f35    movl    [rsp + #12], R10	# spill
0f3a    movq    [rsp + #48], R11	# spill
0f3f    movq    [rsp + #56], RBX	# spill
0f44    movl    [rsp + #64], RCX	# spill
0f48    call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.String::equals @ bci:33  L[0]=rsp + #48 L[1]=_ L[2]=rsp + #56 STK[0]=rsp + #64 STK[1]=RBP
        # java.util.HashMap::putVal @ bci:203  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=rsp + #48 L[3]=rsp + #16 L[4]=#0 L[5]=#1 L[6]=rsp + #24 L[7]=_ L[8]=_ L[9]=_ L[10]=rsp + #32 L[11]=_ L[12]=rsp + #12
        # java.util.HashMap::put @ bci:9  L[0]=_ L[1]=_ L[2]=_
        # OopMap {[0]=Oop [16]=Oop [24]=Oop [32]=Oop [48]=Oop [56]=Oop off=3920/0xf50}
0f50    ud2	# ShouldNotReachHere

0f64    B119: #	out( N1711 ) &lt;- in( B60 )  Freq: 4.12555e-09
0f64    movl    RSI, #-187	# int
0f69    movq    RBP, [rsp + #32]	# spill
0f6e    movl    R11, RBX	# spill
0f71    movl    [rsp + #0], R11	# spill
0f75    movq    R11, [rsp + #48]	# spill
0f7a    movq    [rsp + #8], R11	# spill
0f7f    movq    [rsp + #24], R14	# spill
0f84    movl    [rsp + #4], R10	# spill
0f89    movl    [rsp + #52], R9	# spill
        nop 	# 2 bytes pad for loops and calls
0f90    call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:193  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #56 L[4]=#0 L[5]=#1 L[6]=rsp + #24 L[7]=_ L[8]=_ L[9]=_ L[10]=rsp + #64 L[11]=rsp + #52 L[12]=rsp + #4 STK[0]=rsp + #52 STK[1]=rsp + #8
        # java.util.HashMap::put @ bci:9  L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=Oop [8]=Oop [24]=Oop [52]=NarrowOop [56]=Oop [64]=Oop off=3992/0xf98}
0f98    ud2	# ShouldNotReachHere

0fac    B120: #	out( N1711 ) &lt;- in( B64 )  Freq: 1e-35
0fac    movl    RSI, #-34	# int
0fb1    movq    RBP, [rsp + #32]	# spill
0fb6    movl    [rsp + #0], RBX	# spill
0fb9    movq    [rsp + #16], R14	# spill
0fbe    movl    [rsp + #4], R10	# spill
0fc3    movq    [rsp + #40], R11	# spill
0fc8    movl    [rsp + #52], R9	# spill
        nop 	# 3 bytes pad for loops and calls
0fd0    call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.String::equals @ bci:8  L[0]=rsp + #40 L[1]=rsp + #52 L[2]=_ STK[0]=rsp + #52
        # java.util.HashMap::putVal @ bci:203  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #40 L[3]=rsp + #56 L[4]=#0 L[5]=#1 L[6]=rsp + #16 L[7]=_ L[8]=_ L[9]=_ L[10]=rsp + #64 L[11]=_ L[12]=rsp + #4
        # java.util.HashMap::put @ bci:9  L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=Oop [16]=Oop [40]=Oop [52]=NarrowOop [56]=Oop [64]=Oop off=4056/0xfd8}
0fd8    ud2	# ShouldNotReachHere

0fec    B121: #	out( N1711 ) &lt;- in( B47 )  Freq: 1e-35
0fec    movl    RSI, #-34	# int
0ff1    movq    RBP, [rsp + #32]	# spill
0ff6    movl    R8, [rsp + #40]	# spill
0ffb    movl    [rsp + #0], R8	# spill
0fff    movq    [rsp + #16], R14	# spill
1004    movl    [rsp + #4], R11	# spill
1009    movq    [rsp + #32], R9	# spill
100e    movl    [rsp + #44], R10	# spill
        nop 	# 1 bytes pad for loops and calls
1014    call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.String::equals @ bci:8  L[0]=rsp + #32 L[1]=rsp + #44 L[2]=_ STK[0]=rsp + #44
        # java.util.HashMap::putVal @ bci:91  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #32 L[3]=rsp + #56 L[4]=#0 L[5]=#1 L[6]=rsp + #16 L[7]=rsp + #4 L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_
        # java.util.HashMap::put @ bci:9  L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbp=Oop [4]=NarrowOop [16]=Oop [32]=Oop [44]=NarrowOop [56]=Oop off=4124/0x101c}
101c    ud2	# ShouldNotReachHere

1030    B122: #	out( N1711 ) &lt;- in( B1 )  Freq: 4.76837e-07
1030    movl    RSI, #-187	# int
1035    movq    [rsp + #16], RDX	# spill
103a    movq    [rsp + #24], RDX	# spill
        nop 	# 1 bytes pad for loops and calls
1040    call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::hash @ bci:1  L[0]=rsp + #24 L[1]=_ STK[0]=rsp + #16
        # java.util.HashMap::put @ bci:2  L[0]=_ L[1]=rsp + #16 L[2]=rsp + #56 STK[0]=rsp + #32
        # OopMap {[16]=Oop [24]=Oop [32]=Oop [56]=Oop off=4168/0x1048}
1048    ud2	# ShouldNotReachHere

105c    B123: #	out( N1711 ) &lt;- in( B41 )  Freq: 1.33586e-07
105c    movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
1064    call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:26  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ STK[0]=#NULL
        # java.util.HashMap::put @ bci:9  L[0]=_ L[1]=_ L[2]=_
        # OopMap {off=4204/0x106c}
106c    ud2	# ShouldNotReachHere

1080    B124: #	out( B131 ) &lt;- in( B100 )  Freq: 2.6595e-10
1080    # exception oop is in rax; no code emitted
1080    jmp,s   B131

1082    B125: #	out( B131 ) &lt;- in( B91 )  Freq: 6.82863e-10
1082    # exception oop is in rax; no code emitted
1082    jmp,s   B131

1084    B126: #	out( B132 ) &lt;- in( B75 )  Freq: 2.99699e-08
1084    # exception oop is in rax; no code emitted
1084    movq    RSI, RAX	# spill
1087    jmp,s   B132

1089    B127: #	out( B131 ) &lt;- in( B73 )  Freq: 4.1979e-08
1089    # exception oop is in rax; no code emitted
1089    jmp,s   B131

108b    B128: #	out( B131 ) &lt;- in( B71 )  Freq: 4.19796e-08
108b    # exception oop is in rax; no code emitted
108b    jmp,s   B131

108d    B129: #	out( B131 ) &lt;- in( B58 )  Freq: 3.28919e-07
108d    # exception oop is in rax; no code emitted
108d    jmp,s   B131

108f    B130: #	out( B131 ) &lt;- in( B40 )  Freq: 1.31838e-06
108f    # exception oop is in rax; no code emitted

108f    B131: #	out( B132 ) &lt;- in( B130 B128 B125 B124 B129 B127 )  Freq: 1.73221e-06
108f    movq    RSI, RAX	# spill

1092    B132: #	out( N1711 ) &lt;- in( B126 B131 )  Freq: 1.76218e-06
1092    vzeroupper
	addq    rsp, 128	# Destroy frame
	popq    rbp

109d    jmp     rethrow_stub

--------------------------------------------------------------------------------
</opto_assembly>
<writer thread='43011'/>
   1107  170       3       java.util.HashMap::resize (356 bytes)   made not entrant
<writer thread='36611'/>

============================= C2-compiled nmethod ==============================
<opto_assembly compile_id='285'>
----------------------- MetaData before Compile_id = 285 ------------------------
{method}
 - this oop:          0x0000000126aeef18
 - method holder:     &apos;java/util/HashSet&apos;
 - constants:         0x0000000126aedc70 constant pool [278] {0x0000000126aedc70} for &apos;java/util/HashSet&apos; cache=0x0000000126af03d0
 - access:            0x81000001  public 
 - name:              &apos;add&apos;
 - signature:         &apos;(Ljava/lang/Object;)Z&apos;
 - max stack:         4
 - max locals:        2
 - size of params:    2
 - method size:       13
 - highest level:     3
 - vtable index:      5
 - i2i entry:         0x000000010c0a1de0
 - adapters:          AHE@0x00007f99308e16b0: 0xbb000000 i2c: 0x000000010c0e9b60 c2i: 0x000000010c0e9c47 c2iUV: 0x000000010c0e9c0e c2iNCI: 0x000000010c0e9c84
 - compiled entry     0x000000010c0e9c47
 - code size:         20
 - code start:        0x0000000126aeeee0
 - code end (excl):   0x0000000126aeeef4
 - method data:       0x0000000126e92ba0
 - checked ex length: 0
 - linenumber start:  0x0000000126aeeef4
 - localvar length:   2
 - localvar start:    0x0000000126aeeefc

------------------------ OptoAssembly for Compile_id = 285 -----------------------
#
#  bool ( java/util/HashSet:NotNull *, java/lang/Object * )
#
#r018 rsi:rsi   : parm 0: java/util/HashSet:NotNull *
#r016 rdx:rdx   : parm 1: java/lang/Object *
# -- Old rsp -- Framesize: 112 --
#r583 rsp+108: in_preserve
#r582 rsp+104: return address
#r581 rsp+100: in_preserve
#r580 rsp+96: saved fp register
#r579 rsp+92: pad2, stack alignment
#r578 rsp+88: pad2, stack alignment
#r577 rsp+84: Fixed slot 1
#r576 rsp+80: Fixed slot 0
#r603 rsp+76: spill
#r602 rsp+72: spill
#r601 rsp+68: spill
#r600 rsp+64: spill
#r599 rsp+60: spill
#r598 rsp+56: spill
#r597 rsp+52: spill
#r596 rsp+48: spill
#r595 rsp+44: spill
#r594 rsp+40: spill
#r593 rsp+36: spill
#r592 rsp+32: spill
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
0000    N1722: #	out( B1 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
0000    movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


0020    B1: #	out( B123 B2 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
0020    # stack bang (608 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #96	# Create frame

002c    movl    R10, [RSI + #12 (8-bit)]	# compressed ptr ! Field: java/util/HashSet.map
0030    movl    [rsp + #24], R10	# spill
0035    movl    R11, [R12 + R10 &lt;&lt; 3 + #8] (compressed oop addressing)	# compressed klass ptr
003a    NullCheck R10

003a    B2: #	out( B124 B3 ) &lt;- in( B1 )  Freq: 0.999999
003a    movl    [rsp + #0], R11	# spill
003e    movl    RBX, [RDX + #8 (8-bit)]	# compressed klass ptr
0041    NullCheck RDX

0041    B3: #	out( B75 B4 ) &lt;- in( B2 )  Freq: 0.999999
0041    decode_klass_not_null R10,RBX
004e    movq    R10, [R10 + #504 (32-bit)]	# ptr
0055    movl    R8, [rsp + #24]	# spill
005a    decode_heap_oop_not_null RBP,R8
005e    movq    R11, metadataptr:Constant0x0000000127735850	# ptr
0068    cmpq    R10, R11	# ptr
006b    jne,u   B75  P=0.001000 C=-1.000000

0071    B4: #	out( B75 B5 ) &lt;- in( B3 )  Freq: 0.998999
0071    movq    R10, [RDX]	# long
0074    movq    R11, R10	# spill
0077    andq    R11, #7	# long
007b    cmpq    R11, #1
007f    jne     B75  P=0.001000 C=-1.000000

0085    B5: #	out( B75 B6 ) &lt;- in( B4 )  Freq: 0.998
0085    shrq    R10, #8
0089    movl    RAX, R10	# l2i
008c    andl    RAX, #2147483647	# int
0092    testl   RAX, RAX
0094    je     B75  P=0.001000 C=-1.000000

009a    B6: #	out( B41 B7 ) &lt;- in( B76 B5 )  Freq: 0.999998
009a    movl    R10, [rsp + #24]	# spill
009f    movl    R8, [R12 + R10 &lt;&lt; 3 + #36] (compressed oop addressing)	# compressed ptr ! Field: java/util/HashMap.table
00a4    movl    R10, RAX	# spill
00a7    shrl    R10, #16
00ab    xorl    R10, RAX	# int
00ae    movl    [rsp + #28], R10	# spill
00b3    testl   R8, R8	# compressed ptr
00b6    je     B41  P=0.159923 C=22811.000000

00bc    B7: #	out( B104 B8 ) &lt;- in( B6 )  Freq: 0.840076
00bc    movl    R10, [R12 + R8 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
00c1    testl   R10, R10	# unsigned
00c4    jbe,u   B104  P=0.000000 C=19163.000000

00ca    B8: #	out( B9 ) &lt;- in( B7 )  Freq: 0.840075
00ca    decode_heap_oop_not_null R14,R8

00ce    B9: #	out( B102 B10 ) &lt;- in( B43 B8 )  Freq: 0.999995
00ce    movl    R8, R10	# spill
00d1    decl    R8	# int
00d4    andl    R8, [RSP + #28 (32-bit)]	# int
00d9    testl   R10, R10
00dc    jle     B102  P=0.000001 C=-1.000000

00e2    B10: #	out( B28 B11 ) &lt;- in( B9 )  Freq: 0.999994
00e2    leaq    R11, [R14 + #16 + R8 &lt;&lt; #2]	# ptr posidxscaleoff
00e7    movl    R10, [R11]	# compressed ptr
00ea    encode_heap_oop_not_null R9,RDX
0133    movl    RCX, narrowklass: precise klass java/util/HashMap$Node: 0x0000000127738b60:Constant:exact *	# compressed klass ptr
0138    decode_klass_not_null RCX,RCX
0148    testl   R10, R10	# compressed ptr
014b    je     B28  P=0.703652 C=22811.000000

0151    B11: #	out( B44 B12 ) &lt;- in( B10 )  Freq: 0.296346
0151    movl    R8, [R12 + R10 &lt;&lt; 3 + #12] (compressed oop addressing)	# int ! Field: java/util/HashMap$Node.hash
0156    decode_heap_oop_not_null R13,R10
015a    cmpl    R8, [RSP + #28 (32-bit)]
015f    je     B44  P=0.167308 C=6760.000000

0165    B12: #	out( B106 B13 ) &lt;- in( B11 )  Freq: 0.246765
0165    movl    R11, [R12 + R10 &lt;&lt; 3 + #8] (compressed oop addressing)	# compressed klass ptr
016a    cmpl    R11, narrowklass: precise klass java/util/HashMap$TreeNode: 0x000000012773a590:Constant:exact *	# compressed klass ptr
0171    je,u   B106  P=0.000001 C=-1.000000

0177    B13: #	out( B19 B14 ) &lt;- in( B12 )  Freq: 0.246765
0177    movl    R11, [R12 + R10 &lt;&lt; 3 + #24] (compressed oop addressing)	# compressed ptr ! Field: java/util/HashMap$Node.next
017c    testl   R11, R11	# compressed ptr
017f    je,s   B19  P=0.755556 C=7110.000000

0181    B14: #	out( B15 ) &lt;- in( B13 )  Freq: 0.0603204
0181    decode_heap_oop_not_null R13,R11
0185    xorl    R8, R8	# int
0188    movq    R11, 0x0000000117891000	# ptr
0192    xorl    R10, R10	# int
0195    movdq   XMM0, RBP	# spill

019a    B15: #	out( B60 B16 ) &lt;- in( B14 B17 ) Loop( B15-B17 inner ) Freq: 0.0761908
019a    movl    RSI, [R13 + #12 (8-bit)]	# int ! Field: java/util/HashMap$Node.hash
019e    movl    RDI, [rsp + #28]	# spill
01a2    cmpl    RSI, RDI
01a4    je     B60  P=0.147871 C=1738.000000

01aa    B16: #	out( B18 B17 ) &lt;- in( B15 )  Freq: 0.0649243
01aa    # TLS is in R15
01aa    movq    RBP, [R15 + #296 (32-bit)]	# ptr
01b1    movl    RSI, [R13 + #24 (8-bit)]	# compressed ptr ! Field: java/util/HashMap$Node.next
01b5    incl    R8	# int
01b8    movl    RAX, [rsp + #28]	# spill
01bc    testl   rax, [RBP]	# Safepoint: poll for GC        # java.util.HashMap::putVal @ bci:219  L[0]=XMM0 L[1]=RAX L[2]=RDX L[3]=#Ptr0x00000001278b5ae0 L[4]=#0 L[5]=#1 L[6]=R14 L[7]=R13 L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=R8
        # java.util.HashMap::put @ bci:9  L[0]=_ L[1]=_ L[2]=_
        # java.util.HashSet::add @ bci:8  L[0]=_ L[1]=_
        # OopMap {r9=NarrowOop rdx=Oop rsi=NarrowOop r13=Oop r14=Oop xmm0=Oop [24]=NarrowOop off=444/0x1bc}
01bf    testl   RSI, RSI	# compressed ptr
01c1    je,s   B18  P=0.755556 C=1481.000000

01c3    B17: #	out( B15 ) &lt;- in( B16 )  Freq: 0.0158704
01c3    decode_heap_oop_not_null R13,RSI
01c7    jmp,s   B15

01c9    B18: #	out( B20 ) &lt;- in( B16 )  Freq: 0.0490539
01c9    movl    RBX, R8	# spill
01cc    movdq   RBP, XMM0	# spill
01d1    jmp,s   B20

01d3    B19: #	out( B20 ) &lt;- in( B13 )  Freq: 0.186445
01d3    movq    R11, 0x0000000117891000	# ptr
01dd    xorl    RBX, RBX	# int

01df    B20: #	out( B107 B21 ) &lt;- in( B18 B19 )  Freq: 0.235499
01df    movl    R8, [rsp + #0]	# spill
01e3    cmpl    R8, narrowklass: precise klass java/util/HashMap: 0x00000001278b3040:Constant:exact *	# compressed klass ptr
01ea    jne,u   B107  P=0.000001 C=-1.000000

01f0    B21: #	out( B100 B22 ) &lt;- in( B20 )  Freq: 0.235498
01f0    movq    [rsp + #64], RBP	# spill
01f5    # checkcastPP of RBP
01f5    # TLS is in R15
01f5    movq    RSI, [R15 + #320 (32-bit)]	# ptr
01fc    movq    R10, RSI	# spill
01ff    addq    R10, #32	# ptr
0203    # TLS is in R15
0203    cmpq    R10, [R15 + #336 (32-bit)]	# raw ptr
020a    jnb,u   B100  P=0.000100 C=-1.000000

0210    B22: #	out( B23 ) &lt;- in( B21 )  Freq: 0.235475
0210    # TLS is in R15
0210    movq    [R15 + #320 (32-bit)], R10	# ptr
0217    PREFETCHW [R10 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
021f    movq    R10, [RCX + #184 (32-bit)]	# long
0226    movq    [RSI], R10	# long
0229    movl    [RSI + #8 (8-bit)], narrowklass: precise klass java/util/HashMap$Node: 0x0000000127738b60:Constant:exact *	# compressed klass ptr
0230    movl    [RSI + #12 (8-bit)], #0	# int
0237    movl    [RSI + #16 (8-bit)], #0	# int
023e    movq    [RSI + #24 (8-bit)], #0	# long

0246    B23: #	out( B84 B24 ) &lt;- in( B101 B22 )  Freq: 0.235498
0246    movl    [RSI + #20 (8-bit)], narrowoop: java/lang/Object:exact *	# compressed ptr
024d    
024d    # checkcastPP of RSI
024d    movl    R8, [rsp + #28]	# spill
0252    movl    [RSI + #12 (8-bit)], R8	# int ! Field: java/util/HashMap$Node.hash
0256    movl    [RSI + #16 (8-bit)], R9	# compressed ptr ! Field: java/util/HashMap$Node.key
025a    MEMBAR-release ! (empty encoding)
025a    # TLS is in R15
025a    cmpb    [R15 + #48 (8-bit)], #0
025f    jne     B84  P=0.001000 C=-1.000000

0265    B24: #	out( B26 B25 ) &lt;- in( B108 B86 B84 B23 )  Freq: 0.235498
0265    movq    R8, R13	# ptr -&gt; long
0268    encode_heap_oop_not_null R10,RSI
02b1    movl    [R13 + #24 (8-bit)], R10	# compressed ptr ! Field: java/util/HashMap$Node.next
02b5    movq    R10, RSI	# ptr -&gt; long
02b8    xorq    R10, R8	# long
02bb    shrq    R10, #20
02bf    testq   R10, R10
02c2    je,s   B26  P=0.001000 C=-1.000000

02c4    B25: #	out( B87 B26 ) &lt;- in( B24 )  Freq: 0.235263
02c4    shrq    R8, #9
02c8    addq    R11, R8	# ptr
02cb    cmpb    [R11], #8
02cf    jne     B87  P=0.001000 C=-1.000000

02d5    B26: #	out( B109 B27 ) &lt;- in( B89 B90 B87 B25 B24 )  Freq: 0.235498
02d5    cmpl    RBX, #7
02d8    jge     B109  P=0.000000 C=5372.000000

02de    B27: #	out( B37 ) &lt;- in( B26 )  Freq: 0.235498
02de    movq    RBP, [rsp + #64]	# spill
02e3    jmp     B37

02e8    B28: #	out( B71 B29 ) &lt;- in( B10 )  Freq: 0.703647
02e8    movl    RBX, [rsp + #0]	# spill
02eb    cmpl    RBX, narrowklass: precise klass java/util/HashMap: 0x00000001278b3040:Constant:exact *	# compressed klass ptr
02f1    jne,u   B71  P=0.003869 C=-1.000000

02f7    B29: #	out( B91 B30 ) &lt;- in( B28 )  Freq: 0.700925
02f7    # TLS is in R15
02f7    movq    R10, [R15 + #320 (32-bit)]	# ptr
02fe    movq    RBX, R10	# spill
0301    addq    RBX, #32	# ptr
0305    # TLS is in R15
0305    cmpq    RBX, [R15 + #336 (32-bit)]	# raw ptr
030c    jnb,u   B91  P=0.000100 C=-1.000000

0312    B30: #	out( B31 ) &lt;- in( B29 )  Freq: 0.700855
0312    # TLS is in R15
0312    movq    [R15 + #320 (32-bit)], RBX	# ptr
0319    PREFETCHW [RBX + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0320    movq    RCX, [RCX + #184 (32-bit)]	# long
0327    movq    [R10], RCX	# long
032a    movl    [R10 + #8 (8-bit)], narrowklass: precise klass java/util/HashMap$Node: 0x0000000127738b60:Constant:exact *	# compressed klass ptr
0332    movl    [R10 + #12 (8-bit)], #0	# int
033a    movl    [R10 + #16 (8-bit)], #0	# int
0342    movq    [R10 + #24 (8-bit)], #0	# long

034a    B31: #	out( B32 ) &lt;- in( B92 B30 )  Freq: 0.700925
034a    movl    [R10 + #20 (8-bit)], narrowoop: java/lang/Object:exact *	# compressed ptr
0352    
0352    # checkcastPP of R10
0352    movl    RCX, [rsp + #28]	# spill
0356    movl    [R10 + #12 (8-bit)], RCX	# int ! Field: java/util/HashMap$Node.hash
035a    movl    [R10 + #16 (8-bit)], R9	# compressed ptr ! Field: java/util/HashMap$Node.key
035e    MEMBAR-release ! (empty encoding)

035e    B32: #	out( B103 B33 ) &lt;- in( B31 B72 )  Freq: 0.703647
035e    movl    RCX, [R14 + #8 (8-bit)]	# compressed klass ptr
0362    cmpl    RCX, narrowklass: precise klass [Ljava/util/HashMap$Node;: 0x0000000127738c30:Constant:exact *	# compressed klass ptr
0368    jne,u   B103  P=0.000001 C=-1.000000

036e    B33: #	out( B77 B34 ) &lt;- in( B32 )  Freq: 0.703647
036e    # TLS is in R15
036e    cmpb    [R15 + #48 (8-bit)], #0
0373    jne     B77  P=0.001000 C=-1.000000

0379    B34: #	out( B37 B35 ) &lt;- in( B105 B79 B77 B33 )  Freq: 0.703647
0379    encode_heap_oop R9,R10
03a5    movl    [R11], R9	# compressed ptr
03a8    movq    R11, R11	# ptr -&gt; long
03a8    movq    R8, R10	# ptr -&gt; long
03ab    xorq    R8, R11	# long
03ae    shrq    R8, #20
03b2    testq   R8, R8
03b5    je,s   B37  P=0.001000 C=-1.000000

03b7    B35: #	out( B37 B36 ) &lt;- in( B34 )  Freq: 0.702943
03b7    testq   R10, R10	# ptr
03ba    je,s   B37  P=0.001000 C=-1.000000

03bc    B36: #	out( B80 B37 ) &lt;- in( B35 )  Freq: 0.70224
03bc    shrq    R11, #9
03c0    movq    R8, 0x0000000117891000	# ptr
03ca    addq    R8, R11	# ptr
03cd    cmpb    [R8], #8
03d1    jne     B80  P=0.001000 C=-1.000000

03d7    B37: #	out( B58 B38 ) &lt;- in( B27 B82 B83 B80 B36 B35 B34 )  Freq: 0.939145
03d7    movl    R11, [rsp + #24]	# spill
03dc    incl    [R12 + R11 &lt;&lt; 3 + #24] (compressed oop addressing)	# int ! Field: java/util/HashMap.modCount
03e1    movl    R11, [R12 + R11 &lt;&lt; 3 + #28] (compressed oop addressing)	# int ! Field: java/util/HashMap.threshold
03e6    movl    R8, [rsp + #24]	# spill
03eb    movl    R10, [R12 + R8 &lt;&lt; 3 + #20] (compressed oop addressing)	# int ! Field: java/util/HashMap.size
03f0    incl    R10	# int
03f3    movl    [R12 + R8 &lt;&lt; 3 + #20] (compressed oop addressing), R10	# int ! Field: java/util/HashMap.size
03f8    cmpl    R10, R11
03fb    jg     B58  P=0.035429 C=21423.000000

0401    B38: #	out( B73 B39 ) &lt;- in( B59 B37 )  Freq: 0.939144
0401    movl    RDX, #1	# int
0406    movl    R10, [rsp + #0]	# spill
040a    cmpl    R10, narrowklass: precise klass java/util/HashMap: 0x00000001278b3040:Constant:exact *	# compressed klass ptr
0411    jne,u   B73  P=0.002899 C=-1.000000

0417    B39: #	out( B40 ) &lt;- in( B38 B74 )  Freq: 0.939144
0417    movl    RAX, #1	# int

041c    B40: #	out( N1722 ) &lt;- in( B57 B39 )  Freq: 0.999991
041c    vzeroupper
	addq    rsp, 96	# Destroy frame
	popq    rbp
	movq    rscratch1, poll_offset[r15_thread] #polling_page_address
	testl   rax, [rscratch1]	# Safepoint: poll for GC

042e    ret

042f    B41: #	out( B132 B42 ) &lt;- in( B6 )  Freq: 0.159923
042f    movq    [rsp + #8], RBP	# spill
0434    movl    [rsp + #4], RBX	# spill
0438    movq    RBP, RDX	# spill
043b    movq    RSI, [rsp + #8]	# spill
0440    call,static  java.util.HashMap::resize
        # java.util.HashMap::putVal @ bci:20  L[0]=rsp + #8 L[1]=rsp + #28 L[2]=RBP L[3]=#Ptr0x00000001278b5ae0 L[4]=#0 L[5]=#1 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_
        # java.util.HashMap::put @ bci:9  L[0]=_ L[1]=_ L[2]=_
        # java.util.HashSet::add @ bci:8  L[0]=_ L[1]=_
        # OopMap {rbp=Oop [8]=Oop [24]=NarrowOop off=1096/0x448}

0448    B42: #	out( B125 B43 ) &lt;- in( B41 )  Freq: 0.159919
        # Block is sole successor of call
0448    movl    R10, [RAX + #12 (8-bit)]	# range
044c    NullCheck RAX

044c    B43: #	out( B9 ) &lt;- in( B42 )  Freq: 0.159919
044c    movq    R14, RAX	# spill
044f    movq    RDX, RBP	# spill
0452    movl    RBX, [rsp + #4]	# spill
0456    movq    RBP, [rsp + #8]	# spill
045b    jmp     B9

0460    B44: #	out( B52 B45 ) &lt;- in( B11 )  Freq: 0.049581
0460    movl    R11, [R12 + R10 &lt;&lt; 3 + #16] (compressed oop addressing)	# compressed ptr ! Field: java/util/HashMap$Node.key
0465    decode_heap_oop RCX,R11
0491    cmpq    RCX, RDX	# ptr
0494    je,u   B52  P=0.014147 C=1131.000000

049a    B45: #	out( B111 B46 ) &lt;- in( B44 )  Freq: 0.0488796
049a    cmpl    RBX, narrowklass: precise klass java/lang/String: 0x000000010bf8aca0:Constant:exact *	# compressed klass ptr
04a0    jne,u   B111  P=0.000001 C=-1.000000

04a6    B46: #	out( B52 B47 ) &lt;- in( B45 )  Freq: 0.0488796
04a6    movq    R9, RDX	# spill
04a9    # checkcastPP of R9
04a9    cmpq    R9, RCX	# ptr
04ac    je,u   B52  P=0.032409 C=15582.000000

04b2    B47: #	out( B114 B48 ) &lt;- in( B46 )  Freq: 0.0472954
04b2    movl    RCX, [R12 + R11 &lt;&lt; 3 + #8] (compressed oop addressing)	# compressed klass ptr
04b7    NullCheck R11

04b7    B48: #	out( B122 B49 ) &lt;- in( B47 )  Freq: 0.0472954
04b7    cmpl    RCX, narrowklass: precise klass java/lang/String: 0x000000010bf8aca0:Constant:exact *	# compressed klass ptr
04bd    jne,u   B122  P=0.000000 C=-1.000000

04c3    B49: #	out( B117 B50 ) &lt;- in( B48 )  Freq: 0.0472954
04c3    movsbl  RCX, [R9 + #20 (8-bit)]	# byte ! Field: java/lang/String.coder (constant)
04c8    decode_heap_oop_not_null R11,R11
04cc    # checkcastPP of R11
04cc    movsbl  RBP, [R11 + #20 (8-bit)]	# byte ! Field: java/lang/String.coder (constant)
04d1    cmpl    RCX, RBP
04d3    jne     B117  P=0.000000 C=13319.000000

04d9    B50: #	out( B112 B51 ) &lt;- in( B49 )  Freq: 0.0472953
04d9    movl    RBX, [R11 + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value (constant)
04dd    movl    R8, [R9 + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value (constant)
04e1    movl    R11, [R12 + RBX &lt;&lt; 3 + #12] (compressed oop addressing)	# range
04e6    movl    RCX, [R12 + R8 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
04eb    cmpl    RCX, R11
04ee    jne     B112  P=0.000001 C=-1.000000

04f4    B51: #	out( B113 B52 ) &lt;- in( B50 )  Freq: 0.0472953
04f4    decode_heap_oop_not_null R11,RBX
04f8    leaq    RSI, [R12 + RBX &lt;&lt; 3 + #16] (compressed oop addressing)	# ptr compressedoopoff32
04fd    decode_heap_oop_not_null R11,R8
0501    leaq    RDI, [R12 + R8 &lt;&lt; 3 + #16] (compressed oop addressing)	# ptr compressedoopoff32
0506    String Equals RDI,RSI,RCX -&gt; RAX    // KILL XMM0, XMM1, RBX
05c2    movl    R11, RAX	# spill
05c5    testl   RAX, RAX
05c7    je     B113  P=0.000000 C=1115.000000

05cd    B52: #	out( B53 ) &lt;- in( B51 B44 B46 )  Freq: 0.0495808
05cd    movq    R11, 0x0000000117891000	# ptr

05d7    B53: #	out( B93 B54 ) &lt;- in( B52 B62 B67 )  Freq: 0.0608472
05d7    # TLS is in R15
05d7    cmpb    [R15 + #48 (8-bit)], #0
05dc    jne     B93  P=0.001000 C=-1.000000

05e2    B54: #	out( B56 B55 ) &lt;- in( B116 B95 B93 B53 )  Freq: 0.0608472
05e2    movl    RBP, [R13 + #20 (8-bit)]	# compressed ptr ! Field: java/util/HashMap$Node.value
05e6    movl    [R13 + #20 (8-bit)], narrowoop: java/lang/Object:exact *	# compressed ptr ! Field: java/util/HashMap$Node.value
05ee    movq    R10, R13	# ptr -&gt; long
05f1    movq    R8, java/lang/Object:exact *	# ptr
05fb    movq    R8, R8	# ptr -&gt; long
05fb    xorq    R8, R10	# long
05fe    shrq    R8, #20
0602    testq   R8, R8
0605    je,s   B56  P=0.001000 C=-1.000000

0607    B55: #	out( B96 B56 ) &lt;- in( B54 )  Freq: 0.0607864
0607    shrq    R10, #9
060b    addq    R11, R10	# ptr
060e    cmpb    [R11], #8
0612    jne     B96  P=0.001000 C=-1.000000

0618    B56: #	out( B110 B57 ) &lt;- in( B98 B99 B96 B55 B54 )  Freq: 0.0608472
0618    movl    R11, [rsp + #0]	# spill
061c    cmpl    R11, narrowklass: precise klass java/util/HashMap: 0x00000001278b3040:Constant:exact *	# compressed klass ptr
0623    jne,u   B110  P=0.000001 C=-1.000000

0629    B57: #	out( B40 ) &lt;- in( B56 )  Freq: 0.0608471
0629    decode_heap_oop R10,RBP
0655    testq   R10, R10	# cp2b
	setnz   RAX
	movzbl  RAX, RAX
065e    xorl    RAX, #1	# int
0661    jmp     B40

0666    B58: #	out( B131 B59 ) &lt;- in( B37 )  Freq: 0.0332732
0666    movq    RSI, RBP	# spill
        nop 	# 3 bytes pad for loops and calls
066c    call,static  java.util.HashMap::resize
        # java.util.HashMap::putVal @ bci:288  L[0]=RBP L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=#1 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_
        # java.util.HashMap::put @ bci:9  L[0]=_ L[1]=_ L[2]=_
        # java.util.HashSet::add @ bci:8  L[0]=_ L[1]=_
        # OopMap {rbp=Oop off=1652/0x674}

0674    B59: #	out( B38 ) &lt;- in( B58 )  Freq: 0.0332725
        # Block is sole successor of call
0674    jmp     B38

0679    B60: #	out( B120 B61 ) &lt;- in( B15 )  Freq: 0.0112664
0679    movl    RCX, [R13 + #16 (8-bit)]	# compressed ptr ! Field: java/util/HashMap$Node.key
067d    decode_heap_oop RDI,RCX
06a9    cmpq    RDI, RDX	# ptr
06ac    je,u   B120  P=0.000000 C=257.000000

06b2    B61: #	out( B118 B62 ) &lt;- in( B60 )  Freq: 0.0112664
06b2    cmpl    RBX, narrowklass: precise klass java/lang/String: 0x000000010bf8aca0:Constant:exact *	# compressed klass ptr
06b8    jne,u   B118  P=0.000001 C=-1.000000

06be    B62: #	out( B53 B63 ) &lt;- in( B61 )  Freq: 0.0112664
06be    movq    R9, RDX	# spill
06c1    # checkcastPP of R9
06c1    cmpq    R9, RDI	# ptr
06c4    je,u   B53  P=0.032409 C=15582.000000

06ca    B63: #	out( B69 B64 ) &lt;- in( B62 )  Freq: 0.0109013
06ca    movl    RBX, [R12 + RCX &lt;&lt; 3 + #8] (compressed oop addressing)	# compressed klass ptr
06cf    NullCheck RCX

06cf    B64: #	out( B121 B65 ) &lt;- in( B63 )  Freq: 0.0109013
06cf    cmpl    RBX, narrowklass: precise klass java/lang/String: 0x000000010bf8aca0:Constant:exact *	# compressed klass ptr
06d5    jne,u   B121  P=0.000000 C=-1.000000

06db    B65: #	out( B119 B66 ) &lt;- in( B64 )  Freq: 0.0109013
06db    movsbl  RDI, [R9 + #20 (8-bit)]	# byte ! Field: java/lang/String.coder (constant)
06e0    decode_heap_oop_not_null RCX,RCX
06e4    # checkcastPP of RCX
06e4    movsbl  RBP, [RCX + #20 (8-bit)]	# byte ! Field: java/lang/String.coder (constant)
06e8    cmpl    RDI, RBP
06ea    jne     B119  P=0.000000 C=13319.000000

06f0    B66: #	out( B68 B67 ) &lt;- in( B65 )  Freq: 0.0109012
06f0    movl    RBX, [RCX + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value (constant)
06f3    movl    RDX, [R9 + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value (constant)
06f7    movl    RDI, [R12 + RBX &lt;&lt; 3 + #12] (compressed oop addressing)	# range
06fc    movl    RCX, [R12 + RDX &lt;&lt; 3 + #12] (compressed oop addressing)	# range
0701    cmpl    RCX, RDI
0703    jne     B68  P=0.000001 C=-1.000000

0709    B67: #	out( B53 B68 ) &lt;- in( B66 )  Freq: 0.0109012
0709    decode_heap_oop_not_null R10,RBX
070d    leaq    RSI, [R12 + RBX &lt;&lt; 3 + #16] (compressed oop addressing)	# ptr compressedoopoff32
0712    decode_heap_oop_not_null R10,RDX
0716    leaq    RDI, [R12 + RDX &lt;&lt; 3 + #16] (compressed oop addressing)	# ptr compressedoopoff32
071b    String Equals RDI,RSI,RCX -&gt; RAX    // KILL XMM1, XMM0, RBX
07d7    movl    R10, RAX	# spill
07da    testl   RAX, RAX
07dc    jne     B53  P=1.000000 C=257.000000

07e2    B68: #	out( B70 ) &lt;- in( B67 B66 )  Freq: 1.60994e-08
07e2    movl    RBP, R10	# spill
07e5    jmp,s   B70

07e7    B69: #	out( B70 ) &lt;- in( B63 )  Freq: 1.1046e-08
07e7    xorl    RBP, RBP	# int

07e9    B70: #	out( N1722 ) &lt;- in( B69 B68 )  Freq: 2.71454e-08
07e9    movl    RSI, #-187	# int
07ee    movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #24]
	movl    [rsp + #0], rax
	movq    rax, [rsp - #8]
07ff    movq    [rsp + #8], R14	# spill
0804    movq    [rsp + #16], R13	# spill
0809    movl    [rsp + #24], R8	# spill
080e    movq    [rsp + #32], R9	# spill
        nop 	# 1 bytes pad for loops and calls
0814    call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:206  L[0]=rsp + #0 L[1]=rsp + #28 L[2]=rsp + #32 L[3]=#Ptr0x00000001278b5ae0 L[4]=#0 L[5]=#1 L[6]=rsp + #8 L[7]=_ L[8]=_ L[9]=_ L[10]=rsp + #16 L[11]=_ L[12]=rsp + #24 STK[0]=RBP
        # java.util.HashMap::put @ bci:9  L[0]=_ L[1]=_ L[2]=_
        # java.util.HashSet::add @ bci:8  L[0]=_ L[1]=_
        # OopMap {[0]=NarrowOop [8]=Oop [16]=Oop [32]=Oop off=2076/0x81c}
081c    ud2	# ShouldNotReachHere

0830    B71: #	out( B129 B72 ) &lt;- in( B28 )  Freq: 0.00272245
0830    movq    [rsp + #32], R11	# spill
0835    movl    [rsp + #4], R8	# spill
083a    movq    [rsp + #16], R14	# spill
083f    movl    R11, [rsp + #28]	# spill
0844    movq    [rsp + #8], RBP	# spill
0849    movq    R10, RDX	# spill
084c    xorl    R9, R9	# ptr
084f    movq    RSI, [rsp + #8]	# spill
0854    movl    RDX, R11	# spill
0857    movq    RCX, R10	# spill
085a    movq    R8, java/lang/Object:exact *	# ptr
        nop 	# 2 bytes pad for loops and calls
0866    movq    rax, #Universe::non_oop_word()
	call,dynamic  java.util.HashMap::newNode
        # java.util.HashMap::putVal @ bci:56  L[0]=rsp + #8 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=#1 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ STK[0]=rsp + #16 STK[1]=rsp + #4
        # java.util.HashMap::put @ bci:9  L[0]=_ L[1]=_ L[2]=_
        # java.util.HashSet::add @ bci:8  L[0]=_ L[1]=_
        # OopMap {[8]=Oop [16]=Oop [24]=NarrowOop [32]=Derived_oop_[16] off=2168/0x878}

0878    B72: #	out( B32 ) &lt;- in( B71 )  Freq: 0.0027224
        # Block is sole successor of call
0878    movq    R9, [rsp + #8]	# spill
087d    movq    R14, [rsp + #16]	# spill
0882    movl    R8, [rsp + #4]	# spill
0887    movq    R11, [rsp + #32]	# spill
088c    movq    R10, RAX	# spill
088f    movq    RBP, R9	# spill
0892    jmp     B32

0897    B73: #	out( B128 B74 ) &lt;- in( B38 )  Freq: 0.0027224
0897    movq    RSI, RBP	# spill
089a    movq    rax, #Universe::non_oop_word()
	call,dynamic  java.util.HashMap::afterNodeInsertion
        # java.util.HashMap::putVal @ bci:295  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_
        # java.util.HashMap::put @ bci:9  L[0]=_ L[1]=_ L[2]=_
        # java.util.HashSet::add @ bci:8  L[0]=_ L[1]=_
        # OopMap {off=2220/0x8ac}

08ac    B74: #	out( B39 ) &lt;- in( B73 )  Freq: 0.00272235
        # Block is sole successor of call
08ac    jmp     B39

08b1    B75: #	out( B130 B76 ) &lt;- in( B3 B4 B5 )  Freq: 0.00299698
08b1    movq    [rsp + #16], RBP	# spill
08b6    movl    [rsp + #8], RBX	# spill
08ba    movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #0]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
08cb    movq    RBP, RDX	# spill
08ce    movq    RSI, RDX	# spill
        nop 	# 1 bytes pad for loops and calls
08d2    movq    rax, #Universe::non_oop_word()
	call,dynamic  java.lang.Object::hashCode
        # java.util.HashMap::hash @ bci:9  L[0]=_ L[1]=_
        # java.util.HashMap::put @ bci:2  L[0]=_ L[1]=RBP L[2]=#Ptr0x00000001278b5ae0 STK[0]=rsp + #16
        # java.util.HashSet::add @ bci:8  L[0]=_ L[1]=_
        # OopMap {rbp=Oop [16]=Oop [24]=NarrowOop off=2276/0x8e4}

08e4    B76: #	out( B6 ) &lt;- in( B75 )  Freq: 0.00299692
        # Block is sole successor of call
08e4    movq    RDX, RBP	# spill
08e7    movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #4]
	movl    [rsp + #0], rax
	movq    rax, [rsp - #8]
08f8    movl    RBX, [rsp + #8]	# spill
08fc    movq    R10, [rsp + #16]	# spill
0901    movq    RBP, R10	# spill
0904    jmp     B6

0909    B77: #	out( B34 B78 ) &lt;- in( B33 )  Freq: 0.000703638
0909    movl    R8, [R11]	# compressed ptr
090c    testl   R8, R8	# compressed ptr
090f    je     B34  P=0.500000 C=-1.000000

0915    B78: #	out( B105 B79 ) &lt;- in( B77 )  Freq: 0.000351819
0915    # TLS is in R15
0915    movq    R9, [R15 + #56 (8-bit)]	# long
0919    decode_heap_oop RDI,R8
0945    testq   R9, R9
0948    je     B105  P=0.001000 C=-1.000000

094e    B79: #	out( B34 ) &lt;- in( B78 )  Freq: 0.000351467
094e    # TLS is in R15
094e    movq    R8, [R15 + #72 (8-bit)]	# ptr
0952    movq    [R8 + #-8 + R9], RDI	# ptr
0957    addq    R9, #-8	# long
095b    # TLS is in R15
095b    movq    [R15 + #56 (8-bit)], R9	# long
095f    jmp     B34

0964    B80: #	out( B37 B81 ) &lt;- in( B36 )  Freq: 0.00070224
0964    # TLS is in R15
0964    movq    R10, [R15 + #120 (8-bit)]	# ptr
0968    # TLS is in R15
0968    movq    R11, [R15 + #104 (8-bit)]	# long
096c    lock addl [rsp + #0], 0	! membar_volatile
0972    cmpb    [R8], #0
0976    je     B37  P=0.500000 C=-1.000000

097c    B81: #	out( B83 B82 ) &lt;- in( B80 )  Freq: 0.00035112
097c    movb    [R8], #0	# CMS card-mark byte 0
0980    testq   R11, R11
0983    jne,s   B83  P=0.500000 C=-1.000000

0985    B82: #	out( B37 ) &lt;- in( B81 )  Freq: 0.00017556
0985    movq    RDI, R8	# spill
0988    # TLS is in R15
0988    movq    RSI, R15	# spill
098b    call_leaf,runtime  write_ref_field_post_entry
        No JVM State Info
        # 
099b    jmp     B37

09a0    B83: #	out( B37 ) &lt;- in( B81 )  Freq: 0.00017556
09a0    movq    [R10 + #-8 + R11], R8	# ptr
09a5    addq    R11, #-8	# long
09a9    # TLS is in R15
09a9    movq    [R15 + #104 (8-bit)], R11	# long
09ad    jmp     B37

09b2    B84: #	out( B24 B85 ) &lt;- in( B23 )  Freq: 0.000235495
09b2    movl    R8, [R13 + #24 (8-bit)]	# compressed ptr ! Field: java/util/HashMap$Node.next
09b6    testl   R8, R8	# compressed ptr
09b9    je     B24  P=0.500000 C=-1.000000

09bf    B85: #	out( B108 B86 ) &lt;- in( B84 )  Freq: 0.000117748
09bf    # TLS is in R15
09bf    movq    R10, [R15 + #56 (8-bit)]	# long
09c3    decode_heap_oop RDI,R8
09ef    testq   R10, R10
09f2    je     B108  P=0.001000 C=-1.000000

09f8    B86: #	out( B24 ) &lt;- in( B85 )  Freq: 0.00011763
09f8    # TLS is in R15
09f8    movq    R8, [R15 + #72 (8-bit)]	# ptr
09fc    movq    [R8 + #-8 + R10], RDI	# ptr
0a01    addq    R10, #-8	# long
0a05    # TLS is in R15
0a05    movq    [R15 + #56 (8-bit)], R10	# long
0a09    jmp     B24

0a0e    B87: #	out( B26 B88 ) &lt;- in( B25 )  Freq: 0.000235263
0a0e    # TLS is in R15
0a0e    movq    R10, [R15 + #104 (8-bit)]	# long
0a12    # TLS is in R15
0a12    movq    R8, [R15 + #120 (8-bit)]	# ptr
0a16    lock addl [rsp + #0], 0	! membar_volatile
0a1c    cmpb    [R11], #0
0a20    je     B26  P=0.500000 C=-1.000000

0a26    B88: #	out( B90 B89 ) &lt;- in( B87 )  Freq: 0.000117631
0a26    movb    [R11], #0	# CMS card-mark byte 0
0a2a    testq   R10, R10
0a2d    jne,s   B90  P=0.500000 C=-1.000000

0a2f    B89: #	out( B26 ) &lt;- in( B88 )  Freq: 5.88157e-05
0a2f    movq    RDI, R11	# spill
0a32    # TLS is in R15
0a32    movq    RSI, R15	# spill
0a35    call_leaf,runtime  write_ref_field_post_entry
        No JVM State Info
        # 
0a45    jmp     B26

0a4a    B90: #	out( B26 ) &lt;- in( B88 )  Freq: 5.88157e-05
0a4a    movq    [R8 + #-8 + R10], R11	# ptr
0a4f    addq    R10, #-8	# long
0a53    # TLS is in R15
0a53    movq    [R15 + #104 (8-bit)], R10	# long
0a57    jmp     B26

0a5c    B91: #	out( B127 B92 ) &lt;- in( B29 )  Freq: 7.01041e-05
0a5c    movl    [rsp + #44], R9	# spill
0a61    movq    [rsp + #48], R11	# spill
0a66    movl    [rsp + #40], R8	# spill
0a6b    movq    [rsp + #32], R14	# spill
0a70    movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #0]
	movl    [rsp + #12], rax
	movq    rax, [rsp - #8]
0a81    movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #24]
	movl    [rsp + #8], rax
	movq    rax, [rsp - #8]
0a93    movq    [rsp + #16], RBP	# spill
0a98    # checkcastPP of RBP
0a98    movq    RSI, precise klass java/util/HashMap$Node: 0x0000000127738b60:Constant:exact *	# ptr
0aa2    movq    [rsp + #0], RDX	# spill
        nop 	# 2 bytes pad for loops and calls
0aa8    call,static  wrapper for: _new_instance_Java
        # java.util.HashMap::newNode @ bci:0  L[0]=_ L[1]=rsp + #28 L[2]=rsp + #0 L[3]=#Ptr0x00000001278b5ae0 L[4]=#NULL
        # java.util.HashMap::putVal @ bci:56  L[0]=RBP L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=#1 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ STK[0]=rsp + #32 STK[1]=rsp + #40
        # java.util.HashMap::put @ bci:9  L[0]=_ L[1]=_ L[2]=_
        # java.util.HashSet::add @ bci:8  L[0]=_ L[1]=_
        # OopMap {rbp=Oop [0]=Oop [8]=NarrowOop [16]=Oop [32]=Oop [44]=NarrowOop [48]=Derived_oop_[32] off=2736/0xab0}

0ab0    B92: #	out( B31 ) &lt;- in( B91 )  Freq: 7.01027e-05
        # Block is sole successor of call
0ab0    movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #8]
	movl    [rsp + #24], rax
	movq    rax, [rsp - #8]
0ac2    movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #12]
	movl    [rsp + #0], rax
	movq    rax, [rsp - #8]
0ad3    movq    R14, [rsp + #32]	# spill
0ad8    movl    R8, [rsp + #40]	# spill
0add    movq    R11, [rsp + #48]	# spill
0ae2    movl    R9, [rsp + #44]	# spill
0ae7    movq    R10, RAX	# spill
0aea    movq    RBP, [rsp + #16]	# spill
0aef    jmp     B31

0af4    B93: #	out( B54 B94 ) &lt;- in( B53 )  Freq: 6.08464e-05
0af4    movl    R8, [R13 + #20 (8-bit)]	# compressed ptr ! Field: java/util/HashMap$Node.value
0af8    testl   R8, R8	# compressed ptr
0afb    je     B54  P=0.500000 C=-1.000000

0b01    B94: #	out( B116 B95 ) &lt;- in( B93 )  Freq: 3.04232e-05
0b01    # TLS is in R15
0b01    movq    R10, [R15 + #56 (8-bit)]	# long
0b05    decode_heap_oop RDI,R8
0b31    testq   R10, R10
0b34    je     B116  P=0.001000 C=-1.000000

0b3a    B95: #	out( B54 ) &lt;- in( B94 )  Freq: 3.03928e-05
0b3a    # TLS is in R15
0b3a    movq    R8, [R15 + #72 (8-bit)]	# ptr
0b3e    movq    [R8 + #-8 + R10], RDI	# ptr
0b43    addq    R10, #-8	# long
0b47    # TLS is in R15
0b47    movq    [R15 + #56 (8-bit)], R10	# long
0b4b    jmp     B54

0b50    B96: #	out( B56 B97 ) &lt;- in( B55 )  Freq: 6.07864e-05
0b50    # TLS is in R15
0b50    movq    R10, [R15 + #104 (8-bit)]	# long
0b54    # TLS is in R15
0b54    movq    R8, [R15 + #120 (8-bit)]	# ptr
0b58    lock addl [rsp + #0], 0	! membar_volatile
0b5e    cmpb    [R11], #0
0b62    je     B56  P=0.500000 C=-1.000000

0b68    B97: #	out( B99 B98 ) &lt;- in( B96 )  Freq: 3.03932e-05
0b68    movb    [R11], #0	# CMS card-mark byte 0
0b6c    testq   R10, R10
0b6f    jne,s   B99  P=0.500000 C=-1.000000

0b71    B98: #	out( B56 ) &lt;- in( B97 )  Freq: 1.51966e-05
0b71    movq    RDI, R11	# spill
0b74    # TLS is in R15
0b74    movq    RSI, R15	# spill
0b77    call_leaf,runtime  write_ref_field_post_entry
        No JVM State Info
        # 
0b87    jmp     B56

0b8c    B99: #	out( B56 ) &lt;- in( B97 )  Freq: 1.51966e-05
0b8c    movq    [R8 + #-8 + R10], R11	# ptr
0b91    addq    R10, #-8	# long
0b95    # TLS is in R15
0b95    movq    [R15 + #104 (8-bit)], R10	# long
0b99    jmp     B56

0b9e    B100: #	out( B126 B101 ) &lt;- in( B21 )  Freq: 2.35538e-05
0b9e    movl    [rsp + #44], RBX	# spill
0ba2    movq    [rsp + #56], R13	# spill
0ba7    movq    [rsp + #48], R11	# spill
0bac    movl    [rsp + #40], R9	# spill
0bb1    movq    [rsp + #32], R14	# spill
0bb6    pushq   [rsp + #64]	# 64-bit mem-mem spill
	popq    [rsp + #16]
0bc0    movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #0]
	movl    [rsp + #12], rax
	movq    rax, [rsp - #8]
0bd1    movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #24]
	movl    [rsp + #8], rax
	movq    rax, [rsp - #8]
0be3    movq    RSI, precise klass java/util/HashMap$Node: 0x0000000127738b60:Constant:exact *	# ptr
0bed    movq    [rsp + #0], RDX	# spill
0bf1    movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #28]
	movl    [rsp + #24], rax
	movq    rax, [rsp - #8]
        nop 	# 1 bytes pad for loops and calls
0c04    call,static  wrapper for: _new_instance_Java
        # java.util.HashMap::newNode @ bci:0  L[0]=_ L[1]=rsp + #24 L[2]=rsp + #0 L[3]=#Ptr0x00000001278b5ae0 L[4]=#NULL
        # java.util.HashMap::putVal @ bci:152  L[0]=RBP L[1]=rsp + #24 L[2]=_ L[3]=#Ptr0x00000001278b5ae0 L[4]=#0 L[5]=#1 L[6]=rsp + #32 L[7]=_ L[8]=_ L[9]=_ L[10]=#NULL L[11]=_ L[12]=rsp + #44 STK[0]=rsp + #56
        # java.util.HashMap::put @ bci:9  L[0]=_ L[1]=_ L[2]=_
        # java.util.HashSet::add @ bci:8  L[0]=_ L[1]=_
        # OopMap {rbp=Oop [0]=Oop [8]=NarrowOop [16]=Oop [32]=Oop [40]=NarrowOop [56]=Oop off=3084/0xc0c}

0c0c    B101: #	out( B23 ) &lt;- in( B100 )  Freq: 2.35533e-05
        # Block is sole successor of call
0c0c    movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #8]
	movl    [rsp + #24], rax
	movq    rax, [rsp - #8]
0c1e    movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #12]
	movl    [rsp + #0], rax
	movq    rax, [rsp - #8]
0c2f    pushq   [rsp + #16]	# 64-bit mem-mem spill
	popq    [rsp + #64]
0c39    movq    R14, [rsp + #32]	# spill
0c3e    movl    R9, [rsp + #40]	# spill
0c43    movq    R11, [rsp + #48]	# spill
0c48    movq    R13, [rsp + #56]	# spill
0c4d    movl    RBX, [rsp + #44]	# spill
0c51    movq    RSI, RAX	# spill
0c54    jmp     B23

0c59    B102: #	out( N1722 ) &lt;- in( B9 )  Freq: 9.99995e-07
0c59    movl    RSI, #-28	# int
0c5e    movl    RBP, [rsp + #24]	# spill
0c62    movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #28]
	movl    [rsp + #0], rax
	movq    rax, [rsp - #8]
0c73    movq    [rsp + #8], RDX	# spill
0c78    movq    [rsp + #24], R14	# spill
0c7d    movl    [rsp + #32], R8	# spill
        nop 	# 2 bytes pad for loops and calls
0c84    call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:40  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=#Ptr0x00000001278b5ae0 L[4]=#0 L[5]=#1 L[6]=rsp + #24 L[7]=_ L[8]=_ L[9]=rsp + #32 L[10]=_ L[11]=_ L[12]=_ STK[0]=rsp + #24 STK[1]=rsp + #32
        # java.util.HashMap::put @ bci:9  L[0]=_ L[1]=_ L[2]=_
        # java.util.HashSet::add @ bci:8  L[0]=_ L[1]=_
        # OopMap {rbp=NarrowOop [8]=Oop [24]=Oop off=3212/0xc8c}
0c8c    ud2	# ShouldNotReachHere

0ca0    B103: #	out( N1722 ) &lt;- in( B32 )  Freq: 7.03647e-07
0ca0    movl    RSI, #-42	# int
0ca5    movq    [rsp + #0], R14	# spill
0ca9    movl    [rsp + #8], R8	# spill
0cae    movq    [rsp + #16], R10	# spill
        nop 	# 1 bytes pad for loops and calls
0cb4    call,static  wrapper for: uncommon_trap(reason=&apos;array_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:59  L[0]=rsp + #24 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=#1 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ STK[0]=rsp + #0 STK[1]=rsp + #8 STK[2]=rsp + #16
        # java.util.HashMap::put @ bci:9  L[0]=_ L[1]=_ L[2]=_
        # java.util.HashSet::add @ bci:8  L[0]=_ L[1]=_
        # OopMap {[0]=Oop [16]=Oop [24]=NarrowOop off=3260/0xcbc}
0cbc    ud2	# ShouldNotReachHere

0cd0    B104: #	out( N1722 ) &lt;- in( B7 )  Freq: 4.00579e-07
0cd0    movl    RSI, #-187	# int
0cd5    movl    RBP, [rsp + #24]	# spill
0cd9    movq    [rsp + #8], RDX	# spill
0cde    movl    [rsp + #4], R8	# spill
0ce3    movl    [rsp + #20], R10	# spill
0ce8    call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:16  L[0]=RBP L[1]=rsp + #28 L[2]=rsp + #8 L[3]=#Ptr0x00000001278b5ae0 L[4]=#0 L[5]=#1 L[6]=rsp + #4 L[7]=_ L[8]=rsp + #20 L[9]=_ L[10]=_ L[11]=_ L[12]=_ STK[0]=rsp + #20
        # java.util.HashMap::put @ bci:9  L[0]=_ L[1]=_ L[2]=_
        # java.util.HashSet::add @ bci:8  L[0]=_ L[1]=_
        # OopMap {rbp=NarrowOop [4]=NarrowOop [8]=Oop off=3312/0xcf0}
0cf0    ud2	# ShouldNotReachHere

0d04    B105: #	out( B34 ) &lt;- in( B78 )  Freq: 3.51814e-07
0d04    movq    [rsp + #8], R10	# spill
0d09    movq    R14, R11	# spill
0d0c    movq    R13, RBP	# spill
0d0f    # TLS is in R15
0d0f    movq    RSI, R15	# spill
0d12    call_leaf,runtime  write_ref_field_pre_entry
        No JVM State Info
        # 
0d22    movq    R11, R14	# spill
0d25    movq    R10, [rsp + #8]	# spill
0d2a    movq    RBP, R13	# spill
0d2d    jmp     B34

0d32    B106: #	out( N1722 ) &lt;- in( B12 )  Freq: 2.50042e-07
0d32    movl    RSI, #-187	# int
0d37    movl    RBP, [rsp + #24]	# spill
0d3b    movq    [rsp + #8], RDX	# spill
0d40    movq    [rsp + #16], R14	# spill
0d45    movl    [rsp + #4], R10	# spill
        nop 	# 2 bytes pad for loops and calls
0d4c    call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:109  L[0]=RBP L[1]=rsp + #28 L[2]=rsp + #8 L[3]=#Ptr0x00000001278b5ae0 L[4]=#0 L[5]=#1 L[6]=rsp + #16 L[7]=rsp + #4 L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ STK[0]=#1
        # java.util.HashMap::put @ bci:9  L[0]=_ L[1]=_ L[2]=_
        # java.util.HashSet::add @ bci:8  L[0]=_ L[1]=_
        # OopMap {rbp=NarrowOop [4]=NarrowOop [8]=Oop [16]=Oop off=3412/0xd54}
0d54    ud2	# ShouldNotReachHere

0d68    B107: #	out( N1722 ) &lt;- in( B20 )  Freq: 2.35499e-07
0d68    movl    RSI, #-34	# int
0d6d    movl    RBP, [rsp + #24]	# spill
0d71    movq    [rsp + #8], R14	# spill
0d76    movl    [rsp + #4], RBX	# spill
0d7a    movq    [rsp + #16], R13	# spill
0d7f    movq    [rsp + #32], RDX	# spill
0d84    call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:152  L[0]=RBP L[1]=rsp + #28 L[2]=_ L[3]=#Ptr0x00000001278b5ae0 L[4]=#0 L[5]=#1 L[6]=rsp + #8 L[7]=_ L[8]=_ L[9]=_ L[10]=#NULL L[11]=_ L[12]=rsp + #4 STK[0]=rsp + #16 STK[1]=RBP STK[2]=rsp + #28 STK[3]=rsp + #32 STK[4]=#Ptr0x00000001278b5ae0 STK[5]=#NULL
        # java.util.HashMap::put @ bci:9  L[0]=_ L[1]=_ L[2]=_
        # java.util.HashSet::add @ bci:8  L[0]=_ L[1]=_
        # OopMap {rbp=NarrowOop [8]=Oop [16]=Oop [32]=Oop off=3468/0xd8c}
0d8c    ud2	# ShouldNotReachHere

0da0    B108: #	out( B24 ) &lt;- in( B85 )  Freq: 1.17746e-07
0da0    movq    [rsp + #48], RSI	# spill
0da5    movl    [rsp + #40], RBX	# spill
0da9    movq    [rsp + #32], R13	# spill
0dae    movq    [rsp + #16], R11	# spill
0db3    movq    [rsp + #8], R14	# spill
0db8    # TLS is in R15
0db8    movq    RSI, R15	# spill
0dbb    call_leaf,runtime  write_ref_field_pre_entry
        No JVM State Info
        # 
0dcb    movq    R14, [rsp + #8]	# spill
0dd0    movq    R11, [rsp + #16]	# spill
0dd5    movq    R13, [rsp + #32]	# spill
0dda    movl    RBX, [rsp + #40]	# spill
0dde    movq    RSI, [rsp + #48]	# spill
0de3    jmp     B24

0de8    B109: #	out( N1722 ) &lt;- in( B26 )  Freq: 1.12294e-07
0de8    movl    RSI, #-187	# int
0ded    movq    [rsp + #8], R14	# spill
0df2    movl    [rsp + #4], RBX	# spill
        nop 	# 2 bytes pad for loops and calls
0df8    call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:162  L[0]=RBP L[1]=rsp + #28 L[2]=_ L[3]=#Ptr0x00000001278b5ae0 L[4]=#0 L[5]=#1 L[6]=rsp + #8 L[7]=_ L[8]=_ L[9]=_ L[10]=#NULL L[11]=_ L[12]=_ STK[0]=rsp + #4 STK[1]=#7
        # java.util.HashMap::put @ bci:9  L[0]=_ L[1]=_ L[2]=_
        # java.util.HashSet::add @ bci:8  L[0]=_ L[1]=_
        # OopMap {rbp=Oop [8]=Oop off=3584/0xe00}
0e00    ud2	# ShouldNotReachHere

0e14    B110: #	out( N1722 ) &lt;- in( B56 )  Freq: 6.08472e-08
0e14    movl    RSI, #-34	# int
0e19    movq    [rsp + #8], R13	# spill
        nop 	# 2 bytes pad for loops and calls
0e20    call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:253  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=RBP STK[0]=rsp + #24 STK[1]=rsp + #8
        # java.util.HashMap::put @ bci:9  L[0]=_ L[1]=_ L[2]=_
        # java.util.HashSet::add @ bci:8  L[0]=_ L[1]=_
        # OopMap {rbp=NarrowOop [8]=Oop [24]=NarrowOop off=3624/0xe28}
0e28    ud2	# ShouldNotReachHere

0e3c    B111: #	out( N1722 ) &lt;- in( B45 )  Freq: 4.88796e-08
0e3c    movl    RSI, #-34	# int
0e41    movl    RBP, [rsp + #24]	# spill
0e45    movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #28]
	movl    [rsp + #0], rax
	movq    rax, [rsp - #8]
0e56    movq    [rsp + #16], R14	# spill
0e5b    movl    [rsp + #4], R10	# spill
0e60    movq    [rsp + #24], RDX	# spill
0e65    movl    [rsp + #32], R11	# spill
        nop 	# 2 bytes pad for loops and calls
0e6c    call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:91  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #24 L[3]=#Ptr0x00000001278b5ae0 L[4]=#0 L[5]=#1 L[6]=rsp + #16 L[7]=rsp + #4 L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ STK[0]=rsp + #24 STK[1]=rsp + #32
        # java.util.HashMap::put @ bci:9  L[0]=_ L[1]=_ L[2]=_
        # java.util.HashSet::add @ bci:8  L[0]=_ L[1]=_
        # OopMap {rbp=NarrowOop [4]=NarrowOop [16]=Oop [24]=Oop [32]=NarrowOop off=3700/0xe74}
0e74    ud2	# ShouldNotReachHere

0e88    B112: #	out( B113 ) &lt;- in( B50 )  Freq: 4.72953e-08
0e88    xorl    R11, R11	# int

0e8b    B113: #	out( B115 ) &lt;- in( B51 B112 )  Freq: 6.98475e-08
0e8b    movl    RBP, R11	# spill
0e8e    jmp,s   B115

0e90    B114: #	out( B115 ) &lt;- in( B47 )  Freq: 4.79235e-08
0e90    xorl    RBP, RBP	# int

0e92    B115: #	out( N1722 ) &lt;- in( B114 B113 )  Freq: 1.17771e-07
0e92    movl    RSI, #-187	# int
0e97    movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #24]
	movl    [rsp + #0], rax
	movq    rax, [rsp - #8]
0ea8    movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #28]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
0eba    movq    [rsp + #8], R14	# spill
0ebf    movl    [rsp + #16], R10	# spill
0ec4    movq    [rsp + #24], R9	# spill
        nop 	# 3 bytes pad for loops and calls
0ecc    call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:94  L[0]=rsp + #0 L[1]=rsp + #4 L[2]=rsp + #24 L[3]=#Ptr0x00000001278b5ae0 L[4]=#0 L[5]=#1 L[6]=rsp + #8 L[7]=rsp + #16 L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ STK[0]=RBP
        # java.util.HashMap::put @ bci:9  L[0]=_ L[1]=_ L[2]=_
        # java.util.HashSet::add @ bci:8  L[0]=_ L[1]=_
        # OopMap {[0]=NarrowOop [8]=Oop [16]=NarrowOop [24]=Oop off=3796/0xed4}
0ed4    ud2	# ShouldNotReachHere

0ee8    B116: #	out( B54 ) &lt;- in( B94 )  Freq: 3.04228e-08
0ee8    movq    R14, R13	# spill
0eeb    movq    RBP, R11	# spill
0eee    # TLS is in R15
0eee    movq    RSI, R15	# spill
0ef1    call_leaf,runtime  write_ref_field_pre_entry
        No JVM State Info
        # 
0f01    movq    R11, RBP	# spill
0f04    movq    R13, R14	# spill
0f07    jmp     B54

0f0c    B117: #	out( N1722 ) &lt;- in( B49 )  Freq: 2.36477e-08
0f0c    movl    RSI, #-187	# int
0f11    movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #24]
	movl    [rsp + #0], rax
	movq    rax, [rsp - #8]
0f22    movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #28]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
0f34    movq    [rsp + #8], R14	# spill
0f39    movl    [rsp + #16], R10	# spill
0f3e    movq    [rsp + #32], R9	# spill
0f43    movq    [rsp + #40], R11	# spill
0f48    movl    [rsp + #20], RCX	# spill
0f4c    call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.String::equals @ bci:33  L[0]=rsp + #32 L[1]=_ L[2]=rsp + #40 STK[0]=rsp + #20 STK[1]=RBP
        # java.util.HashMap::putVal @ bci:91  L[0]=rsp + #0 L[1]=rsp + #4 L[2]=rsp + #32 L[3]=#Ptr0x00000001278b5ae0 L[4]=#0 L[5]=#1 L[6]=rsp + #8 L[7]=rsp + #16 L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_
        # java.util.HashMap::put @ bci:9  L[0]=_ L[1]=_ L[2]=_
        # java.util.HashSet::add @ bci:8  L[0]=_ L[1]=_
        # OopMap {[0]=NarrowOop [8]=Oop [16]=NarrowOop [32]=Oop [40]=Oop off=3924/0xf54}
0f54    ud2	# ShouldNotReachHere

0f68    B118: #	out( N1722 ) &lt;- in( B61 )  Freq: 1.12664e-08
0f68    movl    RSI, #-34	# int
0f6d    movl    RBP, [rsp + #24]	# spill
0f71    movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #28]
	movl    [rsp + #0], rax
	movq    rax, [rsp - #8]
0f82    movq    [rsp + #16], R14	# spill
0f87    movq    [rsp + #24], R13	# spill
0f8c    movl    [rsp + #4], R8	# spill
0f91    movq    [rsp + #32], RDX	# spill
0f96    movl    [rsp + #40], RCX	# spill
        nop 	# 2 bytes pad for loops and calls
0f9c    call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:203  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #32 L[3]=#Ptr0x00000001278b5ae0 L[4]=#0 L[5]=#1 L[6]=rsp + #16 L[7]=_ L[8]=_ L[9]=_ L[10]=rsp + #24 L[11]=_ L[12]=rsp + #4 STK[0]=rsp + #32 STK[1]=rsp + #40
        # java.util.HashMap::put @ bci:9  L[0]=_ L[1]=_ L[2]=_
        # java.util.HashSet::add @ bci:8  L[0]=_ L[1]=_
        # OopMap {rbp=NarrowOop [16]=Oop [24]=Oop [32]=Oop [40]=NarrowOop off=4004/0xfa4}
0fa4    ud2	# ShouldNotReachHere

0fb8    B119: #	out( N1722 ) &lt;- in( B65 )  Freq: 5.45063e-09
0fb8    movl    RSI, #-187	# int
0fbd    movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #24]
	movl    [rsp + #0], rax
	movq    rax, [rsp - #8]
0fce    movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #28]
	movl    [rsp + #4], rax
	movq    rax, [rsp - #8]
0fe0    movq    [rsp + #8], R14	# spill
0fe5    movq    [rsp + #16], R13	# spill
0fea    movl    [rsp + #24], R8	# spill
0fef    movq    [rsp + #40], R9	# spill
0ff4    movq    [rsp + #48], RCX	# spill
0ff9    movl    [rsp + #28], RDI	# spill
        nop 	# 3 bytes pad for loops and calls
1000    call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.String::equals @ bci:33  L[0]=rsp + #40 L[1]=_ L[2]=rsp + #48 STK[0]=rsp + #28 STK[1]=RBP
        # java.util.HashMap::putVal @ bci:203  L[0]=rsp + #0 L[1]=rsp + #4 L[2]=rsp + #40 L[3]=#Ptr0x00000001278b5ae0 L[4]=#0 L[5]=#1 L[6]=rsp + #8 L[7]=_ L[8]=_ L[9]=_ L[10]=rsp + #16 L[11]=_ L[12]=rsp + #24
        # java.util.HashMap::put @ bci:9  L[0]=_ L[1]=_ L[2]=_
        # java.util.HashSet::add @ bci:8  L[0]=_ L[1]=_
        # OopMap {[0]=NarrowOop [8]=Oop [16]=Oop [40]=Oop [48]=Oop off=4104/0x1008}
1008    ud2	# ShouldNotReachHere

101c    B120: #	out( N1722 ) &lt;- in( B60 )  Freq: 5.37224e-09
101c    movl    RSI, #-187	# int
1021    movl    RBP, [rsp + #24]	# spill
1025    movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #28]
	movl    [rsp + #0], rax
	movq    rax, [rsp - #8]
1036    movq    [rsp + #16], R14	# spill
103b    movq    [rsp + #24], R13	# spill
1040    movl    [rsp + #4], R8	# spill
1045    movq    [rsp + #32], RDX	# spill
104a    movl    [rsp + #44], RCX	# spill
        nop 	# 2 bytes pad for loops and calls
1050    call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:193  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #32 L[3]=#Ptr0x00000001278b5ae0 L[4]=#0 L[5]=#1 L[6]=rsp + #16 L[7]=_ L[8]=_ L[9]=_ L[10]=rsp + #24 L[11]=rsp + #44 L[12]=rsp + #4 STK[0]=rsp + #44 STK[1]=rsp + #32
        # java.util.HashMap::put @ bci:9  L[0]=_ L[1]=_ L[2]=_
        # java.util.HashSet::add @ bci:8  L[0]=_ L[1]=_
        # OopMap {rbp=NarrowOop [16]=Oop [24]=Oop [32]=Oop [44]=NarrowOop off=4184/0x1058}
1058    ud2	# ShouldNotReachHere

106c    B121: #	out( N1722 ) &lt;- in( B64 )  Freq: 1e-35
106c    movl    RSI, #-34	# int
1071    movl    RBP, [rsp + #24]	# spill
1075    movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #28]
	movl    [rsp + #0], rax
	movq    rax, [rsp - #8]
1086    movq    [rsp + #8], R14	# spill
108b    movq    [rsp + #16], R13	# spill
1090    movl    [rsp + #4], R8	# spill
1095    movq    [rsp + #32], R9	# spill
109a    movl    [rsp + #44], RCX	# spill
        nop 	# 2 bytes pad for loops and calls
10a0    call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.String::equals @ bci:8  L[0]=rsp + #32 L[1]=rsp + #44 L[2]=_ STK[0]=rsp + #44
        # java.util.HashMap::putVal @ bci:203  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #32 L[3]=#Ptr0x00000001278b5ae0 L[4]=#0 L[5]=#1 L[6]=rsp + #8 L[7]=_ L[8]=_ L[9]=_ L[10]=rsp + #16 L[11]=_ L[12]=rsp + #4
        # java.util.HashMap::put @ bci:9  L[0]=_ L[1]=_ L[2]=_
        # java.util.HashSet::add @ bci:8  L[0]=_ L[1]=_
        # OopMap {rbp=NarrowOop [8]=Oop [16]=Oop [32]=Oop [44]=NarrowOop off=4264/0x10a8}
10a8    ud2	# ShouldNotReachHere

10bc    B122: #	out( N1722 ) &lt;- in( B48 )  Freq: 1e-35
10bc    movl    RSI, #-34	# int
10c1    movl    RBP, [rsp + #24]	# spill
10c5    movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #28]
	movl    [rsp + #0], rax
	movq    rax, [rsp - #8]
10d6    movq    [rsp + #8], R14	# spill
10db    movl    [rsp + #4], R10	# spill
10e0    movq    [rsp + #24], R9	# spill
10e5    movl    [rsp + #36], R11	# spill
        nop 	# 2 bytes pad for loops and calls
10ec    call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.String::equals @ bci:8  L[0]=rsp + #24 L[1]=rsp + #36 L[2]=_ STK[0]=rsp + #36
        # java.util.HashMap::putVal @ bci:91  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #24 L[3]=#Ptr0x00000001278b5ae0 L[4]=#0 L[5]=#1 L[6]=rsp + #8 L[7]=rsp + #4 L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_
        # java.util.HashMap::put @ bci:9  L[0]=_ L[1]=_ L[2]=_
        # java.util.HashSet::add @ bci:8  L[0]=_ L[1]=_
        # OopMap {rbp=NarrowOop [4]=NarrowOop [8]=Oop [24]=Oop [36]=NarrowOop off=4340/0x10f4}
10f4    ud2	# ShouldNotReachHere

1108    B123: #	out( N1722 ) &lt;- in( B1 )  Freq: 1.01328e-06
1108    movl    RSI, #-10	# int
110d    movq    RBP, RDX	# spill
1110    call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.util.HashSet::add @ bci:8  L[0]=_ L[1]=_ STK[0]=#NULL STK[1]=RBP STK[2]=#Ptr0x00000001278b5ae0
        # OopMap {rbp=Oop off=4376/0x1118}
1118    ud2	# ShouldNotReachHere

112c    B124: #	out( N1722 ) &lt;- in( B2 )  Freq: 4.76837e-07
112c    movl    RSI, #-187	# int
1131    movq    [rsp + #8], RDX	# spill
1136    movq    [rsp + #16], RDX	# spill
        nop 	# 1 bytes pad for loops and calls
113c    call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::hash @ bci:1  L[0]=rsp + #16 L[1]=_ STK[0]=rsp + #8
        # java.util.HashMap::put @ bci:2  L[0]=_ L[1]=rsp + #8 L[2]=#Ptr0x00000001278b5ae0 STK[0]=rsp + #24
        # java.util.HashSet::add @ bci:8  L[0]=_ L[1]=_
        # OopMap {[8]=Oop [16]=Oop [24]=NarrowOop off=4420/0x1144}
1144    ud2	# ShouldNotReachHere

1158    B125: #	out( N1722 ) &lt;- in( B42 )  Freq: 1.62043e-07
1158    movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
1160    call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:26  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ STK[0]=#NULL
        # java.util.HashMap::put @ bci:9  L[0]=_ L[1]=_ L[2]=_
        # java.util.HashSet::add @ bci:8  L[0]=_ L[1]=_
        # OopMap {off=4456/0x1168}
1168    ud2	# ShouldNotReachHere

117c    B126: #	out( B133 ) &lt;- in( B100 )  Freq: 2.35538e-10
117c    # exception oop is in rax; no code emitted
117c    jmp,s   B133

117e    B127: #	out( B133 ) &lt;- in( B91 )  Freq: 7.01041e-10
117e    # exception oop is in rax; no code emitted
117e    jmp,s   B133

1180    B128: #	out( B133 ) &lt;- in( B73 )  Freq: 2.7224e-08
1180    # exception oop is in rax; no code emitted
1180    jmp,s   B133

1182    B129: #	out( B133 ) &lt;- in( B71 )  Freq: 2.72245e-08
1182    # exception oop is in rax; no code emitted
1182    jmp,s   B133

1184    B130: #	out( B134 ) &lt;- in( B75 )  Freq: 2.99698e-08
1184    # exception oop is in rax; no code emitted
1184    movq    RSI, RAX	# spill
1187    jmp,s   B134

1189    B131: #	out( B133 ) &lt;- in( B58 )  Freq: 3.32732e-07
1189    # exception oop is in rax; no code emitted
1189    jmp,s   B133

118b    B132: #	out( B133 ) &lt;- in( B41 )  Freq: 1.59923e-06
118b    # exception oop is in rax; no code emitted

118b    B133: #	out( B134 ) &lt;- in( B132 B129 B127 B126 B131 B128 )  Freq: 1.98734e-06
118b    movq    RSI, RAX	# spill

118e    B134: #	out( N1722 ) &lt;- in( B130 B133 )  Freq: 2.01731e-06
118e    vzeroupper
	addq    rsp, 96	# Destroy frame
	popq    rbp

1196    jmp     rethrow_stub

--------------------------------------------------------------------------------
</opto_assembly>
<writer thread='25091'/>
                              @ 2   java.util.HashMap::hash (20 bytes)   inline (hot)
                                @ 9   java.lang.Object::hashCode (0 bytes)   (intrinsic, virtual)
                              @ 9   java.util.HashMap::putVal (300 bytes)   inline (hot)
                                @ 20   java.util.HashMap::resize (356 bytes)   hot method too big
                                @ 56   java.util.HashMap::newNode (13 bytes)   inline (hot)
                                @ 56   java.util.LinkedHashMap::newNode (23 bytes)   executed &lt; MinInliningThreshold times
                                 \-&gt; TypeProfile (9921/9982 counts) = java/util/HashMap
                                  @ 9   java.util.HashMap$Node::&lt;init&gt; (26 bytes)   inline (hot)
                                    @ 1   java.lang.Object::&lt;init&gt; (1 bytes)   inline (hot)
                                @ 91   java.lang.String::equals (50 bytes)   inline (hot)
                                 \-&gt; TypeProfile (543/543 counts) = java/lang/String
                                  @ 44   java.lang.StringLatin1::equals (36 bytes)   (intrinsic)
                                @ 203   java.lang.String::equals (50 bytes)   inline (hot)
                                 \-&gt; TypeProfile (126/126 counts) = java/lang/String
                                  @ 44   java.lang.StringLatin1::equals (36 bytes)   (intrinsic)
                                @ 152   java.util.HashMap::newNode (13 bytes)   inline (hot)
                                 \-&gt; TypeProfile (3864/3864 counts) = java/util/HashMap
                                  @ 9   java.util.HashMap$Node::&lt;init&gt; (26 bytes)   inline (hot)
                                    @ 1   java.lang.Object::&lt;init&gt; (1 bytes)   inline (hot)
                                @ 253   java.util.HashMap::afterNodeAccess (1 bytes)   inline (hot)
                                 \-&gt; TypeProfile (685/685 counts) = java/util/HashMap
                                @ 288   java.util.HashMap::resize (356 bytes)   hot method too big
                                @ 295   java.util.HashMap::afterNodeInsertion (1 bytes)   inline (hot)
                                @ 295   java.util.LinkedHashMap::afterNodeInsertion (40 bytes)   executed &lt; MinInliningThreshold times
                                 \-&gt; TypeProfile (13785/13846 counts) = java/util/HashMap
<writer thread='24067'/>
   1124  407       3       java.lang.String::startsWith (7 bytes)
<writer thread='42499'/>
   1124  409       3       jdk.internal.org.objectweb.asm.SymbolTable::addConstantUtf8Reference (101 bytes)
<writer thread='40963'/>
   1124  408       1       java.lang.invoke.MethodTypeForm::erasedType (5 bytes)
<writer thread='9219'/>
   1124  410     n 0       java.lang.Class::isAssignableFrom (native)   
<writer thread='24323'/>

============================= C2-compiled nmethod ==============================
<opto_assembly compile_id='383'>
----------------------- MetaData before Compile_id = 383 ------------------------
{method}
 - this oop:          0x00000001269a1bb0
 - method holder:     &apos;java/lang/String&apos;
 - constants:         0x000000012699b360 constant pool [1059]/operands[28] {0x000000012699b360} for &apos;java/lang/String&apos; cache=0x0000000126aba220
 - access:            0x81000001  public 
 - name:              &apos;indexOf&apos;
 - signature:         &apos;(II)I&apos;
 - max stack:         4
 - max locals:        3
 - size of params:    3
 - method size:       13
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x000000010c0a1de0
 - adapters:          AHE@0x00007f99308e17f0: 0xbaa00000 i2c: 0x000000010c0e8d60 c2i: 0x000000010c0e8e49 c2iUV: 0x000000010c0e8e10 c2iNCI: 0x000000010c0e8e86
 - compiled entry     0x000000010c7de840
 - code size:         29
 - code start:        0x00000001269a1b60
 - code end (excl):   0x00000001269a1b7d
 - method data:       0x0000000126dc3b10
 - checked ex length: 0
 - linenumber start:  0x00000001269a1b7d
 - localvar length:   3
 - localvar start:    0x00000001269a1b8a
 - compiled code: nmethod   1125   47       3       java.lang.String::indexOf (29 bytes)

------------------------ OptoAssembly for Compile_id = 383 -----------------------
#
#  int ( java/lang/String:NotNull:exact *, int, int )
#
#r018 rsi:rsi   : parm 0: java/lang/String:NotNull:exact *
#r016 rdx   : parm 1: int
#r010 rcx   : parm 2: int
# -- Old rsp -- Framesize: 48 --
#r583 rsp+44: in_preserve
#r582 rsp+40: return address
#r581 rsp+36: in_preserve
#r580 rsp+32: saved fp register
#r579 rsp+28: pad2, stack alignment
#r578 rsp+24: pad2, stack alignment
#r577 rsp+20: Fixed slot 1
#r576 rsp+16: Fixed slot 0
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N342: #	out( B1 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B39 B2 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (368 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

02c     movq    R10, RSI	# spill
02f     movsbl  RBP, [RSI + #20 (8-bit)]	# byte ! Field: java/lang/String.coder (constant)
033     testl   RBP, RBP
035     jne     B39  P=0.000000 C=91592.000000

03b     B2: #	out( B40 B3 ) &lt;- in( B1 )  Freq: 1
03b     movl    RBX, [RSI + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value (constant)
03e     movl    RBP, RDX	# spill
040     shrl    RBP, #8
043     testl   RBP, RBP
045     jne     B40  P=0.000000 C=20635.000000

04b     B3: #	out( B42 B4 ) &lt;- in( B2 )  Freq: 0.999999
04b     movl    RBP, [R12 + RBX &lt;&lt; 3 + #12] (compressed oop addressing)	# range
050     NullCheck RBX

050     B4: #	out( B41 B5 ) &lt;- in( B3 )  Freq: 0.999998
050     testl   RCX, RCX
052     jl     B41  P=0.000000 C=1051.000000

058     B5: #	out( B31 B6 ) &lt;- in( B4 )  Freq: 0.999998
058     movl    RAX, #-1	# int
05d     cmpl    RCX, RBP
05f     jge     B31  P=0.069458 C=1051.000000

065     B6: #	out( B38 B7 ) &lt;- in( B5 )  Freq: 0.93054
065     movsbl  R9, RDX	# i2b
069     cmpl    RCX, RBP	# unsigned
06b     jnb,u   B38  P=0.000001 C=-1.000000

071     B7: #	out( B38 B8 ) &lt;- in( B6 )  Freq: 0.930539
071     movl    R10, RBP	# spill
074     decl    R10	# int
077     cmpl    R10, RBP	# unsigned
07a     jnb,u   B38  P=0.000001 C=-1.000000

080     B8: #	out( B9 ) &lt;- in( B7 )  Freq: 0.930538
080     movl    R8, RCX	# spill
083     incl    R8	# int
086     decode_heap_oop_not_null RBX,RBX

08a     B9: #	out( B30 B10 ) &lt;- in( B8 B10 ) Loop( B9-B10 inner pre of N280) Freq: 1.84523
08a     movsbl  R11, [RBX + #16 + RCX]	# byte
090     cmpl    R11, R9
093     je     B30  P=0.008589 C=26545.000000

099     B10: #	out( B9 B11 ) &lt;- in( B9 )  Freq: 1.82938
099     incl    RCX	# int
09b     cmpl    RCX, R8
09e     jl,s   B9	# loop end  P=0.500000 C=26317.000000

0a0     B11: #	out( B24 B12 ) &lt;- in( B10 )  Freq: 0.914689
0a0     movl    RDX, RBP	# spill
0a2     addl    RDX, #-7	# int
0a5     movl    R8, #-2147483648	# int
0ab     cmpl    R10, RDX
0ae     cmovll RDX, R8	# signed, int
0b2     cmpl    RCX, RDX
0b4     jge     B24  P=0.000001 C=-1.000000

0ba     B12: #	out( B13 ) &lt;- in( B11 )  Freq: 0.914688
0ba     # castII of RCX
0ba     movl    R10, #8000	# int

0c0     B13: #	out( B14 ) &lt;- in( B12 B23 ) Loop( B13-B23 ) Freq: 1.25322
0c0     movl    RDI, RDX	# spill
0c2     subl    RDI, RCX	# int
0c4     cmpl    RDI, R10
0c7     cmovlgt RDI, R10	# min
0cb     addl    RDI, RCX	# int
        nop 	# 3 bytes pad for loops and calls

0d0     B14: #	out( B30 B15 ) &lt;- in( B13 B22 ) Loop( B14-B22 inner main of N150 strip mined) Freq: 13.5735
0d0     movsbl  R11, [RBX + #16 + RCX]	# byte
0d6     cmpl    R11, R9
0d9     je     B30  P=0.008589 C=26545.000000

0df     B15: #	out( B29 B16 ) &lt;- in( B14 )  Freq: 13.4569
0df     movslq  R8, RCX	# i2l
0e2     movsbl  R11, [RBX + #17 + R8]	# byte
0e8     cmpl    R11, R9
0eb     je,s   B29  P=0.008589 C=26545.000000

0ed     B16: #	out( B32 B17 ) &lt;- in( B15 )  Freq: 13.3413
0ed     movsbl  R11, [RBX + #18 + R8]	# byte
0f3     cmpl    R11, R9
0f6     je     B32  P=0.008589 C=26545.000000

0fc     B17: #	out( B33 B18 ) &lt;- in( B16 )  Freq: 13.2267
0fc     movsbl  R11, [RBX + #19 + R8]	# byte
102     cmpl    R11, R9
105     je,s   B33  P=0.008589 C=26545.000000

107     B18: #	out( B34 B19 ) &lt;- in( B17 )  Freq: 13.1131
107     movsbl  R11, [RBX + #20 + R8]	# byte
10d     cmpl    R11, R9
110     je,s   B34  P=0.008589 C=26545.000000

112     B19: #	out( B35 B20 ) &lt;- in( B18 )  Freq: 13.0005
112     movsbl  R11, [RBX + #21 + R8]	# byte
118     cmpl    R11, R9
11b     je,s   B35  P=0.008589 C=26545.000000

11d     B20: #	out( B36 B21 ) &lt;- in( B19 )  Freq: 12.8888
11d     movsbl  R11, [RBX + #22 + R8]	# byte
123     cmpl    R11, R9
126     je,s   B36  P=0.008589 C=26545.000000

128     B21: #	out( B37 B22 ) &lt;- in( B20 )  Freq: 12.7781
128     movsbl  R11, [RBX + #23 + R8]	# byte
12e     cmpl    R11, R9
131     je,s   B37  P=0.008589 C=26545.000000

133     B22: #	out( B14 B23 ) &lt;- in( B21 )  Freq: 12.6684
133     addl    RCX, #8	# int
136     cmpl    RCX, RDI
138     jl,s   B14	# loop end  P=0.972522 C=26317.000000

13a     B23: #	out( B13 B24 ) &lt;- in( B22 )  Freq: 0.348096
13a     # TLS is in R15
13a     movq    R11, [R15 + #296 (32-bit)]	# ptr
141     testl   rax, [R11]	# Safepoint: poll for GC        # java.lang.StringLatin1::indexOf @ bci:56  L[0]=RBX L[1]=_ L[2]=_ L[3]=RBP L[4]=R9 L[5]=RCX
        # java.lang.String::indexOf @ bci:13  L[0]=_ L[1]=_ L[2]=_
        # OopMap {rbx=Oop off=321/0x141}
144     cmpl    RCX, RDX
146     jl     B13  P=0.972522 C=26317.000000

14c     B24: #	out( B31 B25 ) &lt;- in( B11 B23 )  Freq: 0.00956576
14c     cmpl    RCX, RBP
14e     jge,s   B31  P=0.500000 C=-1.000000

150     B25: #	out( B26 ) &lt;- in( B24 )  Freq: 0.00478288
150     # castII of RCX

150     B26: #	out( B30 B27 ) &lt;- in( B25 B27 ) Loop( B26-B27 inner post of N280) Freq: 0.0094843
150     movsbl  R10, [RBX + #16 + RCX]	# byte
156     cmpl    R10, R9
159     je,s   B30  P=0.008589 C=26545.000000

15b     B27: #	out( B26 B28 ) &lt;- in( B26 )  Freq: 0.00940284
15b     incl    RCX	# int
15d     cmpl    RCX, RBP
15f     jl,s   B26	# loop end  P=0.500000 C=26317.000000

161     B28: #	out( B31 ) &lt;- in( B27 )  Freq: 0.00470142
161     jmp,s   B31

163     B29: #	out( B30 ) &lt;- in( B15 )  Freq: 0.115584
163     incl    RCX	# int

165     B30: #	out( B31 ) &lt;- in( B26 B9 B14 B34 B32 B36 B29 B35 B33 B37 )  Freq: 0.921054
165     movl    RAX, RCX	# spill

167     B31: #	out( N342 ) &lt;- in( B5 B30 B28 B24 )  Freq: 0.999996
167     addq    rsp, 32	# Destroy frame
	popq    rbp
	movq    rscratch1, poll_offset[r15_thread] #polling_page_address
	testl   rax, [rscratch1]	# Safepoint: poll for GC

176     ret

177     B32: #	out( B30 ) &lt;- in( B16 )  Freq: 0.114592
177     addl    RCX, #2	# int
17a     jmp,s   B30

17c     B33: #	out( B30 ) &lt;- in( B17 )  Freq: 0.113607
17c     addl    RCX, #3	# int
17f     jmp,s   B30

181     B34: #	out( B30 ) &lt;- in( B18 )  Freq: 0.112631
181     addl    RCX, #4	# int
184     jmp,s   B30

186     B35: #	out( B30 ) &lt;- in( B19 )  Freq: 0.111664
186     addl    RCX, #5	# int
189     jmp,s   B30

18b     B36: #	out( B30 ) &lt;- in( B20 )  Freq: 0.110705
18b     addl    RCX, #6	# int
18e     jmp,s   B30

190     B37: #	out( B30 ) &lt;- in( B21 )  Freq: 0.109754
190     addl    RCX, #7	# int
193     jmp,s   B30

195     B38: #	out( N342 ) &lt;- in( B7 B6 )  Freq: 1.88579e-06
195     movl    RSI, #-138	# int
19a     movl    [rsp + #0], R9	# spill
19e     movl    [rsp + #8], RCX	# spill
1a2     movl    [rsp + #12], RBX	# spill
        nop 	# 1 bytes pad for loops and calls
1a7     call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.StringLatin1::indexOf @ bci:38  L[0]=rsp + #12 L[1]=_ L[2]=_ L[3]=RBP L[4]=rsp + #0 L[5]=rsp + #8 STK[0]=rsp + #8 STK[1]=RBP
        # java.lang.String::indexOf @ bci:13  L[0]=_ L[1]=_ L[2]=_
        # OopMap {[12]=NarrowOop off=428/0x1ac}
1ac     ud2	# ShouldNotReachHere

1c0     B39: #	out( N342 ) &lt;- in( B1 )  Freq: 5e-07
1c0     movl    RSI, #-187	# int
1c5     movl    [rsp + #0], RCX	# spill
1c8     movq    [rsp + #8], R10	# spill
1cd     movl    [rsp + #4], RDX	# spill
        nop 	# 2 bytes pad for loops and calls
1d3     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.String::isLatin1 @ bci:10  L[0]=_ STK[0]=RBP
        # java.lang.String::indexOf @ bci:1  L[0]=rsp + #8 L[1]=rsp + #4 L[2]=rsp + #0
        # OopMap {[8]=Oop off=472/0x1d8}
1d8     ud2	# ShouldNotReachHere

1ec     B40: #	out( N342 ) &lt;- in( B2 )  Freq: 5e-07
1ec     movl    RSI, #-187	# int
1f1     movl    [rsp + #0], RCX	# spill
1f4     movl    [rsp + #4], RBX	# spill
1f8     movl    [rsp + #8], RDX	# spill
        nop 	# 3 bytes pad for loops and calls
1ff     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.StringLatin1::canEncode @ bci:4  L[0]=_ STK[0]=RBP
        # java.lang.StringLatin1::indexOf @ bci:1  L[0]=rsp + #4 L[1]=rsp + #8 L[2]=rsp + #0 L[3]=_ L[4]=_ L[5]=_
        # java.lang.String::indexOf @ bci:13  L[0]=_ L[1]=_ L[2]=_
        # OopMap {[4]=NarrowOop off=516/0x204}
204     ud2	# ShouldNotReachHere

218     B41: #	out( N342 ) &lt;- in( B4 )  Freq: 4.76836e-07
218     movl    RSI, #-187	# int
21d     movl    [rsp + #4], RCX	# spill
221     movl    [rsp + #8], RBX	# spill
225     movl    [rsp + #12], RDX	# spill
        nop 	# 2 bytes pad for loops and calls
22b     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.StringLatin1::indexOf @ bci:13  L[0]=rsp + #8 L[1]=rsp + #12 L[2]=rsp + #4 L[3]=RBP L[4]=_ L[5]=_ STK[0]=rsp + #4
        # java.lang.String::indexOf @ bci:13  L[0]=_ L[1]=_ L[2]=_
        # OopMap {[8]=NarrowOop off=560/0x230}
230     ud2	# ShouldNotReachHere

244     B42: #	out( N342 ) &lt;- in( B3 )  Freq: 1.01328e-06
244     movl    RSI, #-10	# int
        nop 	# 2 bytes pad for loops and calls
24b     call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.StringLatin1::indexOf @ bci:10  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ STK[0]=#NULL
        # java.lang.String::indexOf @ bci:13  L[0]=_ L[1]=_ L[2]=_
        # OopMap {off=592/0x250}
250     ud2	# ShouldNotReachHere

--------------------------------------------------------------------------------
</opto_assembly>
<writer thread='36611'/>
                              @ 8   java.util.HashMap::put (13 bytes)   inline (hot)
                                @ 2   java.util.HashMap::hash (20 bytes)   inline (hot)
                                  @ 9   java.lang.Object::hashCode (0 bytes)   (intrinsic, virtual)
                                @ 9   java.util.HashMap::putVal (300 bytes)   inline (hot)
                                  @ 20   java.util.HashMap::resize (356 bytes)   hot method too big
                                  @ 56   java.util.HashMap::newNode (13 bytes)   inline (hot)
                                  @ 56   java.util.LinkedHashMap::newNode (23 bytes)   executed &lt; MinInliningThreshold times
                                   \-&gt; TypeProfile (15705/15766 counts) = java/util/HashMap
                                    @ 9   java.util.HashMap$Node::&lt;init&gt; (26 bytes)   inline (hot)
                                      @ 1   java.lang.Object::&lt;init&gt; (1 bytes)   inline (hot)
                                  @ 91   java.lang.String::equals (50 bytes)   inline (hot)
                                   \-&gt; TypeProfile (1095/1095 counts) = java/lang/String
                                    @ 44   java.lang.StringLatin1::equals (36 bytes)   (intrinsic)
                                  @ 203   java.lang.String::equals (50 bytes)   inline (hot)
                                   \-&gt; TypeProfile (252/252 counts) = java/lang/String
                                    @ 44   java.lang.StringLatin1::equals (36 bytes)   (intrinsic)
                                  @ 152   java.util.HashMap::newNode (13 bytes)   inline (hot)
                                   \-&gt; TypeProfile (5277/5277 counts) = java/util/HashMap
                                    @ 9   java.util.HashMap$Node::&lt;init&gt; (26 bytes)   inline (hot)
                                      @ 1   java.lang.Object::&lt;init&gt; (1 bytes)   inline (hot)
                                  @ 253   java.util.HashMap::afterNodeAccess (1 bytes)   inline (hot)
                                   \-&gt; TypeProfile (1363/1363 counts) = java/util/HashMap
                                  @ 288   java.util.HashMap::resize (356 bytes)   hot method too big
                                  @ 295   java.util.HashMap::afterNodeInsertion (1 bytes)   inline (hot)
                                  @ 295   java.util.LinkedHashMap::afterNodeInsertion (40 bytes)   executed &lt; MinInliningThreshold times
                                   \-&gt; TypeProfile (20982/21043 counts) = java/util/HashMap
<writer thread='42499'/>
                              
<writer thread='40195'/>
   1129  411       3       sun.invoke.util.VerifyAccess::isTypeVisible (118 bytes)
<writer thread='42499'/>
@ 2   jdk.internal.org.objectweb.asm.SymbolTable::hash (10 bytes)
<writer thread='24067'/>
                              @ 3   java.lang.String::startsWith (138 bytes)   callee is too large
<writer thread='42499'/>
                                @ 4   java.lang.String::hashCode (60 bytes)   callee is too large
<writer thread='40963'/>
   1129  412       3       jdk.internal.org.objectweb.asm.Type::getArgumentsAndReturnSizes (132 bytes)
<writer thread='24323'/>
   1129   47       3       java.lang.String::indexOf (29 bytes)   made not entrant
                              @ 1   java.lang.String::isLatin1 (19 bytes)   inline (hot)
                              @ 13   java.lang.StringLatin1::indexOf (61 bytes)   inline (hot)
                                @ 1   java.lang.StringLatin1::canEncode (13 bytes)   inline (hot)
<writer thread='42499'/>
        
<writer thread='37379'/>
   1130  418       4       java.util.Objects::requireNonNull (14 bytes)
<writer thread='42499'/>
                      @ 8   jdk.internal.org.objectweb.asm.SymbolTable::get
<writer thread='40195'/>
                              @ 8   java.lang.Class::isArray (0 bytes)   native method
<writer thread='42499'/>
 (13 bytes)
<writer thread='40195'/>
                              @ 15  
<writer thread='40963'/>
                              @ 6   java.lang.String::charAt (25 bytes)
<writer thread='40195'/>
 java.lang.Class::getComponentType (14 bytes)
<writer thread='40963'/>
                                @ 1   java.lang.String::isLatin1 (19 bytes)
<writer thread='40195'/>
                                @ 1   java.lang.Class::isArray (0 bytes)   native method
<writer thread='24067'/>
   1130  415       3       java.util.stream.MatchOps$1MatchSink::accept (44 bytes)
<writer thread='40195'/>
                              @ 23   java.lang.Class::isPrimitive (0 bytes)   intrinsic
<writer thread='24067'/>
                              @ 12   java.util.function.Predicate::test (0 bytes)   no static binding
<writer thread='40195'/>
        
<writer thread='40963'/>
             
<writer thread='24323'/>
   1130  421       4       jdk.internal.org.objectweb.asm.ByteVector::putUTF8 (144 bytes)
<writer thread='40195'/>
                      @ 38   java.lang.Class::getClassLoader (28 bytes)   force inline by annotation
<writer thread='42499'/>
                              @ 42   java.lang.String::equals (50 bytes)   callee is too large
<writer thread='40963'/>
                   @ 12   java.lang.StringLatin1::charAt (28 bytes)
<writer thread='40195'/>
                                @ 1   java.lang.Class::getClassLoader0 (5 bytes)
<writer thread='37379'/>

============================= C2-compiled nmethod ==============================
<opto_assembly compile_id='418'>
----------------------- MetaData before Compile_id = 418 ------------------------
{method}
 - this oop:          0x0000000126ad1dc8
 - method holder:     &apos;java/util/Objects&apos;
 - constants:         0x0000000126ad1160 constant pool [140] {0x0000000126ad1160} for &apos;java/util/Objects&apos; cache=0x0000000126ad25c0
 - access:            0x81000009  public static 
 - name:              &apos;requireNonNull&apos;
 - signature:         &apos;(Ljava/lang/Object;)Ljava/lang/Object;&apos;
 - max stack:         3
 - max locals:        1
 - size of params:    1
 - method size:       13
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x000000010c0a1de0
 - adapters:          AHE@0x00007f99308e1660: 0xb0000000 i2c: 0x000000010c0e9ee0 c2i: 0x000000010c0e9fc3 c2iUV: 0x000000010c0e9f8a c2iNCI: 0x000000010c0ea000
 - compiled entry     0x000000010c7d4fe0
 - code size:         14
 - code start:        0x0000000126ad1da0
 - code end (excl):   0x0000000126ad1dae
 - method data:       0x0000000126d42cd0
 - checked ex length: 0
 - linenumber start:  0x0000000126ad1dae
 - localvar length:   1
 - localvar start:    0x0000000126ad1db8
 - compiled code: nmethod   1131   14       3       java.util.Objects::requireNonNull (14 bytes)

------------------------ OptoAssembly for Compile_id = 418 -----------------------
#
#  java/lang/Object * ( java/lang/Object * )
#
#r018 rsi:rsi   : parm 0: java/lang/Object *
# -- Old rsp -- Framesize: 48 --
#r583 rsp+44: in_preserve
#r582 rsp+40: return address
#r581 rsp+36: in_preserve
#r580 rsp+32: saved fp register
#r579 rsp+28: pad2, stack alignment
#r578 rsp+24: pad2, stack alignment
#r577 rsp+20: Fixed slot 1
#r576 rsp+16: Fixed slot 0
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N1: #	out( B1 ) &lt;- in( B3 B2 )  Freq: 1

000     B1: #	out( B3 B2 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
000     # stack bang (120 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

00c     movq    RAX, RSI	# spill
00f     testq   RSI, RSI	# ptr
012     je,s   B3  P=0.000000 C=7636.000000

014     B2: #	out( N1 ) &lt;- in( B1 )  Freq: 1
014     addq    rsp, 32	# Destroy frame
	popq    rbp
	movq    rscratch1, poll_offset[r15_thread] #polling_page_address
	testl   rax, [rscratch1]	# Safepoint: poll for GC

023     ret

024     B3: #	out( N1 ) &lt;- in( B1 )  Freq: 4.76837e-07
024     movl    RSI, #-187	# int
029     movq    [rsp + #0], RAX	# spill
        nop 	# 2 bytes pad for loops and calls
02f     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.util.Objects::requireNonNull @ bci:1  L[0]=rsp + #0 STK[0]=rsp + #0
        # OopMap {[0]=Oop off=52/0x34}
034     ud2	# ShouldNotReachHere

--------------------------------------------------------------------------------
</opto_assembly>
   1131   14       3       java.util.Objects::requireNonNull (14 bytes)   made not entrant
<writer thread='42499'/>
                              @ 68   jdk.internal.org.objectweb.asm.SymbolTable::addConstantUtf8 (98 bytes)   callee is too large
             
<writer thread='24067'/>
   1132  423   !   3       java.io.BufferedReader::readLine (327 bytes)
<writer thread='42499'/>
                 @ 71   jdk.internal.org.objectweb.asm.ByteVector::put12 (64 bytes)   callee is too large
                              @ 94   jdk.internal.org.objectweb.asm.SymbolTable$Entry::&lt;init&gt; (17 bytes)
<writer thread='40195'/>
                                
<writer thread='40963'/>
                                  @ 15  java/lang/StringIndexOutOfBoundsException::&lt;init&gt; (not loaded)   not inlineable
<writer thread='42499'/>
                                @ 7   jdk.internal.org.objectweb.asm.Symbol::&lt;init&gt; (38 bytes)   callee is too large
                              @ 97   jdk.internal.org.objectweb.asm.SymbolTable::put (150 bytes)   callee is too large
<writer thread='40195'/>
@ 11   java.lang.System::getSecurityManager (12 bytes)
<writer thread='24067'/>
                              @ 11  
<writer thread='40963'/>
        
<writer thread='40195'/>
        
<writer thread='24067'/>
 java.io.BufferedReader::ensureOpen (18 bytes)
<writer thread='40195'/>
                          @ 0   java.lang.System::allowSecurityManager (13 bytes)
<writer thread='40963'/>
                        @ 21   java.lang.StringUTF16::charAt (11 bytes)
<writer thread='37379'/>
   1132  426       4       java.lang.StringLatin1::canEncode (13 bytes)
<writer thread='24067'/>
                                @ 13  java/io/IOException::&lt;init&gt; (not loaded)   not inlineable
<writer thread='40963'/>
                                  @ 2   java.lang.StringUTF16::checkIndex (9 bytes)
                                    @ 2   java.lang.StringUTF16::length (5 bytes)
<writer thread='40195'/>
                                @ 20   jdk.internal.reflect.Reflection::getCallerClass (0 bytes)   native method
                                @ 23   java.lang.ClassLoader::checkClassLoaderPermission (29 bytes)
<writer thread='24067'/>
                              @ 52   java.io.BufferedReader::fill (170 bytes)   callee is too large
<writer thread='40195'/>
                                  @ 0   java.lang.System::getSecurityManager (12 bytes)
<writer thread='40963'/>
                                    @ 5  
<writer thread='40195'/>
                                    
<writer thread='40963'/>
 java.lang.String::checkIndex
<writer thread='40195'/>
@ 0   java.lang.System::allowSecurityManager (13 bytes)
<writer thread='40963'/>
 (48 bytes)   callee is too large
<writer thread='24067'/>
                              @ 71   java.lang.StringBuilder::length (5 bytes)
<writer thread='40963'/>
                                  @ 7   java.lang.StringUTF16::getChar (60 bytes)   intrinsic
<writer thread='24067'/>
                                @ 1   java.lang.AbstractStringBuilder::length (5 bytes)
<writer thread='40963'/>
                              @ 39   java.lang.String::charAt (25 bytes)
                                @ 1   java.lang.String::isLatin1 (19 bytes)
<writer thread='24067'/>
                              @ 78   java.lang.StringBuilder::toString (35 bytes)
<writer thread='40195'/>
                                  @ 9   java.lang.ClassLoader::getClassLoader (11 bytes)
<writer thread='24067'/>
                                @ 1   java.lang.AbstractStringBuilder::isLatin1 (19 bytes)
<writer thread='40963'/>
                                @ 12   java.lang.StringLatin1::charAt (28 bytes)
<writer thread='40195'/>
                                    @ 7   java.lang.Class::getClassLoader0 (5 bytes)
<writer thread='40963'/>
                                  @ 15  java/lang/StringIndexOutOfBoundsException::&lt;init&gt; (not loaded)   not inlineable
<writer thread='40195'/>
                                  @ 15   java.lang.ClassLoader::needsClassLoaderPermissionCheck (27 bytes)
<writer thread='37379'/>

============================= C2-compiled nmethod ==============================
<opto_assembly compile_id='426'>
----------------------- MetaData before Compile_id = 426 ------------------------
{method}
 - this oop:          0x0000000126b1c970
 - method holder:     &apos;java/lang/StringLatin1&apos;
 - constants:         0x0000000126b1b920 constant pool [372] {0x0000000126b1b920} for &apos;java/lang/StringLatin1&apos; cache=0x0000000126b202b0
 - access:            0x81000009  public static 
 - name:              &apos;canEncode&apos;
 - signature:         &apos;(I)Z&apos;
 - max stack:         3
 - max locals:        1
 - size of params:    1
 - method size:       13
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x000000010c0a1de0
 - adapters:          AHE@0x00007f99308e1750: 0xa0000000 i2c: 0x000000010c0e9460 c2i: 0x000000010c0e9542 c2iUV: 0x000000010c0e9509 c2iNCI: 0x000000010c0e957f
 - compiled entry     0x000000010c7d8f40
 - code size:         13
 - code start:        0x0000000126b1c950
 - code end (excl):   0x0000000126b1c95d
 - method data:       0x0000000126d43810
 - checked ex length: 0
 - linenumber start:  0x0000000126b1c95d
 - localvar length:   1
 - localvar start:    0x0000000126b1c962
 - compiled code: nmethod   1134   31       3       java.lang.StringLatin1::canEncode (13 bytes)

------------------------ OptoAssembly for Compile_id = 426 -----------------------
#
#  bool ( int )
#
#r018 rsi   : parm 0: int
# -- Old rsp -- Framesize: 32 --
#r583 rsp+28: in_preserve
#r582 rsp+24: return address
#r581 rsp+20: in_preserve
#r580 rsp+16: saved fp register
#r579 rsp+12: pad2, stack alignment
#r578 rsp+ 8: pad2, stack alignment
#r577 rsp+ 4: Fixed slot 1
#r576 rsp+ 0: Fixed slot 0
#
000     N1: #	out( B1 ) &lt;- in( B3 B2 )  Freq: 1

000     B1: #	out( B3 B2 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
000     # stack bang (120 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

00c     shrl    RSI, #8
00f     testl   RSI, RSI
011     jne,s   B3  P=0.000000 C=20717.000000

013     B2: #	out( N1 ) &lt;- in( B1 )  Freq: 1
013     movl    RAX, #1	# int
018     addq    rsp, 16	# Destroy frame
	popq    rbp
	movq    rscratch1, poll_offset[r15_thread] #polling_page_address
	testl   rax, [rscratch1]	# Safepoint: poll for GC

027     ret

028     B3: #	out( N1 ) &lt;- in( B1 )  Freq: 5e-07
028     movl    RBP, RSI	# spill
02a     movl    RSI, #-187	# int
02f     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.StringLatin1::canEncode @ bci:4  L[0]=_ STK[0]=RBP
        # OopMap {off=52/0x34}
034     ud2	# ShouldNotReachHere

--------------------------------------------------------------------------------
</opto_assembly>
<writer thread='24067'/>
                                @ 16   java.lang.StringLatin1::newString (17 bytes)
<writer thread='40963'/>
                                @ 21   java.lang.StringUTF16::charAt (11 bytes)
<writer thread='40195'/>
                                    @ 15   java.lang.ClassLoader::isAncestor (20 bytes)
<writer thread='40963'/>
                                  @ 2   java.lang.StringUTF16::checkIndex (9 bytes)
                                    @ 2   java.lang.StringUTF16::length (5 bytes)
<writer thread='37379'/>
   1135   31       3       java.lang.StringLatin1::canEncode (13 bytes)   made not entrant
<writer thread='38659'/>

============================= C2-compiled nmethod ==============================
<opto_assembly compile_id='350'>
----------------------- MetaData before Compile_id = 350 ------------------------
{method}
 - this oop:          0x0000000126a4ece0
 - method holder:     &apos;java/lang/AbstractStringBuilder&apos;
 - constants:         0x0000000126a4b410 constant pool [538]/operands[14] {0x0000000126a4b410} for &apos;java/lang/AbstractStringBuilder&apos; cache=0x0000000126b94e78
 - access:            0x81000001  public 
 - name:              &apos;append&apos;
 - signature:         &apos;(C)Ljava/lang/AbstractStringBuilder;&apos;
 - max stack:         6
 - max locals:        2
 - size of params:    2
 - method size:       13
 - highest level:     3
 - vtable index:      17
 - i2i entry:         0x000000010c0a1de0
 - adapters:          AHE@0x00007f99308e1840: 0xba000000 i2c: 0x000000010c0e89e0 c2i: 0x000000010c0e8ac6 c2iUV: 0x000000010c0e8a8d c2iNCI: 0x000000010c0e8b03
 - compiled entry     0x000000010c7e5640
 - code size:         77
 - code start:        0x0000000126a4ec68
 - code end (excl):   0x0000000126a4ecb5
 - method data:       0x0000000126dcbb68
 - checked ex length: 0
 - linenumber start:  0x0000000126a4ecb5
 - localvar length:   2
 - localvar start:    0x0000000126a4ecc6
 - compiled code: nmethod   1135   59       3       java.lang.AbstractStringBuilder::append (77 bytes)

------------------------ OptoAssembly for Compile_id = 350 -----------------------
#
#  java/lang/AbstractStringBuilder * ( java/lang/AbstractStringBuilder:NotNull *, int )
#
#r018 rsi:rsi   : parm 0: java/lang/AbstractStringBuilder:NotNull *
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 80 --
#r583 rsp+76: in_preserve
#r582 rsp+72: return address
#r581 rsp+68: in_preserve
#r580 rsp+64: saved fp register
#r579 rsp+60: pad2, stack alignment
#r578 rsp+56: pad2, stack alignment
#r577 rsp+52: Fixed slot 1
#r576 rsp+48: Fixed slot 0
#r595 rsp+44: spill
#r594 rsp+40: spill
#r593 rsp+36: spill
#r592 rsp+32: spill
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N604: #	out( B1 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B46 B2 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (392 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #64	# Create frame

02c     movl    [rsp + #8], RDX	# spill
030     movq    [rsp + #32], RSI	# spill
035     movl    R9, [RSI + #20 (8-bit)]	# compressed ptr ! Field: java/lang/AbstractStringBuilder.value
039     movl    RBP, [R12 + R9 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
03e     NullCheck R9

03e     B2: #	out( B9 B3 ) &lt;- in( B1 )  Freq: 0.999999
03e     movsbl  RCX, [RSI + #16 (8-bit)]	# byte ! Field: java/lang/AbstractStringBuilder.coder
042     movl    RDX, [RSI + #12 (8-bit)]	# int ! Field: java/lang/AbstractStringBuilder.count
045     movl    R10, RBP	# spill
048     sarl    R10, RCX
04b     movl    R8, RDX	# spill
04e     subl    R8, R10	# int
051     incl    R8	# int
054     testl   R8, R8
057     jg,s   B9  P=0.072289 C=7802.000000

059     B3: #	out( B40 B4 ) &lt;- in( B28 B2 )  Freq: 0.999998
059     testl   RCX, RCX
05b     jne     B40  P=0.000000 C=14548.000000

061     B4: #	out( B41 B5 ) &lt;- in( B3 )  Freq: 0.999997
061     movl    RBP, [rsp + #8]	# spill
065     shrl    RBP, #8
068     testl   RBP, RBP
06a     jne     B41  P=0.000000 C=20635.000000

070     B5: #	out( B47 B6 ) &lt;- in( B4 )  Freq: 0.999997
070     movq    R10, [rsp + #32]	# spill
075     movl    R10, [R10 + #20 (8-bit)]	# compressed ptr ! Field: java/lang/AbstractStringBuilder.value
079     movq    R11, [rsp + #32]	# spill
07e     movl    R8, [R11 + #12 (8-bit)]	# int ! Field: java/lang/AbstractStringBuilder.count
082     movsbl  RBP, [RSP + #8 (32-bit)]	# int -&gt; byte
087     movl    R11, R8	# spill
08a     incl    R11	# int
08d     movq    R9, [rsp + #32]	# spill
092     movl    [R9 + #12 (8-bit)], R11	# int ! Field: java/lang/AbstractStringBuilder.count
096     movl    R11, [R12 + R10 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
09b     NullCheck R10

09b     B6: #	out( B39 B7 ) &lt;- in( B5 )  Freq: 0.999996
09b     cmpl    R8, R11	# unsigned
09e     jnb,u   B39  P=0.000001 C=-1.000000

0a4     B7: #	out( N604 ) &lt;- in( B6 )  Freq: 0.999995
0a4     decode_heap_oop_not_null R10,R10
0a8     movl    R11, [rsp + #8]	# spill
0ad     movb    [R10 + #16 + R8], R11	# byte
0b2     movq    RAX, R9	# spill
0b5     vzeroupper
	addq    rsp, 64	# Destroy frame
	popq    rbp
	movq    rscratch1, poll_offset[r15_thread] #polling_page_address
	testl   rax, [rscratch1]	# Safepoint: poll for GC

0c7     ret

0c8     B8: #	out( B11 ) &lt;- in( B9 )  Freq: 0.0361445
0c8     movl    R10, RDX	# spill
0cb     jmp,s   B11

0cd     B9: #	out( B8 B10 ) &lt;- in( B2 )  Freq: 0.0722891
0cd     sall    R10, #1
0d0     movl    R11, R10	# spill
0d3     subl    R11, RDX	# int
0d6     incl    RDX	# int
0d8     incl    R11	# int
0db     testl   R11, R11
0de     jl,s   B8  P=0.500000 C=-1.000000

0e0     B10: #	out( B11 ) &lt;- in( B9 )  Freq: 0.0361445
0e0     addl    R10, #2	# int

0e4     B11: #	out( B13 B12 ) &lt;- in( B8 B10 )  Freq: 0.0722891
0e4     testl   R10, R10
0e7     jle,s   B13  P=0.500000 C=-1.000000

0e9     B12: #	out( B15 B13 ) &lt;- in( B11 )  Freq: 0.0361445
0e9     movl    R8, #2147483639	# int
0ef     sarl    R8, RCX
0f2     subl    R8, R10	# int
0f5     testl   R8, R8
0f8     jge,s   B15  P=0.500000 C=-1.000000

0fa     B13: #	out( B49 B14 ) &lt;- in( B12 B11 )  Freq: 0.0542168
0fa     movl    [rsp + #12], R9	# spill
0ff     movq    [rsp + #16], RSI	# spill
104     movq    [rsp + #24], RSI	# spill
        nop 	# 3 bytes pad for loops and calls
10c     call,static  java.lang.AbstractStringBuilder::hugeCapacity
        # java.lang.AbstractStringBuilder::newCapacity @ bci:47  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_
        # java.lang.AbstractStringBuilder::ensureCapacityInternal @ bci:24  L[0]=rsp + #24 L[1]=_ L[2]=_ STK[0]=rsp + #16 STK[1]=rsp + #12
        # java.lang.AbstractStringBuilder::append @ bci:7  L[0]=rsp + #16 L[1]=rsp + #8
        # OopMap {[12]=NarrowOop [16]=Oop [24]=Oop [32]=Oop off=276/0x114}

114     B14: #	out( B15 ) &lt;- in( B13 )  Freq: 0.0542157
        # Block is sole successor of call
114     movq    R11, [rsp + #16]	# spill
119     movsbl  RCX, [R11 + #16 (8-bit)]	# byte ! Field: java/lang/AbstractStringBuilder.coder
11e     movl    R10, RAX	# spill
121     movl    R9, [rsp + #12]	# spill

126     B15: #	out( B42 B16 ) &lt;- in( B14 B12 )  Freq: 0.072288
126     sall    R10, RCX
129     cmpl    R10, #1048576	# unsigned
130     jnbe,u   B42  P=0.000001 C=-1.000000

136     B16: #	out( B17 ) &lt;- in( B15 )  Freq: 0.0722879
136     movslq  R8, R10	# i2l

139     B17: #	out( B44 B18 ) &lt;- in( B16 B42 )  Freq: 0.072288
139     movl    RDI, R10	# spill
13c     # castII of RDI
13c     cmpl    RBP, RDI
13e     movl    R11, RDI	# spill
141     cmovll R11, RBP	# signed, int
145     cmpl    RBP, R11	# unsigned
148     jb,u   B44  P=0.000001 C=-1.000000

14e     B18: #	out( B44 B19 ) &lt;- in( B17 )  Freq: 0.0722879
14e     cmpl    RDI, R11	# unsigned
151     jb,u   B44  P=0.000001 C=-1.000000

157     B19: #	out( B37 B20 ) &lt;- in( B18 )  Freq: 0.0722879
157     addq    R8, #23	# long
15b     movq    RCX, R8	# spill
15e     andq    RCX, #-8	# long
162     cmpl    R10, #1048576	# unsigned
169     jnbe,u   B37  P=0.000001 C=-1.000000

16f     B20: #	out( B37 B21 ) &lt;- in( B19 )  Freq: 0.0722878
16f     # TLS is in R15
16f     movq    RBP, [R15 + #320 (32-bit)]	# ptr
176     movq    RBX, RBP	# spill
179     addq    RBX, RCX	# ptr
17c     # TLS is in R15
17c     cmpq    RBX, [R15 + #336 (32-bit)]	# raw ptr
183     jnb,u   B37  P=0.000100 C=-1.000000

189     B21: #	out( B22 ) &lt;- in( B20 )  Freq: 0.0722806
189     # TLS is in R15
189     movq    [R15 + #320 (32-bit)], RBX	# ptr
190     PREFETCHW [RBX + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
197     movq    [RBP], #1	# long
19f     PREFETCHW [RBX + #256 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
1a6     movl    [RBP + #8 (8-bit)], narrowklass: precise klass [B: 0x000000012728fa90:Constant:exact *	# compressed klass ptr
1ad     movl    [RBP + #12 (8-bit)], R10	# int
1b1     PREFETCHW [RBX + #320 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
1b8     PREFETCHW [RBX + #384 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified

1bf     B22: #	out( B43 B23 ) &lt;- in( B38 B21 )  Freq: 0.0722879
1bf     
1bf     # checkcastPP of RBP
1bf     movq    RSI, RBP	# spill
1c2     addq    RSI, #16	# ptr
1c6     shrq    R8, #3
1ca     encode_heap_oop_not_null RBX,RBP
213     testl   R11, R11
216     je     B43  P=0.000001 C=-1.000000

21c     B23: #	out( B29 B24 ) &lt;- in( B22 )  Freq: 0.0722878
21c     decode_heap_oop_not_null RDI,R9
220     leaq    R9, [R12 + R9 &lt;&lt; 3 + #16] (compressed oop addressing)	# ptr compressedoopoff32
225     cmpl    R11, R10
228     jl,s   B29  P=0.001000 C=-1.000000

22a     B24: #	out( B25 ) &lt;- in( B23 )  Freq: 0.0722155
22a     addq    RCX, #-16	# long
22e     shrq    RCX, #3
232     movq    RDI, R9	# spill
235     movq    RDX, RCX	# spill
238     call_leaf_nofp,runtime  jlong_disjoint_arraycopy
        No JVM State Info
        # 

248     B25: #	out( B30 B26 ) &lt;- in( B29 B24 B43 )  Freq: 0.0722879
248     MEMBAR-storestore (empty encoding)
248     # TLS is in R15
248     cmpb    [R15 + #48 (8-bit)], #0
24d     jne     B30  P=0.001000 C=-1.000000

253     B26: #	out( B28 B27 ) &lt;- in( B45 B32 B30 B25 )  Freq: 0.0722879
253     movq    R10, [rsp + #32]	# spill
258     movl    [R10 + #20 (8-bit)], RBX	# compressed ptr ! Field: java/lang/AbstractStringBuilder.value
25c     movq    R10, RBP	# ptr -&gt; long
25f     movq    R11, [rsp + #32]	# spill
264     movq    R11, R11	# ptr -&gt; long
264     xorq    R10, R11	# long
267     shrq    R10, #20
26b     testq   R10, R10
26e     je,s   B28  P=0.001000 C=-1.000000

270     B27: #	out( B33 B28 ) &lt;- in( B26 )  Freq: 0.0722156
270     shrq    R11, #9
274     movq    RDI, 0x0000000117891000	# ptr
27e     addq    RDI, R11	# ptr
281     cmpb    [RDI], #8
284     jne     B33  P=0.001000 C=-1.000000

28a     B28: #	out( B3 ) &lt;- in( B35 B36 B33 B27 B26 )  Freq: 0.0722879
28a     movq    R10, [rsp + #32]	# spill
28f     movsbl  RCX, [R10 + #16 (8-bit)]	# byte ! Field: java/lang/AbstractStringBuilder.coder
294     jmp     B3

299     B29: #	out( B25 ) &lt;- in( B23 )  Freq: 7.22878e-05
299     movslq  RDX, R11	# i2l
29c     movq    R10, RDX	# spill
29f     addq    R10, #16	# long
2a3     movq    R11, R10	# spill
2a6     andq    R11, #-8	# long
2aa     movq    RDI, RBP	# spill
2ad     addq    RDI, R11	# ptr
2b0     shrq    R10, #3
2b4     subq    R8, R10	# long
2b7     movq    RCX, R8	# spill
2ba     xorq    rax, rax	# ClearArray:
	cmp     InitArrayShortSize,rcx
	jg      LARGE
	dec     rcx
	js      DONE	# Zero length
	mov     rax,(rdi,rcx,8)	# LOOP
	dec     rcx
	jge     LOOP
	jmp     DONE
	# LARGE:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
	# DONE
2da     movq    RDI, R9	# spill
2dd     call_leaf_nofp,runtime  arrayof_jbyte_disjoint_arraycopy
        No JVM State Info
        # 
2ed     jmp     B25

2f2     B30: #	out( B26 B31 ) &lt;- in( B25 )  Freq: 7.22869e-05
2f2     movq    R10, [rsp + #32]	# spill
2f7     movl    R11, [R10 + #20 (8-bit)]	# compressed ptr ! Field: java/lang/AbstractStringBuilder.value
2fb     testl   R11, R11	# compressed ptr
2fe     je     B26  P=0.500000 C=-1.000000

304     B31: #	out( B45 B32 ) &lt;- in( B30 )  Freq: 3.61435e-05
304     # TLS is in R15
304     movq    R10, [R15 + #56 (8-bit)]	# long
308     decode_heap_oop RDI,R11
334     testq   R10, R10
337     je     B45  P=0.001000 C=-1.000000

33d     B32: #	out( B26 ) &lt;- in( B31 )  Freq: 3.61073e-05
33d     # TLS is in R15
33d     movq    R11, [R15 + #72 (8-bit)]	# ptr
341     movq    [R11 + #-8 + R10], RDI	# ptr
346     addq    R10, #-8	# long
34a     # TLS is in R15
34a     movq    [R15 + #56 (8-bit)], R10	# long
34e     jmp     B26

353     B33: #	out( B28 B34 ) &lt;- in( B27 )  Freq: 7.22156e-05
353     # TLS is in R15
353     movq    R10, [R15 + #120 (8-bit)]	# ptr
357     # TLS is in R15
357     movq    R11, [R15 + #104 (8-bit)]	# long
35b     lock addl [rsp + #0], 0	! membar_volatile
361     cmpb    [RDI], #0
364     je     B28  P=0.500000 C=-1.000000

36a     B34: #	out( B36 B35 ) &lt;- in( B33 )  Freq: 3.61078e-05
36a     movb    [RDI], #0	# CMS card-mark byte 0
36d     testq   R11, R11
370     jne,s   B36  P=0.500000 C=-1.000000

372     B35: #	out( B28 ) &lt;- in( B34 )  Freq: 1.80539e-05
372     # TLS is in R15
372     movq    RSI, R15	# spill
375     call_leaf,runtime  write_ref_field_post_entry
        No JVM State Info
        # 
385     jmp     B28

38a     B36: #	out( B28 ) &lt;- in( B34 )  Freq: 1.80539e-05
38a     movq    [R10 + #-8 + R11], RDI	# ptr
38f     addq    R11, #-8	# long
393     # TLS is in R15
393     movq    [R15 + #104 (8-bit)], R11	# long
397     jmp     B28

39c     B37: #	out( B48 B38 ) &lt;- in( B19 B20 )  Freq: 7.30323e-06
39c     movl    [rsp + #40], R11	# spill
3a1     movl    [rsp + #12], R9	# spill
3a6     movq    [rsp + #24], RCX	# spill
3ab     movq    [rsp + #16], R8	# spill
3b0     movl    [rsp + #0], R10	# spill
3b4     movq    RBP, [rsp + #32]	# spill
3b9     movq    RSI, precise klass [B: 0x000000012728fa90:Constant:exact *	# ptr
3c3     movl    RDX, R10	# spill
        nop 	# 2 bytes pad for loops and calls
3c8     call,static  wrapper for: _new_array_nozero_Java
        # java.util.Arrays::copyOf @ bci:1  L[0]=rsp + #12 L[1]=rsp + #0 L[2]=_
        # java.lang.AbstractStringBuilder::ensureCapacityInternal @ bci:32  L[0]=_ L[1]=_ L[2]=_ STK[0]=RBP
        # java.lang.AbstractStringBuilder::append @ bci:7  L[0]=RBP L[1]=rsp + #8
        # OopMap {rbp=Oop [12]=NarrowOop [32]=Oop off=976/0x3d0}

3d0     B38: #	out( B22 ) &lt;- in( B37 )  Freq: 7.30308e-06
        # Block is sole successor of call
3d0     movl    R10, [rsp + #0]	# spill
3d4     movq    R8, [rsp + #16]	# spill
3d9     movq    RCX, [rsp + #24]	# spill
3de     movq    RBP, RAX	# spill
3e1     movl    R9, [rsp + #12]	# spill
3e6     movl    R11, [rsp + #40]	# spill
3eb     jmp     B22

3f0     B39: #	out( N604 ) &lt;- in( B6 )  Freq: 1.01327e-06
3f0     movl    RSI, #-28	# int
3f5     movl    [rsp + #8], R10	# spill
3fa     movl    [rsp + #12], R8	# spill
        nop 	# 1 bytes pad for loops and calls
400     call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos; debug_id=&apos;0&apos;)
        # java.lang.AbstractStringBuilder::append @ bci:41  L[0]=rsp + #32 L[1]=_ STK[0]=rsp + #8 STK[1]=rsp + #12 STK[2]=RBP
        # OopMap {[8]=NarrowOop [32]=Oop off=1032/0x408}
408     ud2	# ShouldNotReachHere

41c     B40: #	out( N604 ) &lt;- in( B3 )  Freq: 4.99999e-07
41c     movl    RSI, #-187	# int
421     movq    RBP, [rsp + #32]	# spill
426     movl    [rsp + #4], RCX	# spill
        nop 	# 2 bytes pad for loops and calls
42c     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.AbstractStringBuilder::isLatin1 @ bci:10  L[0]=_ STK[0]=rsp + #4
        # java.lang.AbstractStringBuilder::append @ bci:11  L[0]=RBP L[1]=rsp + #8
        # OopMap {rbp=Oop off=1076/0x434}
434     ud2	# ShouldNotReachHere

448     B41: #	out( N604 ) &lt;- in( B4 )  Freq: 4.99999e-07
448     movl    RSI, #-187	# int
        nop 	# 3 bytes pad for loops and calls
450     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.StringLatin1::canEncode @ bci:4  L[0]=_ STK[0]=RBP
        # java.lang.AbstractStringBuilder::append @ bci:18  L[0]=rsp + #32 L[1]=rsp + #8
        # OopMap {[32]=Oop off=1112/0x458}
458     ud2	# ShouldNotReachHere

46c     B42: #	out( B17 ) &lt;- in( B15 )  Freq: 7.32479e-08
46c     movslq  R8, R10	# i2l
46f     jmp     B17

474     B43: #	out( B25 ) &lt;- in( B22 )  Freq: 7.32478e-08
474     addq    R8, #-2	# long
478     movq    RCX, R8	# spill
47b     movq    RDI, RSI	# spill
47e     xorq    rax, rax	# ClearArray:
	cmp     InitArrayShortSize,rcx
	jg      LARGE
	dec     rcx
	js      DONE	# Zero length
	mov     rax,(rdi,rcx,8)	# LOOP
	dec     rcx
	jge     LOOP
	jmp     DONE
	# LARGE:
	shlq    rcx,3	# Convert doublewords to bytes
	rep     stosb	# Store rax to *rdi++ while rcx--
	# DONE
49e     
49e     jmp     B25

4a3     B44: #	out( N604 ) &lt;- in( B17 B18 )  Freq: 1.44576e-07
4a3     movl    RSI, #-52	# int
4a8     movq    RBP, [rsp + #32]	# spill
4ad     movl    R11, [rsp + #8]	# spill
4b2     movl    [rsp + #0], R11	# spill
4b6     movl    [rsp + #4], R9	# spill
4bb     movl    [rsp + #20], R10	# spill
4c0     call,static  wrapper for: uncommon_trap(reason=&apos;intrinsic_or_type_checked_inlining&apos; action=&apos;make_not_entrant&apos; debug_id=&apos;0&apos;)
        # java.util.Arrays::copyOf @ bci:1  L[0]=rsp + #4 L[1]=rsp + #20 L[2]=_ STK[0]=rsp + #20
        # java.lang.AbstractStringBuilder::ensureCapacityInternal @ bci:32  L[0]=_ L[1]=_ L[2]=_ STK[0]=RBP
        # java.lang.AbstractStringBuilder::append @ bci:7  L[0]=RBP L[1]=rsp + #0
        # OopMap {rbp=Oop [4]=NarrowOop off=1224/0x4c8}
4c8     ud2	# ShouldNotReachHere

4dc     B45: #	out( B26 ) &lt;- in( B31 )  Freq: 3.6143e-08
4dc     # TLS is in R15
4dc     movq    RSI, R15	# spill
4df     call_leaf,runtime  write_ref_field_pre_entry
        No JVM State Info
        # 
4ef     jmp     B26

4f4     B46: #	out( N604 ) &lt;- in( B1 )  Freq: 1.01328e-06
4f4     movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
4fc     call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.AbstractStringBuilder::ensureCapacityInternal @ bci:4  L[0]=_ L[1]=_ L[2]=_ STK[0]=#NULL
        # java.lang.AbstractStringBuilder::append @ bci:7  L[0]=_ L[1]=_
        # OopMap {off=1284/0x504}
504     ud2	# ShouldNotReachHere

518     B47: #	out( N604 ) &lt;- in( B5 )  Freq: 1.01328e-06
518     movl    RSI, #-10	# int
51d     movl    [rsp + #0], R8	# spill
        nop 	# 3 bytes pad for loops and calls
524     call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.AbstractStringBuilder::append @ bci:41  L[0]=_ L[1]=_ STK[0]=#NULL STK[1]=rsp + #0 STK[2]=RBP
        # OopMap {off=1324/0x52c}
52c     ud2	# ShouldNotReachHere

540     B48: #	out( B50 ) &lt;- in( B37 )  Freq: 7.30323e-11
540     # exception oop is in rax; no code emitted
540     movq    RSI, RAX	# spill
543     jmp,s   B50

545     B49: #	out( B50 ) &lt;- in( B13 )  Freq: 5.42168e-07
545     # exception oop is in rax; no code emitted
545     movq    RSI, RAX	# spill

548     B50: #	out( N604 ) &lt;- in( B49 B48 )  Freq: 5.42241e-07
548     vzeroupper
	addq    rsp, 64	# Destroy frame
	popq    rbp

550     jmp     rethrow_stub

--------------------------------------------------------------------------------
</opto_assembly>
<writer thread='24067'/>
                                  @ 9   java.util.Arrays::copyOfRange (64 bytes)   callee is too large
<writer thread='38659'/>
   1141   59       3       java.lang.AbstractStringBuilder::append (77 bytes)   made not entrant
                              @ 7   java.lang.AbstractStringBuilder::ensureCapacityInternal (39 bytes)   inline (hot)
                                @ 24   java.lang.AbstractStringBuilder::newCapacity (55 bytes)   inline (hot)
                                  @ 47   java.lang.AbstractStringBuilder::hugeCapacity (41 bytes)   too big
                                @ 32   java.util.Arrays::copyOf (19 bytes)   inline (hot)
                                  @ 11   java.lang.Math::min (11 bytes)   (intrinsic)
                                  @ 14   java.lang.System::arraycopy (0 bytes)   (intrinsic)
                              @ 11   java.lang.AbstractStringBuilder::isLatin1 (19 bytes)   inline (hot)
                              @ 18   java.lang.StringLatin1::canEncode (13 bytes)   inline (hot)
<writer thread='24067'/>
                                  @ 13   java.lang.String::&lt;init&gt; (15 bytes)
<writer thread='42499'/>
   1141  422       3       java.lang.String::startsWith (138 bytes)
<writer thread='40963'/>
                                    @ 5   java.lang.String::
<writer thread='24067'/>
        
<writer thread='43011'/>
   1142  451       4       java.util.HashMap::getNode (148 bytes)
<writer thread='40963'/>
checkIndex (48 bytes)   callee is too large
<writer thread='42499'/>
             
<writer thread='40963'/>
             
<writer thread='42499'/>
      
<writer thread='24067'/>
     
<writer thread='40963'/>
      
<writer thread='42499'/>
  
<writer thread='40195'/>
                                  @ 25   java.lang.SecurityManager::checkPermission (5 bytes)   not inlineable
<writer thread='40963'/>
               @ 7   java.lang.StringUTF16::getChar (60 bytes)   intrinsic
<writer thread='42499'/>
         
<writer thread='24067'/>
                       @ 1  
<writer thread='42499'/>
@ 6   java.lang.String::length (11 bytes)
<writer thread='40195'/>
             
<writer thread='40963'/>
                              @ 58  
<writer thread='24067'/>
 java.lang.Object::
<writer thread='40195'/>
                 @ 43  
<writer thread='37379'/>
<writer thread='24067'/>
&lt;init&gt; (1 bytes)
<writer thread='40963'/>
 java.lang.String::charAt
<writer thread='40195'/>
 java.lang.Class::getClassLoader (28 bytes)
<writer thread='40963'/>
 (25 bytes)
<writer thread='42499'/>
        
<writer thread='40195'/>
   force inline by annotation
<writer thread='40963'/>

<writer thread='42499'/>
                        @ 6   java.lang.String::coder (15 bytes)
<writer thread='25091'/>
   1142  440       4       java.lang.String::coder (15 bytes)
<writer thread='24067'/>
                                @ 31   java.lang.StringUTF16::newString (50 bytes)
<writer thread='42499'/>
        
<writer thread='40195'/>
        
<writer thread='24067'/>
   callee is too large
<writer thread='42499'/>
                      @ 10   java.lang.String::length (11 bytes)
                                @ 6   java.lang.String::coder (15 bytes)
<writer thread='40195'/>
                        @ 1   java.lang.Class::getClassLoader0 (5 bytes)
                                @ 11   java.lang.System::getSecurityManager (12 bytes)
<writer thread='42499'/>
                              @ 39   java.lang.String::coder (15 bytes)
<writer thread='40195'/>
                                  @ 0   java.lang.System::allowSecurityManager (13 bytes)
<writer thread='40963'/>
                                @ 1   java.lang.String::isLatin1 (19 bytes)
<writer thread='24067'/>
                              @ 227   java.lang.String::&lt;init&gt; (14 bytes)
<writer thread='25091'/>

============================= C2-compiled nmethod ==============================
<opto_assembly compile_id='440'>
----------------------- MetaData before Compile_id = 440 ------------------------
{method}
 - this oop:          0x00000001269a5c78
 - method holder:     &apos;java/lang/String&apos;
 - constants:         0x000000012699b360 constant pool [1059]/operands[28] {0x000000012699b360} for &apos;java/lang/String&apos; cache=0x0000000126aba220
 - access:            0x81000000  
 - name:              &apos;coder&apos;
 - signature:         &apos;()B&apos;
 - max stack:         2
 - max locals:        1
 - size of params:    1
 - method size:       13
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x000000010c0a1de0
 - adapters:          AHE@0x00007f99308e1660: 0xb0000000 i2c: 0x000000010c0e9ee0 c2i: 0x000000010c0e9fc3 c2iUV: 0x000000010c0e9f8a c2iNCI: 0x000000010c0ea000
 - compiled entry     0x000000010c7d4160
 - code size:         15
 - code start:        0x00000001269a5c50
 - code end (excl):   0x00000001269a5c5f
 - method data:       0x0000000126d31d28
 - checked ex length: 0
 - linenumber start:  0x00000001269a5c5f
 - localvar length:   1
 - localvar start:    0x00000001269a5c6a
 - compiled code: nmethod   1143    7       3       java.lang.String::coder (15 bytes)

------------------------ OptoAssembly for Compile_id = 440 -----------------------
#
#  byte ( java/lang/String:NotNull:exact * )
#
#r018 rsi:rsi   : parm 0: java/lang/String:NotNull:exact *
# -- Old rsp -- Framesize: 32 --
#r583 rsp+28: in_preserve
#r582 rsp+24: return address
#r581 rsp+20: in_preserve
#r580 rsp+16: saved fp register
#r579 rsp+12: pad2, stack alignment
#r578 rsp+ 8: pad2, stack alignment
#r577 rsp+ 4: Fixed slot 1
#r576 rsp+ 0: Fixed slot 0
#
000     N16: #	out( B1 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( N16 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (96 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

02c     movsbl  RAX, [RSI + #20 (8-bit)]	# byte ! Field: java/lang/String.coder (constant)
030     addq    rsp, 16	# Destroy frame
	popq    rbp
	movq    rscratch1, poll_offset[r15_thread] #polling_page_address
	testl   rax, [rscratch1]	# Safepoint: poll for GC

03f     ret

--------------------------------------------------------------------------------
</opto_assembly>
<writer thread='24067'/>
                                @ 7   java.lang.String::rangeCheck (9 bytes)
<writer thread='25091'/>
   1144    7       3       java.lang.String::coder (15 bytes)   made not entrant
<writer thread='42499'/>
                              @ 47   java.lang.String::coder (15 bytes)
<writer thread='40963'/>
                                
<writer thread='40195'/>
        
<writer thread='38659'/>
   1144  454       4       java.util.stream.MatchOps$1MatchSink::accept (44 bytes)
<writer thread='42499'/>
                              @ 116   java.lang.StringUTF16::getChar (60 bytes)   intrinsic
<writer thread='24067'/>
        
<writer thread='40195'/>
           
<writer thread='24067'/>
     
<writer thread='40963'/>
@ 12   java.lang.StringLatin1::
<writer thread='24067'/>
      
<writer thread='40963'/>
charAt
<writer thread='40195'/>
             @ 20  
<writer thread='40963'/>
 (28 bytes)
<writer thread='24067'/>
       
<writer thread='40195'/>
 jdk.internal.reflect.Reflection::getCallerClass (0 bytes)   native method
<writer thread='24067'/>
        @ 4   java.lang.String::checkBoundsOffCount (64 bytes)   callee is too large
<writer thread='40195'/>
                                @ 23   java.lang.ClassLoader::checkClassLoaderPermission (29 bytes)
                                  @ 0   java.lang.System::getSecurityManager (12 bytes)
<writer thread='40963'/>
                                  
<writer thread='40195'/>
             
<writer thread='40963'/>
@ 15  
<writer thread='36611'/>
   1145  453       4       java.lang.String::checkBoundsOffCount (64 bytes)
<writer thread='40195'/>
                   
<writer thread='24067'/>
        
<writer thread='40963'/>
java/lang/StringIndexOutOfBoundsException
<writer thread='25091'/>
<writer thread='40195'/>
    @ 0   java.lang.System::
<writer thread='24067'/>
                        @ 10   java.lang.String::&lt;init&gt; (74 bytes)   callee is too large
<writer thread='40195'/>
allowSecurityManager
<writer thread='40963'/>
::&lt;init&gt; (not loaded)   not inlineable
<writer thread='40195'/>
 (13 bytes)
<writer thread='24067'/>
                              @ 247   java.lang.StringBuilder::append (10 bytes)
<writer thread='40963'/>
                                @ 21   java.lang.StringUTF16::charAt (11 bytes)
<writer thread='24067'/>
                                @ 4   java.lang.AbstractStringBuilder::append
<writer thread='40963'/>
                                  @ 2   java.lang.StringUTF16::
<writer thread='24067'/>
 (33 bytes)
<writer thread='37379'/>
   1147  468       4       java.lang.String::&lt;init&gt; (14 bytes)
<writer thread='24067'/>
   callee is too large
                              @ 252   java.lang.StringBuilder::toString (35 bytes)
<writer thread='40195'/>
             
<writer thread='36611'/>

<writer thread='40195'/>
                     @ 9  
<writer thread='40963'/>
checkIndex (9 bytes)
<writer thread='36611'/>
============================= C2-compiled nmethod ==============================
<opto_assembly compile_id='453'>
----------------------- MetaData before Compile_id = 453 ------------------------
{method}
 - this oop:          0x00000001269a60f8
 - method holder:     &apos;java/lang/String&apos;
 - constants:         0x000000012699b360 constant pool [1059]/operands[28] {0x000000012699b360} for &apos;java/lang/String&apos; cache=0x0000000126aba220
 - access:            0x81000008  static 
 - name:              &apos;checkBoundsOffCount&apos;
 - signature:         &apos;(III)V&apos;
 - max stack:         5
 - max locals:        3
 - size of params:    3
 - method size:       13
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x000000010c0a1de0
 - adapters:          AHE@0x00007f99308e1a70: 0xaaa00000 i2c: 0x000000010c0e7160 c2i: 0x000000010c0e7248 c2iUV: 0x000000010c0e720f c2iNCI: 0x000000010c0e7285
 - compiled entry     0x000000010c80d720
 - code size:         64
 - code start:        0x00000001269a6088
 - code end (excl):   0x00000001269a60c8
 - method data:       0x0000000126e93150
 - checked ex length: 0
 - linenumber start:  0x00000001269a60c8
 - localvar length:   3
 - localvar start:    0x00000001269a60d2
 - compiled code: nmethod   1148  144       3       java.lang.String::checkBoundsOffCount (64 bytes)

------------------------ OptoAssembly for Compile_id = 453 -----------------------
#
#  void ( int, int, int )
#
#r018 rsi   : parm 0: int
#r016 rdx   : parm 1: int
#r010 rcx   : parm 2: int
# -- Old rsp -- Framesize: 48 --
#r583 rsp+44: in_preserve
#r582 rsp+40: return address
#r581 rsp+36: in_preserve
#r580 rsp+32: saved fp register
#r579 rsp+28: pad2, stack alignment
#r578 rsp+24: pad2, stack alignment
#r577 rsp+20: Fixed slot 1
#r576 rsp+16: Fixed slot 0
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N1: #	out( B1 ) &lt;- in( B5 B6 B7 B4 )  Freq: 1

000     B1: #	out( B5 B2 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
000     # stack bang (152 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #32	# Create frame

00c     testl   RSI, RSI
00e     jl,s   B5  P=0.000000 C=5470.000000

010     B2: #	out( B6 B3 ) &lt;- in( B1 )  Freq: 1
010     testl   RDX, RDX
012     jl,s   B6  P=0.000000 C=5470.000000

014     B3: #	out( B7 B4 ) &lt;- in( B2 )  Freq: 0.999999
014     movl    RBP, RCX	# spill
016     subl    RBP, RDX	# int
018     cmpl    RSI, RBP
01a     jg,s   B7  P=0.000000 C=5470.000000

01c     B4: #	out( N1 ) &lt;- in( B3 )  Freq: 0.999999
01c     addq    rsp, 32	# Destroy frame
	popq    rbp
	movq    rscratch1, poll_offset[r15_thread] #polling_page_address
	testl   rax, [rscratch1]	# Safepoint: poll for GC

02b     ret

02c     B5: #	out( N1 ) &lt;- in( B1 )  Freq: 5e-07
02c     movl    [rsp + #0], RDX	# spill
02f     movl    [rsp + #4], RCX	# spill
033     movl    [rsp + #8], RSI	# spill
037     movl    RSI, #-187	# int
        nop 	# 3 bytes pad for loops and calls
03f     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.String::checkBoundsOffCount @ bci:1  L[0]=rsp + #8 L[1]=rsp + #0 L[2]=rsp + #4 STK[0]=rsp + #8
        # OopMap {off=68/0x44}
044     ud2	# ShouldNotReachHere

058     B6: #	out( N1 ) &lt;- in( B2 )  Freq: 5e-07
058     movl    RBP, RSI	# spill
05a     movl    [rsp + #4], RCX	# spill
05e     movl    [rsp + #8], RDX	# spill
062     movl    RSI, #-187	# int
067     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.String::checkBoundsOffCount @ bci:5  L[0]=RBP L[1]=rsp + #8 L[2]=rsp + #4 STK[0]=rsp + #8
        # OopMap {off=108/0x6c}
06c     ud2	# ShouldNotReachHere

080     B7: #	out( N1 ) &lt;- in( B3 )  Freq: 4.76837e-07
080     movl    [rsp + #4], RDX	# spill
084     movl    [rsp + #8], RCX	# spill
088     movl    [rsp + #12], RSI	# spill
08c     movl    RSI, #-187	# int
        nop 	# 2 bytes pad for loops and calls
093     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.String::checkBoundsOffCount @ bci:12  L[0]=rsp + #12 L[1]=rsp + #4 L[2]=rsp + #8 STK[0]=rsp + #12 STK[1]=RBP
        # OopMap {off=152/0x98}
098     ud2	# ShouldNotReachHere

--------------------------------------------------------------------------------
</opto_assembly>
<writer thread='40195'/>
 java.lang.ClassLoader::getClassLoader (11 bytes)
<writer thread='40963'/>
                                    @ 2   java.lang.StringUTF16::length (5 bytes)
                                    @ 5   java.lang.String::checkIndex (48 bytes)   callee is too large
<writer thread='38147'/>

============================= C2-compiled nmethod ==============================
<opto_assembly compile_id='399'>
----------------------- MetaData before Compile_id = 399 ------------------------
{method}
 - this oop:          0x0000000126af3638
 - method holder:     &apos;java/util/HashMap&apos;
 - constants:         0x0000000126af0d88 constant pool [593] {0x0000000126af0d88} for &apos;java/util/HashMap&apos; cache=0x0000000126af6970
 - access:            0xc1000010  final 
 - name:              &apos;putVal&apos;
 - signature:         &apos;(ILjava/lang/Object;Ljava/lang/Object;ZZ)Ljava/lang/Object;&apos;
 - max stack:         8
 - max locals:        13
 - size of params:    6
 - method size:       13
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x000000010c0a1de0
 - adapters:          AHE@0x00007f992d825590: 0xbabbaa00 i2c: 0x000000010c0d3de0 c2i: 0x000000010c0d3ed5 c2iUV: 0x000000010c0d3e9c c2iNCI: 0x000000010c0d3f12
 - compiled entry     0x000000010c0d3ed5
 - code size:         300
 - code start:        0x0000000126af3408
 - code end (excl):   0x0000000126af3534
 - method data:       0x0000000126e90bb8
 - checked ex length: 0
 - linenumber start:  0x0000000126af3534
 - localvar length:   18
 - localvar start:    0x0000000126af355c

------------------------ OptoAssembly for Compile_id = 399 -----------------------
#
#  java/lang/Object * ( java/util/HashMap:NotNull *, int, java/lang/Object *, java/lang/Object *, int, int )
#
#r018 rsi:rsi   : parm 0: java/util/HashMap:NotNull *
#r016 rdx   : parm 1: int
#r010 rcx:rcx   : parm 2: java/lang/Object *
#r004 r8:r8   : parm 3: java/lang/Object *
#r006 r9   : parm 4: int
#r014 rdi   : parm 5: int
# -- Old rsp -- Framesize: 144 --
#r583 rsp+140: in_preserve
#r582 rsp+136: return address
#r581 rsp+132: in_preserve
#r580 rsp+128: saved fp register
#r579 rsp+124: pad2, stack alignment
#r578 rsp+120: pad2, stack alignment
#r577 rsp+116: Fixed slot 1
#r576 rsp+112: Fixed slot 0
#r611 rsp+108: spill
#r610 rsp+104: spill
#r609 rsp+100: spill
#r608 rsp+96: spill
#r607 rsp+92: spill
#r606 rsp+88: spill
#r605 rsp+84: spill
#r604 rsp+80: spill
#r603 rsp+76: spill
#r602 rsp+72: spill
#r601 rsp+68: spill
#r600 rsp+64: spill
#r599 rsp+60: spill
#r598 rsp+56: spill
#r597 rsp+52: spill
#r596 rsp+48: spill
#r595 rsp+44: spill
#r594 rsp+40: spill
#r593 rsp+36: spill
#r592 rsp+32: spill
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
0000    N1725: #	out( B1 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
0000    movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


0020    B1: #	out( B36 B2 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
0020    # stack bang (392 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #128	# Create frame

002f    movl    [rsp + #28], RDI	# spill
0033    movl    [rsp + #24], R9	# spill
0038    movq    [rsp + #64], R8	# spill
003d    movq    [rsp + #8], RCX	# spill
0042    movl    [rsp + #48], RDX	# spill
0046    movq    [rsp + #40], RSI	# spill
004b    movl    R11, [RSI + #36 (8-bit)]	# compressed ptr ! Field: java/util/HashMap.table
004f    testl   R11, R11	# compressed ptr
0052    je     B36  P=0.152930 C=23841.000000

0058    B2: #	out( B101 B3 ) &lt;- in( B1 )  Freq: 0.84707
0058    movl    R10, [R12 + R11 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
005d    testl   R10, R10	# unsigned
0060    jbe,u   B101  P=0.000000 C=20195.000000

0066    B3: #	out( B4 ) &lt;- in( B2 )  Freq: 0.84707
0066    decode_heap_oop_not_null R11,R11
006a    movq    [rsp + #80], R11	# spill

006f    B4: #	out( B99 B5 ) &lt;- in( B38 B3 )  Freq: 0.999996
006f    movl    R8, R10	# spill
0072    decl    R8	# int
0075    andl    R8, [RSP + #48 (32-bit)]	# int
007a    testl   R10, R10
007d    jle     B99  P=0.000001 C=-1.000000

0083    B5: #	out( B23 B6 ) &lt;- in( B4 )  Freq: 0.999995
0083    movq    R10, [rsp + #80]	# spill
0088    leaq    R14, [R10 + #16 + R8 &lt;&lt; #2]	# ptr posidxscaleoff
008d    movq    R10, [rsp + #40]	# spill
0092    movl    RBP, [R10 + #8 (8-bit)]	# compressed klass ptr
0096    movl    R10, [R14]	# compressed ptr
0099    movq    R11, [rsp + #8]	# spill
009e    encode_heap_oop RBX,R11
00ca    movq    R9, [rsp + #64]	# spill
00cf    encode_heap_oop R13,R9
00fb    movl    [rsp + #0], R13	# spill
00ff    movl    R9, narrowklass: precise klass java/util/HashMap$Node: 0x00000001278ce6e0:Constant:exact *	# compressed klass ptr
0105    decode_klass_not_null RCX,R9
0112    xorl    R9, R9	# ptr
0115    testl   R10, R10	# compressed ptr
0118    je     B23  P=0.698419 C=23841.000000

011e    B6: #	out( B39 B7 ) &lt;- in( B5 )  Freq: 0.30158
011e    movl    R8, [R12 + R10 &lt;&lt; 3 + #12] (compressed oop addressing)	# int ! Field: java/util/HashMap$Node.hash
0123    decode_heap_oop_not_null R14,R10
0127    cmpl    R8, [RSP + #48 (32-bit)]
012c    je     B39  P=0.157163 C=7190.000000

0132    B7: #	out( B103 B8 ) &lt;- in( B6 )  Freq: 0.254183
0132    movl    R9, [R12 + R10 &lt;&lt; 3 + #8] (compressed oop addressing)	# compressed klass ptr
0137    cmpl    R9, narrowklass: precise klass java/util/HashMap$TreeNode: 0x00000001278d30c0:Constant:exact *	# compressed klass ptr
013e    je,u   B103  P=0.000001 C=-1.000000

0144    B8: #	out( B14 B9 ) &lt;- in( B7 )  Freq: 0.254183
0144    movl    R10, [R12 + R10 &lt;&lt; 3 + #24] (compressed oop addressing)	# compressed ptr ! Field: java/util/HashMap$Node.next
0149    testl   R10, R10	# compressed ptr
014c    je,s   B14  P=0.758197 C=7655.000000

014e    B9: #	out( B10 ) &lt;- in( B8 )  Freq: 0.061462
014e    decode_heap_oop_not_null R14,R10
0152    xorl    R10, R10	# int
0155    movq    R13, 0x0000000117891000	# ptr
015f    xorl    R8, R8	# int

0162    B10: #	out( B58 B11 ) &lt;- in( B9 B12 ) Loop( B10-B12 inner ) Freq: 0.0776389
0162    movl    RDI, [R14 + #12 (8-bit)]	# int ! Field: java/util/HashMap$Node.hash
0166    cmpl    RDI, [RSP + #48 (32-bit)]
016a    je     B58  P=0.138304 C=1851.000000

0170    B11: #	out( B13 B12 ) &lt;- in( B10 )  Freq: 0.0669012
0170    # TLS is in R15
0170    movq    RDX, [R15 + #296 (32-bit)]	# ptr
0177    incl    R10	# int
017a    movq    R9, [rsp + #40]	# spill
017f    movq    RDI, [rsp + #64]	# spill
0184    testl   rax, [RDX]	# Safepoint: poll for GC        # java.util.HashMap::putVal @ bci:219  L[0]=R9 L[1]=rsp + #48 L[2]=R11 L[3]=RDI L[4]=rsp + #24 L[5]=rsp + #28 L[6]=rsp + #80 L[7]=R14 L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=R10
        # OopMap {r11=Oop r9=Oop rbx=NarrowOop rdi=Oop r14=Oop [0]=NarrowOop [40]=Oop [64]=Oop [80]=Oop off=388/0x184}
0186    movl    R9, [R14 + #24 (8-bit)]	# compressed ptr ! Field: java/util/HashMap$Node.next
018a    testl   R9, R9	# compressed ptr
018d    je,s   B13  P=0.758197 C=1595.000000

018f    B12: #	out( B10 ) &lt;- in( B11 )  Freq: 0.0161769
018f    decode_heap_oop_not_null R14,R9
0193    jmp,s   B10

0195    B13: #	out( B15 ) &lt;- in( B11 )  Freq: 0.0507243
0195    movl    [rsp + #52], R10	# spill
019a    jmp,s   B15

019c    B14: #	out( B15 ) &lt;- in( B8 )  Freq: 0.192721
019c    movq    R13, 0x0000000117891000	# ptr
01a6    xorl    R10, R10	# int
01a9    movl    [rsp + #52], R10	# spill

01ae    B15: #	out( B104 B16 ) &lt;- in( B13 B14 )  Freq: 0.243445
01ae    cmpl    RBP, narrowklass: precise klass java/util/HashMap: 0x00000001278cdb60:Constant:exact *	# compressed klass ptr
01b4    jne,u   B104  P=0.000001 C=-1.000000

01ba    B16: #	out( B97 B17 ) &lt;- in( B15 )  Freq: 0.243445
01ba    movq    R10, [rsp + #40]	# spill
01bf    # checkcastPP of R10
01bf    movq    [rsp + #96], R10	# spill
01c4    # TLS is in R15
01c4    movq    R8, [R15 + #320 (32-bit)]	# ptr
01cb    movq    R10, R8	# spill
01ce    addq    R10, #32	# ptr
01d2    # TLS is in R15
01d2    cmpq    R10, [R15 + #336 (32-bit)]	# raw ptr
01d9    jnb,u   B97  P=0.000100 C=-1.000000

01df    B17: #	out( B18 ) &lt;- in( B16 )  Freq: 0.24342
01df    # TLS is in R15
01df    movq    [R15 + #320 (32-bit)], R10	# ptr
01e6    PREFETCHW [R10 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
01ee    movq    R10, [RCX + #184 (32-bit)]	# long
01f5    movq    [R8], R10	# long
01f8    movl    [R8 + #8 (8-bit)], narrowklass: precise klass java/util/HashMap$Node: 0x00000001278ce6e0:Constant:exact *	# compressed klass ptr
0200    movq    [R8 + #24 (8-bit)], #0	# long

0208    B18: #	out( B81 B19 ) &lt;- in( B98 B17 )  Freq: 0.243445
0208    movl    RBP, [rsp + #48]	# spill
020c    movl    [R8 + #12 (8-bit)], RBP	# int
0210    movl    [R8 + #16 (8-bit)], RBX	# compressed ptr
0214    movl    R11, [rsp + #0]	# spill
0218    movl    [R8 + #20 (8-bit)], R11	# compressed ptr
021c    
021c    # checkcastPP of R8
021c    MEMBAR-release ! (empty encoding)
021c    # TLS is in R15
021c    cmpb    [R15 + #48 (8-bit)], #0
0221    jne     B81  P=0.001000 C=-1.000000

0227    B19: #	out( B21 B20 ) &lt;- in( B105 B83 B81 B18 )  Freq: 0.243445
0227    movq    R10, R14	# ptr -&gt; long
022a    encode_heap_oop_not_null R11,R8
0273    movl    [R14 + #24 (8-bit)], R11	# compressed ptr ! Field: java/util/HashMap$Node.next
0277    movq    R11, R8	# ptr -&gt; long
027a    xorq    R11, R10	# long
027d    shrq    R11, #20
0281    testq   R11, R11
0284    je,s   B21  P=0.001000 C=-1.000000

0286    B20: #	out( B84 B21 ) &lt;- in( B19 )  Freq: 0.243201
0286    shrq    R10, #9
028a    addq    R13, R10	# ptr
028d    cmpb    [R13], #8
0292    jne     B84  P=0.001000 C=-1.000000

0298    B21: #	out( B32 B22 ) &lt;- in( B86 B87 B84 B20 B19 )  Freq: 0.243445
0298    movl    R11, [rsp + #52]	# spill
029d    cmpl    R11, #7
02a1    jl     B32  P=1.000000 C=5804.000000

02a7    B22: #	out( N1725 ) &lt;- in( B21 )  Freq: 1.16083e-07
02a7    movl    RSI, #-187	# int
02ac    movl    R10, [rsp + #24]	# spill
02b1    movl    [rsp + #16], R10	# spill
02b6    movl    R11, [rsp + #28]	# spill
02bb    movl    [rsp + #20], R11	# spill
02c0    call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:162  L[0]=rsp + #96 L[1]=RBP L[2]=_ L[3]=rsp + #64 L[4]=rsp + #16 L[5]=rsp + #20 L[6]=rsp + #80 L[7]=_ L[8]=_ L[9]=_ L[10]=#NULL L[11]=_ L[12]=_ STK[0]=rsp + #52 STK[1]=#7
        # OopMap {[64]=Oop [80]=Oop [96]=Oop off=712/0x2c8}
02c8    ud2	# ShouldNotReachHere

02dc    B23: #	out( B72 B24 ) &lt;- in( B5 )  Freq: 0.698415
02dc    cmpl    RBP, narrowklass: precise klass java/util/HashMap: 0x00000001278cdb60:Constant:exact *	# compressed klass ptr
02e2    jne,u   B72  P=0.003727 C=-1.000000

02e8    B24: #	out( B88 B25 ) &lt;- in( B23 )  Freq: 0.695813
02e8    # TLS is in R15
02e8    movq    R13, [R15 + #320 (32-bit)]	# ptr
02ef    movq    R10, R13	# spill
02f2    addq    R10, #32	# ptr
02f6    # TLS is in R15
02f6    cmpq    R10, [R15 + #336 (32-bit)]	# raw ptr
02fd    jnb,u   B88  P=0.000100 C=-1.000000

0303    B25: #	out( B26 ) &lt;- in( B24 )  Freq: 0.695743
0303    # TLS is in R15
0303    movq    [R15 + #320 (32-bit)], R10	# ptr
030a    PREFETCHW [R10 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0312    movq    R10, [RCX + #184 (32-bit)]	# long
0319    movq    [R13], R10	# long
031d    movl    [R13 + #8 (8-bit)], narrowklass: precise klass java/util/HashMap$Node: 0x00000001278ce6e0:Constant:exact *	# compressed klass ptr
0325    movq    [R13 + #24 (8-bit)], #0	# long

032d    B26: #	out( B27 ) &lt;- in( B89 B25 )  Freq: 0.695813
032d    movl    R10, [rsp + #48]	# spill
0332    movl    [R13 + #12 (8-bit)], R10	# int
0336    movl    [R13 + #16 (8-bit)], RBX	# compressed ptr
033a    movl    R10, [rsp + #0]	# spill
033e    movl    [R13 + #20 (8-bit)], R10	# compressed ptr
0342    
0342    # checkcastPP of R13
0342    MEMBAR-release ! (empty encoding)

0342    B27: #	out( B100 B28 ) &lt;- in( B26 B73 )  Freq: 0.698415
0342    movq    R10, [rsp + #80]	# spill
0347    movl    R10, [R10 + #8 (8-bit)]	# compressed klass ptr
034b    cmpl    R10, narrowklass: precise klass [Ljava/util/HashMap$Node;: 0x00000001278d1760:Constant:exact *	# compressed klass ptr
0352    jne,u   B100  P=0.000001 C=-1.000000

0358    B28: #	out( B74 B29 ) &lt;- in( B27 )  Freq: 0.698415
0358    # TLS is in R15
0358    cmpb    [R15 + #48 (8-bit)], #0
035d    jne     B74  P=0.001000 C=-1.000000

0363    B29: #	out( B32 B30 ) &lt;- in( B102 B76 B74 B28 )  Freq: 0.698415
0363    movq    R10, R14	# ptr -&gt; long
0366    encode_heap_oop R11,R13
0392    movl    [R14], R11	# compressed ptr
0395    movq    R11, R13	# ptr -&gt; long
0398    xorq    R11, R10	# long
039b    shrq    R11, #20
039f    testq   R11, R11
03a2    je,s   B32  P=0.001000 C=-1.000000

03a4    B30: #	out( B32 B31 ) &lt;- in( B29 )  Freq: 0.697716
03a4    testq   R13, R13	# ptr
03a7    je,s   B32  P=0.001000 C=-1.000000

03a9    B31: #	out( B77 B32 ) &lt;- in( B30 )  Freq: 0.697019
03a9    shrq    R10, #9
03ad    movq    R8, 0x0000000117891000	# ptr
03b7    addq    R8, R10	# ptr
03ba    cmpb    [R8], #8
03be    jne     B77  P=0.001000 C=-1.000000

03c4    B32: #	out( B56 B33 ) &lt;- in( B21 B79 B80 B77 B31 B30 B29 )  Freq: 0.941859
03c4    movq    R10, [rsp + #40]	# spill
03c9    incl    [R10 + #24 (8-bit)]	# int ! Field: java/util/HashMap.modCount
03cd    movl    R10, [R10 + #28 (8-bit)]	# int ! Field: java/util/HashMap.threshold
03d1    movq    R11, [rsp + #40]	# spill
03d6    movl    R8, [R11 + #20 (8-bit)]	# int ! Field: java/util/HashMap.size
03da    incl    R8	# int
03dd    movl    [R11 + #20 (8-bit)], R8	# int ! Field: java/util/HashMap.size
03e1    cmpl    R8, R10
03e4    jg     B56  P=0.034114 C=22454.000000

03ea    B33: #	out( B70 B34 ) &lt;- in( B57 B32 )  Freq: 0.941858
03ea    movq    R10, [rsp + #40]	# spill
03ef    movl    R10, [R10 + #8 (8-bit)]	# compressed klass ptr
03f3    cmpl    R10, narrowklass: precise klass java/util/HashMap: 0x00000001278cdb60:Constant:exact *	# compressed klass ptr
03fa    jne,u   B70  P=0.002764 C=-1.000000

0400    B34: #	out( B35 ) &lt;- in( B33 B71 )  Freq: 0.941858
0400    xorl    RAX, RAX	# ptr

0402    B35: #	out( N1725 ) &lt;- in( B55 B34 )  Freq: 0.999993
0402    vzeroupper
	addq    rsp, 128	# Destroy frame
	popq    rbp
	movq    rscratch1, poll_offset[r15_thread] #polling_page_address
	testl   rax, [rscratch1]	# Safepoint: poll for GC

0417    ret

0418    B36: #	out( B128 B37 ) &lt;- in( B1 )  Freq: 0.15293
0418    call,static  java.util.HashMap::resize
        # java.util.HashMap::putVal @ bci:20  L[0]=rsp + #40 L[1]=rsp + #48 L[2]=rsp + #8 L[3]=rsp + #64 L[4]=rsp + #24 L[5]=rsp + #28 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_
        # OopMap {[8]=Oop [40]=Oop [64]=Oop off=1056/0x420}

0420    B37: #	out( B120 B38 ) &lt;- in( B36 )  Freq: 0.152927
        # Block is sole successor of call
0420    movl    R10, [RAX + #12 (8-bit)]	# range
0424    NullCheck RAX

0424    B38: #	out( B4 ) &lt;- in( B37 )  Freq: 0.152927
0424    movq    [rsp + #80], RAX	# spill
0429    jmp     B4

042e    B39: #	out( B48 B40 ) &lt;- in( B6 )  Freq: 0.0473971
042e    movl    R8, [R12 + R10 &lt;&lt; 3 + #16] (compressed oop addressing)	# compressed ptr ! Field: java/util/HashMap$Node.key
0433    decode_heap_oop R9,R8
045f    cmpq    R9, R11	# ptr
0462    je,u   B48  P=0.014159 C=1130.000000

0468    B40: #	out( B121 B41 ) &lt;- in( B39 )  Freq: 0.046726
0468    movl    RCX, [R11 + #8 (8-bit)]	# compressed klass ptr
046c    NullCheck R11

046c    B41: #	out( B107 B42 ) &lt;- in( B40 )  Freq: 0.046726
046c    cmpl    RCX, narrowklass: precise klass java/lang/String: 0x000000010bf8aca0:Constant:exact *	# compressed klass ptr
0472    jne,u   B107  P=0.000001 C=-1.000000

0478    B42: #	out( B48 B43 ) &lt;- in( B41 )  Freq: 0.0467259
0478    movq    RDX, R11	# spill
047b    # checkcastPP of RDX
047b    cmpq    RDX, R9	# ptr
047e    je,u   B48  P=0.034001 C=15617.000000

0484    B43: #	out( B110 B44 ) &lt;- in( B42 )  Freq: 0.0451372
0484    movl    R9, [R12 + R8 &lt;&lt; 3 + #8] (compressed oop addressing)	# compressed klass ptr
0489    NullCheck R8

0489    B44: #	out( B118 B45 ) &lt;- in( B43 )  Freq: 0.0451371
0489    cmpl    R9, narrowklass: precise klass java/lang/String: 0x000000010bf8aca0:Constant:exact *	# compressed klass ptr
0490    jne,u   B118  P=0.000000 C=-1.000000

0496    B45: #	out( B114 B46 ) &lt;- in( B44 )  Freq: 0.0451371
0496    movsbl  R9, [RDX + #20 (8-bit)]	# byte ! Field: java/lang/String.coder (constant)
049b    decode_heap_oop_not_null RCX,R8
049f    # checkcastPP of RCX
049f    movsbl  RBP, [RCX + #20 (8-bit)]	# byte ! Field: java/lang/String.coder (constant)
04a3    cmpl    R9, RBP
04a6    jne     B114  P=0.000000 C=13329.000000

04ac    B46: #	out( B108 B47 ) &lt;- in( B45 )  Freq: 0.0451371
04ac    movl    R8, [RCX + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value (constant)
04b0    movl    RBX, [RDX + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value (constant)
04b3    movl    R9, [R12 + R8 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
04b8    movl    RCX, [R12 + RBX &lt;&lt; 3 + #12] (compressed oop addressing)	# range
04bd    cmpl    RCX, R9
04c0    jne     B108  P=0.000001 C=-1.000000

04c6    B47: #	out( B109 B48 ) &lt;- in( B46 )  Freq: 0.0451371
04c6    decode_heap_oop_not_null R11,R8
04ca    leaq    RSI, [R12 + R8 &lt;&lt; 3 + #16] (compressed oop addressing)	# ptr compressedoopoff32
04cf    decode_heap_oop_not_null R11,RBX
04d3    leaq    RDI, [R12 + RBX &lt;&lt; 3 + #16] (compressed oop addressing)	# ptr compressedoopoff32
04d8    String Equals RDI,RSI,RCX -&gt; RAX    // KILL XMM1, XMM0, RBX
0594    movl    R8, RAX	# spill
0597    testl   RAX, RAX
0599    je     B109  P=0.000000 C=1114.000000

059f    B48: #	out( B49 ) &lt;- in( B47 B39 B42 )  Freq: 0.0473969
059f    movq    R13, 0x0000000117891000	# ptr

05a9    B49: #	out( B113 B50 ) &lt;- in( B48 B61 B66 )  Freq: 0.0581346
05a9    movl    RBP, [R14 + #20 (8-bit)]	# compressed ptr ! Field: java/util/HashMap$Node.value
05ad    movl    R11, [rsp + #24]	# spill
05b2    testl   R11, R11
05b5    jne     B113  P=0.000000 C=1387.000000

05bb    B50: #	out( B90 B51 ) &lt;- in( B49 )  Freq: 0.0581346
05bb    # TLS is in R15
05bb    cmpb    [R15 + #48 (8-bit)], #0
05c0    jne     B90  P=0.001000 C=-1.000000

05c6    B51: #	out( B54 B52 ) &lt;- in( B112 B92 B90 B50 )  Freq: 0.0581346
05c6    movl    R11, [rsp + #0]	# spill
05ca    movl    [R14 + #20 (8-bit)], R11	# compressed ptr ! Field: java/util/HashMap$Node.value
05ce    movq    R10, [rsp + #40]	# spill
05d3    movl    RBX, [R10 + #8 (8-bit)]	# compressed klass ptr
05d7    movq    R10, R14	# ptr -&gt; long
05da    movq    R11, [rsp + #64]	# spill
05df    movq    R11, R11	# ptr -&gt; long
05df    xorq    R11, R10	# long
05e2    shrq    R11, #20
05e6    testq   R11, R11
05e9    je,s   B54  P=0.001000 C=-1.000000

05eb    B52: #	out( B54 B53 ) &lt;- in( B51 )  Freq: 0.0580765
05eb    movq    R11, [rsp + #64]	# spill
05f0    testq   R11, R11	# ptr
05f3    je,s   B54  P=0.001000 C=-1.000000

05f5    B53: #	out( B93 B54 ) &lt;- in( B52 )  Freq: 0.0580184
05f5    shrq    R10, #9
05f9    addq    R13, R10	# ptr
05fc    cmpb    [R13], #8
0601    jne     B93  P=0.001000 C=-1.000000

0607    B54: #	out( B106 B55 ) &lt;- in( B95 B96 B93 B53 B52 B51 )  Freq: 0.0581346
0607    cmpl    RBX, narrowklass: precise klass java/util/HashMap: 0x00000001278cdb60:Constant:exact *	# compressed klass ptr
060d    jne,u   B106  P=0.000001 C=-1.000000

0613    B55: #	out( B35 ) &lt;- in( B54 )  Freq: 0.0581345
0613    decode_heap_oop RAX,RBP
063f    jmp     B35

0644    B56: #	out( B127 B57 ) &lt;- in( B32 )  Freq: 0.0321308
0644    movq    RSI, [rsp + #40]	# spill
0649    movl    RBP, [rsp + #28]	# spill
        nop 	# 3 bytes pad for loops and calls
0650    call,static  java.util.HashMap::resize
        # java.util.HashMap::putVal @ bci:288  L[0]=rsp + #40 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=RBP L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_
        # OopMap {[40]=Oop off=1624/0x658}

0658    B57: #	out( B33 ) &lt;- in( B56 )  Freq: 0.0321301
        # Block is sole successor of call
0658    jmp     B33

065d    B58: #	out( B117 B59 ) &lt;- in( B10 )  Freq: 0.0107377
065d    movl    RCX, [R14 + #16 (8-bit)]	# compressed ptr ! Field: java/util/HashMap$Node.key
0661    decode_heap_oop RBX,RCX
068d    cmpq    RBX, R11	# ptr
0690    je,u   B117  P=0.000000 C=256.000000

0696    B59: #	out( B122 B60 ) &lt;- in( B58 )  Freq: 0.0107377
0696    movl    R9, [R11 + #8 (8-bit)]	# compressed klass ptr
069a    NullCheck R11

069a    B60: #	out( B115 B61 ) &lt;- in( B59 )  Freq: 0.0107377
069a    cmpl    R9, narrowklass: precise klass java/lang/String: 0x000000010bf8aca0:Constant:exact *	# compressed klass ptr
06a1    jne,u   B115  P=0.000001 C=-1.000000

06a7    B61: #	out( B49 B62 ) &lt;- in( B60 )  Freq: 0.0107377
06a7    movq    R9, R11	# spill
06aa    # checkcastPP of R9
06aa    cmpq    R9, RBX	# ptr
06ad    je,u   B49  P=0.034001 C=15617.000000

06b3    B62: #	out( B68 B63 ) &lt;- in( B61 )  Freq: 0.0103726
06b3    movl    RBX, [R12 + RCX &lt;&lt; 3 + #8] (compressed oop addressing)	# compressed klass ptr
06b8    NullCheck RCX

06b8    B63: #	out( B119 B64 ) &lt;- in( B62 )  Freq: 0.0103726
06b8    cmpl    RBX, narrowklass: precise klass java/lang/String: 0x000000010bf8aca0:Constant:exact *	# compressed klass ptr
06be    jne,u   B119  P=0.000000 C=-1.000000

06c4    B64: #	out( B116 B65 ) &lt;- in( B63 )  Freq: 0.0103726
06c4    movsbl  R11, [R9 + #20 (8-bit)]	# byte ! Field: java/lang/String.coder (constant)
06c9    decode_heap_oop_not_null RBX,RCX
06cd    # checkcastPP of RBX
06cd    movsbl  RBP, [RBX + #20 (8-bit)]	# byte ! Field: java/lang/String.coder (constant)
06d1    cmpl    R11, RBP
06d4    jne     B116  P=0.000000 C=13329.000000

06da    B65: #	out( B67 B66 ) &lt;- in( B64 )  Freq: 0.0103726
06da    movl    R11, [RBX + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value (constant)
06de    movl    RDI, [R9 + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value (constant)
06e2    movl    RBX, [R12 + R11 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
06e7    movl    RCX, [R12 + RDI &lt;&lt; 3 + #12] (compressed oop addressing)	# range
06ec    cmpl    RCX, RBX
06ee    jne     B67  P=0.000001 C=-1.000000

06f4    B66: #	out( B49 B67 ) &lt;- in( B65 )  Freq: 0.0103726
06f4    decode_heap_oop_not_null R8,R11
06f8    leaq    RSI, [R12 + R11 &lt;&lt; 3 + #16] (compressed oop addressing)	# ptr compressedoopoff32
06fd    decode_heap_oop_not_null R11,RDI
0701    leaq    RDI, [R12 + RDI &lt;&lt; 3 + #16] (compressed oop addressing)	# ptr compressedoopoff32
0706    String Equals RDI,RSI,RCX -&gt; RAX    // KILL XMM1, XMM0, RBX
07c2    movl    R8, RAX	# spill
07c5    testl   RAX, RAX
07c7    jne     B49  P=1.000000 C=256.000000

07cd    B67: #	out( B69 ) &lt;- in( B66 B65 )  Freq: 1.53187e-08
07cd    movl    RBP, R8	# spill
07d0    jmp,s   B69

07d2    B68: #	out( B69 ) &lt;- in( B62 )  Freq: 1.05104e-08
07d2    xorl    RBP, RBP	# int

07d4    B69: #	out( N1725 ) &lt;- in( B68 B67 )  Freq: 2.5829e-08
07d4    movl    RSI, #-187	# int
07d9    movq    R11, [rsp + #40]	# spill
07de    movq    [rsp + #0], R11	# spill
07e2    movl    R11, [rsp + #48]	# spill
07e7    movl    [rsp + #8], R11	# spill
07ec    movl    R11, [rsp + #24]	# spill
07f1    movl    [rsp + #12], R11	# spill
07f6    movl    R8, [rsp + #28]	# spill
07fb    movl    [rsp + #24], R8	# spill
0800    movq    [rsp + #40], R14	# spill
0805    movl    [rsp + #28], R10	# spill
080a    movq    [rsp + #48], R9	# spill
        nop 	# 1 bytes pad for loops and calls
0810    call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:206  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=rsp + #48 L[3]=rsp + #64 L[4]=rsp + #12 L[5]=rsp + #24 L[6]=rsp + #80 L[7]=_ L[8]=_ L[9]=_ L[10]=rsp + #40 L[11]=_ L[12]=rsp + #28 STK[0]=RBP
        # OopMap {[0]=Oop [40]=Oop [48]=Oop [64]=Oop [80]=Oop off=2072/0x818}
0818    ud2	# ShouldNotReachHere

082c    B70: #	out( B126 B71 ) &lt;- in( B33 )  Freq: 0.00260289
082c    movq    RSI, [rsp + #40]	# spill
0831    movl    RDX, [rsp + #28]	# spill
        nop 	# 1 bytes pad for loops and calls
0836    movq    rax, #Universe::non_oop_word()
	call,dynamic  java.util.HashMap::afterNodeInsertion
        # java.util.HashMap::putVal @ bci:295  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_
        # OopMap {off=2120/0x848}

0848    B71: #	out( B34 ) &lt;- in( B70 )  Freq: 0.00260284
        # Block is sole successor of call
0848    jmp     B34

084d    B72: #	out( B125 B73 ) &lt;- in( B23 )  Freq: 0.00260284
084d    movq    [rsp + #16], R14	# spill
0852    movl    [rsp + #8], R8	# spill
0857    movq    R8, [rsp + #64]	# spill
085c    movq    RBP, [rsp + #40]	# spill
0861    movq    RSI, RBP	# spill
0864    movl    RDX, [rsp + #48]	# spill
0868    movq    RCX, R11	# spill
        nop 	# 3 bytes pad for loops and calls
086e    movq    rax, #Universe::non_oop_word()
	call,dynamic  java.util.HashMap::newNode
        # java.util.HashMap::putVal @ bci:56  L[0]=RBP L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=rsp + #28 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ STK[0]=rsp + #80 STK[1]=rsp + #8
        # OopMap {rbp=Oop [16]=Derived_oop_[80] [40]=Oop [80]=Oop off=2176/0x880}

0880    B73: #	out( B27 ) &lt;- in( B72 )  Freq: 0.00260279
        # Block is sole successor of call
0880    movl    R8, [rsp + #8]	# spill
0885    movq    R14, [rsp + #16]	# spill
088a    movq    R13, RAX	# spill
088d    jmp     B27

0892    B74: #	out( B29 B75 ) &lt;- in( B28 )  Freq: 0.000698406
0892    movl    R11, [R14]	# compressed ptr
0895    testl   R11, R11	# compressed ptr
0898    je     B29  P=0.500000 C=-1.000000

089e    B75: #	out( B102 B76 ) &lt;- in( B74 )  Freq: 0.000349203
089e    # TLS is in R15
089e    movq    R10, [R15 + #56 (8-bit)]	# long
08a2    decode_heap_oop RDI,R11
08ce    testq   R10, R10
08d1    je     B102  P=0.001000 C=-1.000000

08d7    B76: #	out( B29 ) &lt;- in( B75 )  Freq: 0.000348854
08d7    # TLS is in R15
08d7    movq    R11, [R15 + #72 (8-bit)]	# ptr
08db    movq    [R11 + #-8 + R10], RDI	# ptr
08e0    addq    R10, #-8	# long
08e4    # TLS is in R15
08e4    movq    [R15 + #56 (8-bit)], R10	# long
08e8    jmp     B29

08ed    B77: #	out( B32 B78 ) &lt;- in( B31 )  Freq: 0.000697019
08ed    # TLS is in R15
08ed    movq    R10, [R15 + #104 (8-bit)]	# long
08f1    # TLS is in R15
08f1    movq    R11, [R15 + #120 (8-bit)]	# ptr
08f5    lock addl [rsp + #0], 0	! membar_volatile
08fb    cmpb    [R8], #0
08ff    je     B32  P=0.500000 C=-1.000000

0905    B78: #	out( B80 B79 ) &lt;- in( B77 )  Freq: 0.000348509
0905    movb    [R8], #0	# CMS card-mark byte 0
0909    testq   R10, R10
090c    jne,s   B80  P=0.500000 C=-1.000000

090e    B79: #	out( B32 ) &lt;- in( B78 )  Freq: 0.000174255
090e    movq    RDI, R8	# spill
0911    # TLS is in R15
0911    movq    RSI, R15	# spill
0914    call_leaf,runtime  write_ref_field_post_entry
        No JVM State Info
        # 
0924    jmp     B32

0929    B80: #	out( B32 ) &lt;- in( B78 )  Freq: 0.000174255
0929    movq    [R11 + #-8 + R10], R8	# ptr
092e    addq    R10, #-8	# long
0932    # TLS is in R15
0932    movq    [R15 + #104 (8-bit)], R10	# long
0936    jmp     B32

093b    B81: #	out( B19 B82 ) &lt;- in( B18 )  Freq: 0.000243441
093b    movl    R10, [R14 + #24 (8-bit)]	# compressed ptr ! Field: java/util/HashMap$Node.next
093f    testl   R10, R10	# compressed ptr
0942    je     B19  P=0.500000 C=-1.000000

0948    B82: #	out( B105 B83 ) &lt;- in( B81 )  Freq: 0.000121721
0948    # TLS is in R15
0948    movq    R11, [R15 + #56 (8-bit)]	# long
094c    decode_heap_oop RDI,R10
0978    testq   R11, R11
097b    je     B105  P=0.001000 C=-1.000000

0981    B83: #	out( B19 ) &lt;- in( B82 )  Freq: 0.000121599
0981    # TLS is in R15
0981    movq    R10, [R15 + #72 (8-bit)]	# ptr
0985    movq    [R10 + #-8 + R11], RDI	# ptr
098a    addq    R11, #-8	# long
098e    # TLS is in R15
098e    movq    [R15 + #56 (8-bit)], R11	# long
0992    jmp     B19

0997    B84: #	out( B21 B85 ) &lt;- in( B20 )  Freq: 0.000243201
0997    # TLS is in R15
0997    movq    R10, [R15 + #104 (8-bit)]	# long
099b    # TLS is in R15
099b    movq    R11, [R15 + #120 (8-bit)]	# ptr
099f    lock addl [rsp + #0], 0	! membar_volatile
09a5    cmpb    [R13], #0
09aa    je     B21  P=0.500000 C=-1.000000

09b0    B85: #	out( B87 B86 ) &lt;- in( B84 )  Freq: 0.000121601
09b0    movb    [R13], #0	# CMS card-mark byte 0
09b5    testq   R10, R10
09b8    jne,s   B87  P=0.500000 C=-1.000000

09ba    B86: #	out( B21 ) &lt;- in( B85 )  Freq: 6.08003e-05
09ba    movq    RDI, R13	# spill
09bd    # TLS is in R15
09bd    movq    RSI, R15	# spill
09c0    call_leaf,runtime  write_ref_field_post_entry
        No JVM State Info
        # 
09d0    jmp     B21

09d5    B87: #	out( B21 ) &lt;- in( B85 )  Freq: 6.08003e-05
09d5    movq    [R11 + #-8 + R10], R13	# ptr
09da    addq    R10, #-8	# long
09de    # TLS is in R15
09de    movq    [R15 + #104 (8-bit)], R10	# long
09e2    jmp     B21

09e7    B88: #	out( B124 B89 ) &lt;- in( B24 )  Freq: 6.95928e-05
09e7    movl    R9, [rsp + #0]	# spill
09eb    movl    [rsp + #72], R9	# spill
09f0    movl    [rsp + #52], RBX	# spill
09f4    movq    [rsp + #56], R14	# spill
09f9    movl    [rsp + #24], R8	# spill
09fe    movq    R10, [rsp + #40]	# spill
0a03    movq    [rsp + #16], R10	# spill
0a08    movq    RBP, R10	# spill
0a0b    # checkcastPP of RBP
0a0b    movq    RSI, precise klass java/util/HashMap$Node: 0x00000001278ce6e0:Constant:exact *	# ptr
0a15    movq    [rsp + #0], R11	# spill
        nop 	# 3 bytes pad for loops and calls
0a1c    call,static  wrapper for: _new_instance_Java
        # java.util.HashMap::newNode @ bci:0  L[0]=_ L[1]=rsp + #48 L[2]=rsp + #0 L[3]=rsp + #64 L[4]=#NULL
        # java.util.HashMap::putVal @ bci:56  L[0]=RBP L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=rsp + #28 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ STK[0]=rsp + #80 STK[1]=rsp + #24
        # OopMap {rbp=Oop [0]=Oop [16]=Oop [52]=NarrowOop [56]=Derived_oop_[80] [64]=Oop [72]=NarrowOop [80]=Oop off=2596/0xa24}

0a24    B89: #	out( B26 ) &lt;- in( B88 )  Freq: 6.95914e-05
        # Block is sole successor of call
0a24    movq    R11, [rsp + #16]	# spill
0a29    movq    [rsp + #40], R11	# spill
0a2e    movl    R8, [rsp + #24]	# spill
0a33    movq    R14, [rsp + #56]	# spill
0a38    movl    RBX, [rsp + #52]	# spill
0a3c    movl    R11, [rsp + #72]	# spill
0a41    movl    [rsp + #0], R11	# spill
0a45    movq    R13, RAX	# spill
0a48    jmp     B26

0a4d    B90: #	out( B51 B91 ) &lt;- in( B50 )  Freq: 5.81338e-05
0a4d    movl    R11, [R14 + #20 (8-bit)]	# compressed ptr ! Field: java/util/HashMap$Node.value
0a51    testl   R11, R11	# compressed ptr
0a54    je     B51  P=0.500000 C=-1.000000

0a5a    B91: #	out( B112 B92 ) &lt;- in( B90 )  Freq: 2.90669e-05
0a5a    # TLS is in R15
0a5a    movq    R10, [R15 + #56 (8-bit)]	# long
0a5e    decode_heap_oop RDI,R11
0a8a    testq   R10, R10
0a8d    je     B112  P=0.001000 C=-1.000000

0a93    B92: #	out( B51 ) &lt;- in( B91 )  Freq: 2.90379e-05
0a93    # TLS is in R15
0a93    movq    R11, [R15 + #72 (8-bit)]	# ptr
0a97    movq    [R11 + #-8 + R10], RDI	# ptr
0a9c    addq    R10, #-8	# long
0aa0    # TLS is in R15
0aa0    movq    [R15 + #56 (8-bit)], R10	# long
0aa4    jmp     B51

0aa9    B93: #	out( B54 B94 ) &lt;- in( B53 )  Freq: 5.80184e-05
0aa9    # TLS is in R15
0aa9    movq    R10, [R15 + #104 (8-bit)]	# long
0aad    # TLS is in R15
0aad    movq    R11, [R15 + #120 (8-bit)]	# ptr
0ab1    lock addl [rsp + #0], 0	! membar_volatile
0ab7    cmpb    [R13], #0
0abc    je     B54  P=0.500000 C=-1.000000

0ac2    B94: #	out( B96 B95 ) &lt;- in( B93 )  Freq: 2.90092e-05
0ac2    movb    [R13], #0	# CMS card-mark byte 0
0ac7    testq   R10, R10
0aca    jne,s   B96  P=0.500000 C=-1.000000

0acc    B95: #	out( B54 ) &lt;- in( B94 )  Freq: 1.45046e-05
0acc    movq    RDI, R13	# spill
0acf    # TLS is in R15
0acf    movq    RSI, R15	# spill
0ad2    call_leaf,runtime  write_ref_field_post_entry
        No JVM State Info
        # 
0ae2    jmp     B54

0ae7    B96: #	out( B54 ) &lt;- in( B94 )  Freq: 1.45046e-05
0ae7    movq    [R11 + #-8 + R10], R13	# ptr
0aec    addq    R10, #-8	# long
0af0    # TLS is in R15
0af0    movq    [R15 + #104 (8-bit)], R10	# long
0af4    jmp     B54

0af9    B97: #	out( B123 B98 ) &lt;- in( B16 )  Freq: 2.43485e-05
0af9    movq    [rsp + #72], R14	# spill
0afe    movq    [rsp + #56], R13	# spill
0b03    movl    R10, [rsp + #0]	# spill
0b07    movl    [rsp + #36], R10	# spill
0b0c    movl    [rsp + #32], RBX	# spill
0b10    movq    R10, [rsp + #80]	# spill
0b15    movq    [rsp + #16], R10	# spill
0b1a    movq    R10, [rsp + #64]	# spill
0b1f    movq    [rsp + #8], R10	# spill
0b24    movq    R10, [rsp + #40]	# spill
0b29    movq    [rsp + #0], R10	# spill
0b2d    movq    RSI, precise klass java/util/HashMap$Node: 0x00000001278ce6e0:Constant:exact *	# ptr
0b37    movq    RBP, R11	# spill
        nop 	# 2 bytes pad for loops and calls
0b3c    call,static  wrapper for: _new_instance_Java
        # java.util.HashMap::newNode @ bci:0  L[0]=_ L[1]=rsp + #48 L[2]=RBP L[3]=rsp + #8 L[4]=#NULL
        # java.util.HashMap::putVal @ bci:152  L[0]=rsp + #96 L[1]=rsp + #48 L[2]=_ L[3]=rsp + #8 L[4]=rsp + #24 L[5]=rsp + #28 L[6]=rsp + #16 L[7]=_ L[8]=_ L[9]=_ L[10]=#NULL L[11]=_ L[12]=rsp + #52 STK[0]=rsp + #72
        # OopMap {rbp=Oop [0]=Oop [8]=Oop [16]=Oop [32]=NarrowOop [36]=NarrowOop [72]=Oop [96]=Oop off=2884/0xb44}

0b44    B98: #	out( B18 ) &lt;- in( B97 )  Freq: 2.4348e-05
        # Block is sole successor of call
0b44    movq    R10, [rsp + #0]	# spill
0b48    movq    [rsp + #40], R10	# spill
0b4d    movq    R10, [rsp + #8]	# spill
0b52    movq    [rsp + #64], R10	# spill
0b57    movq    R10, [rsp + #16]	# spill
0b5c    movq    [rsp + #80], R10	# spill
0b61    movl    RBX, [rsp + #32]	# spill
0b65    movl    R11, [rsp + #36]	# spill
0b6a    movl    [rsp + #0], R11	# spill
0b6e    movq    R13, [rsp + #56]	# spill
0b73    movq    R14, [rsp + #72]	# spill
0b78    movq    R8, RAX	# spill
0b7b    jmp     B18

0b80    B99: #	out( N1725 ) &lt;- in( B4 )  Freq: 9.99996e-07
0b80    movl    RSI, #-28	# int
0b85    movq    RBP, [rsp + #40]	# spill
0b8a    movl    R10, [rsp + #48]	# spill
0b8f    movl    [rsp + #0], R10	# spill
0b93    movl    R11, [rsp + #24]	# spill
0b98    movl    [rsp + #4], R11	# spill
0b9d    movl    R10, [rsp + #28]	# spill
0ba2    movl    [rsp + #24], R10	# spill
0ba7    movl    [rsp + #48], R8	# spill
0bac    call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:40  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #64 L[4]=rsp + #4 L[5]=rsp + #24 L[6]=rsp + #80 L[7]=_ L[8]=_ L[9]=rsp + #48 L[10]=_ L[11]=_ L[12]=_ STK[0]=rsp + #80 STK[1]=rsp + #48
        # OopMap {rbp=Oop [8]=Oop [64]=Oop [80]=Oop off=2996/0xbb4}
0bb4    ud2	# ShouldNotReachHere

0bc8    B100: #	out( N1725 ) &lt;- in( B27 )  Freq: 6.98415e-07
0bc8    movl    RSI, #-42	# int
0bcd    movl    [rsp + #4], R8	# spill
0bd2    movq    [rsp + #16], R13	# spill
        nop 	# 1 bytes pad for loops and calls
0bd8    call,static  wrapper for: uncommon_trap(reason=&apos;array_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:59  L[0]=rsp + #40 L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=rsp + #28 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ STK[0]=rsp + #80 STK[1]=rsp + #4 STK[2]=rsp + #16
        # OopMap {[16]=Oop [40]=Oop [80]=Oop off=3040/0xbe0}
0be0    ud2	# ShouldNotReachHere

0bf4    B101: #	out( N1725 ) &lt;- in( B2 )  Freq: 4.03915e-07
0bf4    movl    RSI, #-187	# int
0bf9    movq    RBP, [rsp + #40]	# spill
0bfe    movl    R8, [rsp + #24]	# spill
0c03    movl    [rsp + #4], R8	# spill
0c08    movl    [rsp + #24], RDI	# spill
0c0c    movl    [rsp + #28], R11	# spill
0c11    movl    [rsp + #36], R10	# spill
        nop 	# 2 bytes pad for loops and calls
0c18    call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:16  L[0]=RBP L[1]=rsp + #48 L[2]=rsp + #8 L[3]=rsp + #64 L[4]=rsp + #4 L[5]=rsp + #24 L[6]=rsp + #28 L[7]=_ L[8]=rsp + #36 L[9]=_ L[10]=_ L[11]=_ L[12]=_ STK[0]=rsp + #36
        # OopMap {rbp=Oop [8]=Oop [28]=NarrowOop [64]=Oop off=3104/0xc20}
0c20    ud2	# ShouldNotReachHere

0c34    B102: #	out( B29 ) &lt;- in( B75 )  Freq: 3.49198e-07
0c34    # TLS is in R15
0c34    movq    RSI, R15	# spill
0c37    call_leaf,runtime  write_ref_field_pre_entry
        No JVM State Info
        # 
0c47    jmp     B29

0c4c    B103: #	out( N1725 ) &lt;- in( B7 )  Freq: 2.57558e-07
0c4c    movl    RSI, #-187	# int
0c51    movq    RBP, [rsp + #40]	# spill
0c56    movl    R8, [rsp + #24]	# spill
0c5b    movl    [rsp + #4], R8	# spill
0c60    movl    R11, [rsp + #28]	# spill
0c65    movl    [rsp + #24], R11	# spill
0c6a    movl    [rsp + #28], R10	# spill
        nop 	# 1 bytes pad for loops and calls
0c70    call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:109  L[0]=RBP L[1]=rsp + #48 L[2]=rsp + #8 L[3]=rsp + #64 L[4]=rsp + #4 L[5]=rsp + #24 L[6]=rsp + #80 L[7]=rsp + #28 L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ STK[0]=#1
        # OopMap {rbp=Oop [8]=Oop [28]=NarrowOop [64]=Oop [80]=Oop off=3192/0xc78}
0c78    ud2	# ShouldNotReachHere

0c8c    B104: #	out( N1725 ) &lt;- in( B15 )  Freq: 2.43445e-07
0c8c    movl    RSI, #-34	# int
0c91    movq    RBP, [rsp + #40]	# spill
0c96    movl    R10, [rsp + #24]	# spill
0c9b    movl    [rsp + #4], R10	# spill
0ca0    movl    R10, [rsp + #28]	# spill
0ca5    movl    [rsp + #16], R10	# spill
0caa    movq    [rsp + #32], R14	# spill
0caf    movq    [rsp + #56], R11	# spill
0cb4    call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:152  L[0]=RBP L[1]=rsp + #48 L[2]=_ L[3]=rsp + #64 L[4]=rsp + #4 L[5]=rsp + #16 L[6]=rsp + #80 L[7]=_ L[8]=_ L[9]=_ L[10]=#NULL L[11]=_ L[12]=rsp + #52 STK[0]=rsp + #32 STK[1]=RBP STK[2]=rsp + #48 STK[3]=rsp + #56 STK[4]=rsp + #64 STK[5]=#NULL
        # OopMap {rbp=Oop [32]=Oop [56]=Oop [64]=Oop [80]=Oop off=3260/0xcbc}
0cbc    ud2	# ShouldNotReachHere

0cd0    B105: #	out( B19 ) &lt;- in( B82 )  Freq: 1.21719e-07
0cd0    movq    [rsp + #32], R8	# spill
0cd5    movq    [rsp + #8], R14	# spill
0cda    movq    [rsp + #0], R13	# spill
0cde    # TLS is in R15
0cde    movq    RSI, R15	# spill
0ce1    call_leaf,runtime  write_ref_field_pre_entry
        No JVM State Info
        # 
0cf1    movq    R13, [rsp + #0]	# spill
0cf5    movq    R14, [rsp + #8]	# spill
0cfa    movq    R8, [rsp + #32]	# spill
0cff    jmp     B19

0d04    B106: #	out( N1725 ) &lt;- in( B54 )  Freq: 5.81346e-08
0d04    movl    RSI, #-34	# int
0d09    movq    [rsp + #8], R14	# spill
        nop 	# 2 bytes pad for loops and calls
0d10    call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:253  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=RBP STK[0]=rsp + #40 STK[1]=rsp + #8
        # OopMap {rbp=NarrowOop [8]=Oop [40]=Oop off=3352/0xd18}
0d18    ud2	# ShouldNotReachHere

0d2c    B107: #	out( N1725 ) &lt;- in( B41 )  Freq: 4.6726e-08
0d2c    movl    RSI, #-34	# int
0d31    movq    RBP, [rsp + #40]	# spill
0d36    movl    RCX, [rsp + #48]	# spill
0d3a    movl    [rsp + #0], RCX	# spill
0d3d    movl    RCX, [rsp + #24]	# spill
0d41    movl    [rsp + #4], RCX	# spill
0d45    movl    R9, [rsp + #28]	# spill
0d4a    movl    [rsp + #24], R9	# spill
0d4f    movl    [rsp + #28], R10	# spill
0d54    movl    [rsp + #48], R8	# spill
        nop 	# 3 bytes pad for loops and calls
0d5c    call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:91  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #64 L[4]=rsp + #4 L[5]=rsp + #24 L[6]=rsp + #80 L[7]=rsp + #28 L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ STK[0]=rsp + #8 STK[1]=rsp + #48
        # OopMap {rbp=Oop [8]=Oop [28]=NarrowOop [48]=NarrowOop [64]=Oop [80]=Oop off=3428/0xd64}
0d64    ud2	# ShouldNotReachHere

0d78    B108: #	out( B109 ) &lt;- in( B46 )  Freq: 4.51371e-08
0d78    xorl    R8, R8	# int

0d7b    B109: #	out( B111 ) &lt;- in( B47 B108 )  Freq: 6.66602e-08
0d7b    movl    RBP, R8	# spill
0d7e    jmp,s   B111

0d80    B110: #	out( B111 ) &lt;- in( B43 )  Freq: 4.57366e-08
0d80    xorl    RBP, RBP	# int

0d82    B111: #	out( N1725 ) &lt;- in( B110 B109 )  Freq: 1.12397e-07
0d82    movl    RSI, #-187	# int
0d87    movq    R11, [rsp + #40]	# spill
0d8c    movq    [rsp + #0], R11	# spill
0d90    movl    R11, [rsp + #24]	# spill
0d95    movl    [rsp + #12], R11	# spill
0d9a    movl    R11, [rsp + #28]	# spill
0d9f    movl    [rsp + #24], R11	# spill
0da4    movl    [rsp + #28], R10	# spill
0da9    movq    [rsp + #40], RDX	# spill
        nop 	# 2 bytes pad for loops and calls
0db0    call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:94  L[0]=rsp + #0 L[1]=rsp + #48 L[2]=rsp + #40 L[3]=rsp + #64 L[4]=rsp + #12 L[5]=rsp + #24 L[6]=rsp + #80 L[7]=rsp + #28 L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ STK[0]=RBP
        # OopMap {[0]=Oop [28]=NarrowOop [40]=Oop [64]=Oop [80]=Oop off=3512/0xdb8}
0db8    ud2	# ShouldNotReachHere

0dcc    B112: #	out( B51 ) &lt;- in( B91 )  Freq: 2.90665e-08
0dcc    # TLS is in R15
0dcc    movq    RSI, R15	# spill
0dcf    call_leaf,runtime  write_ref_field_pre_entry
        No JVM State Info
        # 
0ddf    jmp     B51

0de4    B113: #	out( N1725 ) &lt;- in( B49 )  Freq: 2.77207e-08
0de4    movl    RSI, #-187	# int
0de9    movq    [rsp + #16], R14	# spill
        nop 	# 2 bytes pad for loops and calls
0df0    call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:236  L[0]=rsp + #40 L[1]=_ L[2]=_ L[3]=rsp + #64 L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=rsp + #16 L[11]=_ L[12]=RBP STK[0]=rsp + #24
        # OopMap {rbp=NarrowOop [16]=Oop [40]=Oop [64]=Oop off=3576/0xdf8}
0df8    ud2	# ShouldNotReachHere

0e0c    B114: #	out( N1725 ) &lt;- in( B45 )  Freq: 2.25686e-08
0e0c    movl    RSI, #-187	# int
0e11    movq    R11, [rsp + #40]	# spill
0e16    movq    [rsp + #0], R11	# spill
0e1a    movl    R11, [rsp + #48]	# spill
0e1f    movl    [rsp + #8], R11	# spill
0e24    movq    R11, [rsp + #64]	# spill
0e29    movq    [rsp + #16], R11	# spill
0e2e    movl    R8, [rsp + #24]	# spill
0e33    movl    [rsp + #12], R8	# spill
0e38    movl    R11, [rsp + #28]	# spill
0e3d    movl    [rsp + #24], R11	# spill
0e42    movl    [rsp + #28], R10	# spill
0e47    movq    [rsp + #48], RDX	# spill
0e4c    movq    [rsp + #56], RCX	# spill
0e51    movl    [rsp + #64], R9	# spill
        nop 	# 2 bytes pad for loops and calls
0e58    call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.String::equals @ bci:33  L[0]=rsp + #48 L[1]=_ L[2]=rsp + #56 STK[0]=rsp + #64 STK[1]=RBP
        # java.util.HashMap::putVal @ bci:91  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=rsp + #48 L[3]=rsp + #16 L[4]=rsp + #12 L[5]=rsp + #24 L[6]=rsp + #80 L[7]=rsp + #28 L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_
        # OopMap {[0]=Oop [16]=Oop [28]=NarrowOop [48]=Oop [56]=Oop [80]=Oop off=3680/0xe60}
0e60    ud2	# ShouldNotReachHere

0e74    B115: #	out( N1725 ) &lt;- in( B60 )  Freq: 1.07377e-08
0e74    movl    RSI, #-34	# int
0e79    movq    RBP, [rsp + #40]	# spill
0e7e    movl    R9, [rsp + #48]	# spill
0e83    movl    [rsp + #0], R9	# spill
0e87    movl    R8, [rsp + #24]	# spill
0e8c    movl    [rsp + #4], R8	# spill
0e91    movl    R9, [rsp + #28]	# spill
0e96    movl    [rsp + #24], R9	# spill
0e9b    movq    [rsp + #40], R14	# spill
0ea0    movl    [rsp + #28], R10	# spill
0ea5    movq    [rsp + #48], R11	# spill
0eaa    movl    [rsp + #56], RCX	# spill
        nop 	# 2 bytes pad for loops and calls
0eb0    call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:203  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #48 L[3]=rsp + #64 L[4]=rsp + #4 L[5]=rsp + #24 L[6]=rsp + #80 L[7]=_ L[8]=_ L[9]=_ L[10]=rsp + #40 L[11]=_ L[12]=rsp + #28 STK[0]=rsp + #48 STK[1]=rsp + #56
        # OopMap {rbp=Oop [40]=Oop [48]=Oop [56]=NarrowOop [64]=Oop [80]=Oop off=3768/0xeb8}
0eb8    ud2	# ShouldNotReachHere

0ecc    B116: #	out( N1725 ) &lt;- in( B64 )  Freq: 5.18631e-09
0ecc    movl    RSI, #-187	# int
0ed1    movq    R8, [rsp + #40]	# spill
0ed6    movq    [rsp + #0], R8	# spill
0eda    movl    R8, [rsp + #48]	# spill
0edf    movl    [rsp + #8], R8	# spill
0ee4    movq    R8, [rsp + #64]	# spill
0ee9    movq    [rsp + #16], R8	# spill
0eee    movl    R8, [rsp + #24]	# spill
0ef3    movl    [rsp + #12], R8	# spill
0ef8    movl    RCX, [rsp + #28]	# spill
0efc    movl    [rsp + #24], RCX	# spill
0f00    movq    [rsp + #40], R14	# spill
0f05    movl    [rsp + #28], R10	# spill
0f0a    movq    [rsp + #56], R9	# spill
0f0f    movq    [rsp + #64], RBX	# spill
0f14    movl    [rsp + #72], R11	# spill
        nop 	# 3 bytes pad for loops and calls
0f1c    call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.String::equals @ bci:33  L[0]=rsp + #56 L[1]=_ L[2]=rsp + #64 STK[0]=rsp + #72 STK[1]=RBP
        # java.util.HashMap::putVal @ bci:203  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=rsp + #56 L[3]=rsp + #16 L[4]=rsp + #12 L[5]=rsp + #24 L[6]=rsp + #80 L[7]=_ L[8]=_ L[9]=_ L[10]=rsp + #40 L[11]=_ L[12]=rsp + #28
        # OopMap {[0]=Oop [16]=Oop [40]=Oop [56]=Oop [64]=Oop [80]=Oop off=3876/0xf24}
0f24    ud2	# ShouldNotReachHere

0f38    B117: #	out( N1725 ) &lt;- in( B58 )  Freq: 5.12016e-09
0f38    movl    RSI, #-187	# int
0f3d    movq    RBP, [rsp + #40]	# spill
0f42    movl    R9, [rsp + #48]	# spill
0f47    movl    [rsp + #0], R9	# spill
0f4b    movl    R8, [rsp + #24]	# spill
0f50    movl    [rsp + #4], R8	# spill
0f55    movl    R9, [rsp + #28]	# spill
0f5a    movl    [rsp + #24], R9	# spill
0f5f    movq    [rsp + #40], R14	# spill
0f64    movl    [rsp + #28], R10	# spill
0f69    movq    [rsp + #48], R11	# spill
0f6e    movl    [rsp + #60], RCX	# spill
        nop 	# 2 bytes pad for loops and calls
0f74    call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:193  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #48 L[3]=rsp + #64 L[4]=rsp + #4 L[5]=rsp + #24 L[6]=rsp + #80 L[7]=_ L[8]=_ L[9]=_ L[10]=rsp + #40 L[11]=rsp + #60 L[12]=rsp + #28 STK[0]=rsp + #60 STK[1]=rsp + #48
        # OopMap {rbp=Oop [40]=Oop [48]=Oop [60]=NarrowOop [64]=Oop [80]=Oop off=3964/0xf7c}
0f7c    ud2	# ShouldNotReachHere

0f90    B118: #	out( N1725 ) &lt;- in( B44 )  Freq: 1e-35
0f90    movl    RSI, #-34	# int
0f95    movq    RBP, [rsp + #40]	# spill
0f9a    movl    R9, [rsp + #48]	# spill
0f9f    movl    [rsp + #0], R9	# spill
0fa3    movl    R11, [rsp + #24]	# spill
0fa8    movl    [rsp + #4], R11	# spill
0fad    movl    R9, [rsp + #28]	# spill
0fb2    movl    [rsp + #16], R9	# spill
0fb7    movl    [rsp + #20], R10	# spill
0fbc    movq    [rsp + #40], RDX	# spill
0fc1    movl    [rsp + #52], R8	# spill
        nop 	# 2 bytes pad for loops and calls
0fc8    call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.String::equals @ bci:8  L[0]=rsp + #40 L[1]=rsp + #52 L[2]=_ STK[0]=rsp + #52
        # java.util.HashMap::putVal @ bci:91  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #40 L[3]=rsp + #64 L[4]=rsp + #4 L[5]=rsp + #16 L[6]=rsp + #80 L[7]=rsp + #20 L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_
        # OopMap {rbp=Oop [20]=NarrowOop [40]=Oop [52]=NarrowOop [64]=Oop [80]=Oop off=4048/0xfd0}
0fd0    ud2	# ShouldNotReachHere

0fe4    B119: #	out( N1725 ) &lt;- in( B63 )  Freq: 1e-35
0fe4    movl    RSI, #-34	# int
0fe9    movq    RBP, [rsp + #40]	# spill
0fee    movl    R8, [rsp + #48]	# spill
0ff3    movl    [rsp + #0], R8	# spill
0ff7    movl    R8, [rsp + #24]	# spill
0ffc    movl    [rsp + #4], R8	# spill
1001    movl    R11, [rsp + #28]	# spill
1006    movl    [rsp + #16], R11	# spill
100b    movq    [rsp + #32], R14	# spill
1010    movl    [rsp + #20], R10	# spill
1015    movq    [rsp + #48], R9	# spill
101a    movl    [rsp + #60], RCX	# spill
        nop 	# 2 bytes pad for loops and calls
1020    call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.String::equals @ bci:8  L[0]=rsp + #48 L[1]=rsp + #60 L[2]=_ STK[0]=rsp + #60
        # java.util.HashMap::putVal @ bci:203  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #48 L[3]=rsp + #64 L[4]=rsp + #4 L[5]=rsp + #16 L[6]=rsp + #80 L[7]=_ L[8]=_ L[9]=_ L[10]=rsp + #32 L[11]=_ L[12]=rsp + #20
        # OopMap {rbp=Oop [32]=Oop [48]=Oop [60]=NarrowOop [64]=Oop [80]=Oop off=4136/0x1028}
1028    ud2	# ShouldNotReachHere

103c    B120: #	out( N1725 ) &lt;- in( B37 )  Freq: 1.54957e-07
103c    movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
1044    call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:26  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ STK[0]=#NULL
        # OopMap {off=4172/0x104c}
104c    ud2	# ShouldNotReachHere

1060    B121: #	out( N1725 ) &lt;- in( B40 )  Freq: 2.22807e-08
1060    movl    RSI, #-187	# int
1065    movq    RBP, [rsp + #40]	# spill
106a    movl    R9, [rsp + #48]	# spill
106f    movl    [rsp + #0], R9	# spill
1073    movl    R9, [rsp + #24]	# spill
1078    movl    [rsp + #4], R9	# spill
107d    movl    RCX, [rsp + #28]	# spill
1081    movl    [rsp + #24], RCX	# spill
1085    movl    [rsp + #28], R10	# spill
108a    movl    [rsp + #48], R8	# spill
        nop 	# 1 bytes pad for loops and calls
1090    call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:85  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #64 L[4]=rsp + #4 L[5]=rsp + #24 L[6]=rsp + #80 L[7]=rsp + #28 L[8]=_ L[9]=_ L[10]=_ L[11]=rsp + #48 L[12]=_ STK[0]=rsp + #8
        # OopMap {rbp=Oop [8]=Oop [28]=NarrowOop [48]=NarrowOop [64]=Oop [80]=Oop off=4248/0x1098}
1098    ud2	# ShouldNotReachHere

10ac    B122: #	out( N1725 ) &lt;- in( B59 )  Freq: 5.12015e-09
10ac    movl    RSI, #-187	# int
10b1    movq    RBP, [rsp + #40]	# spill
10b6    movl    R8, [rsp + #48]	# spill
10bb    movl    [rsp + #0], R8	# spill
10bf    movl    R8, [rsp + #24]	# spill
10c4    movl    [rsp + #4], R8	# spill
10c9    movl    R9, [rsp + #28]	# spill
10ce    movl    [rsp + #24], R9	# spill
10d3    movq    [rsp + #40], R14	# spill
10d8    movl    [rsp + #28], R10	# spill
10dd    movq    [rsp + #48], R11	# spill
10e2    movl    [rsp + #56], RCX	# spill
        nop 	# 2 bytes pad for loops and calls
10e8    call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::putVal @ bci:197  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #48 L[3]=rsp + #64 L[4]=rsp + #4 L[5]=rsp + #24 L[6]=rsp + #80 L[7]=_ L[8]=_ L[9]=_ L[10]=rsp + #40 L[11]=rsp + #56 L[12]=rsp + #28 STK[0]=rsp + #48
        # OopMap {rbp=Oop [40]=Oop [48]=Oop [56]=NarrowOop [64]=Oop [80]=Oop off=4336/0x10f0}
10f0    ud2	# ShouldNotReachHere

1104    B123: #	out( B129 ) &lt;- in( B97 )  Freq: 2.43485e-10
1104    # exception oop is in rax; no code emitted
1104    movq    RSI, RAX	# spill
1107    jmp,s   B129

1109    B124: #	out( B129 ) &lt;- in( B88 )  Freq: 6.95928e-10
1109    # exception oop is in rax; no code emitted
1109    movq    RSI, RAX	# spill
110c    jmp,s   B129

110e    B125: #	out( B129 ) &lt;- in( B72 )  Freq: 2.60284e-08
110e    # exception oop is in rax; no code emitted
110e    movq    RSI, RAX	# spill
1111    jmp,s   B129

1113    B126: #	out( B129 ) &lt;- in( B70 )  Freq: 2.60289e-08
1113    # exception oop is in rax; no code emitted
1113    movq    RSI, RAX	# spill
1116    jmp,s   B129

1118    B127: #	out( B129 ) &lt;- in( B56 )  Freq: 3.21308e-07
1118    # exception oop is in rax; no code emitted
1118    movq    RSI, RAX	# spill
111b    jmp,s   B129

111d    B128: #	out( B129 ) &lt;- in( B36 )  Freq: 1.5293e-06
111d    # exception oop is in rax; no code emitted
111d    movq    RSI, RAX	# spill

1120    B129: #	out( N1725 ) &lt;- in( B128 B125 B124 B123 B127 B126 )  Freq: 1.9036e-06
1120    vzeroupper
	addq    rsp, 128	# Destroy frame
	popq    rbp

112b    jmp     rethrow_stub

--------------------------------------------------------------------------------
</opto_assembly>
<writer thread='24067'/>
                     
<writer thread='40963'/>
        
<writer thread='40195'/>
        
<writer thread='36611'/>
   1167  144       3       java.lang.String::checkBoundsOffCount (64 bytes)   made not entrant
<writer thread='24067'/>
           @ 1  
<writer thread='40963'/>
     
<writer thread='40195'/>
                            @ 7   java.lang.Class::
<writer thread='24067'/>
 java.lang.AbstractStringBuilder::isLatin1 (19 bytes)
<writer thread='43011'/>

============================= C2-compiled nmethod ==============================
<opto_assembly compile_id='451'>
----------------------- MetaData before Compile_id = 451 ------------------------
{method}
 - this oop:          0x0000000126af31b0
 - method holder:     &apos;java/util/HashMap&apos;
 - constants:         0x0000000126af0d88 constant pool [593] {0x0000000126af0d88} for &apos;java/util/HashMap&apos; cache=0x0000000126af6970
 - access:            0xc1000010  final 
 - name:              &apos;getNode&apos;
 - signature:         &apos;(ILjava/lang/Object;)Ljava/util/HashMap$Node;&apos;
 - max stack:         4
 - max locals:        8
 - size of params:    3
 - method size:       13
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x000000010c0a1de0
 - adapters:          AHE@0x00007f992d824a50: 0xbab00000 i2c: 0x000000010c0dc160 c2i: 0x000000010c0dc24a c2iUV: 0x000000010c0dc211 c2iNCI: 0x000000010c0dc287
 - compiled entry     0x000000010c81e040
 - code size:         148
 - code start:        0x0000000126af3098
 - code end (excl):   0x0000000126af312c
 - method data:       0x0000000126e97658
 - checked ex length: 0
 - linenumber start:  0x0000000126af312c
 - localvar length:   9
 - localvar start:    0x0000000126af3140
 - compiled code: nmethod   1167  172       3       java.util.HashMap::getNode (148 bytes)

------------------------ OptoAssembly for Compile_id = 451 -----------------------
#
#  java/util/HashMap$Node * ( java/util/HashMap:NotNull *, int, java/lang/Object * )
#
#r018 rsi:rsi   : parm 0: java/util/HashMap:NotNull *
#r016 rdx   : parm 1: int
#r010 rcx:rcx   : parm 2: java/lang/Object *
# -- Old rsp -- Framesize: 80 --
#r583 rsp+76: in_preserve
#r582 rsp+72: return address
#r581 rsp+68: in_preserve
#r580 rsp+64: saved fp register
#r579 rsp+60: pad2, stack alignment
#r578 rsp+56: pad2, stack alignment
#r577 rsp+52: Fixed slot 1
#r576 rsp+48: Fixed slot 0
#r595 rsp+44: spill
#r594 rsp+40: spill
#r593 rsp+36: spill
#r592 rsp+32: spill
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N456: #	out( B1 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B11 B2 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (288 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #64	# Create frame

02c     movl    R10, [RSI + #36 (8-bit)]	# compressed ptr ! Field: java/util/HashMap.table
030     testl   R10, R10	# compressed ptr
033     je,s   B11  P=0.124725 C=6815.000000

035     B2: #	out( B35 B3 ) &lt;- in( B1 )  Freq: 0.875275
035     movl    R11, [R12 + R10 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
03a     testl   R11, R11	# unsigned
03d     jbe,u   B35  P=0.000000 C=5965.000000

043     B3: #	out( B11 B4 ) &lt;- in( B2 )  Freq: 0.875275
043     decode_heap_oop_not_null R10,R10
047     decl    R11	# int
04a     andl    R11, RDX	# int
04d     movl    R13, [R10 + #16 + R11 &lt;&lt; #2]	# compressed ptr
052     testl   R13, R13	# compressed ptr
055     je,s   B11  P=0.284493 C=5965.000000

057     B4: #	out( B25 B5 ) &lt;- in( B3 )  Freq: 0.626265
057     movl    R10, [R12 + R13 &lt;&lt; 3 + #12] (compressed oop addressing)	# int ! Field: java/util/HashMap$Node.hash
05c     cmpl    R10, RDX
05f     je     B25  P=0.703912 C=4269.000000

065     B5: #	out( B11 B6 ) &lt;- in( B4 )  Freq: 0.18543
065     movl    R10, [R12 + R13 &lt;&lt; 3 + #24] (compressed oop addressing)	# compressed ptr ! Field: java/util/HashMap$Node.next
06a     testl   R10, R10	# compressed ptr
06d     je,s   B11  P=0.431962 C=1264.000000

06f     B6: #	out( B42 B7 ) &lt;- in( B5 )  Freq: 0.105331
06f     movl    R11, [R12 + R13 &lt;&lt; 3 + #8] (compressed oop addressing)	# compressed klass ptr
074     cmpl    R11, narrowklass: precise klass java/util/HashMap$TreeNode: 0x0000000127b21010:Constant:exact *	# compressed klass ptr
07b     je,u   B42  P=0.000001 C=-1.000000

081     B7: #	out( B8 ) &lt;- in( B6 )  Freq: 0.105331
081     decode_heap_oop_not_null R11,R10
085     xorl    R10, R10	# int

088     B8: #	out( B13 B9 ) &lt;- in( B7 B10 ) Loop( B8-B10 inner ) Freq: 0.118827
088     movl    R8, [R11 + #12 (8-bit)]	# int ! Field: java/util/HashMap$Node.hash
08c     cmpl    R8, RDX
08f     je,s   B13  P=0.686420 C=810.000000

091     B9: #	out( B11 B10 ) &lt;- in( B8 )  Freq: 0.0372619
091     movl    R11, [R11 + #24 (8-bit)]	# compressed ptr ! Field: java/util/HashMap$Node.next
095     # TLS is in R15
095     movq    R8, [R15 + #296 (32-bit)]	# ptr
09c     testl   rax, [R8]	# Safepoint: poll for GC        # java.util.HashMap::getNode @ bci:143  L[0]=_ L[1]=RDX L[2]=RCX L[3]=_ L[4]=_ L[5]=R11 L[6]=_ L[7]=_ STK[0]=R11
        # OopMap {r11=NarrowOop rcx=Oop off=156/0x9c}
09f     testl   R11, R11	# compressed ptr
0a2     je,s   B11  P=0.637795 C=254.000000

0a4     B10: #	out( B8 ) &lt;- in( B9 )  Freq: 0.0134965
0a4     decode_heap_oop_not_null R11,R11
0a8     jmp,s   B8

0aa     B11: #	out( B12 ) &lt;- in( B1 B9 B5 B3 )  Freq: 0.477598
0aa     xorl    R11, R11	# ptr

0ad     B12: #	out( N456 ) &lt;- in( B34 B21 B13 B16 B11 )  Freq: 0.999998
0ad     movq    RAX, R11	# spill
0b0     vzeroupper
	addq    rsp, 64	# Destroy frame
	popq    rbp
	movq    rscratch1, poll_offset[r15_thread] #polling_page_address
	testl   rax, [rscratch1]	# Safepoint: poll for GC

0c2     ret

0c3     B13: #	out( B12 B14 ) &lt;- in( B8 )  Freq: 0.0815655
0c3     movl    R8, [R11 + #16 (8-bit)]	# compressed ptr ! Field: java/util/HashMap$Node.key
0c7     decode_heap_oop R9,R8
0f3     movq    R13, RCX	# spill
0f6     cmpq    R9, RCX	# ptr
0f9     je,us  B12  P=0.303957 C=556.000000

0fb     B14: #	out( B48 B15 ) &lt;- in( B13 )  Freq: 0.0567731
0fb     movl    RBX, [RCX + #8 (8-bit)]	# compressed klass ptr
0fe     NullCheck RCX

0fe     B15: #	out( B43 B16 ) &lt;- in( B14 )  Freq: 0.0567731
0fe     cmpl    RBX, narrowklass: precise klass java/lang/String: 0x000000010bf8aca0:Constant:exact *	# compressed klass ptr
104     jne,u   B43  P=0.000001 C=-1.000000

10a     B16: #	out( B12 B17 ) &lt;- in( B15 )  Freq: 0.056773
10a     # checkcastPP of R13
10a     cmpq    R13, R9	# ptr
10d     je,us  B12  P=0.034001 C=15617.000000

10f     B17: #	out( B23 B18 ) &lt;- in( B16 )  Freq: 0.0548427
10f     movl    R9, [R12 + R8 &lt;&lt; 3 + #8] (compressed oop addressing)	# compressed klass ptr
114     NullCheck R8

114     B18: #	out( B45 B19 ) &lt;- in( B17 )  Freq: 0.0548426
114     cmpl    R9, narrowklass: precise klass java/lang/String: 0x000000010bf8aca0:Constant:exact *	# compressed klass ptr
11b     jne,u   B45  P=0.000000 C=-1.000000

121     B19: #	out( B44 B20 ) &lt;- in( B18 )  Freq: 0.0548426
121     movsbl  R9, [R13 + #20 (8-bit)]	# byte ! Field: java/lang/String.coder (constant)
126     decode_heap_oop_not_null R8,R8
12a     # checkcastPP of R8
12a     movsbl  RBP, [R8 + #20 (8-bit)]	# byte ! Field: java/lang/String.coder (constant)
12f     cmpl    R9, RBP
132     jne     B44  P=0.000000 C=13329.000000

138     B20: #	out( B22 B21 ) &lt;- in( B19 )  Freq: 0.0548426
138     movl    R8, [R8 + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value (constant)
13c     movl    RDI, [R13 + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value (constant)
140     movl    RBX, [R12 + R8 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
145     movl    RCX, [R12 + RDI &lt;&lt; 3 + #12] (compressed oop addressing)	# range
14a     cmpl    RCX, RBX
14c     jne     B22  P=0.000001 C=-1.000000

152     B21: #	out( B12 B22 ) &lt;- in( B20 )  Freq: 0.0548425
152     decode_heap_oop_not_null R10,R8
156     leaq    RSI, [R12 + R8 &lt;&lt; 3 + #16] (compressed oop addressing)	# ptr compressedoopoff32
15b     decode_heap_oop_not_null R10,RDI
15f     leaq    RDI, [R12 + RDI &lt;&lt; 3 + #16] (compressed oop addressing)	# ptr compressedoopoff32
164     String Equals RDI,RSI,RCX -&gt; RAX    // KILL XMM1, XMM0, RBX
220     movl    R10, RAX	# spill
223     testl   RAX, RAX
225     jne     B12  P=1.000000 C=387.000000

22b     B22: #	out( B24 ) &lt;- in( B21 B20 )  Freq: 8.09935e-08
22b     movl    RBP, R10	# spill
22e     jmp,s   B24

230     B23: #	out( B24 ) &lt;- in( B17 )  Freq: 5.55709e-08
230     xorl    RBP, RBP	# int

232     B24: #	out( N456 ) &lt;- in( B23 B22 )  Freq: 1.36564e-07
232     movl    RSI, #-187	# int
237     movl    [rsp + #0], RDX	# spill
23a     movq    [rsp + #8], R13	# spill
23f     movq    [rsp + #16], R11	# spill
244     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::getNode @ bci:129  L[0]=_ L[1]=rsp + #0 L[2]=rsp + #8 L[3]=_ L[4]=_ L[5]=rsp + #16 L[6]=_ L[7]=_ STK[0]=RBP
        # OopMap {[8]=Oop [16]=Oop off=588/0x24c}
24c     ud2	# ShouldNotReachHere

260     B25: #	out( B34 B26 ) &lt;- in( B4 )  Freq: 0.440836
260     movl    R11, [R12 + R13 &lt;&lt; 3 + #16] (compressed oop addressing)	# compressed ptr ! Field: java/util/HashMap$Node.key
265     decode_heap_oop R10,R11
291     movq    R9, RCX	# spill
294     cmpq    R10, RCX	# ptr
297     je,u   B34  P=0.336106 C=3005.000000

29d     B26: #	out( B47 B27 ) &lt;- in( B25 )  Freq: 0.292668
29d     movl    R8, [RCX + #8 (8-bit)]	# compressed klass ptr
2a1     NullCheck RCX

2a1     B27: #	out( B36 B28 ) &lt;- in( B26 )  Freq: 0.292668
2a1     cmpl    R8, narrowklass: precise klass java/lang/String: 0x000000010bf8aca0:Constant:exact *	# compressed klass ptr
2a8     jne,u   B36  P=0.000001 C=-1.000000

2ae     B28: #	out( B34 B29 ) &lt;- in( B27 )  Freq: 0.292667
2ae     # checkcastPP of R9
2ae     cmpq    R9, R10	# ptr
2b1     je,u   B34  P=0.034001 C=15617.000000

2b7     B29: #	out( B39 B30 ) &lt;- in( B28 )  Freq: 0.282716
2b7     movl    R8, [R12 + R11 &lt;&lt; 3 + #8] (compressed oop addressing)	# compressed klass ptr
2bc     NullCheck R11

2bc     B30: #	out( B46 B31 ) &lt;- in( B29 )  Freq: 0.282716
2bc     cmpl    R8, narrowklass: precise klass java/lang/String: 0x000000010bf8aca0:Constant:exact *	# compressed klass ptr
2c3     jne,u   B46  P=0.000000 C=-1.000000

2c9     B31: #	out( B41 B32 ) &lt;- in( B30 )  Freq: 0.282716
2c9     movsbl  R8, [R9 + #20 (8-bit)]	# byte ! Field: java/lang/String.coder (constant)
2ce     decode_heap_oop_not_null R11,R11
2d2     # checkcastPP of R11
2d2     movsbl  R10, [R11 + #20 (8-bit)]	# byte ! Field: java/lang/String.coder (constant)
2d7     cmpl    R8, R10
2da     jne     B41  P=0.000000 C=13329.000000

2e0     B32: #	out( B37 B33 ) &lt;- in( B31 )  Freq: 0.282716
2e0     movl    R11, [R11 + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value (constant)
2e4     movl    R10, [R9 + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value (constant)
2e8     movl    RBX, [R12 + R11 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
2ed     movl    RCX, [R12 + R10 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
2f2     cmpl    RCX, RBX
2f4     jne     B37  P=0.000001 C=-1.000000

2fa     B33: #	out( B38 B34 ) &lt;- in( B32 )  Freq: 0.282716
2fa     decode_heap_oop_not_null R8,R11
2fe     leaq    RSI, [R12 + R11 &lt;&lt; 3 + #16] (compressed oop addressing)	# ptr compressedoopoff32
303     decode_heap_oop_not_null R11,R10
307     leaq    RDI, [R12 + R10 &lt;&lt; 3 + #16] (compressed oop addressing)	# ptr compressedoopoff32
30c     String Equals RDI,RSI,RCX -&gt; RAX    // KILL XMM1, XMM0, RBX
3c8     testl   RAX, RAX
3ca     je,s   B38  P=0.000000 C=1995.000000

3cc     B34: #	out( B12 ) &lt;- in( B33 B25 B28 )  Freq: 0.440834
3cc     decode_heap_oop_not_null R11,R13
3d0     jmp     B12

3d5     B35: #	out( N456 ) &lt;- in( B2 )  Freq: 4.37638e-07
3d5     movl    RSI, #-187	# int
3da     movl    RBP, RDX	# spill
3dc     movq    [rsp + #0], RCX	# spill
3e0     movl    [rsp + #8], R10	# spill
3e5     movl    [rsp + #16], R11	# spill
        nop 	# 2 bytes pad for loops and calls
3ec     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::getNode @ bci:14  L[0]=_ L[1]=RBP L[2]=rsp + #0 L[3]=rsp + #8 L[4]=_ L[5]=_ L[6]=rsp + #16 L[7]=_ STK[0]=rsp + #16
        # OopMap {[0]=Oop [8]=NarrowOop off=1012/0x3f4}
3f4     ud2	# ShouldNotReachHere

408     B36: #	out( N456 ) &lt;- in( B27 )  Freq: 2.92668e-07
408     movl    RSI, #-34	# int
40d     movl    RBP, RDX	# spill
40f     movl    [rsp + #8], R13	# spill
414     movq    [rsp + #16], RCX	# spill
419     movl    [rsp + #12], R11	# spill
        nop 	# 2 bytes pad for loops and calls
420     call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::getNode @ bci:59  L[0]=_ L[1]=RBP L[2]=rsp + #16 L[3]=_ L[4]=rsp + #8 L[5]=_ L[6]=_ L[7]=_ STK[0]=rsp + #16 STK[1]=rsp + #12
        # OopMap {[8]=NarrowOop [12]=NarrowOop [16]=Oop off=1064/0x428}
428     ud2	# ShouldNotReachHere

43c     B37: #	out( B38 ) &lt;- in( B32 )  Freq: 2.82716e-07
43c     xorl    RAX, RAX	# int

43e     B38: #	out( B40 ) &lt;- in( B33 B37 )  Freq: 4.17525e-07
43e     movl    RBP, RAX	# spill
440     jmp,s   B40

442     B39: #	out( B40 ) &lt;- in( B29 )  Freq: 2.86471e-07
442     xorl    RBP, RBP	# int

444     B40: #	out( N456 ) &lt;- in( B39 B38 )  Freq: 7.03996e-07
444     movl    RSI, #-187	# int
449     movl    [rsp + #0], RDX	# spill
44c     movq    [rsp + #8], R9	# spill
451     movl    [rsp + #4], R13	# spill
        nop 	# 2 bytes pad for loops and calls
458     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::getNode @ bci:62  L[0]=_ L[1]=rsp + #0 L[2]=rsp + #8 L[3]=_ L[4]=rsp + #4 L[5]=_ L[6]=_ L[7]=_ STK[0]=RBP
        # OopMap {[4]=NarrowOop [8]=Oop off=1120/0x460}
460     ud2	# ShouldNotReachHere

474     B41: #	out( N456 ) &lt;- in( B31 )  Freq: 1.41358e-07
474     movl    RSI, #-187	# int
479     movl    RBP, RDX	# spill
47b     movl    [rsp + #8], R13	# spill
480     movq    [rsp + #16], R9	# spill
485     movq    [rsp + #24], R11	# spill
48a     movl    [rsp + #12], R8	# spill
48f     movl    [rsp + #32], R10	# spill
494     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.String::equals @ bci:33  L[0]=rsp + #16 L[1]=_ L[2]=rsp + #24 STK[0]=rsp + #12 STK[1]=rsp + #32
        # java.util.HashMap::getNode @ bci:59  L[0]=_ L[1]=RBP L[2]=rsp + #16 L[3]=_ L[4]=rsp + #8 L[5]=_ L[6]=_ L[7]=_
        # OopMap {[8]=NarrowOop [16]=Oop [24]=Oop off=1180/0x49c}
49c     ud2	# ShouldNotReachHere

4b0     B42: #	out( N456 ) &lt;- in( B6 )  Freq: 1.0673e-07
4b0     movl    RSI, #-187	# int
4b5     movl    RBP, RDX	# spill
4b7     movq    [rsp + #0], RCX	# spill
4bb     movl    [rsp + #8], R13	# spill
4c0     movl    [rsp + #12], R10	# spill
        nop 	# 3 bytes pad for loops and calls
4c8     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::getNode @ bci:84  L[0]=_ L[1]=RBP L[2]=rsp + #0 L[3]=_ L[4]=rsp + #8 L[5]=rsp + #12 L[6]=_ L[7]=_ STK[0]=#1
        # OopMap {[0]=Oop [8]=NarrowOop [12]=NarrowOop off=1232/0x4d0}
4d0     ud2	# ShouldNotReachHere

4e4     B43: #	out( N456 ) &lt;- in( B15 )  Freq: 5.67731e-08
4e4     movl    RSI, #-34	# int
4e9     movl    RBP, RDX	# spill
4eb     movq    [rsp + #8], R11	# spill
4f0     movq    [rsp + #16], RCX	# spill
4f5     movl    [rsp + #24], R8	# spill
        nop 	# 2 bytes pad for loops and calls
4fc     call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::getNode @ bci:126  L[0]=_ L[1]=RBP L[2]=rsp + #16 L[3]=_ L[4]=_ L[5]=rsp + #8 L[6]=_ L[7]=_ STK[0]=rsp + #16 STK[1]=rsp + #24
        # OopMap {[8]=Oop [16]=Oop [24]=NarrowOop off=1284/0x504}
504     ud2	# ShouldNotReachHere

518     B44: #	out( N456 ) &lt;- in( B19 )  Freq: 2.74213e-08
518     movl    RSI, #-187	# int
51d     movl    [rsp + #0], RDX	# spill
520     movq    [rsp + #16], R11	# spill
525     movq    [rsp + #24], R13	# spill
52a     movq    [rsp + #32], R8	# spill
52f     movl    [rsp + #4], R9	# spill
534     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.String::equals @ bci:33  L[0]=rsp + #24 L[1]=_ L[2]=rsp + #32 STK[0]=rsp + #4 STK[1]=RBP
        # java.util.HashMap::getNode @ bci:126  L[0]=_ L[1]=rsp + #0 L[2]=rsp + #24 L[3]=_ L[4]=_ L[5]=rsp + #16 L[6]=_ L[7]=_
        # OopMap {[16]=Oop [24]=Oop [32]=Oop off=1340/0x53c}
53c     ud2	# ShouldNotReachHere

550     B45: #	out( N456 ) &lt;- in( B18 )  Freq: 1e-35
550     movl    RSI, #-34	# int
555     movl    RBP, RDX	# spill
557     movq    [rsp + #8], R11	# spill
55c     movq    [rsp + #16], R13	# spill
561     movl    [rsp + #28], R8	# spill
        nop 	# 2 bytes pad for loops and calls
568     call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.String::equals @ bci:8  L[0]=rsp + #16 L[1]=rsp + #28 L[2]=_ STK[0]=rsp + #28
        # java.util.HashMap::getNode @ bci:126  L[0]=_ L[1]=RBP L[2]=rsp + #16 L[3]=_ L[4]=_ L[5]=rsp + #8 L[6]=_ L[7]=_
        # OopMap {[8]=Oop [16]=Oop [28]=NarrowOop off=1392/0x570}
570     ud2	# ShouldNotReachHere

584     B46: #	out( N456 ) &lt;- in( B30 )  Freq: 1e-35
584     movl    RSI, #-34	# int
589     movl    RBP, RDX	# spill
58b     movl    [rsp + #8], R13	# spill
590     movq    [rsp + #16], R9	# spill
595     movl    [rsp + #24], R11	# spill
        nop 	# 2 bytes pad for loops and calls
59c     call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.String::equals @ bci:8  L[0]=rsp + #16 L[1]=rsp + #24 L[2]=_ STK[0]=rsp + #24
        # java.util.HashMap::getNode @ bci:59  L[0]=_ L[1]=RBP L[2]=rsp + #16 L[3]=_ L[4]=rsp + #8 L[5]=_ L[6]=_ L[7]=_
        # OopMap {[8]=NarrowOop [16]=Oop [24]=NarrowOop off=1444/0x5a4}
5a4     ud2	# ShouldNotReachHere

5b8     B47: #	out( N456 ) &lt;- in( B26 )  Freq: 1.39555e-07
5b8     movl    RSI, #-187	# int
5bd     movl    RBP, RDX	# spill
5bf     movl    [rsp + #8], R13	# spill
5c4     movl    [rsp + #12], R11	# spill
5c9     movq    [rsp + #16], RCX	# spill
        nop 	# 2 bytes pad for loops and calls
5d0     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::getNode @ bci:53  L[0]=_ L[1]=RBP L[2]=rsp + #16 L[3]=_ L[4]=rsp + #8 L[5]=_ L[6]=_ L[7]=rsp + #12 STK[0]=rsp + #16
        # OopMap {[8]=NarrowOop [12]=NarrowOop [16]=Oop off=1496/0x5d8}
5d8     ud2	# ShouldNotReachHere

5ec     B48: #	out( N456 ) &lt;- in( B14 )  Freq: 2.70715e-08
5ec     movl    RSI, #-187	# int
5f1     movl    RBP, RDX	# spill
5f3     movq    [rsp + #8], R11	# spill
5f8     movq    [rsp + #16], RCX	# spill
5fd     movl    [rsp + #24], R8	# spill
        nop 	# 2 bytes pad for loops and calls
604     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.util.HashMap::getNode @ bci:120  L[0]=_ L[1]=RBP L[2]=rsp + #16 L[3]=_ L[4]=_ L[5]=rsp + #8 L[6]=_ L[7]=rsp + #24 STK[0]=rsp + #16
        # OopMap {[8]=Oop [16]=Oop [24]=NarrowOop off=1548/0x60c}
60c     ud2	# ShouldNotReachHere

--------------------------------------------------------------------------------
</opto_assembly>
   1173  172       3       java.util.HashMap::getNode (148 bytes)   made not entrant
                              @ 59   java.lang.String::equals (50 bytes)   inline (hot)
                               \-&gt; TypeProfile (1846/1846 counts) = java/lang/String
                                @ 44   java.lang.StringLatin1::equals (36 bytes)   (intrinsic)
                              @ 126   java.lang.String::equals (50 bytes)   inline (hot)
                               \-&gt; TypeProfile (358/358 counts) = java/lang/String
                                @ 44   java.lang.StringLatin1::equals (36 bytes)   (intrinsic)
<writer thread='42499'/>
   1173  438       3       java.util.stream.ReferencePipeline::forEachWithCancel (23 bytes)
<writer thread='40963'/>
                     @ 7   java.lang.StringUTF16::
<writer thread='42499'/>
        
<writer thread='24067'/>
        
<writer thread='40195'/>
getClassLoader0
<writer thread='40963'/>
getChar
<writer thread='24067'/>
     
<writer thread='42499'/>
     
<writer thread='40195'/>
 (5 bytes)
<writer thread='40963'/>
 (60 bytes)
<writer thread='24067'/>
      
<writer thread='42499'/>
      
<writer thread='40195'/>

<writer thread='24067'/>
             @ 16   java.lang.StringLatin1::newString (17 bytes)
                                  @ 9   java.util.Arrays::copyOfRange (64 bytes)   callee is too large
<writer thread='40195'/>
                                  @ 15   java.lang.ClassLoader::needsClassLoaderPermissionCheck (27 bytes)
<writer thread='24067'/>
                                  @ 13   java.lang.String::&lt;init&gt; (15 bytes)
<writer thread='42499'/>
           @ 1   java.util.stream.Sink::cancellationRequested (2 bytes)   no static binding
<writer thread='24067'/>
                                    @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
<writer thread='42499'/>
                              @ 13   java.util.Spliterator::tryAdvance (0 bytes)   no static binding
<writer thread='40195'/>
                                    @ 15   java.lang.ClassLoader::isAncestor (20 bytes)
<writer thread='40963'/>
   intrinsic
<writer thread='24067'/>
                                @ 31   java.lang.StringUTF16::newString (50 bytes)   callee is too large
<writer thread='40963'/>
                              @ 70   java.lang.String::indexOf (29 bytes)
                                @ 1   java.lang.String::isLatin1 (19 bytes)
<writer thread='24067'/>
                              @ 296   java.lang.StringBuilder::&lt;init&gt; (6 bytes)
<writer thread='40195'/>
                                  @ 25   java.lang.SecurityManager::checkPermission (5 bytes)   not inlineable
<writer thread='24067'/>
                                @ 2   java.lang.AbstractStringBuilder::&lt;init&gt; (39 bytes)   callee is too large
                              @ 312   java.lang.StringBuilder::append (10 bytes)
<writer thread='40195'/>
                              
<writer thread='24067'/>
                                @ 4   java.lang.AbstractStringBuilder::append (33 bytes)   callee is too large
<writer thread='40963'/>
                                @ 13   java.lang.StringLatin1::indexOf
<writer thread='40195'/>
@ 69   java.lang.Class::getName (18 bytes)
<writer thread='40963'/>
 (61 bytes)   callee is too large
        
<writer thread='40195'/>
                                @ 14   java.lang.Class::initClassName (0 bytes)   native method
<writer thread='40963'/>
                        @ 25   java.lang.StringUTF16::indexOf (43 bytes)   callee is too large
<writer thread='40195'/>
                              @ 74  
<writer thread='40963'/>
                              @ 81   java.lang.String::
<writer thread='40195'/>
 java.lang.String::startsWith (7 bytes)
<writer thread='40963'/>
charAt (25 bytes)
<writer thread='36611'/>
<writer thread='40963'/>
                   
<writer thread='40195'/>
        
<writer thread='38147'/>
                              @ 20   java.util.HashMap::resize (356 bytes)   hot method too big
                              @ 56   java.util.HashMap::newNode (13 bytes)   inline (hot)
                              @ 56   java.util.LinkedHashMap::newNode (23 bytes)   executed &lt; MinInliningThreshold times
                               \-&gt; TypeProfile (16307/16368 counts) = java/util/HashMap
                                @ 9   java.util.HashMap$Node::&lt;init&gt; (26 bytes)   inline (hot)
                                  @ 1   java.lang.Object::&lt;init&gt; (1 bytes)   inline (hot)
                              @ 91   java.lang.String::equals (50 bytes)   inline (hot)
                               \-&gt; TypeProfile (1095/1095 counts) = java/lang/String
                                @ 44   java.lang.StringLatin1::equals (36 bytes)   (intrinsic)
                              @ 203   java.lang.String::equals (50 bytes)   inline (hot)
                               \-&gt; TypeProfile (252/252 counts) = java/lang/String
                                @ 44   java.lang.StringLatin1::equals (36 bytes)   (intrinsic)
                              @ 152   java.util.HashMap::newNode (13 bytes)   inline (hot)
                               \-&gt; TypeProfile (5705/5705 counts) = java/util/HashMap
                                @ 9   java.util.HashMap$Node::&lt;init&gt; (26 bytes)   inline (hot)
                                  @ 1   java.lang.Object::&lt;init&gt; (1 bytes)   inline (hot)
                              @ 253   java.util.HashMap::afterNodeAccess (1 bytes)   inline (hot)
                               \-&gt; TypeProfile (1363/1363 counts) = java/util/HashMap
                              @ 288   java.util.HashMap::resize (356 bytes)   hot method too big
                              @ 295   java.util.HashMap::afterNodeInsertion (1 bytes)   inline (hot)
                              @ 295   java.util.LinkedHashMap::afterNodeInsertion (40 bytes)   executed &lt; MinInliningThreshold times
                               \-&gt; TypeProfile (22012/22073 counts) = java/util/HashMap
<writer thread='24323'/>

============================= C2-compiled nmethod ==============================
<opto_assembly compile_id='421'>
----------------------- MetaData before Compile_id = 421 ------------------------
{method}
 - this oop:          0x0000000126d17bd8
 - method holder:     &apos;jdk/internal/org/objectweb/asm/ByteVector&apos;
 - constants:         0x0000000126d16a28 constant pool [102] {0x0000000126d16a28} for &apos;jdk/internal/org/objectweb/asm/ByteVector&apos; cache=0x0000000126d18120
 - access:            0xc1000001  public 
 - name:              &apos;putUTF8&apos;
 - signature:         &apos;(Ljava/lang/String;)Ljdk/internal/org/objectweb/asm/ByteVector;&apos;
 - max stack:         5
 - max locals:        7
 - size of params:    2
 - method size:       13
 - highest level:     3
 - vtable index:      10
 - i2i entry:         0x000000010c0a1de0
 - adapters:          AHE@0x00007f99308e16b0: 0xbb000000 i2c: 0x000000010c0e9b60 c2i: 0x000000010c0e9c47 c2iUV: 0x000000010c0e9c0e c2iNCI: 0x000000010c0e9c84
 - compiled entry     0x000000010c7d68a0
 - code size:         144
 - code start:        0x0000000126d17ad8
 - code end (excl):   0x0000000126d17b68
 - method data:       0x0000000126d57b08
 - checked ex length: 0
 - linenumber start:  0x0000000126d17b68
 - localvar length:   7
 - localvar start:    0x0000000126d17b82
 - compiled code: nmethod   1175   26       3       jdk.internal.org.objectweb.asm.ByteVector::putUTF8 (144 bytes)

------------------------ OptoAssembly for Compile_id = 421 -----------------------
#
#  jdk/internal/org/objectweb/asm/ByteVector * ( jdk/internal/org/objectweb/asm/ByteVector:NotNull *, java/lang/String:exact * )
#
#r018 rsi:rsi   : parm 0: jdk/internal/org/objectweb/asm/ByteVector:NotNull *
#r016 rdx:rdx   : parm 1: java/lang/String:exact *
# -- Old rsp -- Framesize: 80 --
#r583 rsp+76: in_preserve
#r582 rsp+72: return address
#r581 rsp+68: in_preserve
#r580 rsp+64: saved fp register
#r579 rsp+60: pad2, stack alignment
#r578 rsp+56: pad2, stack alignment
#r577 rsp+52: Fixed slot 1
#r576 rsp+48: Fixed slot 0
#r595 rsp+44: spill
#r594 rsp+40: spill
#r593 rsp+36: spill
#r592 rsp+32: spill
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N612: #	out( B1 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B51 B2 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (264 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #64	# Create frame

02c     movq    R10, RSI	# spill
02f     movq    R9, RDX	# spill
032     movl    R8, [RDX + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value (constant)
036     NullCheck RDX

036     B2: #	out( B52 B3 ) &lt;- in( B1 )  Freq: 0.999999
036     movl    R11, [R12 + R8 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
03b     NullCheck R8

03b     B3: #	out( B46 B4 ) &lt;- in( B2 )  Freq: 0.999998
03b     movsbl  RCX, [RDX + #20 (8-bit)]	# byte ! Field: java/lang/String.coder (constant)
03f     sarl    R11, RCX
042     cmpl    R11, #65535
049     jg     B46  P=0.000000 C=990.000000

04f     B4: #	out( B53 B5 ) &lt;- in( B3 )  Freq: 0.999997
04f     movq    RBX, RSI	# spill
052     movl    RCX, [RSI + #16 (8-bit)]	# compressed ptr ! Field: jdk/internal/org/objectweb/asm/ByteVector.data
055     movl    R8, [R12 + RCX &lt;&lt; 3 + #12] (compressed oop addressing)	# range
05a     NullCheck RCX

05a     B5: #	out( B33 B6 ) &lt;- in( B4 )  Freq: 0.999996
05a     movl    RDI, [RSI + #12 (8-bit)]	# int ! Field: jdk/internal/org/objectweb/asm/ByteVector.length
05d     movl    RBP, R11	# spill
060     addl    RBP, RDI	# int
062     movl    RDX, R11	# spill
065     shrl    RDX, #8
068     addl    RBP, #2	# int
06b     movsbl  RAX, RDX	# i2b
06e     cmpl    RBP, R8
071     jg     B33  P=0.183838 C=990.000000

077     B6: #	out( B42 B7 ) &lt;- in( B35 B5 )  Freq: 0.999993
077     movl    RSI, [R12 + RCX &lt;&lt; 3 + #12] (compressed oop addressing)	# range
07c     movl    R10, RDI	# spill
07f     incl    R10	# int
082     cmpl    RDI, RSI	# unsigned
084     jnb,u   B42  P=0.000001 C=-1.000000

08a     B7: #	out( B43 B8 ) &lt;- in( B6 )  Freq: 0.999992
08a     decode_heap_oop_not_null R8,RCX
08e     movb    [R8 + #16 + RDI], RDX	# byte
093     movl    R13, RDI	# spill
096     addl    R13, #2	# int
09a     cmpl    R10, RSI	# unsigned
09d     jnb,u   B43  P=0.000001 C=-1.000000

0a3     B8: #	out( B32 B9 ) &lt;- in( B7 )  Freq: 0.999991
0a3     movslq  RAX, RDI	# i2l
0a6     movb    [R8 + #17 + RAX], R11	# byte
0ab     testl   R11, R11
0ae     jle     B32  P=0.038645 C=25618.000000

0b4     B9: #	out( B44 B10 ) &lt;- in( B8 )  Freq: 0.961346
0b4     cmpb    [R9 + #20 (8-bit)], #0
0b9     jne     B44  P=0.000001 C=-1.000000

0bf     B10: #	out( B44 B11 ) &lt;- in( B9 )  Freq: 0.961345
0bf     movl    RDX, [R9 + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value (constant)
0c3     movl    R10, [R12 + RDX &lt;&lt; 3 + #12] (compressed oop addressing)	# range
0c8     NullCheck RDX

0c8     B11: #	out( B44 B12 ) &lt;- in( B10 )  Freq: 0.961344
0c8     testl   R10, R10	# unsigned
0cb     jbe,u   B44  P=0.000001 C=-1.000000

0d1     B12: #	out( B44 B13 ) &lt;- in( B11 )  Freq: 0.961343
0d1     movslq  RBP, R10	# i2l
0d4     movslq  R14, R11	# i2l
0d7     movq    R10, R14	# spill
0da     decq    R10	# long
0dd     cmpq    R10, RBP	# unsigned
0e0     jnb,u   B44  P=0.000001 C=-1.000000

0e6     B13: #	out( B44 B14 ) &lt;- in( B12 )  Freq: 0.961342
0e6     cmpl    R13, RSI	# unsigned
0e9     jnb,u   B44  P=0.000001 C=-1.000000

0ef     B14: #	out( B44 B15 ) &lt;- in( B13 )  Freq: 0.961341
0ef     movslq  R10, RSI	# i2l
0f2     movslq  RSI, R13	# i2l
0f5     addq    RSI, R14	# long
0f8     decq    RSI	# long
0fb     cmpq    RSI, R10	# unsigned
0fe     jnb,u   B44  P=0.000001 C=-1.000000

104     B15: #	out( B47 B16 ) &lt;- in( B14 )  Freq: 0.96134
104     movsbl  RSI, [R12 + RDX &lt;&lt; 3 + #16] (compressed oop addressing)	# byte
10a     movl    R10, RSI	# spill
10d     movzbl  R10, R10	# int &amp; 0xFF
111     movl    RBP, R10	# spill
114     decl    RBP	# int
116     cmpl    RBP, #127	# unsigned
119     jnb,u   B47  P=0.000000 C=24628.000000

11f     B16: #	out( B45 B17 ) &lt;- in( B15 )  Freq: 0.96134
11f     movb    [R8 + #18 + RAX], RSI	# byte
124     movl    RSI, R11	# spill
127     addl    RSI, #-3	# int
12a     decode_heap_oop_not_null R14,RDX
12e     movl    RDX, #1	# int
133     movl    R13, #-2147483648	# int
139     cmpl    R11, RSI
13c     cmovll RSI, R13	# signed, int
140     cmpl    RSI, #1
143     jle     B45  P=0.000001 C=-1.000000

149     B17: #	out( B19 ) &lt;- in( B16 )  Freq: 0.961339
149     movl    RBP, #4000	# int
14e     # TLS is in R15
14e     jmp,s   B19

150     B18: #	out( B19 ) &lt;- in( B25 ) top-of-loop Freq: 23.8845
150     movdq   R9, XMM0	# spill
155     movdq   RBX, XMM1	# spill
15a     movdl   R11, XMM2	# spill
15f     movdl   RCX, XMM4	# spill
163     movl    RDI, [rsp + #0]	# spill

166     B19: #	out( B20 ) &lt;- in( B17 B18 ) Loop( B19-B18 ) Freq: 24.8459
166     movl    RAX, RSI	# spill
168     subl    RAX, RDX	# int
16a     cmpl    RAX, RBP
16c     cmovlgt RAX, RBP	# min
16f     addl    RAX, RDX	# int
171     movdq   XMM0, R9	# spill
176     movdq   XMM1, RBX	# spill
17b     movdl   XMM2, R11	# spill
180     movdl   XMM4, RCX	# spill
184     movl    [rsp + #0], RDI	# spill
        nop 	# 9 bytes pad for loops and calls

190     B20: #	out( B36 B21 ) &lt;- in( B19 B24 ) Loop( B20-B24 inner main of N239 strip mined) Freq: 642.901
190     movl    R13, RDX	# spill
193     addl    R13, [RSP + #0 (32-bit)]	# int
197     movslq  RBX, RDX	# i2l
19a     movsbl  R11, [R14 + #16 + RBX]	# byte
1a0     movl    R10, R11	# spill
1a3     movzbl  R10, R10	# int &amp; 0xFF
1a7     movl    RCX, R10	# spill
1aa     decl    RCX	# int
1ac     cmpl    RCX, #127	# unsigned
1af     jnb,u   B36  P=0.000000 C=24628.000000

1b5     B21: #	out( B37 B22 ) &lt;- in( B20 )  Freq: 642.9
1b5     movslq  RDI, R13	# i2l
1b8     movb    [R8 + #18 + RDI], R11	# byte
1bd     movsbl  R11, [R14 + #17 + RBX]	# byte
1c3     movl    R10, R11	# spill
1c6     movzbl  R10, R10	# int &amp; 0xFF
1ca     movl    RCX, R10	# spill
1cd     decl    RCX	# int
1cf     cmpl    RCX, #127	# unsigned
1d2     jnb,u   B37  P=0.000000 C=24628.000000

1d8     B22: #	out( B38 B23 ) &lt;- in( B21 )  Freq: 642.9
1d8     movb    [R8 + #19 + RDI], R11	# byte
1dd     movsbl  R9, [R14 + #18 + RBX]	# byte
1e3     movl    R10, R9	# spill
1e6     movzbl  R10, R10	# int &amp; 0xFF
1ea     movl    R11, R10	# spill
1ed     decl    R11	# int
1f0     cmpl    R11, #127	# unsigned
1f4     jnb,u   B38  P=0.000000 C=24628.000000

1fa     B23: #	out( B39 B24 ) &lt;- in( B22 )  Freq: 642.9
1fa     movb    [R8 + #20 + RDI], R9	# byte
1ff     movsbl  R11, [R14 + #19 + RBX]	# byte
205     movl    R10, R11	# spill
208     movzbl  R10, R10	# int &amp; 0xFF
20c     movl    RCX, R10	# spill
20f     decl    RCX	# int
211     cmpl    RCX, #127	# unsigned
214     jnb,u   B39  P=0.000000 C=24628.000000

21a     B24: #	out( B20 B25 ) &lt;- in( B23 )  Freq: 642.899
21a     movb    [R8 + #21 + RDI], R11	# byte
21f     addl    RDX, #4	# int
222     cmpl    RDX, RAX
224     jl     B20	# loop end  P=0.961355 C=24628.000000

22a     B25: #	out( B18 B26 ) &lt;- in( B24 )  Freq: 24.8446
22a     movq    R10, [R15 + #296 (32-bit)]	# ptr
231     addl    R13, #6	# int
235     testl   rax, [R10]	# Safepoint: poll for GC        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:134  L[0]=XMM1 L[1]=XMM0 L[2]=XMM2 L[3]=R13 L[4]=R8 L[5]=RDX L[6]=_
        # OopMap {r8=Oop r14=Oop xmm0=Oop xmm1=Oop xmm4=NarrowOop off=565/0x235}
238     cmpl    RDX, RSI
23a     jl     B18  P=0.961355 C=24628.000000

240     B26: #	out( B27 ) &lt;- in( B25 )  Freq: 0.960113
240     movdq   R9, XMM0	# spill
245     movdq   RBX, XMM1	# spill
24a     movdl   R11, XMM2	# spill
24f     movdl   RCX, XMM4	# spill
253     movl    RDI, [rsp + #0]	# spill

256     B27: #	out( B32 B28 ) &lt;- in( B45 B26 )  Freq: 0.960114
256     cmpl    RDX, R11
259     jge,s   B32  P=0.500000 C=-1.000000

25b     B28: #	out( B29 ) &lt;- in( B27 )  Freq: 0.480057
25b     # castII of RDX

25b     B29: #	out( B48 B30 ) &lt;- in( B28 B30 ) Loop( B29-B30 inner post of N537) Freq: 0.960113
25b     movsbl  RSI, [R14 + #16 + RDX]	# byte
261     movl    R13, RDX	# spill
264     addl    R13, RDI	# int
267     movl    R10, RSI	# spill
26a     movzbl  R10, R10	# int &amp; 0xFF
26e     movl    RBP, R10	# spill
271     decl    RBP	# int
273     cmpl    RBP, #127	# unsigned
276     jnb,u   B48  P=0.000000 C=24628.000000

27c     B30: #	out( B29 B31 ) &lt;- in( B29 )  Freq: 0.960113
27c     movslq  R10, R13	# i2l
27f     movb    [R8 + #18 + R10], RSI	# byte
284     incl    RDX	# int
286     cmpl    RDX, R11
289     jl,s   B29	# loop end  P=0.500000 C=24628.000000

28b     B31: #	out( B32 ) &lt;- in( B30 )  Freq: 0.480056
28b     addl    R13, #3	# int

28f     B32: #	out( N612 ) &lt;- in( B31 B27 B8 )  Freq: 0.998758
28f     movl    [RBX + #12 (8-bit)], R13	# int ! Field: jdk/internal/org/objectweb/asm/ByteVector.length
293     movq    RAX, RBX	# spill
296     addq    rsp, 64	# Destroy frame
	popq    rbp
	movq    rscratch1, poll_offset[r15_thread] #polling_page_address
	testl   rax, [rscratch1]	# Safepoint: poll for GC

2a5     ret

2a6     B33: #	out( B50 B34 ) &lt;- in( B5 )  Freq: 0.183838
2a6     movl    [rsp + #20], RAX	# spill
2aa     movl    [rsp + #16], RDX	# spill
2ae     movl    [rsp + #12], RDI	# spill
2b2     movq    [rsp + #0], RSI	# spill
2b6     movq    RBP, R9	# spill
2b9     movl    RDX, R11	# spill
2bc     movl    [rsp + #8], R11	# spill
2c1     addl    RDX, #2	# int
        nop 	# 3 bytes pad for loops and calls
2c7     call,static  jdk.internal.org.objectweb.asm.ByteVector::enlarge
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:43  L[0]=rsp + #0 L[1]=RBP L[2]=rsp + #8 L[3]=rsp + #12 L[4]=_ L[5]=_ L[6]=_
        # OopMap {rbp=Oop [0]=Oop off=716/0x2cc}

2cc     B34: #	out( B49 B35 ) &lt;- in( B33 )  Freq: 0.183834
        # Block is sole successor of call
2cc     movq    RBX, [rsp + #0]	# spill
2d0     movl    RCX, [RBX + #16 (8-bit)]	# compressed ptr ! Field: jdk/internal/org/objectweb/asm/ByteVector.data
2d3     testl   RCX, RCX	# compressed ptr
2d5     je     B49  P=0.000001 C=-1.000000

2db     B35: #	out( B6 ) &lt;- in( B34 )  Freq: 0.183834
2db     movq    R9, RBP	# spill
2de     movl    R11, [rsp + #8]	# spill
2e3     movl    RDI, [rsp + #12]	# spill
2e7     movl    RDX, [rsp + #16]	# spill
2eb     movl    RAX, [rsp + #20]	# spill
2ef     jmp     B6

2f4     B36: #	out( B40 ) &lt;- in( B20 )  Freq: 0.000306559
2f4     addl    R13, #2	# int
2f8     jmp,s   B40

2fa     B37: #	out( B40 ) &lt;- in( B21 )  Freq: 0.000306559
2fa     incl    RDX	# int
2fc     addl    R13, #3	# int
300     jmp,s   B40

302     B38: #	out( B40 ) &lt;- in( B22 )  Freq: 0.000306559
302     addl    RDX, #2	# int
305     addl    R13, #4	# int
309     jmp,s   B40

30b     B39: #	out( B40 ) &lt;- in( B23 )  Freq: 0.000306558
30b     addl    RDX, #3	# int
30e     addl    R13, #5	# int

312     B40: #	out( B41 ) &lt;- in( B36 B38 B37 B39 )  Freq: 0.00122623
312     movdq   R9, XMM0	# spill
317     movdq   RBX, XMM1	# spill
31c     movdl   R11, XMM2	# spill
321     movdl   RCX, XMM4	# spill

325     B41: #	out( N612 ) &lt;- in( B48 B47 B40 )  Freq: 0.00122715
325     movl    RSI, #-195	# int
32a     movl    RBP, R13	# spill
32d     movl    [rsp + #0], RDX	# spill
330     movl    [rsp + #8], R10	# spill
335     movq    [rsp + #16], RBX	# spill
33a     movq    [rsp + #24], R9	# spill
33f     movl    [rsp + #12], R11	# spill
344     movl    [rsp + #32], RCX	# spill
        nop 	# 3 bytes pad for loops and calls
34b     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_fused_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:93  L[0]=rsp + #16 L[1]=rsp + #24 L[2]=rsp + #12 L[3]=RBP L[4]=rsp + #32 L[5]=rsp + #0 L[6]=rsp + #8 STK[0]=rsp + #8 STK[1]=#1
        # OopMap {[16]=Oop [24]=Oop [32]=NarrowOop off=848/0x350}
350     ud2	# ShouldNotReachHere

364     B42: #	out( N612 ) &lt;- in( B6 )  Freq: 1.01327e-06
364     movl    RSI, #-28	# int
369     movl    RBP, RDI	# spill
36b     movq    [rsp + #0], RBX	# spill
36f     movq    [rsp + #8], R9	# spill
374     movl    [rsp + #16], R11	# spill
379     movl    [rsp + #20], R10	# spill
37e     movl    [rsp + #28], RCX	# spill
382     movl    [rsp + #32], RAX	# spill
        nop 	# 1 bytes pad for loops and calls
387     call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos; debug_id=&apos;0&apos;)
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:63  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=rsp + #16 L[3]=rsp + #20 L[4]=rsp + #28 L[5]=_ L[6]=_ STK[0]=rsp + #28 STK[1]=RBP STK[2]=rsp + #32
        # OopMap {[0]=Oop [8]=Oop [28]=NarrowOop off=908/0x38c}
38c     ud2	# ShouldNotReachHere

3a0     B43: #	out( N612 ) &lt;- in( B7 )  Freq: 1.01327e-06
3a0     movsbl  RBP, R11	# i2b
3a4     movl    RSI, #-28	# int
3a9     movl    [rsp + #0], R13	# spill
3ad     movq    [rsp + #8], RBX	# spill
3b2     movq    [rsp + #16], R9	# spill
3b7     movl    [rsp + #4], R11	# spill
3bc     movl    [rsp + #28], RCX	# spill
3c0     movl    [rsp + #32], R10	# spill
        nop 	# 2 bytes pad for loops and calls
3c7     call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos; debug_id=&apos;0&apos;)
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:72  L[0]=rsp + #8 L[1]=rsp + #16 L[2]=rsp + #4 L[3]=rsp + #0 L[4]=rsp + #28 L[5]=_ L[6]=_ STK[0]=rsp + #28 STK[1]=rsp + #32 STK[2]=RBP
        # OopMap {[8]=Oop [16]=Oop [28]=NarrowOop off=972/0x3cc}
3cc     ud2	# ShouldNotReachHere

3e0     B44: #	out( N612 ) &lt;- in( B13 B9 B10 B11 B12 B14 )  Freq: 5.81913e-06
3e0     movl    RSI, #-138	# int
3e5     movl    RBP, R13	# spill
3e8     movq    [rsp + #0], RBX	# spill
3ec     movq    [rsp + #8], R9	# spill
3f1     movl    [rsp + #20], RCX	# spill
3f5     movl    [rsp + #24], R11	# spill
        nop 	# 1 bytes pad for loops and calls
3fb     call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:79  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=rsp + #24 L[3]=RBP L[4]=rsp + #20 L[5]=#0 L[6]=_ STK[0]=#0 STK[1]=rsp + #24
        # OopMap {[0]=Oop [8]=Oop [20]=NarrowOop off=1024/0x400}
400     ud2	# ShouldNotReachHere

414     B45: #	out( B27 ) &lt;- in( B16 )  Freq: 9.74106e-07
414     movl    R13, RDI	# spill
417     addl    R13, #3	# int
41b     jmp     B27

420     B46: #	out( N612 ) &lt;- in( B3 )  Freq: 4.76836e-07
420     movl    RSI, #-187	# int
425     movq    RBP, R10	# spill
428     movq    [rsp + #0], RDX	# spill
42c     movl    [rsp + #12], R11	# spill
        nop 	# 2 bytes pad for loops and calls
433     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:8  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #12 L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=rsp + #12 STK[1]=#65535
        # OopMap {rbp=Oop [0]=Oop off=1080/0x438}
438     ud2	# ShouldNotReachHere

44c     B47: #	out( B41 ) &lt;- in( B15 )  Freq: 4.58403e-07
44c     xorl    RDX, RDX	# int
44e     jmp     B41

453     B48: #	out( B41 ) &lt;- in( B29 )  Freq: 4.57818e-07
453     addl    R13, #2	# int
457     jmp     B41

45c     B49: #	out( N612 ) &lt;- in( B34 )  Freq: 1.86275e-07
45c     movl    RSI, #-10	# int
461     movl    RBP, [rsp + #12]	# spill
        nop 	# 2 bytes pad for loops and calls
467     call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:63  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL STK[1]=RBP STK[2]=rsp + #20
        # OopMap {off=1132/0x46c}
46c     ud2	# ShouldNotReachHere

480     B50: #	out( N612 ) &lt;- in( B33 )  Freq: 1.83838e-06
480     # exception oop is in rax; no code emitted
480     movq    RSI, RAX	# spill
483     addq    rsp, 64	# Destroy frame
	popq    rbp

488     jmp     rethrow_stub

48d     B51: #	out( N612 ) &lt;- in( B1 )  Freq: 1.01328e-06
48d     movl    RSI, #-10	# int
        nop 	# 1 bytes pad for loops and calls
493     call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:1  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=#NULL
        # OopMap {off=1176/0x498}
498     ud2	# ShouldNotReachHere

4ac     B52: #	out( N612 ) &lt;- in( B2 )  Freq: 1.01328e-06
4ac     movl    RSI, #-10	# int
        nop 	# 2 bytes pad for loops and calls
4b3     call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.String::length @ bci:4  L[0]=_ STK[0]=#NULL
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:1  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_
        # OopMap {off=1208/0x4b8}
4b8     ud2	# ShouldNotReachHere

4cc     B53: #	out( N612 ) &lt;- in( B4 )  Freq: 1.01328e-06
4cc     movl    RSI, #-10	# int
        nop 	# 2 bytes pad for loops and calls
4d3     call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # jdk.internal.org.objectweb.asm.ByteVector::putUTF8 @ bci:35  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ STK[0]=_ STK[1]=#NULL
        # OopMap {off=1240/0x4d8}
4d8     ud2	# ShouldNotReachHere

--------------------------------------------------------------------------------
</opto_assembly>
<writer thread='40963'/>
             @ 1   java.lang.String::
<writer thread='40195'/>
     
<writer thread='40963'/>
isLatin1 (19 bytes)
<writer thread='42499'/>
   1184  414       1       java.util.stream.MatchOps$BooleanTerminalSink::cancellationRequested (5 bytes)
<writer thread='9219'/>
   1184  399       4       java.util.HashMap::putVal (300 bytes)   made not entrant
<writer thread='24323'/>
   1184   26       3       jdk.internal.org.objectweb.asm.ByteVector::putUTF8 (144 bytes)   made not entrant
<writer thread='40195'/>
      
<writer thread='24323'/>
                              @ 1   java.lang.String::length (11 bytes)   inline (hot)
                                @ 6   java.lang.String::coder (15 bytes)   inline (hot)
                              @ 43   jdk.internal.org.objectweb.asm.ByteVector::enlarge (51 bytes)   executed &lt; MinInliningThreshold times
                              @ 85   java.lang.String::charAt (25 bytes)   inline (hot)
                                @ 1   java.lang.String::isLatin1 (19 bytes)   inline (hot)
                                @ 12   java.lang.StringLatin1::charAt (28 bytes)   inline (hot)
<writer thread='38659'/>

============================= C2-compiled nmethod ==============================
<writer thread='40963'/>
                          
<writer thread='25091'/>
   1185  484       4       java.util.stream.ReferencePipeline::forEachWithCancel (23 bytes)
<writer thread='40963'/>
      @ 12   java.lang.StringLatin1::charAt (28 bytes)
<writer thread='42499'/>
   1185  413       2       java.util.Spliterators$IteratorSpliterator::tryAdvance (77 bytes)
<writer thread='40963'/>
                                  @ 15  java/lang/StringIndexOutOfBoundsException::&lt;init&gt; (not loaded)   not inlineable
<writer thread='42499'/>
                              @ 8  
<writer thread='40195'/>
  
<writer thread='40963'/>
                                @ 21   java.lang.StringUTF16::charAt (11 bytes)
                                  @ 2   java.lang.StringUTF16::checkIndex (9 bytes)
<writer thread='42499'/>
 java.lang.NullPointerException::
<writer thread='40195'/>
           @ 3  
<writer thread='42499'/>
&lt;init&gt; (5 bytes)   don&apos;t inline Throwable constructors
<writer thread='40963'/>
                                    @ 2   java.lang.StringUTF16::length (5 bytes)
<writer thread='42499'/>
             
<writer thread='37379'/>

============================= C2-compiled nmethod ==============================
<opto_assembly compile_id='468'>
----------------------- MetaData before Compile_id = 468 ------------------------
{method}
 - this oop:          0x000000012699f288
 - method holder:     &apos;java/lang/String&apos;
 - constants:         0x000000012699b360 constant pool [1059]/operands[28] {0x000000012699b360} for &apos;java/lang/String&apos; cache=0x0000000126aba220
 - access:            0x81000001  public 
 - name:              &apos;&lt;init&gt;&apos;
 - signature:         &apos;([CII)V&apos;
 - max stack:         8
 - max locals:        4
 - size of params:    4
 - method size:       13
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x000000010c0a1de0
 - adapters:          AHE@0x00007f99308e1a20: 0xbbaa0000 i2c: 0x000000010c0e74e0 c2i: 0x000000010c0e75ce c2iUV: 0x000000010c0e7595 c2iNCI: 0x000000010c0e760b
 - compiled entry     0x000000010c81d980
 - code size:         14
 - code start:        0x000000012699f240
 - code end (excl):   0x000000012699f24e
 - method data:       0x0000000126e92db8
 - checked ex length: 0
 - linenumber start:  0x000000012699f24e
 - localvar length:   4
 - localvar start:    0x000000012699f256
 - compiled code: nmethod   1186  145       3       java.lang.String::&lt;init&gt; (14 bytes)

------------------------ OptoAssembly for Compile_id = 468 -----------------------
#
#  void ( java/lang/String:NotNull:exact *, char[int:&gt;=0]:exact *, int, int )
#
#r018 rsi:rsi   : parm 0: java/lang/String:NotNull:exact *
#r016 rdx:rdx   : parm 1: char[int:&gt;=0]:exact *
#r010 rcx   : parm 2: int
#r004 r8   : parm 3: int
# -- Old rsp -- Framesize: 96 --
#r583 rsp+92: in_preserve
#r582 rsp+88: return address
#r581 rsp+84: in_preserve
#r580 rsp+80: saved fp register
#r579 rsp+76: pad2, stack alignment
#r578 rsp+72: pad2, stack alignment
#r577 rsp+68: Fixed slot 1
#r576 rsp+64: Fixed slot 0
#r599 rsp+60: spill
#r598 rsp+56: spill
#r597 rsp+52: spill
#r596 rsp+48: spill
#r595 rsp+44: spill
#r594 rsp+40: spill
#r593 rsp+36: spill
#r592 rsp+32: spill
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N437: #	out( B1 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B35 B2 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (424 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #80	# Create frame

02c     movq    [rsp + #0], RSI	# spill
030     movq    [rsp + #24], RDX	# spill
035     movl    R9, [RDX + #12 (8-bit)]	# range
039     NullCheck RDX

039     B2: #	out( B29 B3 ) &lt;- in( B1 )  Freq: 0.999999
039     movl    [rsp + #44], RCX	# spill
03d     testl   RCX, RCX
03f     jl     B29  P=0.000000 C=5575.000000

045     B3: #	out( B30 B4 ) &lt;- in( B2 )  Freq: 0.999999
045     movl    [rsp + #20], R8	# spill
04a     testl   R8, R8
04d     jl     B30  P=0.000000 C=5575.000000

053     B4: #	out( B33 B5 ) &lt;- in( B3 )  Freq: 0.999998
053     movl    RBP, R9	# spill
056     subl    RBP, R8	# int
059     cmpl    RCX, RBP
05b     jg     B33  P=0.000000 C=5575.000000

061     B5: #	out( B34 B6 ) &lt;- in( B4 )  Freq: 0.999998
061     testl   R8, R8
064     je     B34  P=0.000000 C=5404.000000

06a     B6: #	out( B27 B7 ) &lt;- in( B5 )  Freq: 0.999997
06a     cmpl    R8, #1048576	# unsigned
071     jnbe,u   B27  P=0.000001 C=-1.000000

077     B7: #	out( B8 ) &lt;- in( B6 )  Freq: 0.999996
077     movslq  R10, R8	# i2l

07a     B8: #	out( B25 B9 ) &lt;- in( B7 B27 )  Freq: 0.999997
07a     cmpl    R8, #1048576	# unsigned
081     jnbe,u   B25  P=0.000001 C=-1.000000

087     B9: #	out( B25 B10 ) &lt;- in( B8 )  Freq: 0.999996
087     # TLS is in R15
087     movq    RBX, [R15 + #320 (32-bit)]	# ptr
08e     addq    R10, #23	# long
092     andq    R10, #-8	# long
096     movq    R11, RBX	# spill
099     addq    R11, R10	# ptr
09c     # TLS is in R15
09c     cmpq    R11, [R15 + #336 (32-bit)]	# raw ptr
0a3     jnb,u   B25  P=0.000100 C=-1.000000

0a9     B10: #	out( B11 ) &lt;- in( B9 )  Freq: 0.999896
0a9     # TLS is in R15
0a9     movq    [R15 + #320 (32-bit)], R11	# ptr
0b0     PREFETCHW [R11 + #192 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0b8     movq    [RBX], #1	# long
0bf     PREFETCHW [R11 + #256 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0c7     movl    [RBX + #8 (8-bit)], narrowklass: precise klass [B: 0x000000012728fa90:Constant:exact *	# compressed klass ptr
0ce     movl    [RBX + #12 (8-bit)], R8	# int
0d2     PREFETCHW [R11 + #320 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified
0da     PREFETCHW [R11 + #384 (32-bit)]	# Prefetch allocation into level 1 cache and mark modified

0e2     B11: #	out( B28 B12 ) &lt;- in( B26 B10 )  Freq: 0.999997
0e2     
0e2     # checkcastPP of RBX
0e2     movl    R10, [rsp + #20]	# spill
0e7     # castII of R10
0e7     movl    R11, [rsp + #44]	# spill
0ec     addl    R11, R10	# int
0ef     cmpl    R9, R11	# unsigned
0f2     jb,u   B28  P=0.000001 C=-1.000000

0f8     B12: #	out( B31 B13 ) &lt;- in( B11 )  Freq: 0.999996
0f8     movq    R11, [rsp + #24]	# spill
0fd     movl    R8, [rsp + #44]	# spill
102     leaq    RSI, [R11 + #16 + R8 &lt;&lt; #1]	# ptr posidxscaleoff
107     movq    RDI, RBX	# spill
10a     addq    RDI, #16	# ptr
10e     movl    RDX, R10	# spill
111     String Compress RSI,RDI -&gt; RAX    // KILL RAX, RCX, RDX
1cd     MEMBAR-storestore (empty encoding)
1cd     cmpl    RAX, R10
1d0     jne     B31  P=0.000000 C=5425.000000

1d6     B13: #	out( B18 B14 ) &lt;- in( B12 )  Freq: 0.999996
1d6     # TLS is in R15
1d6     cmpb    [R15 + #48 (8-bit)], #0
1db     jne     B18  P=0.001000 C=-1.000000

1e1     B14: #	out( B15 ) &lt;- in( B13 )  Freq: 0.998996
1e1     movq    RBP, [rsp + #0]	# spill

1e5     B15: #	out( B17 B16 ) &lt;- in( B32 B20 B18 B14 )  Freq: 0.999996
1e5     movq    R10, RBP	# ptr -&gt; long
1e8     encode_heap_oop_not_null R11,RBX
231     movl    [RBP + #12 (8-bit)], R11	# compressed ptr ! Field: java/lang/String.value (constant)
235     movq    R11, RBX	# ptr -&gt; long
238     xorq    R11, R10	# long
23b     shrq    R11, #20
23f     testq   R11, R11
242     je,s   B17  P=0.001000 C=-1.000000

244     B16: #	out( B21 B17 ) &lt;- in( B15 )  Freq: 0.998996
244     shrq    R10, #9
248     movq    RDI, 0x0000000117891000	# ptr
252     addq    RDI, R10	# ptr
255     cmpb    [RDI], #8
258     jne,s   B21  P=0.001000 C=-1.000000

25a     B17: #	out( N437 ) &lt;- in( B23 B24 B21 B16 B15 )  Freq: 0.999996
25a     movb    [RBP + #20 (8-bit)], #0	# byte ! Field: java/lang/String.coder (constant)
25e     MEMBAR-release ! (empty encoding)
25e     MEMBAR-release ! (empty encoding)
25e     vzeroupper
	addq    rsp, 80	# Destroy frame
	popq    rbp
	movq    rscratch1, poll_offset[r15_thread] #polling_page_address
	testl   rax, [rscratch1]	# Safepoint: poll for GC

270     ret

271     B18: #	out( B15 B19 ) &lt;- in( B13 )  Freq: 0.000999983
271     movq    RBP, [rsp + #0]	# spill
275     movl    R11, [RBP + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value (constant)
279     testl   R11, R11	# compressed ptr
27c     je     B15  P=0.500000 C=-1.000000

282     B19: #	out( B32 B20 ) &lt;- in( B18 )  Freq: 0.000499991
282     # TLS is in R15
282     movq    R10, [R15 + #56 (8-bit)]	# long
286     decode_heap_oop RDI,R11
2b2     testq   R10, R10
2b5     je     B32  P=0.001000 C=-1.000000

2bb     B20: #	out( B15 ) &lt;- in( B19 )  Freq: 0.000499491
2bb     # TLS is in R15
2bb     movq    R11, [R15 + #72 (8-bit)]	# ptr
2bf     movq    [R11 + #-8 + R10], RDI	# ptr
2c4     addq    R10, #-8	# long
2c8     # TLS is in R15
2c8     movq    [R15 + #56 (8-bit)], R10	# long
2cc     jmp     B15

2d1     B21: #	out( B17 B22 ) &lt;- in( B16 )  Freq: 0.000998996
2d1     # TLS is in R15
2d1     movq    R10, [R15 + #104 (8-bit)]	# long
2d5     # TLS is in R15
2d5     movq    R11, [R15 + #120 (8-bit)]	# ptr
2d9     lock addl [rsp + #0], 0	! membar_volatile
2df     cmpb    [RDI], #0
2e2     je     B17  P=0.500000 C=-1.000000

2e8     B22: #	out( B24 B23 ) &lt;- in( B21 )  Freq: 0.000499498
2e8     movb    [RDI], #0	# CMS card-mark byte 0
2eb     testq   R10, R10
2ee     jne,s   B24  P=0.500000 C=-1.000000

2f0     B23: #	out( B17 ) &lt;- in( B22 )  Freq: 0.000249749
2f0     # TLS is in R15
2f0     movq    RSI, R15	# spill
2f3     call_leaf,runtime  write_ref_field_post_entry
        No JVM State Info
        # 
303     jmp     B17

308     B24: #	out( B17 ) &lt;- in( B22 )  Freq: 0.000249749
308     movq    [R11 + #-8 + R10], RDI	# ptr
30d     addq    R10, #-8	# long
311     # TLS is in R15
311     movq    [R15 + #104 (8-bit)], R10	# long
315     jmp     B17

31a     B25: #	out( B36 B26 ) &lt;- in( B8 B9 )  Freq: 0.000101029
31a     movl    [rsp + #40], R9	# spill
31f     movq    RSI, precise klass [B: 0x000000012728fa90:Constant:exact *	# ptr
329     movl    RDX, R8	# spill
32c     movq    RBP, [rsp + #0]	# spill
330     movl    [rsp + #32], RCX	# spill
334     call,static  wrapper for: _new_array_nozero_Java
        # java.lang.StringUTF16::compress @ bci:1  L[0]=rsp + #24 L[1]=rsp + #44 L[2]=rsp + #20 L[3]=_
        # java.lang.String::&lt;init&gt; @ bci:36  L[0]=RBP L[1]=rsp + #24 L[2]=rsp + #32 L[3]=rsp + #20 L[4]=_ L[5]=_
        # java.lang.String::&lt;init&gt; @ bci:10  L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # OopMap {rbp=Oop [0]=Oop [24]=Oop off=828/0x33c}

33c     B26: #	out( B11 ) &lt;- in( B25 )  Freq: 0.000101027
        # Block is sole successor of call
33c     movq    RBX, RAX	# spill
33f     movl    R9, [rsp + #40]	# spill
344     jmp     B11

349     B27: #	out( B8 ) &lt;- in( B6 )  Freq: 1.01328e-06
349     movslq  R10, R8	# i2l
34c     jmp     B8

351     B28: #	out( N437 ) &lt;- in( B11 )  Freq: 9.99997e-07
351     movl    RSI, #-50	# int
356     movq    RBP, [rsp + #0]	# spill
35a     pushq   [rsp + #24]	# 64-bit mem-mem spill
	popq    [rsp + #0]
363     movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #44]
	movl    [rsp + #8], rax
	movq    rax, [rsp - #8]
375     movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #20]
	movl    [rsp + #12], rax
	movq    rax, [rsp - #8]
387     movq    [rsp + #40], RBX	# spill
38c     movl    [rsp + #48], R10	# spill
        nop 	# 3 bytes pad for loops and calls
394     call,static  wrapper for: uncommon_trap(reason=&apos;intrinsic_or_type_checked_inlining&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.StringUTF16::compress @ bci:9  L[0]=_ L[1]=_ L[2]=rsp + #48 L[3]=rsp + #40 STK[0]=rsp + #0 STK[1]=rsp + #8 STK[2]=rsp + #40 STK[3]=#0 STK[4]=rsp + #48
        # java.lang.String::&lt;init&gt; @ bci:36  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=rsp + #12 L[4]=_ L[5]=_
        # java.lang.String::&lt;init&gt; @ bci:10  L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # OopMap {rbp=Oop [0]=Oop [40]=Oop off=924/0x39c}
39c     ud2	# ShouldNotReachHere

3b0     B29: #	out( N437 ) &lt;- in( B2 )  Freq: 4.99999e-07
3b0     movl    RSI, #-187	# int
3b5     movq    RBP, [rsp + #0]	# spill
3b9     movq    [rsp + #0], RDX	# spill
3bd     movl    [rsp + #16], RCX	# spill
3c1     movl    [rsp + #20], R8	# spill
3c6     movl    [rsp + #24], R9	# spill
3cb     movl    [rsp + #28], RCX	# spill
        nop 	# 1 bytes pad for loops and calls
3d0     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.String::checkBoundsOffCount @ bci:1  L[0]=rsp + #28 L[1]=rsp + #20 L[2]=rsp + #24 STK[0]=rsp + #16
        # java.lang.String::rangeCheck @ bci:4  L[0]=_ L[1]=_ L[2]=_
        # java.lang.String::&lt;init&gt; @ bci:7  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=RBP STK[1]=rsp + #0 STK[2]=rsp + #16 STK[3]=rsp + #20
        # OopMap {rbp=Oop [0]=Oop off=984/0x3d8}
3d8     ud2	# ShouldNotReachHere

3ec     B30: #	out( N437 ) &lt;- in( B3 )  Freq: 4.99999e-07
3ec     movl    RSI, #-187	# int
3f1     movq    RBP, [rsp + #0]	# spill
3f5     movq    [rsp + #0], RDX	# spill
3f9     movl    [rsp + #16], RCX	# spill
3fd     movl    [rsp + #24], R9	# spill
        nop 	# 2 bytes pad for loops and calls
404     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.String::checkBoundsOffCount @ bci:5  L[0]=rsp + #44 L[1]=rsp + #20 L[2]=rsp + #24 STK[0]=rsp + #20
        # java.lang.String::rangeCheck @ bci:4  L[0]=_ L[1]=_ L[2]=_
        # java.lang.String::&lt;init&gt; @ bci:7  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=RBP STK[1]=rsp + #0 STK[2]=rsp + #16 STK[3]=rsp + #20
        # OopMap {rbp=Oop [0]=Oop off=1036/0x40c}
40c     ud2	# ShouldNotReachHere

420     B31: #	out( N437 ) &lt;- in( B12 )  Freq: 4.99998e-07
420     movl    RSI, #-187	# int
425     movq    RBP, [rsp + #0]	# spill
429     movq    [rsp + #0], R11	# spill
42d     movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #20]
	movl    [rsp + #12], rax
	movq    rax, [rsp - #8]
43f     movq    [rsp + #16], RBX	# spill
444     movl    [rsp + #24], RAX	# spill
448     movl    [rsp + #28], R10	# spill
        nop 	# 3 bytes pad for loops and calls
450     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.StringUTF16::compress @ bci:13  L[0]=_ L[1]=_ L[2]=_ L[3]=rsp + #16 STK[0]=rsp + #24 STK[1]=rsp + #28
        # java.lang.String::&lt;init&gt; @ bci:36  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #44 L[3]=rsp + #12 L[4]=_ L[5]=_
        # java.lang.String::&lt;init&gt; @ bci:10  L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # OopMap {rbp=Oop [0]=Oop [16]=Oop off=1112/0x458}
458     ud2	# ShouldNotReachHere

46c     B32: #	out( B15 ) &lt;- in( B19 )  Freq: 4.99985e-07
46c     # TLS is in R15
46c     movq    RSI, R15	# spill
46f     call_leaf,runtime  write_ref_field_pre_entry
        No JVM State Info
        # 
47f     jmp     B15

484     B33: #	out( N437 ) &lt;- in( B4 )  Freq: 4.76836e-07
484     movl    RSI, #-187	# int
489     movq    [rsp + #8], RDX	# spill
48e     movl    [rsp + #24], RCX	# spill
492     movl    [rsp + #32], R9	# spill
497     movl    [rsp + #36], RCX	# spill
        nop 	# 1 bytes pad for loops and calls
49c     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.String::checkBoundsOffCount @ bci:12  L[0]=rsp + #36 L[1]=rsp + #20 L[2]=rsp + #32 STK[0]=rsp + #24 STK[1]=RBP
        # java.lang.String::rangeCheck @ bci:4  L[0]=_ L[1]=_ L[2]=_
        # java.lang.String::&lt;init&gt; @ bci:7  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=rsp + #0 STK[1]=rsp + #8 STK[2]=rsp + #24 STK[3]=rsp + #20
        # OopMap {[0]=Oop [8]=Oop off=1188/0x4a4}
4a4     ud2	# ShouldNotReachHere

4b8     B34: #	out( N437 ) &lt;- in( B5 )  Freq: 4.76836e-07
4b8     movl    RSI, #-187	# int
4bd     movq    RBP, [rsp + #0]	# spill
4c1     movl    [rsp + #16], R8	# spill
        nop 	# 2 bytes pad for loops and calls
4c8     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.String::&lt;init&gt; @ bci:5  L[0]=RBP L[1]=rsp + #24 L[2]=rsp + #44 L[3]=rsp + #16 L[4]=_ L[5]=_ STK[0]=rsp + #20
        # java.lang.String::&lt;init&gt; @ bci:10  L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # OopMap {rbp=Oop [24]=Oop off=1232/0x4d0}
4d0     ud2	# ShouldNotReachHere

4e4     B35: #	out( N437 ) &lt;- in( B1 )  Freq: 1.01328e-06
4e4     movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
4ec     call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.String::rangeCheck @ bci:3  L[0]=_ L[1]=_ L[2]=_ STK[0]=_ STK[1]=_ STK[2]=#NULL
        # java.lang.String::&lt;init&gt; @ bci:7  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_ STK[1]=_ STK[2]=_ STK[3]=_
        # OopMap {off=1268/0x4f4}
4f4     ud2	# ShouldNotReachHere

508     B36: #	out( N437 ) &lt;- in( B25 )  Freq: 1.01029e-09
508     # exception oop is in rax; no code emitted
508     movq    RSI, RAX	# spill
50b     vzeroupper
	addq    rsp, 80	# Destroy frame
	popq    rbp

513     jmp     rethrow_stub

--------------------------------------------------------------------------------
</opto_assembly>
<writer thread='38659'/>
<opto_assembly compile_id='454'>
----------------------- MetaData before Compile_id = 454 ------------------------
{method}
 - this oop:          0x0000000126f0e3f0
 - method holder:     &apos;java/util/stream/MatchOps$1MatchSink&apos;
 - constants:         0x0000000126f0dfd0 constant pool [68] {0x0000000126f0dfd0} for &apos;java/util/stream/MatchOps$1MatchSink&apos; cache=0x0000000126f0e5b8
 - access:            0x81000001  public 
 - name:              &apos;accept&apos;
 - signature:         &apos;(Ljava/lang/Object;)V&apos;
 - max stack:         3
 - max locals:        2
 - size of params:    2
 - method size:       13
 - highest level:     3
 - vtable index:      5
 - i2i entry:         0x000000010c0a1de0
 - adapters:          AHE@0x00007f99308e16b0: 0xbb000000 i2c: 0x000000010c0e9b60 c2i: 0x000000010c0e9c47 c2iUV: 0x000000010c0e9c0e c2iNCI: 0x000000010c0e9c84
 - compiled entry     0x000000010c874840
 - code size:         44
 - code start:        0x0000000126f0e3a0
 - code end (excl):   0x0000000126f0e3cc
 - method data:       0x0000000126f0f420
 - checked ex length: 0
 - linenumber start:  0x0000000126f0e3cc
 - localvar length:   2
 - localvar start:    0x0000000126f0e3d4
 - compiled code: nmethod   1191  415       3       java.util.stream.MatchOps$1MatchSink::accept (44 bytes)

------------------------ OptoAssembly for Compile_id = 454 -----------------------
#
#  void ( java/util/stream/MatchOps$1MatchSink:NotNull *, java/lang/Object * )
#
#r018 rsi:rsi   : parm 0: java/util/stream/MatchOps$1MatchSink:NotNull *
#r016 rdx:rdx   : parm 1: java/lang/Object *
# -- Old rsp -- Framesize: 64 --
#r583 rsp+60: in_preserve
#r582 rsp+56: return address
#r581 rsp+52: in_preserve
#r580 rsp+48: saved fp register
#r579 rsp+44: pad2, stack alignment
#r578 rsp+40: pad2, stack alignment
#r577 rsp+36: Fixed slot 1
#r576 rsp+32: Fixed slot 0
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N293: #	out( B1 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B25 B2 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (448 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

02c     movq    [rsp + #0], RSI	# spill
030     movzbl  R11, [RSI + #12 (8-bit)]	# ubyte ! Field: java/util/stream/MatchOps$BooleanTerminalSink.stop
035     testl   R11, R11
038     jne     B25  P=0.000000 C=7734.000000

03e     B2: #	out( B28 B3 ) &lt;- in( B1 )  Freq: 1
03e     movl    R11, [RSI + #20 (8-bit)]	# compressed ptr ! Field: java/util/stream/MatchOps$1MatchSink.val$predicate
042     movl    R10, [R12 + R11 &lt;&lt; 3 + #8] (compressed oop addressing)	# compressed klass ptr
047     NullCheck R11

047     B3: #	out( B23 B4 ) &lt;- in( B2 )  Freq: 0.999999
047     decode_heap_oop_not_null RSI,R11
04b     cmpl    R10, narrowklass: precise klass jdk/internal/module/IllegalAccessMaps$$Lambda$33: 0x000000012823f080:Constant:exact *	# compressed klass ptr
052     jne,u   B23  P=0.005223 C=-1.000000

058     B4: #	out( B30 B5 ) &lt;- in( B3 )  Freq: 0.994775
058     # checkcastPP of RSI
058     movl    R9, [RSI + #12 (8-bit)]	# compressed ptr ! Field: jdk/internal/module/IllegalAccessMaps$$Lambda$33.arg$1 (constant)
05c     movl    R11, [RDX + #8 (8-bit)]	# compressed klass ptr
060     NullCheck RDX

060     B5: #	out( B27 B6 ) &lt;- in( B4 )  Freq: 0.994774
060     cmpl    R11, narrowklass: precise klass java/lang/module/ModuleDescriptor$Exports: 0x0000000128243be0:Constant:exact *	# compressed klass ptr
067     jne,u   B27  P=0.000000 C=-1.000000

06d     B6: #	out( B31 B7 ) &lt;- in( B5 )  Freq: 0.994774
06d     # checkcastPP of RDX
06d     movl    R8, [RDX + #16 (8-bit)]	# compressed ptr ! Field: java/lang/module/ModuleDescriptor$Exports.source
071     movsbl  R10, [R12 + R8 &lt;&lt; 3 + #20] (compressed oop addressing)	# byte ! Field: java/lang/String.coder (constant)
077     NullCheck R8

077     B7: #	out( B16 B8 ) &lt;- in( B6 )  Freq: 0.994773
077     cmpl    R8, R9	# compressed ptr
07a     je,u   B16  P=0.034001 C=15617.000000

080     B8: #	out( B12 B9 ) &lt;- in( B7 )  Freq: 0.960949
080     testl   R9, R9	# compressed ptr
083     je     B12  P=0.001000 C=-1.000000

089     B9: #	out( B26 B10 ) &lt;- in( B8 )  Freq: 0.959988
089     movsbl  RBP, [R12 + R9 &lt;&lt; 3 + #20] (compressed oop addressing)	# byte ! Field: java/lang/String.coder (constant)
08f     cmpl    R10, RBP
092     jne     B26  P=0.000000 C=13329.000000

098     B10: #	out( B12 B11 ) &lt;- in( B9 )  Freq: 0.959988
098     movl    R10, [R12 + R9 &lt;&lt; 3 + #12] (compressed oop addressing)	# compressed ptr ! Field: java/lang/String.value (constant)
09d     movl    R8, [R12 + R8 &lt;&lt; 3 + #12] (compressed oop addressing)	# compressed ptr ! Field: java/lang/String.value (constant)
0a2     movl    R11, [R12 + R10 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
0a7     movl    RCX, [R12 + R8 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
0ac     cmpl    RCX, R11
0af     jne     B12  P=0.001000 C=-1.000000

0b5     B11: #	out( B16 B12 ) &lt;- in( B10 )  Freq: 0.959028
0b5     decode_heap_oop_not_null R11,R10
0b9     leaq    RSI, [R12 + R10 &lt;&lt; 3 + #16] (compressed oop addressing)	# ptr compressedoopoff32
0be     decode_heap_oop_not_null R10,R8
0c2     leaq    RDI, [R12 + R8 &lt;&lt; 3 + #16] (compressed oop addressing)	# ptr compressedoopoff32
0c7     String Equals RDI,RSI,RCX -&gt; RAX    // KILL XMM1, XMM0, RBX
183     testl   RAX, RAX
185     jne,s   B16  P=0.017311 C=8145.000000

187     B12: #	out( B13 ) &lt;- in( B18 B8 B11 B10 B20 )  Freq: 0.970026
187     xorl    RAX, RAX	# int

189     B13: #	out( B29 B14 ) &lt;- in( B12 B21 B24 )  Freq: 0.999996
189     movq    R10, [rsp + #0]	# spill
18d     movl    R10, [R10 + #16 (8-bit)]	# compressed ptr ! Field: java/util/stream/MatchOps$1MatchSink.val$matchKind
191     movzbl  R8, [R12 + R10 &lt;&lt; 3 + #20] (compressed oop addressing)	# ubyte ! Field: java/util/stream/MatchOps$MatchKind.stopOnPredicateMatches
197     NullCheck R10

197     B14: #	out( B22 B15 ) &lt;- in( B13 )  Freq: 0.999995
197     cmpl    RAX, R8
19a     je,s   B22  P=0.010861 C=7734.000000

19c     B15: #	out( N293 ) &lt;- in( B14 B22 )  Freq: 0.999995
19c     vzeroupper
	addq    rsp, 48	# Destroy frame
	popq    rbp
	movq    rscratch1, poll_offset[r15_thread] #polling_page_address
	testl   rax, [rscratch1]	# Safepoint: poll for GC

1ae     ret

1af     B16: #	out( B33 B17 ) &lt;- in( B7 B11 )  Freq: 0.0504256
1af     movl    RBP, [RDX + #20 (8-bit)]	# compressed ptr ! Field: java/lang/module/ModuleDescriptor$Exports.targets
1b2     movl    R10, [R12 + RBP &lt;&lt; 3 + #8] (compressed oop addressing)	# compressed klass ptr
1b7     NullCheck RBP

1b7     B17: #	out( B20 B18 ) &lt;- in( B16 )  Freq: 0.0504256
1b7     cmpl    R10, narrowklass: precise klass java/util/ImmutableCollections$SetN: 0x00000001283fa870:Constant:exact *	# compressed klass ptr
1be     je,us  B20  P=0.642114 C=-1.000000

1c0     B18: #	out( B12 B19 ) &lt;- in( B17 )  Freq: 0.0180466
1c0     cmpl    R10, narrowklass: precise klass java/util/ImmutableCollections$Set12: 0x00000001283fa940:Constant:exact *	# compressed klass ptr
1c7     je,us  B12  P=0.999999 C=-1.000000

1c9     B19: #	out( N293 ) &lt;- in( B18 )  Freq: 1.80466e-08
1c9     movl    RSI, #-58	# int
        nop 	# 2 bytes pad for loops and calls
1d0     call,static  wrapper for: uncommon_trap(reason=&apos;bimorphic_or_optimized_type_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.module.ModuleDescriptor$Exports::isQualified @ bci:4  L[0]=_ STK[0]=RBP
        # jdk.internal.module.IllegalAccessMaps::lambda$isExported$6 @ bci:12  L[0]=_ L[1]=_
        # jdk.internal.module.IllegalAccessMaps$$Lambda$33/0x0000000800091c40::test @ bci:8  L[0]=_ L[1]=_
        # java.util.stream.MatchOps$1MatchSink::accept @ bci:12  L[0]=rsp + #0 L[1]=_
        # OopMap {rbp=NarrowOop [0]=Oop off=472/0x1d8}
1d8     ud2	# ShouldNotReachHere

1ec     B20: #	out( B12 B21 ) &lt;- in( B17 )  Freq: 0.032379
1ec     decode_heap_oop_not_null R10,RBP
1f0     # checkcastPP of R10
1f0     movl    R11, [R10 + #12 (8-bit)]	# int ! Field: java/util/ImmutableCollections$SetN.size (constant)
1f4     testl   R11, R11
1f7     jne,s   B12  P=0.235714 C=140.000000

1f9     B21: #	out( B13 ) &lt;- in( B20 )  Freq: 0.0247468
1f9     movl    RAX, #1	# int
1fe     jmp,s   B13

200     B22: #	out( B15 ) &lt;- in( B14 )  Freq: 0.0108611
200     movq    R11, [rsp + #0]	# spill
204     movb    [R11 + #12 (8-bit)], #1	# byte ! Field: java/util/stream/MatchOps$BooleanTerminalSink.stop
209     movzbl  R11, [R12 + R10 &lt;&lt; 3 + #21] (compressed oop addressing)	# ubyte ! Field: java/util/stream/MatchOps$MatchKind.shortCircuitResult
20f     movq    R10, [rsp + #0]	# spill
213     movb    [R10 + #13 (8-bit)], R11	# byte ! Field: java/util/stream/MatchOps$BooleanTerminalSink.value
217     jmp,s   B15

219     B23: #	out( B32 B24 ) &lt;- in( B3 )  Freq: 0.00522339
219     movq    RBP, [rsp + #0]	# spill
        nop 	# 1 bytes pad for loops and calls
21e     movq    rax, #Universe::non_oop_word()
	call,dynamic  java.util.function.Predicate::test
        # java.util.stream.MatchOps$1MatchSink::accept @ bci:12  L[0]=RBP L[1]=_
        # OopMap {rbp=Oop [0]=Oop off=560/0x230}

230     B24: #	out( B13 ) &lt;- in( B23 )  Freq: 0.00522328
        # Block is sole successor of call
230     jmp     B13

235     B25: #	out( N293 ) &lt;- in( B1 )  Freq: 5e-07
235     movl    RSI, #-187	# int
23a     movq    RBP, [rsp + #0]	# spill
23e     movq    [rsp + #0], RDX	# spill
242     movl    [rsp + #8], R11	# spill
        nop 	# 1 bytes pad for loops and calls
248     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.util.stream.MatchOps$1MatchSink::accept @ bci:4  L[0]=RBP L[1]=rsp + #0 STK[0]=rsp + #8
        # OopMap {rbp=Oop [0]=Oop off=592/0x250}
250     ud2	# ShouldNotReachHere

264     B26: #	out( N293 ) &lt;- in( B9 )  Freq: 4.79994e-07
264     movl    RSI, #-187	# int
269     movq    [rsp + #8], RDX	# spill
26e     movl    [rsp + #16], R8	# spill
273     movl    [rsp + #20], R9	# spill
278     movl    [rsp + #24], R10	# spill
        nop 	# 3 bytes pad for loops and calls
280     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.String::equals @ bci:33  L[0]=rsp + #16 L[1]=_ L[2]=rsp + #20 STK[0]=rsp + #24 STK[1]=RBP
        # jdk.internal.module.IllegalAccessMaps::lambda$isExported$6 @ bci:5  L[0]=_ L[1]=rsp + #8
        # jdk.internal.module.IllegalAccessMaps$$Lambda$33/0x0000000800091c40::test @ bci:8  L[0]=_ L[1]=_
        # java.util.stream.MatchOps$1MatchSink::accept @ bci:12  L[0]=rsp + #0 L[1]=_
        # OopMap {[0]=Oop [8]=Oop [16]=NarrowOop [20]=NarrowOop off=648/0x288}
288     ud2	# ShouldNotReachHere

29c     B27: #	out( N293 ) &lt;- in( B5 )  Freq: 1e-35
29c     movl    RSI, #-34	# int
2a1     movq    RBP, [rsp + #0]	# spill
2a5     movq    [rsp + #0], RDX	# spill
2a9     movl    [rsp + #8], R9	# spill
        nop 	# 2 bytes pad for loops and calls
2b0     call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # jdk.internal.module.IllegalAccessMaps$$Lambda$33/0x0000000800091c40::test @ bci:5  L[0]=_ L[1]=_ STK[0]=rsp + #8 STK[1]=rsp + #0
        # java.util.stream.MatchOps$1MatchSink::accept @ bci:12  L[0]=RBP L[1]=_
        # OopMap {rbp=Oop [0]=Oop [8]=NarrowOop off=696/0x2b8}
2b8     ud2	# ShouldNotReachHere

2cc     B28: #	out( N293 ) &lt;- in( B2 )  Freq: 1.01328e-06
2cc     movl    RSI, #-10	# int
2d1     movq    RBP, RDX	# spill
2d4     call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.util.stream.MatchOps$1MatchSink::accept @ bci:12  L[0]=_ L[1]=_ STK[0]=#NULL STK[1]=RBP
        # OopMap {rbp=Oop off=732/0x2dc}
2dc     ud2	# ShouldNotReachHere

2f0     B29: #	out( N293 ) &lt;- in( B13 )  Freq: 1.01327e-06
2f0     movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
2f8     call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.util.stream.MatchOps$1MatchSink::accept @ bci:21  L[0]=_ L[1]=_ STK[0]=_ STK[1]=#NULL
        # OopMap {off=768/0x300}
300     ud2	# ShouldNotReachHere

314     B30: #	out( N293 ) &lt;- in( B4 )  Freq: 1.00798e-06
314     movl    RSI, #-12	# int
319     movq    RBP, [rsp + #0]	# spill
31d     movl    [rsp + #0], R9	# spill
        nop 	# 3 bytes pad for loops and calls
324     call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;make_not_entrant&apos; debug_id=&apos;0&apos;)
        # jdk.internal.module.IllegalAccessMaps$$Lambda$33/0x0000000800091c40::test @ bci:5  L[0]=_ L[1]=_ STK[0]=rsp + #0 STK[1]=#NULL
        # java.util.stream.MatchOps$1MatchSink::accept @ bci:12  L[0]=RBP L[1]=_
        # OopMap {rbp=Oop [0]=NarrowOop off=812/0x32c}
32c     ud2	# ShouldNotReachHere

340     B31: #	out( N293 ) &lt;- in( B6 )  Freq: 1.00798e-06
340     movl    RSI, #-10	# int
345     movl    RBP, R9	# spill
348     call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # jdk.internal.module.IllegalAccessMaps::lambda$isExported$6 @ bci:5  L[0]=_ L[1]=_ STK[0]=#NULL STK[1]=RBP
        # jdk.internal.module.IllegalAccessMaps$$Lambda$33/0x0000000800091c40::test @ bci:8  L[0]=_ L[1]=_
        # java.util.stream.MatchOps$1MatchSink::accept @ bci:12  L[0]=_ L[1]=_
        # OopMap {rbp=NarrowOop off=848/0x350}
350     ud2	# ShouldNotReachHere

364     B32: #	out( N293 ) &lt;- in( B23 )  Freq: 5.22339e-08
364     # exception oop is in rax; no code emitted
364     movq    RSI, RAX	# spill
367     vzeroupper
	addq    rsp, 48	# Destroy frame
	popq    rbp

36f     jmp     rethrow_stub

374     B33: #	out( N293 ) &lt;- in( B16 )  Freq: 5.10952e-08
374     movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
37c     call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.module.ModuleDescriptor$Exports::isQualified @ bci:4  L[0]=_ STK[0]=#NULL
        # jdk.internal.module.IllegalAccessMaps::lambda$isExported$6 @ bci:12  L[0]=_ L[1]=_
        # jdk.internal.module.IllegalAccessMaps$$Lambda$33/0x0000000800091c40::test @ bci:8  L[0]=_ L[1]=_
        # java.util.stream.MatchOps$1MatchSink::accept @ bci:12  L[0]=_ L[1]=_
        # OopMap {off=900/0x384}
384     ud2	# ShouldNotReachHere

--------------------------------------------------------------------------------
</opto_assembly>
<writer thread='42499'/>
                 @ 24   java.util.Collection::iterator (0 bytes)   no static binding
                              @ 37   java.util.Collection::size (0 bytes)   no static binding
<writer thread='40195'/>
 java.lang.String::startsWith (138 bytes)   callee is too large
                              @ 83   java.lang.Class::getName (18 bytes)
<writer thread='40963'/>
                                    @ 5   java.lang.String::checkIndex (48 bytes)   callee is too large
<writer thread='37379'/>
   1197  145       3       java.lang.String::&lt;init&gt; (14 bytes)   made not entrant
                              @ 7   java.lang.String::rangeCheck (9 bytes)   inline (hot)
                                @ 4   java.lang.String::checkBoundsOffCount (64 bytes)   inline (hot)
                              @ 10   java.lang.String::&lt;init&gt; (74 bytes)   inline (hot)
                                @ 1   java.lang.Object::&lt;init&gt; (1 bytes)   inline (hot)
                                @ 36   java.lang.StringUTF16::compress (20 bytes)   inline (hot)
                                  @ 9   java.lang.StringUTF16::compress (50 bytes)   (intrinsic)
<writer thread='40963'/>
                                  @ 7   java.lang.StringUTF16::getChar (60 bytes)   intrinsic
                              @ 92   java.lang.String::charAt (25 bytes)
<writer thread='36611'/>
   1197  485       4       java.util.ImmutableCollections$SetN::probe (56 bytes)
<writer thread='38659'/>
   1197  415       3       java.util.stream.MatchOps$1MatchSink::accept (44 bytes)   made not entrant
                              @ 12   jdk.internal.module.IllegalAccessMaps$$Lambda$33/0x0000000800091c40::test (12 bytes)   inline (hot)
                              @ 12   jdk.internal.module.IllegalAccessMaps$$Lambda$31/0x0000000800091440::test (12 bytes)   executed &lt; MinInliningThreshold times
                               \-&gt; TypeProfile (7237/7275 counts) = jdk/internal/module/IllegalAccessMaps$$Lambda$33
                                @ 8   jdk.internal.module.IllegalAccessMaps::lambda$isExported$6 (24 bytes)   inline (hot)
                                  @ 1   java.lang.module.ModuleDescriptor$Exports::source (5 bytes)   accessor
                                  @ 5   java.lang.String::equals (50 bytes)   inline (hot)
                                    @ 44   java.lang.StringLatin1::equals (36 bytes)   (intrinsic)
                                  @ 12   java.lang.module.ModuleDescriptor$Exports::isQualified (18 bytes)   inline (hot)
                                    @ 4   java.util.ImmutableCollections$SetN::isEmpty (13 bytes)   inline (hot)
                                    @ 4   java.util.ImmutableCollections$Set12::isEmpty (2 bytes)   inline (hot)
                                     \-&gt; TypeProfile (2682/7494 counts) = java/util/ImmutableCollections$Set12
                                     \-&gt; TypeProfile (4812/7494 counts) = java/util/ImmutableCollections$SetN
<writer thread='42499'/>
                              @ 50   java.util.Iterator::hasNext (0 bytes)   no static binding
<writer thread='40963'/>
                                @ 1   java.lang.String::isLatin1 (19 bytes)
<writer thread='42499'/>
                              @ 63   java.util.Iterator::next (0 bytes)   no static binding
                              @ 68   java.util.function.Consumer::accept (0 bytes)   no static binding
<writer thread='40195'/>
                                @ 14   java.lang.Class::initClassName (0 bytes)   native method
<writer thread='40963'/>
                                @ 12   java.lang.StringLatin1::
<writer thread='40195'/>
                              @ 95  sun/invoke/util/VerifyAccess$1::&lt;init&gt; (not loaded)   not inlineable
<writer thread='40963'/>
charAt (28 bytes)
<writer thread='40195'/>
                              @ 98   java.security.AccessController::doPrivileged (9 bytes)
                                @ 2   jdk.internal.reflect.Reflection::getCallerClass (0 bytes)   native method
<writer thread='40963'/>
                                  @ 15  java/lang/StringIndexOutOfBoundsException::&lt;init&gt; (not loaded)   not inlineable
<writer thread='40195'/>
                                @ 5   java.security.AccessController::executePrivileged (65 bytes)   force inline by annotation
<writer thread='40963'/>
                                @ 21   java.lang.StringUTF16::charAt (11 bytes)
                                  @ 2   java.lang.StringUTF16::checkIndex (9 bytes)
                                    @ 2   java.lang.StringUTF16::length (5 bytes)
                                    @ 5   java.lang.String::checkIndex (48 bytes)   callee is too large
                                  @ 7   java.lang.StringUTF16::getChar (60 bytes)   intrinsic
<writer thread='40195'/>
                                  @ 29   java.security.PrivilegedAction::run (0 bytes)   not inlineable
<writer thread='24067'/>
   1199  487       3       java.util.HashMap::putVal (300 bytes)
<writer thread='40195'/>
                                  @ 56   java.lang.ref.Reference::reachabilityFence (1 bytes)   force inline by annotation
                                  @ 60   java.lang.ref.Reference::reachabilityFence (1 bytes)   force inline by annotation
<writer thread='42499'/>
   1200  416       2       jdk.internal.module.IllegalAccessMaps$$Lambda$33/0x0000000800091c40::test (12 bytes)
                              @ 8   jdk.internal.module.IllegalAccessMaps::lambda$isExported$6 (24 bytes)
<writer thread='24067'/>
                              @ 20   java.util.HashMap::resize (356 bytes)   callee is too large
<writer thread='42499'/>
                                @ 1   java.lang.module.ModuleDescriptor$Exports::source (5 bytes)
<writer thread='24067'/>
                              @ 56   java.util.HashMap::newNode (13 bytes)   no static binding
<writer thread='42499'/>
                                @ 5   java.lang.String::equals (50 bytes)   callee is too large
<writer thread='24067'/>
                              @ 91   java.lang.Object::equals (11 bytes)   no static binding
<writer thread='42499'/>
                                @ 12   java.lang.module.ModuleDescriptor$Exports::isQualified (18 bytes)
<writer thread='24067'/>
                              @ 123   java.util.HashMap$TreeNode::putTreeVal (314 bytes)   not inlineable
<writer thread='42499'/>
                                  @ 4   java.util.Set::isEmpty (0 bytes)   no static binding
<writer thread='24067'/>
                              @ 152   java.util.HashMap::newNode (13 bytes)   no static binding
                              @ 169   java.util.HashMap::treeifyBin (110 bytes)   callee is too large
                              @ 203   java.lang.Object::equals (11 bytes)   no static binding
                              @ 253   java.util.HashMap::afterNodeAccess (1 bytes)   no static binding
                              @ 288   java.util.HashMap::resize (356 bytes)   callee is too large
                              @ 295   java.util.HashMap::afterNodeInsertion (1 bytes)   no static binding
<writer thread='42499'/>
   1202  417       2       jdk.internal.module.IllegalAccessMaps::lambda$isExported$6 (24 bytes)
                              @ 1   java.lang.module.ModuleDescriptor$Exports::source (5 bytes)
                              @ 5   java.lang.String::equals (50 bytes)   callee is too large
                              @ 12   java.lang.module.ModuleDescriptor$Exports::isQualified (18 bytes)
                                @ 4   java.util.Set::isEmpty (0 bytes)   no static binding
   1206  467       3       java.util.stream.AbstractPipeline::copyIntoWithCancel (46 bytes)
                              @ 19   java.util.Spliterator::getExactSizeIfKnown (25 bytes)   no static binding
                              @ 24   java.util.stream.Sink::begin (1 bytes)   no static binding
                              @ 32   java.util.stream.AbstractPipeline::forEachWithCancel (0 bytes)   no static binding
                              @ 38   java.util.stream.Sink::end (1 bytes)   no static binding
   1209  457       3       java.util.stream.AbstractPipeline::wrapSink (37 bytes)
                              @ 1   java.util.Objects::requireNonNull (14 bytes)
                                @ 8   java.lang.NullPointerException::&lt;init&gt; (5 bytes)   don&apos;t inline Throwable constructors
                              @ 23   java.util.stream.AbstractPipeline::opWrapSink (0 bytes)   no static binding
   1211  419       3       java.util.stream.AbstractPipeline::isParallel (8 bytes)
   1213  424       3       java.lang.invoke.LambdaForm$MH/0x0000000800063040::linkToTargetMethod (9 bytes)
                              @ 5   java.lang.invoke.MethodHandle::invokeBasic(L)L (0 bytes)   receiver not constant
<writer thread='24067'/>
   1214  425       3       java.lang.invoke.LambdaForm$DMH/0x0000000800062c40::invokeStatic (14 bytes)
                              @ 1   java.lang.invoke.DirectMethodHandle::internalMemberName (8 bytes)   force inline by annotation
                              @ 10   java.lang.invoke.MethodHandle::linkToStatic(LL)L (0 bytes)   MemberName not constant
   1215  430       3       java.util.stream.PipelineHelper::&lt;init&gt; (5 bytes)
                              @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
<writer thread='42499'/>
   1215  432       3       java.util.stream.StreamOpFlag::combineOpFlags (9 bytes)
                              @ 2   java.util.stream.StreamOpFlag::getMask (30 bytes)
<writer thread='24067'/>
   1216  433       3       java.util.stream.StreamOpFlag::getMask (30 bytes)
<writer thread='42499'/>
   1218  431       3       java.util.stream.ForEachOps$ForEachOp$OfRef::accept (11 bytes)
<writer thread='24067'/>
   1219  437       3       java.util.stream.StreamSupport::stream (19 bytes)
<writer thread='42499'/>
                              @ 5   java.util.function.Consumer::accept (0 bytes)   no static binding
<writer thread='24067'/>
                              @ 1   java.util.Objects::requireNonNull (14 bytes)
                                @ 8   java.lang.NullPointerException::&lt;init&gt; (5 bytes)   don&apos;t inline Throwable constructors
<writer thread='42499'/>
   1219  447       3       java.util.stream.StreamOpFlag::fromCharacteristics (37 bytes)
<writer thread='36611'/>

============================= C2-compiled nmethod ==============================
<opto_assembly compile_id='485'>
----------------------- MetaData before Compile_id = 485 ------------------------
{method}
 - this oop:          0x0000000126bc7178
 - method holder:     &apos;java/util/ImmutableCollections$SetN&apos;
 - constants:         0x0000000126bc6398 constant pool [181] {0x0000000126bc6398} for &apos;java/util/ImmutableCollections$SetN&apos; cache=0x0000000126bc7788
 - access:            0xc1000002  private 
 - name:              &apos;probe&apos;
 - signature:         &apos;(Ljava/lang/Object;)I&apos;
 - max stack:         3
 - max locals:        4
 - size of params:    2
 - method size:       13
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x000000010c0a1de0
 - adapters:          AHE@0x00007f99308e16b0: 0xbb000000 i2c: 0x000000010c0e9b60 c2i: 0x000000010c0e9c47 c2iUV: 0x000000010c0e9c0e c2iNCI: 0x000000010c0e9c84
 - compiled entry     0x000000010c80ca40
 - code size:         56
 - code start:        0x0000000126bc7100
 - code end (excl):   0x0000000126bc7138
 - method data:       0x0000000126e96bd0
 - checked ex length: 0
 - linenumber start:  0x0000000126bc7138
 - localvar length:   4
 - localvar start:    0x0000000126bc7146
 - compiled code: nmethod   1220  166       3       java.util.ImmutableCollections$SetN::probe (56 bytes)

------------------------ OptoAssembly for Compile_id = 485 -----------------------
#
#  int ( java/util/ImmutableCollections$SetN:NotNull:exact *, java/lang/Object * )
#
#r018 rsi:rsi   : parm 0: java/util/ImmutableCollections$SetN:NotNull:exact *
#r016 rdx:rdx   : parm 1: java/lang/Object *
# -- Old rsp -- Framesize: 64 --
#r583 rsp+60: in_preserve
#r582 rsp+56: return address
#r581 rsp+52: in_preserve
#r580 rsp+48: saved fp register
#r579 rsp+44: pad2, stack alignment
#r578 rsp+40: pad2, stack alignment
#r577 rsp+36: Fixed slot 1
#r576 rsp+32: Fixed slot 0
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N327: #	out( B1 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B30 B2 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (256 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

02c     movq    RBP, RSI	# spill
02f     movq    [rsp + #0], RDX	# spill
033     movl    R10, [RDX + #8 (8-bit)]	# compressed klass ptr
037     NullCheck RDX

037     B2: #	out( B24 B3 ) &lt;- in( B1 )  Freq: 0.999999
037     decode_klass_not_null R10,R10
047     movq    R10, [R10 + #504 (32-bit)]	# ptr
04e     movq    R11, metadataptr:Constant0x000000012751cce0	# ptr
058     cmpq    R10, R11	# ptr
05b     jne,u   B24  P=0.001000 C=-1.000000

061     B3: #	out( B24 B4 ) &lt;- in( B2 )  Freq: 0.998999
061     movq    R10, [RDX]	# long
064     movq    R11, R10	# spill
067     andq    R11, #7	# long
06b     cmpq    R11, #1
06f     jne     B24  P=0.001000 C=-1.000000

075     B4: #	out( B24 B5 ) &lt;- in( B3 )  Freq: 0.998
075     shrq    R10, #8
079     movl    RAX, R10	# l2i
07c     andl    RAX, #2147483647	# int
082     testl   RAX, RAX
084     je     B24  P=0.001000 C=-1.000000

08a     B5: #	out( B31 B6 ) &lt;- in( B25 B4 )  Freq: 0.999999
08a     movl    R11, [RBP + #16 (8-bit)]	# compressed ptr ! Field: java/util/ImmutableCollections$SetN.elements (constant)
08e     movl    R9, [R12 + R11 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
093     NullCheck R11

093     B6: #	out( B27 B7 ) &lt;- in( B5 )  Freq: 0.999998
093     testl   R9, R9	# unsigned
096     jbe,u   B27  P=0.000001 C=-1.000000

09c     B7: #	out( B10 B8 ) &lt;- in( B6 )  Freq: 0.999997
09c     movl    R8, R9	# spill
09f     # castII of R8
09f     cmpl    rax, 0x80000000	# irem
	jne,s   normal
	xorl    rdx, rdx
	cmpl    R8, -1
	je,s    done
normal: cdql
	idivl   R8
done:
0b2     movl    R10, R8	# spill
0b5     xorl    R10, RDX	# int
0b8     testl   R10, R10
0bb     jge,s   B10  P=0.673855 C=6770.000000

0bd     B8: #	out( B29 B9 ) &lt;- in( B7 )  Freq: 0.326144
0bd     testl   RDX, RDX
0bf     je     B29  P=0.000000 C=2208.000000

0c5     B9: #	out( B10 ) &lt;- in( B8 )  Freq: 0.326144
0c5     addl    R8, RDX	# int
0c8     movl    RDX, R8	# spill

0cb     B10: #	out( B26 B11 ) &lt;- in( B7 B9 )  Freq: 0.999997
0cb     movl    R10, RDX	# spill
0ce     cmpl    RDX, R9	# unsigned
0d1     jnb,u   B26  P=0.000001 C=-1.000000

0d7     B11: #	out( B20 B12 ) &lt;- in( B10 )  Freq: 0.999996
0d7     decode_heap_oop_not_null R11,R11
0db     movl    R8, [R11 + #16 + RDX &lt;&lt; #2]	# compressed ptr<!-- safepoint while printing -->
<writer thread='42499'/>
                              @ 1  
<writer thread='24067'/>
                              @ 11  
<writer thread='42499'/>
 java.util.Spliterator::characteristics (0 bytes)   no static binding
                              @ 14   java.util.Spliterator::getComparator (8 bytes)   no static binding
<writer thread='24067'/>
 java.util.stream.StreamOpFlag::fromCharacteristics (37 bytes)   callee is too large
<writer thread='36611'/>

0e0     testl   R8, R8	# compressed ptr
0e3     je,s   B20  P=0.593870 C=9364.000000

0e5     B12: #	out( B13 ) &lt;- in( B11 )  Freq: 0.406128
0e5     decode_heap_oop_not_null RDX,R8
0e9     movl    [rsp + #8], R10	# spill
        nop 	# 2 bytes pad for loops and calls

0f0     B13: #	out( B34 B14 ) &lt;- in( B12 B19 ) Loop( B13-B19 inner ) Freq: 0.670603
0f0     movq    RSI, [rsp + #0]	# spill
        nop 	# 1 bytes pad for loops and calls
0f5     movq    rax, #Universe::non_oop_word()
	call,dynamic  java.lang.Object::equals
        # java.util.ImmutableCollections$SetN::probe @ bci:31  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #8 L[3]=_
        # OopMap {rbp=Oop [0]=Oop 
<writer thread='24067'/>
                              
<writer thread='36611'/>
off=260/0x104}

104     B14
<writer thread='24067'/>
@ 15   java.util.stream.ReferencePipeline$Head::&lt;init&gt; (8 bytes)
<writer thread='36611'/>
: #	out( B23 B15 ) &lt;- in( B13 )  Freq: 0.67059
        # Block is sole successor of call
104     testl   RAX, RAX
106     jne,s   B23  P=0.028925 C=3803.000000

108     B15: #	out( B32 B16 ) &lt;- in( 
<writer thread='24067'/>
                                @ 4   java.util.stream.ReferencePipeline::&lt;init&gt; (8 bytes)
<writer thread='36611'/>
B14 )  Freq: 0.651194
108     movl    R8, [RBP + #16 (8-bit)]	# compressed ptr ! Field: java/util/ImmutableCollections$SetN.elements (constant)
10c     movl    R11, [R12 + R8 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
111     NullCheck R8

111     B16: #	out( B22 B17 ) &lt;- in( B15 )  Freq: 0.651193
111     movl    R10, [rsp + #8]	# spill
116     incl    R10	# int
119     cmpl    R10, R11
11c     je,s   B22  P=0.050352 C=3694.000000

11e     B17: #	out( B28 B18 ) &lt;- in( B22 B16 )  Freq: 0.651193
11e     # TLS is in R15
11e     movq    R9, [R15 + #296 (32-bit)]	# ptr
125     testl   rax, [R9]	# Safepoint: poll for GC        # java.util.ImmutableCollections$SetN::probe @ bci:53  L[0]=RBP L[1]=rsp + #0 L[2]=R10 L[3]=_
        # OopMap {r8=NarrowOop rbp=Oop [0]=Oop off=293/0x125}
128     cmpl    R10, R11	# unsigned
12b     jnb,u   B28  P=0.000001 C=-1.000000

131     B18: #	out( B20 B19 ) &lt;- in( B17 )  Freq: 0.651192
131     decode_heap_oop_not_null R11,R8
135     movl    R11, [R11 + #16 + R10 &lt;&lt; #2]	# compressed ptr
13a     testl   R11, R11	# compressed ptr
13d     je,s   B20  P=0.593870 C=3693.000000

13f     B19: #	out( B13 ) &lt;- in( B18 )  Freq: 0.264469
13f     decode_heap_oop_not_null RDX,R11
143     movl    [rsp + #8], R10	# spill
148     jmp,s   B13

14a     B20: #	out( B21 ) &lt;- in( B18 B11 )  Freq: 0.980591
14a     movl    RAX, #-1	# int
14f     subl    RAX, R10	# int

152     B21: #	out( N327 ) &lt;- in( B23 B20 )  Freq: 0.999988
152     addq    rsp, 48	# Destroy frame
	popq    rbp
	movq    rscratch1, poll_offset[r15_thread] #polling_page_address
	testl   rax, [rscratch1]	# Safepoint: poll for GC

161     ret

162     B22: #	out( B17 ) &lt;- in( B16 )  Freq: 0.0327888
162     xorl    R10, R10	# int
165     jmp,s   B17

167     B23: #	out( B21 ) &lt;- in( B14 )  Freq: 0.0193965
167     movl    RAX, [rsp + #8]	# spill
16b     jmp,s   B21

16d     B24: #	out( B33 B25 ) &lt;- in( B2 B3 B4 )  Freq: 0.00299699
16d     movq    RSI, RDX	# spill
        nop 	# 1 bytes pad for loops and calls
171     movq    rax, #Universe::non_oop_word()
	call,dynamic  java.lang.Object::hashCode
        # java.util.ImmutableCollections$SetN::probe @ bci:1  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=_
        # OopMap {rbp=Oop [0]=Oop off=384/0x180}

180     B25: #	out( B5 ) &lt;- in( B24 )  Freq: 0.00299693
        # Block is sole successor of call
180     jmp     
<writer thread='24067'/>
             
<writer thread='36611'/>
B5

185     B26: #	out( N327 ) &lt;- in( 
<writer thread='42499'/>
   1223  448       3       java.util.stream.ReferencePipeline$Head::&lt;init&gt; (8 bytes)
<writer thread='36611'/>
B10 )  Freq: 1.01328e-06
185     movl    RSI, #-28	# int
18a     movl    [rsp + #12], R11	# spill
18f     movl    [rsp + #16], RDX	# spill
193     call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos; debug_id=&apos;0&apos;)
        # java.util.ImmutableCollections$SetN::probe @ bci:18  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #16 L[3]=_ STK[0]=rsp + #12 STK[1]=rsp + #16
        # 
<writer thread='24067'/>
             
<writer thread='42499'/>
        
<writer thread='36611'/>
OopMap {
<writer thread='42499'/>
                  
<writer thread='24067'/>
        
<writer thread='42499'/>
    @ 4   java.util.stream.ReferencePipeline::
<writer thread='36611'/>
rbp=Oop [0]=Oop 
<writer thread='42499'/>
&lt;init&gt; (8 bytes)
<writer thread='36611'/>
[12]=NarrowOop off=408/0x198}
<writer thread='42499'/>
        
<writer thread='36611'/>
198
<writer thread='24067'/>
@ 4  
<writer thread='42499'/>
             
<writer thread='24067'/>
 java.util.stream.AbstractPipeline::
<writer thread='42499'/>
           @ 4  
<writer thread='36611'/>
   ud2	# ShouldNotReachHere

1ac     B27: #	out( N327 ) &lt;- 
<writer thread='42499'/>
 java.util.stream.AbstractPipeline::
<writer thread='36611'/>
in( B6 )  Freq: 9.99998e-07
1ac     movl    RSI, #-122	# int
1b1     movl    RBP, RAX	# spill
1b3     call,static  wrapper for: uncommon_trap(reason=&apos;div0_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.Math::floorMod @ bci:2  L[0]=_ L[1]=_ L[2]=_ STK[0]=RBP STK[1]=#0
        # java.util.ImmutableCollections$SetN::probe @ bci:9  L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # OopMap {off=440/0x1b8}
1b8     ud2	# ShouldNotReachHere

1cc     B28: #	out( N327 ) &lt;- in( B17 )  Freq: 6.5984e-07
1cc     movl    RSI, #-28	# int
1d1     movl    [rsp + #12], R10	# spill
1d6     movl    [rsp + #16], R8	# spill
1db     call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos; debug_id=&apos;0&apos;)
        # java.util.ImmutableCollections$SetN::probe @ bci:18  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #12 L[3]=_ STK[0]=rsp + #16 STK[1]=rsp + #12
        # OopMap {rbp=Oop [0]=Oop [16]=NarrowOop off=480/0x1e0}
1e0     ud2	# ShouldNotReachHere

1f4     B29: #	out( N327 ) &lt;- in( B8 )  Freq: 1.55517e-07
1f4     movl    RSI, #-187	# int
1f9     movl    [rsp + #8], R8	# spill
1fe     movl    [rsp + #16], RDX	# spill
        nop 	# 1 bytes pad for loops and calls
203     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.Math::floorMod @ bci:11  L[0]=_ L[1]=rsp + #8 L[2]=rsp + #16 STK[0]=rsp + #16
        # java.util.ImmutableCollections$SetN::probe @ bci:9  L[0]=RBP L[1]=rsp + #0 L[2]=_ L[3]=_
        # OopMap {rbp=Oop [0]=Oop off=520/0x208}
208     ud2	# ShouldNotReachHere

21c     B30: #	out( N327 ) &lt;- in( B1 )  Freq: 1.01328e-06
21c     movl    RSI, #-10	# int
        nop 	# 2 bytes pad for loops and calls
223     call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.util.ImmutableCollections$SetN::probe @ bci:1  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#NULL
        # OopMap {off=552/0x228}
228     ud2	# ShouldNotReachHere

23c     B31: #	out( N327 ) &lt;- in( B5 )  Freq: 1.01328e-06
23c     movl    RSI, #-10	# int
        nop 	# 2 bytes pad for loops and calls
243     call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.util.ImmutableCollections$SetN::probe @ bci:8  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_ STK[1]=#NULL
        # OopMap {off=584/0x248}
248     ud2	# ShouldNotReachHere

25c     B32: #	out( N327 ) &lt;- in( B15 )  Freq: 6.59841e-07
25c     movl    RSI, #-10	# int
        nop 	# 2 bytes pad for loops and calls
263     call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.util.ImmutableCollections$SetN::probe @ bci:47  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=_ STK[1]=#NULL
        # OopMap {off=616/0x268}
<writer thread='42499'/>
&lt;init&gt;
<writer thread='24067'/>
&lt;init&gt; (55 bytes)   callee is too large
<writer thread='42499'/>
 (55 bytes)   callee is too large
<writer thread='36611'/>
268     ud2	# ShouldNotReachHere

27c     B33: #	out( B35 ) &lt;- in( B24 )  Freq: 2.99699e-08
27c     # exception oop is in rax; no code emitted
27c     movq    RSI, RAX	# spill
27f     jmp,s   B35

281     B34: #	out( B35 ) &lt;- in( B13 )  Freq: 6.70603e-06
281     # exception oop is in rax; no code emitted
281     movq    RSI, RAX	# spill

284     B35: #	out( N327 ) &lt;- in( B33 B34 )  Freq: 6.736e-06
284     addq    rsp, 48	# Destroy frame
	popq    rbp

289     jmp     rethrow_stub

--------------------------------------------------------------------------------
</opto_assembly>
   1225  166       3       java.util.ImmutableCollections$SetN::probe (56 bytes)   made not entrant
                              @ 1   java.lang.Object::hashCode (0 bytes)   (intrinsic, virtual)
                              @ 9   java.lang.Math::floorMod (20 bytes)   inline (hot)
                              @ 31   java.lang.Object::equals (11 bytes)   virtual call
<writer thread='40195'/>
   1225  489       1       java.net.URL::getProtocol (5 bytes)
<writer thread='42499'/>
   1225  449       3       java.util.stream.ReferencePipeline::&lt;init&gt; (8 bytes)
                              @ 4   java.util.stream.AbstractPipeline::&lt;init&gt; (55 bytes)   callee is too large
<writer thread='40195'/>
   1226  450       3       java.util.stream.AbstractPipeline::&lt;init&gt; (55 bytes)
                              @ 1   java.util.stream.PipelineHelper::&lt;init&gt; (5 bytes)
                                @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
<writer thread='42499'/>
   1226  435   !   3       java.io.BufferedReader$1::hasNext (43 bytes)
<writer thread='24067'/>
   1226  436       3       java.io.BufferedReader::readLine (7 bytes)
<writer thread='42499'/>
                              @ 14   java.io.BufferedReader::readLine (7 bytes)
<writer thread='24067'/>
               !m             @ 3   java.io.BufferedReader::readLine (327 bytes)   callee is too large
<writer thread='42499'/>
               !m               @ 3   java.io.BufferedReader::readLine (327 bytes)   callee is too large
                              @ 39  java/io/UncheckedIOException::&lt;init&gt; (not loaded)   not inlineable
<writer thread='24067'/>
   1227  439       3       java.io.BufferedReader::ensureOpen (18 bytes)
                              @ 13  java/io/IOException::&lt;init&gt; (not loaded)   not inlineable
<writer thread='40195'/>
   1227  441       3       java.io.BufferedReader$1::next (5 bytes)
                              @ 1   java.io.BufferedReader$1::next (34 bytes)
               !                @ 8   java.io.BufferedReader$1::hasNext (43 bytes)   callee is too large
                                @ 30  java/util/NoSuchElementException::&lt;init&gt; (not loaded)   not inlineable
<writer thread='24067'/>
   1228  491       1       java.net.URL::getFile (5 bytes)
   1229  490       1       java.net.URL::getPort (5 bytes)
<writer thread='42499'/>
   1229  492       1       java.net.URL::getAuthority (5 bytes)
<writer thread='24067'/>
   1229  493       1       java.net.URL::getPath (5 bytes)
<writer thread='40195'/>
   1229  494       1       java.net.URL::getQuery (5 bytes)
<writer thread='24067'/>
   1229  495       1       java.net.URL::getRef (5 bytes)
   1230  497       3       java.lang.StringLatin1::indexOf (121 bytes)
<writer thread='42499'/>
   1230  496       1       java.net.URL::getHost (5 bytes)
   1230  442       3       java.io.BufferedReader$1::next (34 bytes)
<writer thread='40195'/>
   1231  443       3       jdk.internal.module.IllegalAccessMaps$$Lambda$29/0x0000000800090040::test (8 bytes)
<writer thread='42499'/>
               !              @ 8   java.io.BufferedReader$1::hasNext (43 bytes)   callee is too large
<writer thread='40195'/>
                              @ 4   jdk.internal.module.IllegalAccessMaps::lambda$generate$2 (22 bytes)
<writer thread='42499'/>
                              @ 30  java/util/NoSuchElementException::&lt;init&gt; (not loaded)   not inlineable
<writer thread='40195'/>
                                @ 1   java.lang.String::isEmpty (14 bytes)
                                @ 10   java.lang.String::startsWith (7 bytes)
                                  @ 3   java.lang.String::startsWith (138 bytes)   callee is too large
<writer thread='42499'/>
   1232  444       3       jdk.internal.module.IllegalAccessMaps::lambda$generate$2 (22 bytes)
                              @ 1   java.lang.String::isEmpty (14 bytes)
                              @ 10   java.lang.String::startsWith (7 bytes)
                                @ 3   java.lang.String::startsWith (138 bytes)   callee is too large
<writer thread='40195'/>
   1234  498       1       java.net.URL::getUserInfo (5 bytes)
   1235  499       1       java.util.ArrayList::size (5 bytes)
<writer thread='24067'/>
   1235  445       3       jdk.internal.module.IllegalAccessMaps$$Lambda$30/0x0000000800090840::accept (20 bytes)
                              @ 16   jdk.internal.module.IllegalAccessMaps::lambda$generate$5 (92 bytes)   callee is too large
<writer thread='40195'/>
   1235  446       3       jdk.internal.module.IllegalAccessMaps::lambda$generate$5 (92 bytes)
<writer thread='42499'/>
   1235  500       1       jdk.internal.loader.URLClassPath$Loader::getBaseURL (5 bytes)
<writer thread='40195'/>
                              @ 2   java.util.Map::get (0 bytes)   no static binding
                              @ 20   jdk.internal.module.IllegalAccessMaps::isOpen (21 bytes)
                                @ 1   java.lang.module.ModuleDescriptor::opens (5 bytes)
                                @ 4   java.util.Collection::stream (11 bytes)   no static binding
                                @ 10   java.lang.invoke.LambdaForm$MH/0x0000000800063040::linkToTargetMethod (9 bytes)   force inline by annotation
<writer thread='24067'/>
   1237  420       1       java.util.stream.AbstractPipeline::getStreamAndOpFlags (5 bytes)
<writer thread='42499'/>
   1237  452       3       java.util.stream.AbstractPipeline::evaluate (94 bytes)
<writer thread='40195'/>
                                  @ 5   java.lang.invoke.LambdaForm$DMH/0x0000000800062c40::invokeStatic (14 bytes)   force inline by annotation
<writer thread='40963'/>
   1238  455       3       java.util.stream.AbstractPipeline::sourceSpliterator (265 bytes)
<writer thread='40195'/>
                                    @ 1   java.lang.invoke.DirectMethodHandle::internalMemberName (8 bytes)   force inline by annotation
<writer thread='24067'/>
   1238  456       3       java.util.stream.AbstractPipeline::wrapAndCopyInto (18 bytes)
<writer thread='42499'/>
                              @ 40  java/lang/IllegalStateException::&lt;init&gt; (not loaded)   not inlineable
                              @ 50   java.util.stream.AbstractPipeline::isParallel (8 bytes)
<writer thread='40195'/>
                                    @ 10   jdk.internal.module.IllegalAccessMaps$$Lambda$31/0x0000000800091440::get$Lambda (9 bytes)
<writer thread='24067'/>
                              @ 3   java.util.Objects::requireNonNull (14 bytes)
<writer thread='40963'/>
                              @ 48   java.util.function.Supplier::get (0 bytes)   not inlineable
<writer thread='42499'/>
                              @ 60   java.util.stream.TerminalOp::getOpFlags (2 bytes)   no static binding
<writer thread='24067'/>
                                @ 8   java.lang.NullPointerException::
<writer thread='40195'/>
                                
<writer thread='40963'/>
             
<writer thread='40195'/>
      
<writer thread='40963'/>
             
<writer thread='24067'/>
&lt;init&gt; (5 bytes)   don&apos;t inline Throwable constructors
<writer thread='40963'/>
    @ 79   java.util.stream.AbstractPipeline::isParallel (8 bytes)
<writer thread='40195'/>
@ 5   jdk.internal.module.IllegalAccessMaps$$Lambda$31/0x0000000800091440::&lt;init&gt; (10 bytes)
                                        @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
<writer thread='42499'/>
                              @ 65  
<writer thread='24067'/>
                              @ 9  
<writer thread='42499'/>
 java.util.stream.AbstractPipeline::sourceSpliterator
<writer thread='24067'/>
 java.util.stream.AbstractPipeline::
<writer thread='40963'/>
             
<writer thread='42499'/>
 (265 bytes)   callee is too large
<writer thread='40963'/>
                 @ 131   java.util.stream.AbstractPipeline::opIsStateful (0 bytes)   no static binding
<writer thread='42499'/>
                              @ 68   java.util.stream.TerminalOp::evaluateParallel (24 bytes)   no static binding
                              @ 80   java.util.stream.TerminalOp::getOpFlags (2 bytes)   no static binding
<writer thread='40963'/>
                              @ 144   java.util.stream.StreamOpFlag::isKnown (19 bytes)
<writer thread='42499'/>
                              @ 85   java.util.stream.AbstractPipeline::sourceSpliterator (265 bytes)   callee is too large
<writer thread='40195'/>
                                @ 15   java.util.stream.ReferencePipeline::anyMatch (18 bytes)
<writer thread='42499'/>
                              @ 88   java.util.stream.TerminalOp::evaluateSequential (0 bytes)   no static binding
<writer thread='24067'/>
wrapSink (37 bytes)   callee is too large
                              @ 13  
<writer thread='40195'/>
                                  @ 5   java.util.stream.MatchOps::makeRef (29 bytes)   callee is too large
<writer thread='24067'/>
 java.util.stream.AbstractPipeline::copyInto (54 bytes)   callee is too large
<writer thread='40963'/>
                              @ 165  
<writer thread='40195'/>
                                  @ 8   java.util.stream.AbstractPipeline::evaluate (94 bytes)   callee is too large
<writer thread='40963'/>
 java.util.stream.AbstractPipeline::opEvaluateParallelLazy (17 bytes)
<writer thread='40195'/>
                                  @ 14   java.lang.Boolean::booleanValue (5 bytes)
<writer thread='40963'/>
                                @ 3  java/lang/invoke/MethodHandle::invokeBasic (not loaded)   not inlineable
<writer thread='40195'/>
                              @ 28   java.lang.module.ModuleDescriptor::name (5 bytes)
<writer thread='40963'/>
                                @ 8   java.util.stream.AbstractPipeline::opEvaluateParallel (11 bytes)
<writer thread='40195'/>
                              @ 36  
<writer thread='40963'/>
                                  @ 7  java/lang/UnsupportedOperationException::&lt;init&gt; (not loaded)   not inlineable
<writer thread='40195'/>
 jdk.internal.module.IllegalAccessMaps::isExported (21 bytes)
<writer thread='40963'/>
                              @ 227   java.util.stream.StreamOpFlag::combineOpFlags (9 bytes)
                                @ 2   java.util.stream.StreamOpFlag::getMask (30 bytes)
                              @ 257   java.util.stream.StreamOpFlag::combineOpFlags (9 bytes)
                                @ 2   java.util.stream.StreamOpFlag::getMask (30 bytes)
<writer thread='40195'/>
                                @ 1   java.lang.module.ModuleDescriptor::exports (5 bytes)
<writer thread='24067'/>
   1243  458       3       java.util.stream.AbstractPipeline::copyInto (54 bytes)
<writer thread='40963'/>
                              @ 74  java/lang/IllegalStateException::&lt;init&gt; (not loaded)   not inlineable
<writer thread='24067'/>
                              @ 1   java.util.Objects::requireNonNull (14 bytes)
                                @ 8   java.lang.NullPointerException::&lt;init&gt; (5 bytes)   don&apos;t inline Throwable constructors
<writer thread='42499'/>
   1243  459       3       java.util.stream.StreamOpFlag::isKnown (19 bytes)
<writer thread='40195'/>
                                @ 4   java.util.Collection::stream (11 bytes)   no static binding
<writer thread='24067'/>
                              @ 9   java.util.stream.AbstractPipeline::getStreamAndOpFlags (5 bytes)
<writer thread='40195'/>
                                @ 10   java.lang.invoke.LambdaForm$MH/0x0000000800063040::linkToTargetMethod (9 bytes)   force inline by annotation
             
<writer thread='24067'/>
                              @ 12   java.util.stream.StreamOpFlag::isKnown (19 bytes)
<writer thread='40195'/>
                     @ 5   java.lang.invoke.LambdaForm$DMH/0x0000000800062c40::invokeStatic (14 bytes)   force inline by annotation
<writer thread='24067'/>
                              @ 20   java.util.Spliterator::getExactSizeIfKnown (25 bytes)   no static binding
<writer thread='42499'/>
   1245  460       3       java.util.Spliterator::getExactSizeIfKnown (25 bytes)
<writer thread='40195'/>
                                    @ 1   java.lang.invoke.DirectMethodHandle::internalMemberName (8 bytes)   force inline by annotation
<writer thread='42499'/>
                              @ 1   java.util.Spliterator::characteristics (0 bytes)   no static binding
                              @ 19   java.util.Spliterator::estimateSize (0 bytes)   no static binding
<writer thread='40195'/>
                                    @ 10   jdk.internal.module.IllegalAccessMaps$$Lambda$33/0x0000000800091c40::get$Lambda (9 bytes)
                                      @ 5   jdk.internal.module.IllegalAccessMaps$$Lambda$33/0x0000000800091c40::&lt;init&gt; (10 bytes)
                                        @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
<writer thread='24067'/>
                              @ 25   java.util.stream.Sink::begin (1 bytes)   no static binding
                              @ 32   java.util.Spliterator::forEachRemaining (11 bytes)   no static binding
                              @ 38   java.util.stream.Sink::end (1 bytes)   no static binding
                              @ 49   java.util.stream.AbstractPipeline::copyIntoWithCancel (46 bytes)   callee is too large
<writer thread='40195'/>
                                @ 15   java.util.stream.ReferencePipeline::anyMatch (18 bytes)
                                  @ 5   java.util.stream.MatchOps::makeRef (29 bytes)   callee is too large
                                  @ 8   java.util.stream.AbstractPipeline::evaluate (94 bytes)   callee is too large
                                  @ 14   java.lang.Boolean::booleanValue (5 bytes)
<writer thread='42499'/>
   1247  461       3       java.util.stream.Sink::end (1 bytes)
<writer thread='40195'/>
                              @ 45   java.lang.invoke.LambdaForm$MH/0x0000000800078c40::linkToTargetMethod (8 bytes)   force inline by annotation
                                @ 4   java.lang.invoke.LambdaForm$MH/0x0000000800078440::invoke (8 bytes)   force inline by annotation
<writer thread='42499'/>
   1247  462       3       java.util.Collection::stream (11 bytes)
                              @ 1   java.util.Collection::spliterator (6 bytes)   no static binding
<writer thread='40195'/>
                              @ 50   java.util.Map::computeIfAbsent
<writer thread='42499'/>
                              @ 7   java.util.stream.StreamSupport::stream (19 bytes)
<writer thread='40195'/>
 (45 bytes)   no static binding
<writer thread='42499'/>
                                @ 1   java.util.Objects::requireNonNull (14 bytes)
<writer thread='40195'/>
                              @ 59   java.util.Set::add (0 bytes)   no static binding
<writer thread='42499'/>
                                  @ 8   java.lang.NullPointerException::
<writer thread='40195'/>
                              @ 71   java.lang.invoke.LambdaForm$MH/0x0000000800078c40::linkToTargetMethod (8 bytes)   force inline by annotation
<writer thread='42499'/>
&lt;init&gt; (5 bytes)   don&apos;t inline Throwable constructors
<writer thread='40195'/>
                                @ 4   java.lang.invoke.LambdaForm$MH/0x0000000800078440::invoke (8 bytes)   force inline by annotation
<writer thread='42499'/>
                                @ 11   java.util.stream.StreamOpFlag::fromCharacteristics (37 bytes)   callee is too large
<writer thread='40195'/>
                              @ 76   java.util.Map::computeIfAbsent (45 bytes)   no static binding
<writer thread='42499'/>
                                @ 15   java.util.stream.ReferencePipeline$Head::&lt;init&gt; (8 bytes)
<writer thread='40195'/>
                              @ 85   java.util.Set::add (0 bytes)   no static binding
<writer thread='42499'/>
                                  @ 4   java.util.stream.ReferencePipeline::&lt;init&gt; (8 bytes)
                                    @ 4   java.util.stream.AbstractPipeline::&lt;init&gt; (55 bytes)   callee is too large
<writer thread='25091'/>

============================= C2-compiled nmethod ==============================
<opto_assembly compile_id='484'>
----------------------- MetaData before Compile_id = 484 ------------------------
{method}
 - this oop:          0x0000000126df0138
 - method holder:     &apos;java/util/stream/ReferencePipeline&apos;
 - constants:         0x0000000126de9dc0 constant pool [585]/operands[14] {0x0000000126de9dc0} for &apos;java/util/stream/ReferencePipeline&apos; cache=0x0000000126df7030
 - access:            0xc1000010  final 
 - name:              &apos;forEachWithCancel&apos;
 - signature:         &apos;(Ljava/util/Spliterator;Ljava/util/stream/Sink;)Z&apos;
 - max stack:         3
 - max locals:        4
 - size of params:    3
 - method size:       13
 - highest level:     3
 - vtable index:      24
 - i2i entry:         0x000000010c0a1de0
 - adapters:          AHE@0x00007f99308e18e0: 0xbbb00000 i2c: 0x000000010c0e82e0 c2i: 0x000000010c0e83cb c2iUV: 0x000000010c0e8392 c2iNCI: 0x000000010c0e8408
 - compiled entry     0x000000010c8771a0
 - code size:         23
 - code start:        0x0000000126df00e0
 - code end (excl):   0x0000000126df00f7
 - method data:       0x0000000126f11640
 - checked ex length: 0
 - linenumber start:  0x0000000126df00f7
 - localvar length:   4
 - localvar start:    0x0000000126df0104
 - compiled code: nmethod   1249  438       3       java.util.stream.ReferencePipeline::forEachWithCancel (23 bytes)

------------------------ OptoAssembly for Compile_id = 484 -----------------------
#
#  bool ( java/util/stream/ReferencePipeline:NotNull *, java/util/Spliterator *, java/util/stream/Sink * )
#
#r018 rsi:rsi   : parm 0: java/util/stream/ReferencePipeline:NotNull *
#r016 rdx:rdx   : parm 1: java/util/Spliterator *
#r010 rcx:rcx   : parm 2: java/util/stream/Sink *
# -- Old rsp -- Framesize: 80 --
#r583 rsp+76: in_preserve
#r582 rsp+72: return address
#r581 rsp+68: in_preserve
#r580 rsp+64: saved fp register
#r579 rsp+60: pad2, stack alignment
#r578 rsp+56: pad2, stack alignment
#r577 rsp+52: Fixed slot 1
#r576 rsp+48: Fixed slot 0
#r595 rsp+44: spill
#r594 rsp+40: spill
#r593 rsp+36: spill
#r592 rsp+32: spill
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N819: #	out( B1 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B85 B2 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (672 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #64	# Create frame

02c     movl    R10, [RCX + #8 (8-bit)]	# compressed klass ptr
030     NullCheck RCX

030     B2: #	out( B71 B3 ) &lt;- in( B1 )  Freq: 0.999999
030     cmpl    R10, narrowklass: precise klass java/util/stream/MatchOps$1MatchSink: 0x00000001283582f0:Constant:exact *	# compressed klass ptr
037     jne,u   B71  P=0.000001 C=-1.000000

03d     B3: #	out( B44 B4 ) &lt;- in( B2 )  Freq: 0.999998
03d     movq    R11, RCX	# spill
040     # checkcastPP of R11
040     movzbl  RAX, [R11 + #12 (8-bit)]	# ubyte ! Field: java/util/stream/MatchOps$BooleanTerminalSink.stop
045     testl   RAX, RAX
047     jne     B44  P=0.010895 C=17348.000000

04d     B4: #	out( B72 B5 ) &lt;- in( B3 )  Freq: 0.989103
04d     movl    R10, [RDX + #8 (8-bit)]	# compressed klass ptr
051     NullCheck RDX

051     B5: #	out( B72 B6 ) &lt;- in( B4 )  Freq: 0.989102
051     cmpl    R10, narrowklass: precise klass java/util/Spliterators$IteratorSpliterator: 0x00000001283583c0:Constant:exact *	# compressed klass ptr
058     jne,u   B72  P=0.000001 C=-1.000000

05e     B6: #	out( B26 ) &lt;- in( B5 )  Freq: 0.989101
05e     movq    R8, RDX	# spill
061     # checkcastPP of R8
061     jmp     B26

066     B7: #	out( B8 ) &lt;- in( B37 ) top-of-loop Freq: 9.26971
066     decode_heap_oop_not_null R10,RSI

06a     B8: #	out( B9 ) &lt;- in( B41 B7 ) top-of-loop Freq: 18.3032
06a     encode_heap_oop_not_null RDI,R10
0b3     decl    RBX	# int
0b5     movl    [RCX + #12 (8-bit)], RBX	# int ! Field: java/util/ImmutableCollections$SetN$SetNIterator.remaining

0b8     B9: #	out( B68 B10 ) &lt;- in( B8 B65 B61 )  Freq: 18.4777
0b8     movzbl  RBP, [R11 + #12 (8-bit)]	# ubyte ! Field: java/util/stream/MatchOps$BooleanTerminalSink.stop
0bd     testl   RBP, RBP
0bf     jne     B68  P=0.000000 C=20459.000000

0c5     B10: #	out( B77 B11 ) &lt;- in( B9 )  Freq: 18.4777
0c5     movl    R10, [R11 + #20 (8-bit)]	# compressed ptr ! Field: java/util/stream/MatchOps$1MatchSink.val$predicate
0c9     movl    RCX, [R12 + R10 &lt;&lt; 3 + #8] (compressed oop addressing)	# compressed klass ptr
0ce     NullCheck R10

0ce     B11: #	out( B62 B12 ) &lt;- in( B10 )  Freq: 18.4777
0ce     decode_heap_oop_not_null RSI,R10
0d2     cmpl    RCX, narrowklass: precise klass jdk/internal/module/IllegalAccessMaps$$Lambda$33: 0x0000000127c59e50:Constant:exact *	# compressed klass ptr
0d8     jne,u   B62  P=0.006016 C=-1.000000

0de     B12: #	out( B79 B13 ) &lt;- in( B11 )  Freq: 18.3666
0de     # checkcastPP of RSI
0de     movl    R9, [RSI + #12 (8-bit)]	# compressed ptr ! Field: jdk/internal/module/IllegalAccessMaps$$Lambda$33.arg$1 (constant)
0e2     movl    RCX, [R12 + RDI &lt;&lt; 3 + #8] (compressed oop addressing)	# compressed klass ptr
0e7     NullCheck RDI

0e7     B13: #	out( B76 B14 ) &lt;- in( B12 )  Freq: 18.3665
0e7     cmpl    RCX, narrowklass: precise klass java/lang/module/ModuleDescriptor$Exports: 0x0000000127dc8900:Constant:exact *	# compressed klass ptr
0ed     jne,u   B76  P=0.000000 C=-1.000000

0f3     B14: #	out( B80 B15 ) &lt;- in( B13 )  Freq: 18.3665
0f3     decode_heap_oop_not_null RDX,RDI
0f7     # checkcastPP of RDX
0f7     movl    R10, [RDX + #16 (8-bit)]	# compressed ptr ! Field: java/lang/module/ModuleDescriptor$Exports.source
0fb     movsbl  RBX, [R12 + R10 &lt;&lt; 3 + #20] (compressed oop addressing)	# byte ! Field: java/lang/String.coder (constant)
101     NullCheck R10

101     B15: #	out( B46 B16 ) &lt;- in( B14 )  Freq: 18.3665
101     cmpl    R10, R9	# compressed ptr
104     je,u   B46  P=0.034001 C=15617.000000

10a     B16: #	out( B20 B17 ) &lt;- in( B15 )  Freq: 17.742
10a     testl   R9, R9	# compressed ptr
10d     je     B20  P=0.001000 C=-1.000000

113     B17: #	out( B70 B18 ) &lt;- in( B16 )  Freq: 17.7243
113     movsbl  RBP, [R12 + R9 &lt;&lt; 3 + #20] (compressed oop addressing)	# byte ! Field: java/lang/String.coder (constant)
119     cmpl    RBX, RBP
11b     jne     B70  P=0.000000 C=13329.000000

121     B18: #	out( B20 B19 ) &lt;- in( B17 )  Freq: 17.7243
121     movl    R9, [R12 + R9 &lt;&lt; 3 + #12] (compressed oop addressing)	# compressed ptr ! Field: java/lang/String.value (constant)
126     movl    RBX, [R12 + R10 &lt;&lt; 3 + #12] (compressed oop addressing)	# compressed ptr ! Field: java/lang/String.value (constant)
12b     movl    R10, [R12 + R9 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
130     movl    RCX, [R12 + RBX &lt;&lt; 3 + #12] (compressed oop addressing)	# range
135     cmpl    RCX, R10
138     jne     B20  P=0.001000 C=-1.000000

13e     B19: #	out( B46 B20 ) &lt;- in( B18 )  Freq: 17.7066
13e     decode_heap_oop_not_null R10,R9
142     leaq    RSI, [R12 + R9 &lt;&lt; 3 + #16] (compressed oop addressing)	# ptr compressedoopoff32
147     decode_heap_oop_not_null R10,RBX
14b     leaq    RDI, [R12 + RBX &lt;&lt; 3 + #16] (compressed oop addressing)	# ptr compressedoopoff32
150     String Equals RDI,RSI,RCX -&gt; RAX    // KILL XMM0, XMM1, RBX
20c     testl   RAX, RAX
20e     jne     B46  P=0.014707 C=20331.000000

214     B20: #	out( B21 ) &lt;- in( B48 B19 B16 B18 B50 )  Freq: 17.9781
214     xorl    RAX, RAX	# int

216     B21: #	out( B78 B22 ) &lt;- in( B20 B51 B63 )  Freq: 18.4777
216     movl    R9, [R11 + #16 (8-bit)]	# compressed ptr ! Field: java/util/stream/MatchOps$1MatchSink.val$matchKind
21a     movzbl  R10, [R12 + R9 &lt;&lt; 3 + #20] (compressed oop addressing)	# ubyte ! Field: java/util/stream/MatchOps$MatchKind.stopOnPredicateMatches
220     NullCheck R9

220     B22: #	out( B56 B23 ) &lt;- in( B21 )  Freq: 18.4776
220     cmpl    RAX, R10
223     je     B56  P=0.010069 C=20459.000000

229     B23: #	out( B24 ) &lt;- in( B22 B56 )  Freq: 18.4776
229     movl    R9, #1	# int

22f     B24: #	out( B43 B25 ) &lt;- in( B23 B42 )  Freq: 19.3631
22f     # TLS is in R15
22f     movq    R10, [R15 + #296 (32-bit)]	# ptr
236     testl   rax, [R10]	# Safepoint: poll for GC        # java.util.stream.ReferencePipeline::forEachWithCancel @ bci:18  L[0]=_ L[1]=R8 L[2]=R11 L[3]=#0 STK[0]=R9
        # OopMap {r11=Oop r8=Oop off=566/0x236}
239     testl   R9, R9
23c     je     B43  P=0.040620 C=17159.000000

242     B25: #	out( B44 B26 ) &lt;- in( B24 )  Freq: 18.5765
242     movzbl  RAX, [R11 + #12 (8-bit)]	# ubyte ! Field: java/util/stream/MatchOps$BooleanTerminalSink.stop
247     testl   RAX, RAX
249     jne     B44  P=0.010895 C=17348.000000

24f     B26: #	out( B83 B27 ) &lt;- in( B6 B25 ) Loop( B26-B25 ) Freq: 19.3632
24f     movl    R9, [R8 + #32 (8-bit)]	# compressed ptr ! Field: java/util/Spliterators$IteratorSpliterator.it
253     movl    R10, [R12 + R9 &lt;&lt; 3 + #8] (compressed oop addressing)	# compressed klass ptr
258     NullCheck R9

258     B27: #	out( B52 B28 ) &lt;- in( B26 )  Freq: 19.3632
258     decode_heap_oop_not_null RCX,R9
25c     cmpl    R10, narrowklass: precise klass java/util/ImmutableCollections$SetN$SetNIterator: 0x00000001282b88a0:Constant:exact *	# compressed klass ptr
263     jne,u   B52  P=0.016134 C=-1.000000

269     B28: #	out( B45 B29 ) &lt;- in( B27 )  Freq: 19.0508
269     movq    RBX, RCX	# spill
26c     # checkcastPP of RBX
26c     movl    RBX, [RBX + #12 (8-bit)]	# int ! Field: java/util/ImmutableCollections$SetN$SetNIterator.remaining
26f     testl   RBX, RBX
271     jle     B45  P=0.036224 C=10656.000000

277     B29: #	out( B30 ) &lt;- in( B28 )  Freq: 18.3607
277     movl    RBX, #1	# int

27c     B30: #	out( B42 B31 ) &lt;- in( B45 B29 B53 )  Freq: 19.3632
27c     testl   RBX, RBX
27e     je     B42  P=0.045726 C=21585.000000

284     B31: #	out( B57 B32 ) &lt;- in( B30 )  Freq: 18.4778
284     cmpl    R10, narrowklass: precise klass java/util/ImmutableCollections$SetN$SetNIterator: 0x00000001282b88a0:Constant:exact *	# compressed klass ptr
28b     jne,u   B57  P=0.009449 C=-1.000000

291     B32: #	out( B69 B33 ) &lt;- in( B31 )  Freq: 18.3032
291     # checkcastPP of RCX
291     movl    RBX, [RCX + #12 (8-bit)]	# int ! Field: java/util/ImmutableCollections$SetN$SetNIterator.remaining
294     testl   RBX, RBX
296     jle     B69  P=0.000000 C=10555.000000

29c     B33: #	out( B81 B34 ) &lt;- in( B32 )  Freq: 18.3032
29c     movl    R10, [RCX + #20 (8-bit)]	# compressed ptr ! Field: java/util/ImmutableCollections$SetN$SetNIterator.this$0
2a0     movl    R10, [R12 + R10 &lt;&lt; 3 + #16] (compressed oop addressing)	# compressed ptr ! Field: java/util/ImmutableCollections$SetN.elements (constant)
2a5     NullCheck R10

2a5     B34: #	out( B82 B35 ) &lt;- in( B33 )  Freq: 18.3032
2a5     movl    R9, [R12 + R10 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
2aa     NullCheck R10

2aa     B35: #	out( B54 B36 ) &lt;- in( B34 )  Freq: 18.3032
2aa     movl    RBP, [RCX + #16 (8-bit)]	# int ! Field: java/util/ImmutableCollections$SetN$SetNIterator.idx
2ad     incl    RBP	# int
2af     cmpl    RBP, R9
2b2     jge     B54  P=0.015306 C=19208.000000

2b8     B36: #	out( B66 B37 ) &lt;- in( B35 B54 )  Freq: 18.3032
2b8     movl    [RCX + #16 (8-bit)], RBP	# int ! Field: java/util/ImmutableCollections$SetN$SetNIterator.idx
2bb     cmpl    RBP, R9	# unsigned
2be     jnb,u   B66  P=0.000001 C=-1.000000

2c4     B37: #	out( B7 B38 ) &lt;- in( B36 )  Freq: 18.3032
2c4     decode_heap_oop_not_null RDX,R10
2c8     movl    RSI, [RDX + #16 + RBP &lt;&lt; #2]	# compressed ptr
2cc     testl   RSI, RSI	# compressed ptr
2ce     jne     B7  P=0.506454 C=20841.000000

2d4     B38: #	out( B55 B39 ) &lt;- in( B37 B40 ) Loop( B38-B40 inner ) Freq: 17.8367
2d4     # TLS is in R15
2d4     movq    RSI, [R15 + #296 (32-bit)]	# ptr
2db     testl   rax, [RSI]	# Safepoint: poll for GC        # java.util.ImmutableCollections$SetN$SetNIterator::next @ bci:24  L[0]=RCX L[1]=_
        # java.util.Spliterators$IteratorSpliterator::tryAdvance @ bci:63  L[0]=_ L[1]=_ STK[0]=R11
        # java.util.stream.ReferencePipeline::forEachWithCancel @ bci:13  L[0]=_ L[1]=R8 L[2]=R11 L[3]=#0
        # OopMap {r10=NarrowOop r11=Oop r8=Oop rcx=Oop rdx=Oop off=731/0x2db}
2dd     movl    RBP, [RCX + #16 (8-bit)]	# int ! Field: java/util/ImmutableCollections$SetN$SetNIterator.idx
2e0     incl    RBP	# int
2e2     cmpl    RBP, R9
2e5     jge     B55  P=0.015306 C=19208.000000

2eb     B39: #	out( B67 B40 ) &lt;- in( B38 B55 )  Freq: 17.8367
2eb     movl    [RCX + #16 (8-bit)], RBP	# int ! Field: java/util/ImmutableCollections$SetN$SetNIterator.idx
2ee     cmpl    RBP, R9	# unsigned
2f1     jnb,u   B67  P=0.000001 C=-1.000000

2f7     B40: #	out( B38 B41 ) &lt;- in( B39 )  Freq: 17.8367
2f7     movl    RDI, [RDX + #16 + RBP &lt;&lt; #2]	# compressed ptr
2fb     testl   RDI, RDI	# compressed ptr
2fd     je,s   B38  P=0.493546 C=10286.000000

2ff     B41: #	out( B8 ) &lt;- in( B40 )  Freq: 9.03345
2ff     decode_heap_oop_not_null R10,RDI
303     jmp     B8

308     B42: #	out( B24 ) &lt;- in( B30 )  Freq: 0.885407
308     xorl    R9, R9	# int
30b     jmp     B24

310     B43: #	out( B44 ) &lt;- in( B24 )  Freq: 0.786529
310     xorl    RAX, RAX	# int

312     B44: #	out( N819 ) &lt;- in( B25 B43 B3 )  Freq: 0.999808
312     vzeroupper
	addq    rsp, 64	# Destroy frame
	popq    rbp
	movq    rscratch1, poll_offset[r15_thread] #polling_page_address
	testl   rax, [rscratch1]	# Safepoint: poll for GC

324     ret

325     B45: #	out( B30 ) &lt;- in( B28 )  Freq: 0.690092
325     xorl    RBX, RBX	# int
327     jmp     B30

32c     B46: #	out( B86 B47 ) &lt;- in( B15 B19 )  Freq: 0.884891
32c     movl    RBP, [RDX + #20 (8-bit)]	# compressed ptr ! Field: java/lang/module/ModuleDescriptor$Exports.targets
32f     movl    R9, [R12 + RBP &lt;&lt; 3 + #8] (compressed oop addressing)	# compressed klass ptr
334     NullCheck RBP

334     B47: #	out( B50 B48 ) &lt;- in( B46 )  Freq: 0.88489
334     cmpl    R9, narrowklass: precise klass java/util/ImmutableCollections$SetN: 0x00000001277d8090:Constant:exact *	# compressed klass ptr
33b     je,us  B50  P=0.641137 C=-1.000000

33d     B48: #	out( B20 B49 ) &lt;- in( B47 )  Freq: 0.317554
33d     cmpl    R9, narrowklass: precise klass java/util/ImmutableCollections$Set12: 0x00000001277db5a0:Constant:exact *	# compressed klass ptr
344     je,u   B20  P=0.999999 C=-1.000000

34a     B49: #	out( N819 ) &lt;- in( B48 )  Freq: 3.17554e-07
34a     movl    RSI, #-58	# int
34f     movq    [rsp + #0], R8	# spill
353     movq    [rsp + #16], R11	# spill
358     call,static  wrapper for: uncommon_trap(reason=&apos;bimorphic_or_optimized_type_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.module.ModuleDescriptor$Exports::isQualified @ bci:4  L[0]=_ STK[0]=RBP
        # jdk.internal.module.IllegalAccessMaps::lambda$isExported$6 @ bci:12  L[0]=_ L[1]=_
        # jdk.internal.module.IllegalAccessMaps$$Lambda$33/0x0000000800091c40::test @ bci:8  L[0]=_ L[1]=_
        # java.util.stream.MatchOps$1MatchSink::accept @ bci:12  L[0]=rsp + #16 L[1]=_
        # java.util.Spliterators$IteratorSpliterator::tryAdvance @ bci:68  L[0]=_ L[1]=_
        # java.util.stream.ReferencePipeline::forEachWithCancel @ bci:13  L[0]=_ L[1]=rsp + #0 L[2]=rsp + #16 L[3]=#0
        # OopMap {rbp=NarrowOop [0]=Oop [16]=Oop off=864/0x360}
360     ud2	# ShouldNotReachHere

374     B50: #	out( B20 B51 ) &lt;- in( B47 )  Freq: 0.567336
374     decode_heap_oop_not_null R10,RBP
378     # checkcastPP of R10
378     movl    R10, [R10 + #12 (8-bit)]	# int ! Field: java/util/ImmutableCollections$SetN.size (constant)
37c     testl   R10, R10
37f     jne     B20  P=0.315436 C=298.000000

385     B51: #	out( B21 ) &lt;- in( B50 )  Freq: 0.388377
385     movl    RAX, #1	# int
38a     jmp     B21

38f     B52: #	out( B73 B53 ) &lt;- in( B27 )  Freq: 0.312414
38f     cmpl    R10, narrowklass: precise klass java/util/ImmutableCollections$Set12$1: 0x00000001282b8970:Constant:exact *	# compressed klass ptr
396     jne,u   B73  P=0.000001 C=-1.000000

39c     B53: #	out( B30 ) &lt;- in( B52 )  Freq: 0.312413
39c     movq    RBX, RCX	# spill
39f     # checkcastPP of RBX
39f     movl    RDI, [RBX + #12 (8-bit)]	# int ! Field: java/util/ImmutableCollections$Set12$1.idx
3a2     movl    RBX, #1	# int
3a7     xorl    RDX, RDX	# int
3a9     testl   RDI, RDI
3ab     cmovlle RBX, RDX	# signed, int
3ae     jmp     B30

3b3     B54: #	out( B36 ) &lt;- in( B35 )  Freq: 0.280151
3b3     xorl    RBP, RBP	# int
3b5     jmp     B36

3ba     B55: #	out( B39 ) &lt;- in( B38 )  Freq: 0.27301
3ba     xorl    RBP, RBP	# int
3bc     jmp     B39

3c1     B56: #	out( B23 ) &lt;- in( B22 )  Freq: 0.186049
3c1     movb    [R11 + #12 (8-bit)], #1	# byte ! Field: java/util/stream/MatchOps$BooleanTerminalSink.stop
3c6     movzbl  R10, [R12 + R9 &lt;&lt; 3 + #21] (compressed oop addressing)	# ubyte ! Field: java/util/stream/MatchOps$MatchKind.shortCircuitResult
3cc     movb    [R11 + #13 (8-bit)], R10	# byte ! Field: java/util/stream/MatchOps$BooleanTerminalSink.value
3d0     jmp     B23

3d5     B57: #	out( B74 B58 ) &lt;- in( B31 )  Freq: 0.174588
3d5     cmpl    R10, narrowklass: precise klass java/util/ImmutableCollections$Set12$1: 0x00000001282b8970:Constant:exact *	# compressed klass ptr
3dc     jne,u   B74  P=0.000001 C=-1.000000

3e2     B58: #	out( B64 B59 ) &lt;- in( B57 )  Freq: 0.174588
3e2     # checkcastPP of RCX
3e2     movl    R10, [RCX + #12 (8-bit)]	# int ! Field: java/util/ImmutableCollections$Set12$1.idx
3e6     movl    RBX, [RCX + #16 (8-bit)]	# compressed ptr ! Field: java/util/ImmutableCollections$Set12$1.this$0
3e9     cmpl    R10, #1
3ed     je,s   B64  P=0.100000 C=-1.000000

3ef     B59: #	out( B75 B60 ) &lt;- in( B58 )  Freq: 0.157129
3ef     cmpl    R10, #2
3f3     jne     B75  P=0.000001 C=-1.000000

3f9     B60: #	out( B87 B61 ) &lt;- in( B59 )  Freq: 0.157129
3f9     movl    [RCX + #12 (8-bit)], #1	# int ! Field: java/util/ImmutableCollections$Set12$1.idx
400     movl    RDI, [R12 + RBX &lt;&lt; 3 + #16] (compressed oop addressing)	# compressed ptr ! Field: java/util/ImmutableCollections$Set12.e1 (constant)
405     NullCheck RBX

405     B61: #	out( B9 ) &lt;- in( B60 )  Freq: 0.157129
405     jmp     B9

40a     B62: #	out( B84 B63 ) &lt;- in( B11 )  Freq: 0.111161
40a     movq    [rsp + #0], R8	# spill
40e     movq    RBP, R11	# spill
411     decode_heap_oop RDX,RDI
        nop 	# 1 bytes pad for loops and calls
43e     movq    rax, #Universe::non_oop_word()
	call,dynamic  java.util.function.Predicate::test
        # java.util.stream.MatchOps$1MatchSink::accept @ bci:12  L[0]=RBP L[1]=_
        # java.util.Spliterators$IteratorSpliterator::tryAdvance @ bci:68  L[0]=_ L[1]=_
        # java.util.stream.ReferencePipeline::forEachWithCancel @ bci:13  L[0]=_ L[1]=rsp + #0 L[2]=RBP L[3]=#0
        # OopMap {rbp=Oop [0]=Oop off=1104/0x450}

450     B63: #	out( B21 ) &lt;- in( B62 )  Freq: 0.111159
        # Block is sole successor of call
450     movq    R11, RBP	# spill
453     movq    R8, [rsp + #0]	# spill
457     jmp     B21

45c     B64: #	out( B88 B65 ) &lt;- in( B58 )  Freq: 0.0174588
45c     movl    [RCX + #12 (8-bit)], #0	# int ! Field: java/util/ImmutableCollections$Set12$1.idx
463     movl    RDI, [R12 + RBX &lt;&lt; 3 + #12] (compressed oop addressing)	# compressed ptr ! Field: java/util/ImmutableCollections$Set12.e0 (constant)
468     NullCheck RBX

468     B65: #	out( B9 ) &lt;- in( B64 )  Freq: 0.0174588
468     jmp     B9

46d     B66: #	out( N819 ) &lt;- in( B36 )  Freq: 1.85462e-05
46d     movl    RSI, #-28	# int
472     movq    [rsp + #0], R8	# spill
476     movq    [rsp + #16], R11	# spill
47b     movq    [rsp + #24], RCX	# spill
480     movl    [rsp + #32], R10	# spill
        nop 	# 3 bytes pad for loops and calls
488     call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos; debug_id=&apos;0&apos;)
        # java.util.ImmutableCollections$SetN$SetNIterator::next @ bci:18  L[0]=rsp + #24 L[1]=_ STK[0]=rsp + #32 STK[1]=RBP
        # java.util.Spliterators$IteratorSpliterator::tryAdvance @ bci:63  L[0]=_ L[1]=_ STK[0]=rsp + #16
        # java.util.stream.ReferencePipeline::forEachWithCancel @ bci:13  L[0]=_ L[1]=rsp + #0 L[2]=rsp + #16 L[3]=#0
        # OopMap {[0]=Oop [16]=Oop [24]=Oop [32]=NarrowOop off=1168/0x490}
490     ud2	# ShouldNotReachHere

4a4     B67: #	out( N819 ) &lt;- in( B39 )  Freq: 1.80735e-05
4a4     movl    RSI, #-28	# int
4a9     movq    [rsp + #0], R8	# spill
4ad     movq    [rsp + #16], R11	# spill
4b2     movq    [rsp + #24], RCX	# spill
4b7     movl    [rsp + #32], R10	# spill
4bc     call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos; debug_id=&apos;0&apos;)
        # java.util.ImmutableCollections$SetN$SetNIterator::next @ bci:18  L[0]=rsp + #24 L[1]=_ STK[0]=rsp + #32 STK[1]=RBP
        # java.util.Spliterators$IteratorSpliterator::tryAdvance @ bci:63  L[0]=_ L[1]=_ STK[0]=rsp + #16
        # java.util.stream.ReferencePipeline::forEachWithCancel @ bci:13  L[0]=_ L[1]=rsp + #0 L[2]=rsp + #16 L[3]=#0
        # OopMap {[0]=Oop [16]=Oop [24]=Oop [32]=NarrowOop off=1220/0x4c4}
4c4     ud2	# ShouldNotReachHere

4d8     B68: #	out( N819 ) &lt;- in( B9 )  Freq: 9.23887e-06
4d8     movl    RSI, #-187	# int
4dd     movq    [rsp + #0], R8	# spill
4e1     movq    [rsp + #16], R11	# spill
4e6     movl    [rsp + #24], RDI	# spill
        nop 	# 2 bytes pad for loops and calls
4ec     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.util.stream.MatchOps$1MatchSink::accept @ bci:4  L[0]=rsp + #16 L[1]=rsp + #24 STK[0]=RBP
        # java.util.Spliterators$IteratorSpliterator::tryAdvance @ bci:68  L[0]=_ L[1]=_
        # java.util.stream.ReferencePipeline::forEachWithCancel @ bci:13  L[0]=_ L[1]=rsp + #0 L[2]=rsp + #16 L[3]=#0
        # OopMap {[0]=Oop [16]=Oop [24]=NarrowOop off=1268/0x4f4}
4f4     ud2	# ShouldNotReachHere

508     B69: #	out( N819 ) &lt;- in( B32 )  Freq: 9.15162e-06
508     movl    RSI, #-187	# int
50d     movq    RBP, R8	# spill
510     movq    [rsp + #8], R11	# spill
515     movq    [rsp + #16], RCX	# spill
51a     movl    [rsp + #24], RBX	# spill
        nop 	# 2 bytes pad for loops and calls
520     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.util.ImmutableCollections$SetN$SetNIterator::next @ bci:4  L[0]=rsp + #16 L[1]=_ STK[0]=rsp + #24
        # java.util.Spliterators$IteratorSpliterator::tryAdvance @ bci:63  L[0]=_ L[1]=_ STK[0]=rsp + #8
        # java.util.stream.ReferencePipeline::forEachWithCancel @ bci:13  L[0]=_ L[1]=RBP L[2]=rsp + #8 L[3]=#0
        # OopMap {rbp=Oop [8]=Oop [16]=Oop off=1320/0x528}
528     ud2	# ShouldNotReachHere

53c     B70: #	out( N819 ) &lt;- in( B17 )  Freq: 8.86214e-06
53c     movl    RSI, #-187	# int
541     movq    [rsp + #0], R8	# spill
545     movq    [rsp + #16], R11	# spill
54a     movq    [rsp + #24], RDX	# spill
54f     movl    [rsp + #32], R10	# spill
554     movl    [rsp + #36], R9	# spill
559     movl    [rsp + #40], RBX	# spill
        nop 	# 3 bytes pad for loops and calls
560     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.String::equals @ bci:33  L[0]=rsp + #32 L[1]=_ L[2]=rsp + #36 STK[0]=rsp + #40 STK[1]=RBP
        # jdk.internal.module.IllegalAccessMaps::lambda$isExported$6 @ bci:5  L[0]=_ L[1]=rsp + #24
        # jdk.internal.module.IllegalAccessMaps$$Lambda$33/0x0000000800091c40::test @ bci:8  L[0]=_ L[1]=_
        # java.util.stream.MatchOps$1MatchSink::accept @ bci:12  L[0]=rsp + #16 L[1]=_
        # java.util.Spliterators$IteratorSpliterator::tryAdvance @ bci:68  L[0]=_ L[1]=_
        # java.util.stream.ReferencePipeline::forEachWithCancel @ bci:13  L[0]=_ L[1]=rsp + #0 L[2]=rsp + #16 L[3]=#0
        # OopMap {[0]=Oop [16]=Oop [24]=Oop [32]=NarrowOop [36]=NarrowOop off=1384/0x568}
568     ud2	# ShouldNotReachHere

57c     B71: #	out( N819 ) &lt;- in( B2 )  Freq: 9.99999e-07
57c     movl    RSI, #-34	# int
581     movq    RBP, RDX	# spill
584     movq    [rsp + #8], RCX	# spill
        nop 	# 3 bytes pad for loops and calls
58c     call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.util.stream.ReferencePipeline::forEachWithCancel @ bci:1  L[0]=_ L[1]=RBP L[2]=rsp + #8 L[3]=_ STK[0]=rsp + #8
        # OopMap {rbp=Oop [8]=Oop off=1428/0x594}
594     ud2	# ShouldNotReachHere

5a8     B72: #	out( N819 ) &lt;- in( B5 B4 )  Freq: 1.99134e-06
5a8     movl    RSI, #-138	# int
5ad     movq    RBP, RDX	# spill
5b0     movq    [rsp + #0], R11	# spill
5b4     call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.util.stream.ReferencePipeline::forEachWithCancel @ bci:8  L[0]=_ L[1]=RBP L[2]=rsp + #0 L[3]=#0 STK[0]=#0
        # OopMap {rbp=Oop [0]=Oop off=1468/0x5bc}
5bc     ud2	# ShouldNotReachHere

5d0     B73: #	out( N819 ) &lt;- in( B52 )  Freq: 3.12414e-07
5d0     movl    RSI, #-58	# int
5d5     movq    [rsp + #8], R8	# spill
5da     movq    [rsp + #16], R11	# spill
5df     movl    [rsp + #24], R9	# spill
5e4     call,static  wrapper for: uncommon_trap(reason=&apos;bimorphic_or_optimized_type_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.util.Spliterators$IteratorSpliterator::tryAdvance @ bci:50  L[0]=rsp + #8 L[1]=rsp + #16 STK[0]=rsp + #24
        # java.util.stream.ReferencePipeline::forEachWithCancel @ bci:13  L[0]=_ L[1]=rsp + #8 L[2]=rsp + #16 L[3]=#0
        # OopMap {[8]=Oop [16]=Oop [24]=NarrowOop off=1516/0x5ec}
5ec     ud2	# ShouldNotReachHere

600     B74: #	out( N819 ) &lt;- in( B57 )  Freq: 1.74588e-07
600     movl    RSI, #-58	# int
605     movq    RBP, R8	# spill
608     movq    [rsp + #8], R11	# spill
60d     movl    [rsp + #16], R9	# spill
        nop 	# 2 bytes pad for loops and calls
614     call,static  wrapper for: uncommon_trap(reason=&apos;bimorphic_or_optimized_type_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.util.Spliterators$IteratorSpliterator::tryAdvance @ bci:63  L[0]=_ L[1]=_ STK[0]=rsp + #8 STK[1]=rsp + #16
        # java.util.stream.ReferencePipeline::forEachWithCancel @ bci:13  L[0]=_ L[1]=RBP L[2]=rsp + #8 L[3]=#0
        # OopMap {rbp=Oop [8]=Oop [16]=NarrowOop off=1564/0x61c}
61c     ud2	# ShouldNotReachHere

630     B75: #	out( N819 ) &lt;- in( B59 )  Freq: 1.57129e-07
630     movl    RSI, #35	# int
635     movq    RBP, R8	# spill
638     movq    [rsp + #8], R11	# spill
        nop 	# 3 bytes pad for loops and calls
640     call,static  wrapper for: uncommon_trap(reason=&apos;unloaded&apos; action=&apos;reinterpret&apos; index=&apos;35&apos; debug_id=&apos;0&apos;)
        # java.util.ImmutableCollections$Set12$1::next @ bci:84  L[0]=_
        # java.util.Spliterators$IteratorSpliterator::tryAdvance @ bci:63  L[0]=_ L[1]=_ STK[0]=rsp + #8
        # java.util.stream.ReferencePipeline::forEachWithCancel @ bci:13  L[0]=_ L[1]=RBP L[2]=rsp + #8 L[3]=#0
        # OopMap {rbp=Oop [8]=Oop off=1608/0x648}
648     ud2	# ShouldNotReachHere

65c     B76: #	out( N819 ) &lt;- in( B13 )  Freq: 1e-35
65c     movl    RSI, #-34	# int
661     movq    RBP, R8	# spill
664     movq    [rsp + #8], R11	# spill
669     movl    [rsp + #16], R9	# spill
66e     movl    [rsp + #20], RDI	# spill
        nop 	# 2 bytes pad for loops and calls
674     call,static  wrapper for: uncommon_trap(reason=&apos;class_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # jdk.internal.module.IllegalAccessMaps$$Lambda$33/0x0000000800091c40::test @ bci:5  L[0]=_ L[1]=_ STK[0]=rsp + #16 STK[1]=rsp + #20
        # java.util.stream.MatchOps$1MatchSink::accept @ bci:12  L[0]=rsp + #8 L[1]=_
        # java.util.Spliterators$IteratorSpliterator::tryAdvance @ bci:68  L[0]=_ L[1]=_
        # java.util.stream.ReferencePipeline::forEachWithCancel @ bci:13  L[0]=_ L[1]=RBP L[2]=rsp + #8 L[3]=#0
        # OopMap {rbp=Oop [8]=Oop [16]=NarrowOop [20]=NarrowOop off=1660/0x67c}
67c     ud2	# ShouldNotReachHere

690     B77: #	out( N819 ) &lt;- in( B10 )  Freq: 1.87231e-05
690     movl    RSI, #-10	# int
695     movl    RBP, RDI	# spill
        nop 	# 1 bytes pad for loops and calls
698     call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.util.stream.MatchOps$1MatchSink::accept @ bci:12  L[0]=_ L[1]=_ STK[0]=#NULL STK[1]=RBP
        # java.util.Spliterators$IteratorSpliterator::tryAdvance @ bci:68  L[0]=_ L[1]=_
        # java.util.stream.ReferencePipeline::forEachWithCancel @ bci:13  L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # OopMap {rbp=NarrowOop off=1696/0x6a0}
6a0     ud2	# ShouldNotReachHere

6b4     B78: #	out( N819 ) &lt;- in( B21 )  Freq: 1.8723e-05
6b4     movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
6bc     call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.util.stream.MatchOps$1MatchSink::accept @ bci:21  L[0]=_ L[1]=_ STK[0]=_ STK[1]=#NULL
        # java.util.Spliterators$IteratorSpliterator::tryAdvance @ bci:68  L[0]=_ L[1]=_
        # java.util.stream.ReferencePipeline::forEachWithCancel @ bci:13  L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # OopMap {off=1732/0x6c4}
6c4     ud2	# ShouldNotReachHere

6d8     B79: #	out( N819 ) &lt;- in( B12 )  Freq: 1.86104e-05
6d8     movl    RSI, #-12	# int
6dd     movq    RBP, R8	# spill
6e0     movq    [rsp + #8], R11	# spill
6e5     movl    [rsp + #16], R9	# spill
        nop 	# 2 bytes pad for loops and calls
6ec     call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;make_not_entrant&apos; debug_id=&apos;0&apos;)
        # jdk.internal.module.IllegalAccessMaps$$Lambda$33/0x0000000800091c40::test @ bci:5  L[0]=_ L[1]=_ STK[0]=rsp + #16 STK[1]=#NULL
        # java.util.stream.MatchOps$1MatchSink::accept @ bci:12  L[0]=rsp + #8 L[1]=_
        # java.util.Spliterators$IteratorSpliterator::tryAdvance @ bci:68  L[0]=_ L[1]=_
        # java.util.stream.ReferencePipeline::forEachWithCancel @ bci:13  L[0]=_ L[1]=RBP L[2]=rsp + #8 L[3]=#0
        # OopMap {rbp=Oop [8]=Oop [16]=NarrowOop off=1780/0x6f4}
6f4     ud2	# ShouldNotReachHere

708     B80: #	out( N819 ) &lt;- in( B14 )  Freq: 1.86104e-05
708     movl    RSI, #-10	# int
70d     movl    RBP, R9	# spill
710     call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # jdk.internal.module.IllegalAccessMaps::lambda$isExported$6 @ bci:5  L[0]=_ L[1]=_ STK[0]=#NULL STK[1]=RBP
        # jdk.internal.module.IllegalAccessMaps$$Lambda$33/0x0000000800091c40::test @ bci:8  L[0]=_ L[1]=_
        # java.util.stream.MatchOps$1MatchSink::accept @ bci:12  L[0]=_ L[1]=_
        # java.util.Spliterators$IteratorSpliterator::tryAdvance @ bci:68  L[0]=_ L[1]=_
        # java.util.stream.ReferencePipeline::forEachWithCancel @ bci:13  L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # OopMap {rbp=NarrowOop off=1816/0x718}
718     ud2	# ShouldNotReachHere

72c     B81: #	out( N819 ) &lt;- in( B33 )  Freq: 1.85463e-05
72c     movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
734     call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.util.ImmutableCollections$SetN$SetNIterator::next @ bci:11  L[0]=_ L[1]=_ STK[0]=#NULL
        # java.util.Spliterators$IteratorSpliterator::tryAdvance @ bci:63  L[0]=_ L[1]=_ STK[0]=_
        # java.util.stream.ReferencePipeline::forEachWithCancel @ bci:13  L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # OopMap {off=1852/0x73c}
73c     ud2	# ShouldNotReachHere

750     B82: #	out( N819 ) &lt;- in( B34 )  Freq: 1.85463e-05
750     movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
758     call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.util.ImmutableCollections$SetN$SetNIterator::nextIndex @ bci:22  L[0]=_ L[1]=_ STK[0]=_ STK[1]=#NULL
        # java.util.ImmutableCollections$SetN$SetNIterator::next @ bci:15  L[0]=_ L[1]=_ STK[0]=_
        # java.util.Spliterators$IteratorSpliterator::tryAdvance @ bci:63  L[0]=_ L[1]=_ STK[0]=_
        # java.util.stream.ReferencePipeline::forEachWithCancel @ bci:13  L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # OopMap {off=1888/0x760}
760     ud2	# ShouldNotReachHere

774     B83: #	out( N819 ) &lt;- in( B26 )  Freq: 9.23311e-06
774     movl    RSI, #-187	# int
779     movq    [rsp + #8], R8	# spill
77e     movq    [rsp + #16], R11	# spill
783     movl    [rsp + #24], R9	# spill
788     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.util.Spliterators$IteratorSpliterator::tryAdvance @ bci:16  L[0]=rsp + #8 L[1]=rsp + #16 STK[0]=rsp + #24
        # java.util.stream.ReferencePipeline::forEachWithCancel @ bci:13  L[0]=_ L[1]=rsp + #8 L[2]=rsp + #16 L[3]=#0
        # OopMap {[8]=Oop [16]=Oop [24]=NarrowOop off=1936/0x790}
790     ud2	# ShouldNotReachHere

7a4     B84: #	out( N819 ) &lt;- in( B62 )  Freq: 1.11161e-06
7a4     # exception oop is in rax; no code emitted
7a4     movq    RSI, RAX	# spill
7a7     vzeroupper
	addq    rsp, 64	# Destroy frame
	popq    rbp

7af     jmp     rethrow_stub

7b4     B85: #	out( N819 ) &lt;- in( B1 )  Freq: 1.01328e-06
7b4     movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
7bc     call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.util.stream.ReferencePipeline::forEachWithCancel @ bci:1  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=#NULL
        # OopMap {off=1988/0x7c4}
7c4     ud2	# ShouldNotReachHere

7d8     B86: #	out( N819 ) &lt;- in( B46 )  Freq: 8.96641e-07
7d8     movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
7e0     call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.module.ModuleDescriptor$Exports::isQualified @ bci:4  L[0]=_ STK[0]=#NULL
        # jdk.internal.module.IllegalAccessMaps::lambda$isExported$6 @ bci:12  L[0]=_ L[1]=_
        # jdk.internal.module.IllegalAccessMaps$$Lambda$33/0x0000000800091c40::test @ bci:8  L[0]=_ L[1]=_
        # java.util.stream.MatchOps$1MatchSink::accept @ bci:12  L[0]=_ L[1]=_
        # java.util.Spliterators$IteratorSpliterator::tryAdvance @ bci:68  L[0]=_ L[1]=_
        # java.util.stream.ReferencePipeline::forEachWithCancel @ bci:13  L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # OopMap {off=2024/0x7e8}
7e8     ud2	# ShouldNotReachHere

7fc     B87: #	out( N819 ) &lt;- in( B60 )  Freq: 1.59216e-07
7fc     movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
804     call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.util.ImmutableCollections$Set12$1::next @ bci:70  L[0]=_ STK[0]=#NULL
        # java.util.Spliterators$IteratorSpliterator::tryAdvance @ bci:63  L[0]=_ L[1]=_ STK[0]=_
        # java.util.stream.ReferencePipeline::forEachWithCancel @ bci:13  L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # OopMap {off=2060/0x80c}
80c     ud2	# ShouldNotReachHere

820     B88: #	out( N819 ) &lt;- in( B64 )  Freq: 1.76906e-08
820     movl    RSI, #-10	# int
        nop 	# 3 bytes pad for loops and calls
828     call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.util.ImmutableCollections$Set12$1::next @ bci:33  L[0]=_ STK[0]=#NULL
        # java.util.Spliterators$IteratorSpliterator::tryAdvance @ bci:63  L[0]=_ L[1]=_ STK[0]=_
        # java.util.stream.ReferencePipeline::forEachWithCancel @ bci:13  L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # OopMap {off=2096/0x830}
830     ud2	# ShouldNotReachHere

--------------------------------------------------------------------------------
</opto_assembly>
<writer thread='24067'/>
   1260  463       3       java.util.stream.Sink::begin (1 bytes)
<writer thread='42499'/>
   1260  464       3       java.util.Set::spliterator (6 bytes)
<writer thread='40963'/>
   1260  465       3       java.util.Spliterators::spliterator (16 bytes)
<writer thread='9219'/>
<dependency_failed type='unique_concrete_method' ctxk='java/io/DataInput' x='java.io.DataInputStream readUnsignedShort ()I' witness='java/io/DataInput' stamp='1.261'/>
<dependency_failed type='unique_concrete_method' ctxk='java/io/DataInput' x='java.io.DataInputStream readFully ([BII)V' witness='java/io/DataInput' stamp='1.261'/>
<writer thread='25091'/>
   1261  438       3       java.util.stream.ReferencePipeline::forEachWithCancel (23 bytes)   made not entrant
                              @ 1   java.util.stream.MatchOps$BooleanTerminalSink::cancellationRequested (5 bytes)   accessor
                               \-&gt; TypeProfile (17348/17348 counts) = java/util/stream/MatchOps$1MatchSink
                              @ 13   java.util.Spliterators$IteratorSpliterator::tryAdvance (77 bytes)   inline (hot)
                               \-&gt; TypeProfile (17159/17159 counts) = java/util/Spliterators$IteratorSpliterator
                                @ 50   java.util.ImmutableCollections$SetN$SetNIterator::hasNext (13 bytes)   inline (hot)
                                @ 50   java.util.ImmutableCollections$Set12$1::hasNext (13 bytes)   inline (hot)
                                 \-&gt; TypeProfile (340/21073 counts) = java/util/ImmutableCollections$Set12$1
                                 \-&gt; TypeProfile (20733/21073 counts) = java/util/ImmutableCollections$SetN$SetNIterator
                                @ 63   java.util.ImmutableCollections$SetN$SetNIterator::next (47 bytes)   inline (hot)
                                @ 63   java.util.ImmutableCollections$Set12$1::next (92 bytes)   inline (hot)
                                 \-&gt; TypeProfile (190/20109 counts) = java/util/ImmutableCollections$Set12$1
                                 \-&gt; TypeProfile (19919/20109 counts) = java/util/ImmutableCollections$SetN$SetNIterator
                                  @ 15   java.util.ImmutableCollections$SetN$SetNIterator::nextIndex (56 bytes)   inline (hot)
                                  @ 15   java.util.ImmutableCollections$SetN$SetNIterator::nextIndex (56 bytes)   inline (hot)
                                @ 68   java.util.stream.MatchOps$1MatchSink::accept (44 bytes)   inline (hot)
                                  @ 12   jdk.internal.module.IllegalAccessMaps$$Lambda$33/0x0000000800091c40::test (12 bytes)   inline (hot)
                                  @ 12   jdk.internal.module.IllegalAccessMaps$$Lambda$31/0x0000000800091440::test (12 bytes)   executed &lt; MinInliningThreshold times
                                   \-&gt; TypeProfile (19827/19947 counts) = jdk/internal/module/IllegalAccessMaps$$Lambda$33
                                    @ 8   jdk.internal.module.IllegalAccessMaps::lambda$isExported$6 (24 bytes)   inline (hot)
                                      @ 1   java.lang.module.ModuleDescriptor$Exports::source (5 bytes)   accessor
                                      @ 5   java.lang.String::equals (50 bytes)   inline (hot)
                                        @ 44   java.lang.StringLatin1::equals (36 bytes)   (intrinsic)
                                      @ 12   java.lang.module.ModuleDescriptor$Exports::isQualified (18 bytes)   inline (hot)
                                        @ 4   java.util.ImmutableCollections$SetN::isEmpty (13 bytes)   inline (hot)
                                        @ 4   java.util.ImmutableCollections$Set12::isEmpty (2 bytes)   inline (hot)
                                         \-&gt; TypeProfile (2727/7599 counts) = java/util/ImmutableCollections$Set12
                                         \-&gt; TypeProfile (4872/7599 counts) = java/util/ImmutableCollections$SetN
                              @ 1   java.util.stream.MatchOps$BooleanTerminalSink::cancellationRequested (5 bytes)   accessor
<writer thread='42499'/>
                              @ 2   java.util.Spliterators::spliterator
<writer thread='24067'/>
   1261  466       3       java.util.Spliterators$IteratorSpliterator::&lt;init&gt; (39 bytes)
<writer thread='42499'/>
 (16 bytes)
<writer thread='40963'/>
                              @ 5   java.util.Objects::requireNonNull (14 bytes)
                                @ 8   java.lang.NullPointerException::&lt;init&gt; (5 bytes)   don&apos;t inline Throwable constructors
<writer thread='42499'/>
                                @ 5   java.util.Objects::requireNonNull (14 bytes)
<writer thread='40195'/>
   1262  469       3       java.util.Spliterators$IteratorSpliterator::estimateSize (41 bytes)
<writer thread='24067'/>
                              @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
<writer thread='40963'/>
                              @ 12   java.util.Spliterators$IteratorSpliterator::&lt;init&gt; (39 bytes)   callee is too large
<writer thread='42499'/>
                                @ 12   java.util.Spliterators$IteratorSpliterator::&lt;init&gt; (39 bytes)   callee is too large
<writer thread='40195'/>
                              @ 12   java.util.Collection::iterator (0 bytes)   no static binding
                              @ 25   java.util.Collection::size (0 bytes)   no static binding
<writer thread='40963'/>
   1264  428       1       java.util.stream.MatchOps$BooleanTerminalSink::getAndClearState (5 bytes)
<writer thread='42499'/>
   1264  429       1       java.lang.Boolean::booleanValue (5 bytes)
<writer thread='40195'/>
   1264  470       3       java.util.stream.ReferencePipeline::anyMatch (18 bytes)
<writer thread='24067'/>
   1264  472       3       java.util.stream.MatchOps$$Lambda$32/0x0000000800091840::get$Lambda (10 bytes)
<writer thread='40963'/>
   1264  471       3       java.util.stream.MatchOps::makeRef (29 bytes)
<writer thread='42499'/>
   1265  473       3       java.util.stream.MatchOps$$Lambda$32/0x0000000800091840::&lt;init&gt; (15 bytes)
<writer thread='40963'/>
                              @ 1   java.util.Objects::requireNonNull (14 bytes)
<writer thread='42499'/>
                              @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
<writer thread='24067'/>
                              @ 6   java.util.stream.MatchOps$$Lambda$32/0x0000000800091840::&lt;init&gt; (15 bytes)
<writer thread='40195'/>
                              @ 5   java.util.stream.MatchOps::makeRef (29 bytes)
<writer thread='24067'/>
                                @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
<writer thread='40963'/>
                                @ 8   java.lang.NullPointerException::&lt;init&gt; (5 bytes)   don&apos;t inline Throwable constructors
                              @ 6   java.util.Objects::requireNonNull (14 bytes)
                                @ 8   java.lang.NullPointerException::&lt;init&gt; (5 bytes)   don&apos;t inline Throwable constructors
<writer thread='40195'/>
                                @ 1   java.util.Objects::requireNonNull (14 bytes)
<writer thread='40963'/>
                              @ 20   java.lang.invoke.LambdaForm$MH/0x0000000800061840::linkToTargetMethod (10 bytes)   force inline by annotation
<writer thread='40195'/>
                                  @ 8   java.lang.NullPointerException::&lt;init&gt; (5 bytes)   don&apos;t inline Throwable constructors
<writer thread='40963'/>
                                @ 6   java.lang.invoke.LambdaForm$DMH/0x0000000800060440::invokeStatic (15 bytes)   force inline by annotation
<writer thread='40195'/>
                                @ 6   java.util.Objects::requireNonNull (14 bytes)
<writer thread='24067'/>
   1266  474       3       java.util.stream.MatchOps$MatchOp::&lt;init&gt; (20 bytes)
<writer thread='42499'/>
   1266  475       3       java.util.stream.MatchOps$MatchOp::getOpFlags (8 bytes)
<writer thread='40963'/>
                                  @ 1   java.lang.invoke.DirectMethodHandle::internalMemberName
<writer thread='40195'/>
                                @ 20   java.lang.invoke.LambdaForm$MH/0x0000000800061840::
<writer thread='40963'/>
 (8 bytes)
<writer thread='40195'/>
linkToTargetMethod (10 bytes)   force inline by annotation
<writer thread='40963'/>
   force inline by annotation
<writer thread='24067'/>
                              @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
<writer thread='40195'/>
                                  @ 6   java.lang.invoke.LambdaForm$DMH/0x0000000800060440::invokeStatic (15 bytes)   force inline by annotation
<writer thread='40963'/>
                                  @ 11   java.util.stream.MatchOps$$Lambda$32/0x0000000800091840::get$Lambda (10 bytes)
<writer thread='40195'/>
                                    @ 1   java.lang.invoke.DirectMethodHandle::internalMemberName (8 bytes)   force inline by annotation
<writer thread='40963'/>
                                    @ 6   java.util.stream.MatchOps$$Lambda$32/0x0000000800091840::&lt;init&gt; (15 bytes)
                                      @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
<writer thread='42499'/>
   1267  476       3       java.util.stream.MatchOps$MatchOp::evaluateSequential (7 bytes)
<writer thread='40195'/>
                                    @ 11   java.util.stream.MatchOps$$Lambda$32/0x0000000800091840::get$Lambda (10 bytes)
<writer thread='42499'/>
                              @ 3   java.util.stream.MatchOps$MatchOp::evaluateSequential (27 bytes)
<writer thread='40195'/>
                                      @ 6   java.util.stream.MatchOps$$Lambda$32/0x0000000800091840::&lt;init&gt; (15 bytes)
<writer thread='42499'/>
                                @ 5   java.util.function.Supplier::get (0 bytes)   not inlineable
<writer thread='40195'/>
                                        @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
<writer thread='40963'/>
                              @ 25  
<writer thread='42499'/>
                                @ 14   java.util.stream.PipelineHelper::wrapAndCopyInto (0 bytes)   no static binding
<writer thread='40963'/>
 java.util.stream.MatchOps$MatchOp::&lt;init&gt; (20 bytes)
                                @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
<writer thread='42499'/>
                                @ 20   java.util.stream.MatchOps$BooleanTerminalSink::getAndClearState (5 bytes)
<writer thread='24067'/>
   1268  501       3       java.util.zip.ZipUtils::SH (21 bytes)
<writer thread='42499'/>
                                @ 23   java.lang.Boolean::valueOf (14 bytes)
<writer thread='40195'/>
                                @ 25   java.util.stream.MatchOps$MatchOp::&lt;init&gt; (20 bytes)
                                  @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
                              @ 8   java.util.stream.AbstractPipeline::evaluate (94 bytes)   callee is too large
                              @ 14   java.lang.Boolean::booleanValue (5 bytes)
<writer thread='24067'/>
   1269  477       3       java.util.stream.MatchOps$MatchOp::evaluateSequential (27 bytes)
                              @ 5   java.util.function.Supplier::get (0 bytes)   not inlineable
                              @ 14   java.util.stream.PipelineHelper::wrapAndCopyInto (0 bytes)   no static binding
                              @ 20   java.util.stream.MatchOps$BooleanTerminalSink::getAndClearState (5 bytes)
                              @ 23   java.lang.Boolean::valueOf (14 bytes)
<writer thread='42499'/>
   1270  478       3       java.util.stream.MatchOps$$Lambda$32/0x0000000800091840::get (12 bytes)
                              @ 8   java.util.stream.MatchOps::lambda$makeRef$0 (10 bytes)
                                @ 6   java.util.stream.MatchOps$1MatchSink::&lt;init&gt; (16 bytes)
                                  @ 12   java.util.stream.MatchOps$BooleanTerminalSink::&lt;init&gt; (21 bytes)
                                    @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
<writer thread='24067'/>
   1295  502       3       java.lang.String::endsWith (15 bytes)
                              @ 3  
<writer thread='42499'/>
   1295  503       3       java.lang.String::indexOf (64 bytes)
<writer thread='24067'/>
 java.lang.String::length (11 bytes)
                                @ 6   java.lang.String::coder (15 bytes)
<writer thread='42499'/>
                              @ 1   java.lang.String::coder (15 bytes)
<writer thread='24067'/>
                              @ 7   java.lang.String::length (11 bytes)
<writer thread='40963'/>
   1296  506       3       java.io.UnixFileSystem::normalize (75 bytes)
<writer thread='24067'/>
                                @ 6   java.lang.String::coder (15 bytes)
<writer thread='40195'/>
   1296  504       3       java.lang.StringLatin1::indexOf (25 bytes)
<writer thread='40963'/>
                              @ 1   java.lang.String::
<writer thread='42499'/>
                              @ 7   java.lang.String::
<writer thread='40963'/>
length (11 bytes)
<writer thread='42499'/>
coder (15 bytes)
<writer thread='24067'/>
                              @ 11   java.lang.String::startsWith (138 bytes)   callee is too large
<writer thread='40963'/>
                                @ 6   java.lang.String::coder (15 bytes)
<writer thread='40195'/>
                              @ 21   java.lang.StringLatin1::indexOf (121 bytes)   callee is too large
<writer thread='42499'/>
                              @ 14   java.lang.String::isLatin1 (19 bytes)
<writer thread='40963'/>
                              @ 19   java.lang.String::charAt (25 bytes)
                                @ 1   java.lang.String::isLatin1 (19 bytes)
<writer thread='42499'/>
                              @ 28   java.lang.StringLatin1::indexOf (25 bytes)
<writer thread='38147'/>
   1297  513 %     4       java.lang.StringLatin1::indexOf @ 30 (121 bytes)
<writer thread='42499'/>
                                @ 21   java.lang.StringLatin1::indexOf (121 bytes)   callee is too large
                              @ 42   java.lang.StringUTF16::indexOf (31 bytes)
                                @ 18   java.lang.StringUTF16::length (5 bytes)
<writer thread='40963'/>
                                @ 12   java.lang.StringLatin1::charAt (28 bytes)
<writer thread='42499'/>
                                @ 23   java.lang.StringUTF16::length (5 bytes)
<writer thread='40963'/>
                                  @ 15  java/lang/StringIndexOutOfBoundsException::&lt;init&gt; (not loaded)   not inlineable
<writer thread='42499'/>
        
<writer thread='37379'/>
   1297  514       4       java.lang.String::startsWith (138 bytes)
<writer thread='42499'/>
                        @ 27   java.lang.StringUTF16::indexOfUnsafe (209 bytes)   callee is too large
<writer thread='40963'/>
                                @ 21   java.lang.StringUTF16::charAt (11 bytes)
                                  @ 2   java.lang.StringUTF16::checkIndex (9 bytes)
<writer thread='42499'/>
                              @ 60   java.lang.StringUTF16::indexOfLatin1 (31 bytes)
<writer thread='40963'/>
                                    @ 2   java.lang.StringUTF16::length (5 bytes)
<writer thread='42499'/>
                                @ 8   java.lang.StringUTF16::length (5 bytes)
<writer thread='40963'/>
                                    @ 5   java.lang.String::checkIndex (48 bytes)   callee is too large
<writer thread='42499'/>
                                @ 20   java.lang.StringUTF16::length (5 bytes)
<writer thread='40963'/>
                                  @ 7   java.lang.StringUTF16::getChar (60 bytes)   intrinsic
<writer thread='40195'/>
   1298  505       3       sun.net.www.ParseUtil::firstEncodeIndex (86 bytes)
<writer thread='42499'/>
                                @ 27   java.lang.StringUTF16::indexOfLatin1Unsafe (212 bytes)   callee is too large
<writer thread='40195'/>
                              @ 1   java.lang.String::length (11 bytes)
                                @ 6   java.lang.String::coder (15 bytes)
                              @ 14   java.lang.String::charAt (25 bytes)
<writer thread='24067'/>
   1299  511   !   3       java.net.URL::&lt;init&gt; (543 bytes)
<writer thread='40195'/>
                                @ 1   java.lang.String::isLatin1 (19 bytes)
<writer thread='40963'/>
                              @ 44   java.io.UnixFileSystem::normalize (129 bytes)   callee is too large
                              @ 69   java.io.UnixFileSystem::normalize (129 bytes)   callee is too large
<writer thread='40195'/>
                                @ 12   java.lang.StringLatin1::charAt (28 bytes)
                                  @ 15  java/lang/StringIndexOutOfBoundsException::&lt;init&gt; (not loaded)   not inlineable
                                @ 21   java.lang.StringUTF16::charAt (11 bytes)
                                  @ 2   java.lang.StringUTF16::checkIndex (9 bytes)
                                    @ 2   java.lang.StringUTF16::length (5 bytes)
<writer thread='24067'/>
                              @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
<writer thread='40195'/>
                                    @ 5   java.lang.String::checkIndex (48 bytes)   callee is too large
                                  @ 7   java.lang.StringUTF16::getChar (60 bytes)   intrinsic
<writer thread='24067'/>
                              @ 33   java.lang.System::getSecurityManager (12 bytes)
             
<writer thread='40195'/>
                     
<writer thread='24067'/>
                   
<writer thread='40195'/>
         @ 70   sun.net.www.ParseUtil::match (50 bytes)   callee is too large
<writer thread='24067'/>
@ 0   java.lang.System::allowSecurityManager (13 bytes)
                              @ 46   java.net.URL::checkSpecifyHandler (8 bytes)
                                @ 4   java.lang.SecurityManager::checkPermission (5 bytes)   not inlineable
                              @ 50   java.lang.String::length (11 bytes)
                                @ 6   java.lang.String::coder (15 bytes)
                              @ 65   java.lang.String::charAt (25 bytes)
                                @ 1   java.lang.String::isLatin1 (19 bytes)
                                @ 12   java.lang.StringLatin1::charAt (28 bytes)
                                  @ 15  java/lang/StringIndexOutOfBoundsException::&lt;init&gt; (not loaded)   not inlineable
                                @ 21   java.lang.StringUTF16::
<writer thread='42499'/>
   1303  512       3       java.lang.CharacterDataLatin1::toLowerCase (39 bytes)
<writer thread='24067'/>
charAt (11 bytes)
                                  @ 2   java.lang.StringUTF16::checkIndex (9 bytes)
<writer thread='42499'/>
                              @ 4   java.lang.CharacterDataLatin1::getProperties (11 bytes)
<writer thread='24067'/>
                                    @ 2   java.lang.StringUTF16::length (5 bytes)
                                    @ 5   java.lang.String::checkIndex (48 bytes)   callee is too large
                                  @ 7   java.lang.StringUTF16::getChar (60 bytes)   intrinsic
                              @ 89   java.lang.String::charAt (25 bytes)
                                @ 1   java.lang.String::isLatin1 (19 bytes)
                                @ 12   java.lang.StringLatin1::charAt (28 bytes)
                                  @ 15  java/lang/StringIndexOutOfBoundsException::&lt;init&gt; (not loaded)   not inlineable
                                @ 21   java.lang.StringUTF16::charAt (11 bytes)
                                  @ 2   java.lang.StringUTF16::checkIndex (9 bytes)
<writer thread='42499'/>
   1305  518       3       sun.net.util.IPAddressUtil::checkHostString (53 bytes)
                              @ 16   sun.net.util.IPAddressUtil::scan (92 bytes)   callee is too large
<writer thread='24067'/>

                                    @ 2   java.lang.StringUTF16::length (5 bytes)
                                    @ 5   java.lang.String::checkIndex (48 bytes)   callee is too large
                                  @ 7   java.lang.StringUTF16::getChar (60 bytes)   intrinsic
                              @ 111   java.lang.String::regionMatches (150 bytes)   callee is too large
<writer thread='42499'/>
                              @ 28   java.lang.StringBuilder::&lt;init&gt; (7 bytes)
<writer thread='24067'/>
                              @ 123   java.lang.String::length (11 bytes)
<writer thread='42499'/>
                                @ 3   java.lang.AbstractStringBuilder::&lt;init&gt; (39 bytes)   callee is too large
<writer thread='24067'/>
                                @ 6   java.lang.String::coder (15 bytes)
                              @ 132   java.lang.String::charAt (25 bytes)
                                @ 1   java.lang.String::isLatin1 (19 bytes)
<writer thread='42499'/>
                              @ 33   java.lang.StringBuilder::append (8 bytes)
                                @ 2   java.lang.AbstractStringBuilder::append (45 bytes)   callee is too large
                              @ 38  
<writer thread='24067'/>
                                @ 12   java.lang.StringLatin1::charAt (28 bytes)
<writer thread='42499'/>
 java.lang.String::charAt (25 bytes)
                                @ 1   java.lang.String::isLatin1 (19 bytes)
<writer thread='24067'/>
                                  @ 15  java/lang/StringIndexOutOfBoundsException::&lt;init&gt; (not loaded)   not inlineable
<writer thread='42499'/>
                                @ 12   java.lang.StringLatin1::charAt (28 bytes)
                                  @ 15  java/lang/StringIndexOutOfBoundsException::&lt;init&gt; (not loaded)   not inlineable
                                @ 21   java.lang.StringUTF16::charAt (11 bytes)
                                  @ 2   java.lang.StringUTF16::checkIndex (9 bytes)
                                    @ 2   java.lang.StringUTF16::length (5 bytes)
                                    @ 5   java.lang.String::checkIndex (48 bytes)   callee is too large
                                  @ 7   java.lang.StringUTF16::getChar (60 bytes)   intrinsic
                              @ 41   sun.net.util.IPAddressUtil::describeChar (89 bytes)   callee is too large
                              @ 44   java.lang.StringBuilder::append (8 bytes)
                                @ 2   java.lang.AbstractStringBuilder::append (45 bytes)   callee is too large
                              @ 47   java.lang.StringBuilder::toString (35 bytes)
                                @ 1   java.lang.AbstractStringBuilder::isLatin1 (19 bytes)
                                @ 16   java.lang.StringLatin1::newString (17 bytes)
<writer thread='40963'/>
   1311  515       3       java.lang.Character::toLowerCase (9 bytes)
<writer thread='40195'/>
   1311  516       3       java.net.URL::isBuiltinStreamHandler (12 bytes)
<writer thread='40963'/>
                              @ 1   java.lang.CharacterData::of (120 bytes)   callee is too large
<writer thread='40195'/>
                              @ 2   java.lang.Object::getClass (0 bytes)   intrinsic
<writer thread='40963'/>
                              @ 5   java.lang.CharacterData::toLowerCase (0 bytes)   no static binding
<writer thread='40195'/>
                              @ 5   java.lang.Class::getName (18 bytes)
<writer thread='42499'/>
                                  @ 9   java.util.Arrays::copyOfRange (64 bytes)   callee is too large
<writer thread='40195'/>
                              
<writer thread='42499'/>
                                  @ 13   java.lang.String::&lt;init&gt; (15 bytes)
<writer thread='40195'/>
  @ 14   java.lang.Class::initClassName (0 bytes)   native method
<writer thread='42499'/>
                                    
<writer thread='24067'/>
                                @ 21   java.lang.StringUTF16::charAt (11 bytes)
<writer thread='42499'/>
@ 1   java.lang.Object::&lt;init&gt; (1 bytes)
<writer thread='24067'/>
                                  @ 2   java.lang.StringUTF16::checkIndex (9 bytes)
                                    @ 2   java.lang.StringUTF16::length (5 bytes)
                                    @ 5   java.lang.String::checkIndex (48 bytes)   callee is too large
                                  @ 7   java.lang.StringUTF16::getChar (60 bytes)   intrinsic
                              @ 162   java.lang.String::charAt (25 bytes)
<writer thread='42499'/>
                                @ 31   java.lang.StringUTF16::newString (50 bytes)   callee is too large
<writer thread='24067'/>
                                @ 1   java.lang.String::isLatin1 (19 bytes)
<writer thread='40195'/>
                              @ 8   java.net.URL::isBuiltinStreamHandler (8 bytes)
<writer thread='40963'/>
   1312  517       3       java.net.URL::isBuiltinStreamHandler (8 bytes)
<writer thread='24067'/>
                                @ 12   java.lang.StringLatin1::charAt (28 bytes)
<writer thread='40195'/>
                                @ 4   java.lang.String::startsWith (7 bytes)
<writer thread='40963'/>
                              @ 4   java.lang.String::startsWith (7 bytes)
<writer thread='40195'/>
                                  @ 3   java.lang.String::startsWith (138 bytes)   callee is too large
<writer thread='40963'/>
                                @ 3   java.lang.String::startsWith (138 bytes)   callee is too large
<writer thread='24067'/>
                                  @ 15  java/lang/StringIndexOutOfBoundsException::&lt;init&gt; (not loaded)   not inlineable
                                @ 21   java.lang.StringUTF16::charAt (11 bytes)
                                  @ 2   java.lang.StringUTF16::checkIndex (9 bytes)
                                    @ 2   java.lang.StringUTF16::length (5 bytes)
                                    @ 5   java.lang.String::checkIndex (48 bytes)   callee is too large
                                  @ 7   java.lang.StringUTF16::getChar (60 bytes)   intrinsic
                              @ 185   java.lang.String::substring (58 bytes)   callee is too large
                              @ 188   java.net.URL::toLowerCase (38 bytes)   callee is too large
                              @ 196   java.net.URL::isValidProtocol (78 bytes)   callee is too large
                              @ 242   java.lang.String::equalsIgnoreCase (45 bytes)   callee is too large
                              @ 270   java.lang.String::startsWith (7 bytes)
                                @ 3   java.lang.String::startsWith (138 bytes)   callee is too large
<writer thread='40963'/>
   1315  519       3       sun.net.util.IPAddressUtil::scan (92 bytes)
<writer thread='24067'/>
                              @ 358   java.lang.StringBuilder::&lt;init&gt; (7 bytes)
                                @ 3   java.lang.AbstractStringBuilder::&lt;init&gt; (39 bytes)   callee is too large
<writer thread='40963'/>
                              @ 8   java.lang.String::length (11 bytes)
                                @ 6   java.lang.String::coder (15 bytes)
<writer thread='24067'/>
             
<writer thread='40963'/>
        
<writer thread='40195'/>
   1317  520       3       java.lang.CharacterDataLatin1::toUpperCase (53 bytes)
<writer thread='40963'/>
                      @ 41   java.lang.String::charAt (25 bytes)
             
<writer thread='24067'/>
                 @ 363   java.lang.StringBuilder::append (8 bytes)
<writer thread='40963'/>
                   @ 1   java.lang.String::isLatin1 (19 bytes)
<writer thread='40195'/>
                              @ 4   java.lang.CharacterDataLatin1::
<writer thread='24067'/>
                                @ 2   java.lang.AbstractStringBuilder::append (45 bytes)   callee is too large
<writer thread='40195'/>
getProperties (11 bytes)
<writer thread='24067'/>
                              @ 368   java.lang.StringBuilder::append
<writer thread='40963'/>
             
<writer thread='24067'/>
 (8 bytes)
<writer thread='40963'/>
                   @ 12   java.lang.StringLatin1::charAt (28 bytes)
<writer thread='24067'/>
                                @ 2   java.lang.AbstractStringBuilder::append (45 bytes)   callee is too large
                              @ 371   java.lang.StringBuilder::toString (35 bytes)
                                @ 1   java.lang.AbstractStringBuilder::isLatin1 (19 bytes)
<writer thread='40963'/>
                                  @ 15  java/lang/StringIndexOutOfBoundsException::&lt;init&gt; (not loaded)   not inlineable
                                @ 21   java.lang.StringUTF16::charAt (11 bytes)
                                  @ 2   java.lang.StringUTF16::checkIndex (9 bytes)
<writer thread='24067'/>
                                @ 16   java.lang.StringLatin1::newString (17 bytes)
<writer thread='40963'/>
                                    @ 2   java.lang.StringUTF16::length (5 bytes)
<writer thread='24067'/>
                                  @ 9   java.util.Arrays::copyOfRange (64 bytes)   callee is too large
<writer thread='40963'/>
                                    @ 5   java.lang.String::checkIndex (48 bytes)   callee is too large
<writer thread='24067'/>
                                  @ 13   java.lang.String::
<writer thread='40963'/>
                                  @ 7   java.lang.StringUTF16::getChar (60 bytes)   intrinsic
<writer thread='24067'/>
&lt;init&gt; (15 bytes)
                                    @ 1   java.lang.Object::&lt;init&gt; (1 bytes)
<writer thread='40963'/>
                              @ 49   sun.net.util.IPAddressUtil::match (50 bytes)   callee is too large
<writer thread='40195'/>
   1319  507       3       java.io.UnixFileSystem::prefixLength (25 bytes)
                              @ 1   java.lang.String::isEmpty (14 bytes)
<writer thread='42499'/>
   1320  521 %     3       jvmLearning.chapter11.Test::doubleValue @ 2 (18 bytes)
<writer thread='40963'/>
                              @ 69   java.util.Arrays::binarySearch (9 bytes)
<writer thread='40195'/>
                              @ 11   java.lang.String::charAt (25 bytes)
                                @ 1   java.lang.String::isLatin1 (19 bytes)
                                @ 12  
<writer thread='40963'/>
                                @ 5   java.util.Arrays::binarySearch0 (72 bytes)   callee is too large
<writer thread='24067'/>
                                @ 31   java.lang.StringUTF16::newString (50 bytes)   callee is too large
<writer thread='40195'/>
 java.lang.StringLatin1::charAt (28 bytes)
<writer thread='24067'/>
                              @ 374  java/net/MalformedURLException::&lt;init&gt; (not loaded)   not inlineable
<writer thread='40195'/>
                                  @ 15  java/lang/StringIndexOutOfBoundsException::&lt;init&gt; (not loaded)   not inlineable
                                @ 21   java.lang.StringUTF16::charAt (11 bytes)
                                  @ 2   java.lang.StringUTF16::checkIndex (9 bytes)
<writer thread='24067'/>
               !m             @ 386   java.net.URL::getURLStreamHandler (191 bytes)   callee is too large
<writer thread='40195'/>
                                    @ 2   java.lang.StringUTF16::length (5 bytes)
<writer thread='24067'/>
                              @ 402   java.lang.StringBuilder::&lt;init&gt; (7 bytes)
<writer thread='40195'/>
                   
<writer thread='24067'/>
             
<writer thread='40195'/>
                 
<writer thread='24067'/>
                   @ 3  
<writer thread='25091'/>
   1321  522 %     4       jvmLearning.chapter11.Test::doubleValue @ 2 (18 bytes)
<writer thread='24067'/>
 java.lang.AbstractStringBuilder::&lt;init&gt; (39 bytes)   callee is too large
                              @ 407   java.lang.StringBuilder::append (8 bytes)
<writer thread='40195'/>
@ 5   java.lang.String::checkIndex
<writer thread='24067'/>
        
<writer thread='42499'/>
   1321  508       3       java.lang.String::indexOf (18 bytes)
<writer thread='24067'/>
                        @ 2   java.lang.AbstractStringBuilder::append (45 bytes)   callee is too large
<writer thread='40195'/>
 (48 bytes)   callee is too large
                                  @ 7   java.lang.StringUTF16::getChar (60 bytes)   intrinsic
<writer thread='42499'/>
                              @ 5  
<writer thread='24067'/>
                              @ 414  
<writer thread='42499'/>
 java.lang.String::coder (15 bytes)
<writer thread='24067'/>
 java.lang.StringBuilder::append (8 bytes)
                                @ 2   java.lang.AbstractStringBuilder::append (45 bytes)   callee is too large
<writer thread='42499'/>
                              @ 9   java.lang.String::length (11 bytes)
<writer thread='24067'/>
                              @ 417   java.lang.StringBuilder::toString (35 bytes)
                                @ 1  
<writer thread='42499'/>
                                @ 6   java.lang.String::coder (15 bytes)
<writer thread='24067'/>
 java.lang.AbstractStringBuilder::isLatin1 (19 bytes)
<writer thread='42499'/>
                              @ 14   java.lang.String::indexOf (113 bytes)   callee is too large
<writer thread='37379'/>

============================= C2-compiled nmethod ==============================
<opto_assembly compile_id='514'>
----------------------- MetaData before Compile_id = 514 ------------------------
{method}
 - this oop:          0x00000001269a1758
 - method holder:     &apos;java/lang/String&apos;
 - constants:         0x000000012699b360 constant pool [1059]/operands[28] {0x000000012699b360} for &apos;java/lang/String&apos; cache=0x0000000126aba220
 - access:            0xc1000001  public 
 - name:              &apos;startsWith&apos;
 - signature:         &apos;(Ljava/lang/String;I)Z&apos;
 - max stack:         4
 - max locals:        9
 - size of params:    3
 - method size:       13
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x000000010c0a1de0
 - adapters:          AHE@0x00007f99308e1890: 0xbba00000 i2c: 0x000000010c0e8660 c2i: 0x000000010c0e874a c2iUV: 0x000000010c0e8711 c2iNCI: 0x000000010c0e8787
 - compiled entry     0x000000010c8760a0
 - code size:         138
 - code start:        0x00000001269a1648
 - code end (excl):   0x00000001269a16d2
 - method data:       0x0000000126f0ebf8
 - checked ex length: 0
 - linenumber start:  0x00000001269a16d2
 - localvar length:   9
 - localvar start:    0x00000001269a16ea
 - compiled code: nmethod   1323  422       3       java.lang.String::startsWith (138 bytes)

------------------------ OptoAssembly for Compile_id = 514 -----------------------
#
#  bool ( java/lang/String:NotNull:exact *, java/lang/String:exact *, int )
#
#r018 rsi:rsi   : parm 0: java/lang/String:NotNull:exact *
#r016 rdx:rdx   : parm 1: java/lang/String:exact *
#r010 rcx   : parm 2: int
# -- Old rsp -- Framesize: 64 --
#r583 rsp+60: in_preserve
#r582 rsp+56: return address
#r581 rsp+52: in_preserve
#r580 rsp+48: saved fp register
#r579 rsp+44: pad2, stack alignment
#r578 rsp+40: pad2, stack alignment
#r577 rsp+36: Fixed slot 1
#r576 rsp+32: Fixed slot 0
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N350: #	out( B1 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
000     movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes()]	# compressed klass
	decode_klass_not_null rscratch1, rscratch1
	cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop	# nops to align entry point


020     B1: #	out( B30 B2 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
020     # stack bang (296 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #48	# Create frame

02c     movq    R10, RSI	# spill
02f     movl    R13, RCX	# spill
032     testl   RCX, RCX
034     jl     B30  P=0.000000 C=2760.000000

03a     B2: #	out( B34 B3 ) &lt;- in( B1 )  Freq: 1
03a     movq    RDI, RSI	# spill
03d     movl    RBX, [RSI + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value (constant)
040     movl    R8, [R12 + RBX &lt;&lt; 3 + #12] (compressed oop addressing)	# range
045     NullCheck RBX

045     B3: #	out( B35 B4 ) &lt;- in( B2 )  Freq: 0.999999
045     movq    RAX, RDX	# spill
048     movl    R11, [RDX + #12 (8-bit)]	# compressed ptr ! Field: java/lang/String.value (constant)
04c     NullCheck RDX

04c     B4: #	out( B36 B5 ) &lt;- in( B3 )  Freq: 0.999997
04c     movl    RDX, [R12 + R11 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
051     NullCheck R11

051     B5: #	out( B33 B6 ) &lt;- in( B4 )  Freq: 0.999996
051     movsbl  R14, [RAX + #20 (8-bit)]	# byte ! Field: java/lang/String.coder (constant)
056     movsbl  R9, [RSI + #20 (8-bit)]	# byte ! Field: java/lang/String.coder (constant)
05b     movl    R10, RDX	# spill
05e     movl    RCX, R14	# spill
061     sarl    R10, RCX
064     movl    RBP, R8	# spill
067     movl    RCX, R9	# spill
06a     sarl    RBP, RCX
06c     subl    RBP, R10	# int
06f     cmpl    R13, RBP
072     jg     B33  P=0.000000 C=2760.000000

078     B6: #	out( B31 B7 ) &lt;- in( B5 )  Freq: 0.999996
078     cmpl    R9, R14
07b     jne     B31  P=0.000000 C=2760.000000

081     B7: #	out( B32 B8 ) &lt;- in( B6 )  Freq: 0.999996
081     testl   R9, R9
084     jne     B32  P=0.000000 C=2760.000000

08a     B8: #	out( B27 B9 ) &lt;- in( B7 )  Freq: 0.999995
08a     testl   RDX, RDX	# unsigned
08c     jbe,u   B27  P=0.041258 C=19778.000000

092     B9: #	out( B28 B10 ) &lt;- in( B8 )  Freq: 0.958737
092     cmpl    R13, R8	# unsigned
095     jnb,u   B28  P=0.000001 C=-1.000000

09b     B10: #	out( B28 B11 ) &lt;- in( B9 )  Freq: 0.958736
09b     movslq  R10, RDX	# i2l
09e     movslq  RBP, R13	# i2l
0a1     addq    R10, RBP	# long
0a4     movslq  R8, R8	# i2l
0a7     decq    R10	# long
0aa     cmpq    R10, R8	# unsigned
0ad     jnb,u   B28  P=0.000001 C=-1.000000

0b3     B11: #	out( B28 B12 ) &lt;- in( B10 )  Freq: 0.958735
0b3     movl    R10, RDX	# spill
0b6     decl    R10	# int
0b9     cmpl    R10, RDX	# unsigned
0bc     jnb,u   B28  P=0.000001 C=-1.000000

0c2     B12: #	out( B25 B13 ) &lt;- in( B11 )  Freq: 0.958734
0c2     movsbl  R9, [R12 + R11 &lt;&lt; 3 + #16] (compressed oop addressing)	# byte
0c8     decode_heap_oop_not_null R10,RBX
0cc     movsbl  RCX, [R10 + #16 + R13]	# byte
0d2     cmpl    RCX, R9
0d5     jne     B25  P=0.102521 C=18962.000000

0db     B13: #	out( B29 B14 ) &lt;- in( B12 )  Freq: 0.860444
0db     movl    RBX, RDX	# spill
0dd     addl    RBX, #-3	# int
0e0     decode_heap_oop_not_null R11,R11
0e4     cmpl    RBX, #1
0e7     jle     B29  P=0.000001 C=-1.000000

0ed     B14: #	out( B15 ) &lt;- in( B13 )  Freq: 0.860443
0ed     movl    RSI, #1	# int
0f2     movl    RAX, #1	# int
        nop 	# 9 bytes pad for loops and calls

100     B15: #	out( B25 B16 ) &lt;- in( B14 B19 ) Loop( B15-B19 inner main of N161) Freq: 2.27638
100     movslq  R8, RSI	# i2l
103     movsbl  R9, [R11 + #16 + R8]	# byte
109     movq    RCX, RBP	# spill
10c     addq    RCX, R8	# long
10f     movsbl  RDI, [R10 + #16 + RCX]	# byte
115     cmpl    RDI, R9
118     jne,s   B25  P=0.102521 C=18962.000000

11a     B16: #	out( B25 B17 ) &lt;- in( B15 )  Freq: 2.04301
11a     movsbl  R9, [R10 + #17 + RCX]	# byte
120     movsbl  RDI, [R11 + #17 + R8]	# byte
126     cmpl    R9, RDI
129     jne,s   B25  P=0.102521 C=18962.000000

12b     B17: #	out( B25 B18 ) &lt;- in( B16 )  Freq: 1.83355
12b     movsbl  R9, [R10 + #18 + RCX]	# byte
131     movsbl  RDI, [R11 + #18 + R8]	# byte
137     cmpl    R9, RDI
13a     jne,s   B25  P=0.102521 C=18962.000000

13c     B18: #	out( B25 B19 ) &lt;- in( B17 )  Freq: 1.64558
13c     movsbl  R9, [R10 + #19 + RCX]	# byte
142     movsbl  R8, [R11 + #19 + R8]	# byte
148     cmpl    R9, R8
14b     jne,s   B25  P=0.102521 C=18962.000000

14d     B19: #	out( B15 B20 ) &lt;- in( B18 )  Freq: 1.47687
14d     addl    RSI, #4	# int
150     cmpl    RSI, RBX
152     jl,s   B15	# loop end  P=0.958742 C=19778.000000

154     B20: #	out( B26 B21 ) &lt;- in( B29 B19 )  Freq: 0.0609336
154     cmpl    RSI, RDX
156     jge,s   B26  P=0.500000 C=-1.000000

158     B21: #	out( B22 ) &lt;- in( B20 )  Freq: 0.0304668
158     # castII of RSI

158     B22: #	out( B25 B23 ) &lt;- in( B21 B23 ) Loop( B22-B23 inner post of N411) Freq: 0.0552675
158     movsbl  RCX, [R11 + #16 + RSI]	# byte
15e     movl    R9, RSI	# spill
161     addl    R9, R13	# int
164     movsbl  R8, [R10 + #16 + R9]	# byte
16a     cmpl    R8, RCX
16d     jne,s   B25  P=0.102521 C=18962.000000

16f     B23: #	out( B22 B24 ) &lt;- in( B22 )  Freq: 0.0496014
16f     incl    RSI	# int
171     cmpl    RSI, RDX
173     jl,s   B22	# loop end  P=0.500000 C=19778.000000

175     B24: #	out( B26 ) &lt;- in( B23 )  Freq: 0.0248007
175     jmp,s   B26

177     B25: #	out( B26 ) &lt;- in( B22 B17 B12 B15 B16 B18 )  Freq: 0.903467
177     xorl    RAX, RAX	# int

179     B26: #	out( N350 ) &lt;- in( B25 B20 B27 B24 )  Freq: 0.999992
179     addq    rsp, 48	# Destroy frame
	popq    rbp
	movq    rscratch1, poll_offset[r15_thread] #polling_page_address
	testl   rax, [rscratch1]	# Safepoint: poll for GC

188     ret

189     B27: #	out( B26 ) &lt;- in( B8 )  Freq: 0.0412578
189     movl    RAX, #1	# int
18e     jmp,s   B26

190     B28: #	out( N350 ) &lt;- in( B11 B9 B10 )  Freq: 2.9144e-06
190     movl    RSI, #-138	# int
195     movl    RBP, RBX	# spill
197     movl    [rsp + #0], R11	# spill
19b     movl    [rsp + #8], R13	# spill
1a0     movl    [rsp + #12], RDX	# spill
        nop 	# 3 bytes pad for loops and calls
1a7     call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.String::startsWith @ bci:71  L[0]=_ L[1]=_ L[2]=_ L[3]=RBP L[4]=rsp + #0 L[5]=#0 L[6]=rsp + #12 L[7]=_ L[8]=rsp + #8 STK[0]=#0 STK[1]=rsp + #12
        # OopMap {rbp=NarrowOop [0]=NarrowOop off=428/0x1ac}
1ac     ud2	# ShouldNotReachHere

1c0     B29: #	out( B20 ) &lt;- in( B13 )  Freq: 8.7187e-07
1c0     movl    RSI, #1	# int
1c5     movl    RAX, #1	# int
1ca     jmp,s   B20

1cc     B30: #	out( N350 ) &lt;- in( B1 )  Freq: 5e-07
1cc     movl    RSI, #-187	# int
1d1     movq    RBP, R10	# spill
1d4     movq    [rsp + #0], RDX	# spill
1d8     movl    [rsp + #12], RCX	# spill
        nop 	# 3 bytes pad for loops and calls
1df     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.String::startsWith @ bci:1  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #12 L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=rsp + #12
        # OopMap {rbp=Oop [0]=Oop off=484/0x1e4}
1e4     ud2	# ShouldNotReachHere

1f8     B31: #	out( N350 ) &lt;- in( B6 )  Freq: 4.99998e-07
1f8     movl    RSI, #-187	# int
1fd     movl    RBP, R13	# spill
200     movl    [rsp + #0], RBX	# spill
203     movl    [rsp + #4], R11	# spill
208     movl    [rsp + #8], RDX	# spill
20c     movl    [rsp + #16], R9	# spill
211     movl    [rsp + #20], R14	# spill
        nop 	# 1 bytes pad for loops and calls
217     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.String::startsWith @ bci:50  L[0]=_ L[1]=_ L[2]=RBP L[3]=rsp + #0 L[4]=rsp + #4 L[5]=#0 L[6]=rsp + #8 L[7]=rsp + #16 L[8]=_ STK[0]=rsp + #16 STK[1]=rsp + #20
        # OopMap {[0]=NarrowOop [4]=NarrowOop off=540/0x21c}
21c     ud2	# ShouldNotReachHere

230     B32: #	out( N350 ) &lt;- in( B7 )  Freq: 4.99998e-07
230     movl    RSI, #-187	# int
235     movl    RBP, R13	# spill
238     movl    [rsp + #0], RBX	# spill
23b     movl    [rsp + #4], R11	# spill
240     movl    [rsp + #8], RDX	# spill
244     movl    [rsp + #12], R9	# spill
        nop 	# 2 bytes pad for loops and calls
24b     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.String::startsWith @ bci:55  L[0]=_ L[1]=_ L[2]=RBP L[3]=rsp + #0 L[4]=rsp + #4 L[5]=#0 L[6]=rsp + #8 L[7]=_ L[8]=_ STK[0]=rsp + #12
        # OopMap {[0]=NarrowOop [4]=NarrowOop off=592/0x250}
250     ud2	# ShouldNotReachHere

264     B33: #	out( N350 ) &lt;- in( B5 )  Freq: 4.76835e-07
264     movl    RSI, #-187	# int
269     movq    [rsp + #0], RDI	# spill
26d     movq    [rsp + #8], RAX	# spill
272     movl    [rsp + #20], R13	# spill
277     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.String::startsWith @ bci:14  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=rsp + #20 L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=rsp + #20 STK[1]=RBP
        # OopMap {[0]=Oop [8]=Oop off=636/0x27c}
27c     ud2	# ShouldNotReachHere

290     B34: #	out( N350 ) &lt;- in( B2 )  Freq: 1.01328e-06
290     movl    RSI, #-10	# int
        nop 	# 2 bytes pad for loops and calls
297     call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.String::length @ bci:4  L[0]=_ STK[0]=#NULL
        # java.lang.String::startsWith @ bci:6  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=_
        # OopMap {off=668/0x29c}
29c     ud2	# ShouldNotReachHere

2b0     B35: #	out( N350 ) &lt;- in( B3 )  Freq: 1.01328e-06
2b0     movl    RSI, #-10	# int
        nop 	# 2 bytes pad for loops and calls
2b7     call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.String::startsWith @ bci:10  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=_ STK[1]=_ STK[2]=#NULL
        # OopMap {off=700/0x2bc}
2bc     ud2	# ShouldNotReachHere

2d0     B36: #	out( N350 ) &lt;- in( B4 )  Freq: 1.01328e-06
2d0     movl    RSI, #-10	# int
        nop 	# 2 bytes pad for loops and calls
2d7     call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.String::length @ bci:4  L[0]=_ STK[0]=#NULL
        # java.lang.String::startsWith @ bci:10  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ STK[0]=_ STK[1]=_
        # OopMap {off=732/0x2dc}
2dc     ud2	# ShouldNotReachHere

--------------------------------------------------------------------------------
</opto_assembly>
<writer thread='24067'/>
                              
<writer thread='42499'/>
   1327  509       3       java.lang.String::indexOf (113 bytes)
<writer thread='24067'/>
  @ 16   java.lang.StringLatin1::
<writer thread='26883'/>
   1327  523     n 0       java.lang.Object::clone (native)   
<writer thread='25091'/>

============================= C2-compiled nmethod ==============================
<opto_assembly compile_id='522' compile_kind='osr'>
----------------------- MetaData before Compile_id = 522 ------------------------
{method}
 - this oop:          0x0000000126ec4c80
 - method holder:     &apos;jvmLearning/chapter11/Test&apos;
 - constants:         0x0000000126ec4978 constant pool [39] {0x0000000126ec4978} for &apos;jvmLearning/chapter11/Test&apos; cache=0x0000000126ec3040
 - access:            0xc1000009  public static 
 - name:              &apos;doubleValue&apos;
 - signature:         &apos;(I)I&apos;
 - max stack:         3
 - max locals:        2
 - size of params:    1
 - method size:       13
 - vtable index:      -2
 - i2i entry:         0x000000010c0a1de0
 - adapters:          AHE@0x00007f99308e1750: 0xa0000000 i2c: 0x000000010c0e9460 c2i: 0x000000010c0e9542 c2iUV: 0x000000010c0e9509 c2iNCI: 0x000000010c0e957f
 - compiled entry     0x000000010c0e9542
 - code size:         18
 - code start:        0x0000000126ec4c48
 - code end (excl):   0x0000000126ec4c5a
 - method data:       0x0000000126ec3248
 - checked ex length: 0
 - linenumber start:  0x0000000126ec4c5a
 - localvar length:   2
 - localvar start:    0x0000000126ec4c66

------------------------ OptoAssembly for Compile_id = 522 -----------------------
#
#  int ( rawptr:BotPTR )
#
#r018 rsi:rsi   : parm 0: rawptr:BotPTR
# -- Old rsp -- Framesize: 32 --
#r583 rsp+28: in_preserve
#r582 rsp+24: return address
#r581 rsp+20: in_preserve
#r580 rsp+16: saved fp register
#r579 rsp+12: pad2, stack alignment
#r578 rsp+ 8: pad2, stack alignment
#r577 rsp+ 4: Fixed slot 1
#r576 rsp+ 0: Fixed slot 0
#
000     N28: #	out( B1 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
000     # breakpoint
        nop 	# 11 bytes pad for loops and calls

010     B1: #	out( N28 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
010     # stack bang (96 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

01c     movl    RBP, [RSI + #8 (8-bit)]	# int
01f     movq    RDI, RSI	# spill
022     call_leaf,runtime  OSR_migration_end
        No JVM State Info
        # 
02f     sall    RBP, #1
031     movl    RAX, RBP	# spill
033     addq    rsp, 16	# Destroy frame
	popq    rbp
	movq    rscratch1, poll_offset[r15_thread] #polling_page_address
	testl   rax, [rscratch1]	# Safepoint: poll for GC

042     ret

--------------------------------------------------------------------------------
</opto_assembly>
<writer thread='37379'/>
   1327  422       3       java.lang.String::startsWith (138 bytes)   made not entrant
                              @ 6   java.lang.String::length (11 bytes)   inline (hot)
                                @ 6   java.lang.String::coder (15 bytes)   inline (hot)
                              @ 10   java.lang.String::length (11 bytes)   inline (hot)
                                @ 6   java.lang.String::coder (15 bytes)   inline (hot)
                              @ 39   java.lang.String::coder (15 bytes)   inline (hot)
                              @ 47   java.lang.String::coder (15 bytes)   inline (hot)
<writer thread='40195'/>
   1327  510       3       java.lang.String::regionMatches (150 bytes)
<writer thread='24067'/>
newString (17 bytes)
<writer thread='42499'/>
                              @ 7   java.lang.String::coder (15 bytes)
<writer thread='24067'/>
                                  @ 9   java.util.Arrays::copyOfRange (64 bytes)   callee is too large
<writer thread='40195'/>
                              @ 11   java.lang.String::regionMatches (189 bytes)   callee is too large
<writer thread='42499'/>
                              @ 13   java.lang.String::length (11 bytes)
<writer thread='40195'/>
                          
<writer thread='24067'/>
             
<writer thread='40195'/>
    
<writer thread='38147'/>

============================= C2-compiled nmethod ==============================
<opto_assembly compile_id='513' compile_kind='osr'>
----------------------- MetaData before Compile_id = 513 ------------------------
{method}
 - this oop:          0x0000000126b1dee8
 - method holder:     &apos;java/lang/StringLatin1&apos;
 - constants:         0x0000000126b1b920 constant pool [372] {0x0000000126b1b920} for &apos;java/lang/StringLatin1&apos; cache=0x0000000126b202b0
 - access:            0xc1000009  public static 
 - name:              &apos;indexOf&apos;
 - signature:         &apos;([BI[BII)I&apos;
 - max stack:         4
 - max locals:        11
 - size of params:    5
 - method size:       13
 - intrinsic id:      100 _indexOfIL
 - highest level:     3
 - vtable index:      -2
 - i2i entry:         0x000000010c0a1de0
 - adapters:          AHE@0x00007f99308e1980: 0xbabaa000 i2c: 0x000000010c0e7be0 c2i: 0x000000010c0e7cd2 c2iUV: 0x000000010c0e7c99 c2iNCI: 0x000000010c0e7d0f
 - compiled entry     0x000000010c88b060
 - code size:         121
 - code start:        0x0000000126b1ddc8
 - code end (excl):   0x0000000126b1de41
 - method data:       0x0000000126f3f148
 - checked ex length: 0
 - linenumber start:  0x0000000126b1de41
 - localvar length:   11
 - localvar start:    0x0000000126b1de5a
 - compiled code: nmethod   1328  497       3       java.lang.StringLatin1::indexOf (121 bytes)

------------------------ OptoAssembly for Compile_id = 513 -----------------------
#
#  int ( rawptr:BotPTR )
#
#r018 rsi:rsi   : parm 0: rawptr:BotPTR
# -- Old rsp -- Framesize: 80 --
#r583 rsp+76: in_preserve
#r582 rsp+72: return address
#r581 rsp+68: in_preserve
#r580 rsp+64: saved fp register
#r579 rsp+60: pad2, stack alignment
#r578 rsp+56: pad2, stack alignment
#r577 rsp+52: Fixed slot 1
#r576 rsp+48: Fixed slot 0
#r595 rsp+44: spill
#r594 rsp+40: spill
#r593 rsp+36: spill
#r592 rsp+32: spill
#r591 rsp+28: spill
#r590 rsp+24: spill
#r589 rsp+20: spill
#r588 rsp+16: spill
#r587 rsp+12: spill
#r586 rsp+ 8: spill
#r585 rsp+ 4: spill
#r584 rsp+ 0: spill
#
000     N445: #	out( B1 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
000     # breakpoint
        nop 	# 11 bytes pad for loops and calls

010     B1: #	out( B32 B2 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
010     # stack bang (208 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #64	# Create frame

01c     movq    RBP, [RSI + #80 (8-bit)]	# ptr
020     movq    R10, [RSI + #64 (8-bit)]	# ptr
024     movq    [rsp + #0], R10	# spill
028     movl    RBX, [RSI + #24 (8-bit)]	# int
02b     movl    R10, [RSI + #56 (8-bit)]	# int
02f     movl    [rsp + #16], R10	# spill
034     movl    R14, [RSI + #40 (8-bit)]	# int
038     movl    R13, [RSI + #32 (8-bit)]	# int
03c     movq    RDI, RSI	# spill
03f     call_leaf,runtime  OSR_migration_end
        No JVM State Info
        # 
04c     testq   RBP, RBP	# ptr
04f     je     B32  P=0.001000 C=-1.000000

055     B2: #	out( B42 B3 ) &lt;- in( B1 )  Freq: 0.999
055     movl    R10, [RBP + #8 (8-bit)]	# compressed klass ptr
059     cmpl    R10, narrowklass: precise klass [B: 0x000000012728fa90:Constant:exact *	# compressed klass ptr
060     jne,u   B42  P=0.000001 C=-1.000000

066     B3: #	out( B4 ) &lt;- in( B2 )  Freq: 0.998999
066     movq    R11, RBP	# spill
069     # checkcastPP of R11

069     B4: #	out( B33 B5 ) &lt;- in( B3 B32 )  Freq: 0.999999
069     movq    R10, [rsp + #0]	# spill
06d     testq   R10, R10	# ptr
070     je     B33  P=0.001000 C=-1.000000

076     B5: #	out( B43 B6 ) &lt;- in( B4 )  Freq: 0.998999
076     movl    R9, [R10 + #8 (8-bit)]	# compressed klass ptr
07a     cmpl    R9, narrowklass: precise klass [B: 0x000000012728fa90:Constant:exact *	# compressed klass ptr
081     jne,u   B43  P=0.000001 C=-1.000000

087     B6: #	out( B7 ) &lt;- in( B5 )  Freq: 0.998998
087     # checkcastPP of R10

087     B7: #	out( B45 B8 ) &lt;- in( B6 B33 )  Freq: 0.999998
087     movl    RCX, [R11 + #12 (8-bit)]	# range
08b     NullCheck R11

08b     B8: #	out( B21 ) &lt;- in( B7 )  Freq: 0.999997
08b     # TLS is in R15
08b     jmp     B21

090     B9: #	out( B10 ) &lt;- in( B23 )  Freq: 0.855865
090     movl    RBX, R8	# spill

093     B10: #	out( B17 B11 ) &lt;- in( B31 B24 B28 B9 B26 B30 ) Loop( B10-B30 inner partial_peel_failed ) Freq: 10.9427
093     movslq  RDX, RBX	# i2l
096     movl    R9, RBX	# spill
099     incl    R9	# int
09c     cmpl    RBX, R13
09f     jg,s   B17  P=0.100559 C=4296.000000

0a1     B11: #	out( B39 B12 ) &lt;- in( B10 )  Freq: 9.8423
0a1     movl    R8, RBX	# spill
0a4     addl    R8, [RSP + #16 (32-bit)]	# int
0a9     cmpl    R9, R8
0ac     jge     B39  P=0.000000 C=3864.000000

0b2     B12: #	out( B37 B13 ) &lt;- in( B11 )  Freq: 9.8423
0b2     cmpl    R9, RCX	# unsigned
0b5     jnb,u   B37  P=0.000001 C=-1.000000

0bb     B13: #	out( B44 B14 ) &lt;- in( B12 )  Freq: 9.84229
0bb     movl    RSI, [R10 + #12 (8-bit)]	# range
0bf     NullCheck R10

0bf     B14: #	out( B38 B15 ) &lt;- in( B13 )  Freq: 9.84228
0bf     movsbl  RDI, [R11 + #17 + RDX]	# byte
0c5     cmpl    RSI, #1	# unsigned
0c8     jbe,u   B38  P=0.000001 C=-1.000000

0ce     B15: #	out( B40 B16 ) &lt;- in( B14 )  Freq: 9.84227
0ce     movsbl  RBP, [R10 + #17 (8-bit)]	# byte
0d3     cmpl    RDI, RBP
0d5     je     B40  P=0.000000 C=3864.000000

0db     B16: #	out( B41 B17 ) &lt;- in( B15 )  Freq: 9.84226
0db     cmpl    R9, R8
0de     je     B41  P=0.000000 C=3864.000000

0e4     B17: #	out( B29 B18 ) &lt;- in( B16 B10 )  Freq: 10.9426
0e4     movq    R8, [R15 + #296 (32-bit)]	# ptr
0eb     testl   rax, [R8]	# Safepoint: poll for GC        # java.lang.StringLatin1::indexOf @ bci:116  L[0]=R11 L[1]=_ L[2]=R10 L[3]=rsp + #16 L[4]=_ L[5]=R14 L[6]=R13 L[7]=R9 L[8]=_ L[9]=_ L[10]=_
        # OopMap {r10=Oop r11=Oop off=235/0xeb}
0ee     cmpl    R9, R13
0f1     jg     B29  P=0.091371 C=4296.000000

0f7     B18: #	out( B36 B19 ) &lt;- in( B17 )  Freq: 9.94281
0f7     movl    R8, [R11 + #12 (8-bit)]	# range
0fb     cmpl    R9, R8	# unsigned
0fe     jnb,u   B36  P=0.000001 C=-1.000000

104     B19: #	out( B30 B20 ) &lt;- in( B18 )  Freq: 9.9428
104     movsbl  R8, [R11 + #17 + RDX]	# byte
10a     cmpl    R8, R14
10d     je     B30  P=0.080074 C=4296.000000

113     B20: #	out( B21 ) &lt;- in( B19 )  Freq: 9.14663
113     movl    RBX, R9	# spill

116     B21: #	out( B31 B22 ) &lt;- in( B8 B20 ) Loop( B21-B20 ) Freq: 10.1466
116     movl    R8, RBX	# spill
119     incl    R8	# int
11c     cmpl    R8, R13
11f     jg     B31  P=0.010352 C=41731.000000

125     B22: #	out( B34 B23 ) &lt;- in( B21 )  Freq: 10.0416
125     cmpl    R8, RCX	# unsigned
128     jnb,u   B34  P=0.000001 C=-1.000000

12e     B23: #	out( B9 B24 ) &lt;- in( B22 )  Freq: 10.0416
12e     movslq  R9, RBX	# i2l
131     movsbl  R9, [R11 + #17 + R9]	# byte
137     cmpl    R9, R14
13a     je     B9  P=0.085232 C=41299.000000

140     B24: #	out( B10 B25 ) &lt;- in( B23 )  Freq: 9.18572
140     movq    R9, [R15 + #296 (32-bit)]	# ptr
147     testl   rax, [R9]	# Safepoint: poll for GC        # java.lang.StringLatin1::indexOf @ bci:49  L[0]=R11 L[1]=_ L[2]=R10 L[3]=rsp + #16 L[4]=_ L[5]=R14 L[6]=R13 L[7]=R8 L[8]=_ L[9]=_ L[10]=_
        # OopMap {r10=Oop r11=Oop off=327/0x147}
14a     addl    RBX, #2	# int
14d     cmpl    RBX, R13
150     jg     B10  P=0.010352 C=41731.000000
        nop 	# 10 bytes pad for loops and calls

160     B25: #	out( B35 B26 ) &lt;- in( B24 B27 ) Loop( B25-B27 inner partial_peel ) Freq: 95.9912
160     cmpl    RBX, RCX	# unsigned
162     jnb,us  B35  P=0.000001 C=-1.000000

164     B26: #	out( B10 B27 ) &lt;- in( B25 )  Freq: 95.9911
164     movsbl  R8, [R11 + #16 + RBX]	# byte
16a     cmpl    R8, R14
16d     je     B10  P=0.085232 C=41299.000000

173     B27: #	out( B25 B28 ) &lt;- in( B26 )  Freq: 87.8096
173     movq    R8, [R15 + #296 (32-bit)]	# ptr
17a     testl   rax, [R8]	# Safepoint: poll for GC        # java.lang.StringLatin1::indexOf @ bci:49  L[0]=R11 L[1]=_ L[2]=R10 L[3]=rsp + #16 L[4]=_ L[5]=R14 L[6]=R13 L[7]=RBX L[8]=_ L[9]=_ L[10]=_
        # OopMap {r10=Oop r11=Oop off=378/0x17a}
17d     incl    RBX	# int
17f     cmpl    RBX, R13
182     jle,s   B25  P=0.989648 C=41731.000000

184     B28: #	out( B10 ) &lt;- in( B27 )  Freq: 0.909006
184     jmp     B10

189     B29: #	out( N445 ) &lt;- in( B17 )  Freq: 0.999836
189     movl    RAX, #-1	# int
18e     addq    rsp, 64	# Destroy frame
	popq    rbp
	movq    rscratch1, poll_offset[r15_thread] #polling_page_address
	testl   rax, [rscratch1]	# Safepoint: poll for GC

19d     ret

19e     B30: #	out( B10 ) &lt;- in( B19 )  Freq: 0.796164
19e     movl    RBX, R9	# spill
1a1     jmp     B10

1a6     B31: #	out( B10 ) &lt;- in( B21 )  Freq: 0.105038
1a6     movl    RBX, R8	# spill
1a9     jmp     B10

1ae     B32: #	out( B4 ) &lt;- in( B1 )  Freq: 0.000999987
1ae     xorl    R11, R11	# ptr
1b1     jmp     B4

1b6     B33: #	out( B7 ) &lt;- in( B4 )  Freq: 0.000999986
1b6     xorl    R10, R10	# ptr
1b9     jmp     B7

1be     B34: #	out( B35 ) &lt;- in( B22 )  Freq: 1.01749e-05
1be     movl    RBX, R8	# spill

1c1     B35: #	out( N445 ) &lt;- in( B34 B25 )  Freq: 0.000107441
1c1     movl    RSI, #-28	# int
1c6     movq    [rsp + #0], R10	# spill
1ca     movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #16]
	movl    [rsp + #8], rax
	movq    rax, [rsp - #8]
1dc     movl    [rsp + #12], R14	# spill
1e1     movl    [rsp + #16], R13	# spill
1e6     movq    [rsp + #24], R11	# spill
1eb     movl    [rsp + #32], RBX	# spill
1ef     call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos; debug_id=&apos;0&apos;)
        # java.lang.StringLatin1::indexOf @ bci:43  L[0]=rsp + #24 L[1]=_ L[2]=rsp + #0 L[3]=rsp + #8 L[4]=_ L[5]=rsp + #12 L[6]=rsp + #16 L[7]=rsp + #32 L[8]=_ L[9]=_ L[10]=_ STK[0]=rsp + #24 STK[1]=rsp + #32
        # OopMap {[0]=Oop [24]=Oop off=500/0x1f4}
1f4     ud2	# ShouldNotReachHere

208     B36: #	out( N445 ) &lt;- in( B18 )  Freq: 1.00748e-05
208     movl    RSI, #-28	# int
20d     movq    [rsp + #0], R10	# spill
211     movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #16]
	movl    [rsp + #8], rax
	movq    rax, [rsp - #8]
223     movl    [rsp + #12], R14	# spill
228     movl    [rsp + #16], R13	# spill
22d     movq    [rsp + #24], R11	# spill
232     movl    [rsp + #32], R9	# spill
237     call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos; debug_id=&apos;0&apos;)
        # java.lang.StringLatin1::indexOf @ bci:24  L[0]=rsp + #24 L[1]=_ L[2]=rsp + #0 L[3]=rsp + #8 L[4]=_ L[5]=rsp + #12 L[6]=rsp + #16 L[7]=rsp + #32 L[8]=_ L[9]=_ L[10]=_ STK[0]=rsp + #24 STK[1]=rsp + #32
        # OopMap {[0]=Oop [24]=Oop off=572/0x23c}
23c     ud2	# ShouldNotReachHere

250     B37: #	out( N445 ) &lt;- in( B12 )  Freq: 9.973e-06
250     movl    RSI, #-28	# int
255     movq    [rsp + #0], R10	# spill
259     movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #16]
	movl    [rsp + #8], rax
	movq    rax, [rsp - #8]
26b     movl    [rsp + #12], R14	# spill
270     movl    [rsp + #16], R13	# spill
275     movl    [rsp + #20], RBX	# spill
279     movq    [rsp + #32], R11	# spill
27e     movl    [rsp + #28], R9	# spill
283     movl    [rsp + #40], R8	# spill
        nop 	# 3 bytes pad for loops and calls
28b     call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos; debug_id=&apos;0&apos;)
        # java.lang.StringLatin1::indexOf @ bci:86  L[0]=rsp + #32 L[1]=_ L[2]=rsp + #0 L[3]=rsp + #8 L[4]=_ L[5]=rsp + #12 L[6]=rsp + #16 L[7]=rsp + #20 L[8]=rsp + #28 L[9]=rsp + #40 L[10]=#1 STK[0]=rsp + #32 STK[1]=rsp + #28
        # OopMap {[0]=Oop [32]=Oop off=656/0x290}
290     ud2	# ShouldNotReachHere

2a4     B38: #	out( N445 ) &lt;- in( B14 )  Freq: 9.84228e-06
2a4     movl    RSI, #-28	# int
2a9     movq    RBP, R11	# spill
2ac     movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #16]
	movl    [rsp + #8], rax
	movq    rax, [rsp - #8]
2be     movl    [rsp + #12], R14	# spill
2c3     movl    [rsp + #16], R13	# spill
2c8     movl    [rsp + #20], RBX	# spill
2cc     movl    [rsp + #24], R9	# spill
2d1     movq    [rsp + #32], R10	# spill
2d6     movl    [rsp + #28], R8	# spill
2db     movl    [rsp + #40], RDI	# spill
2df     call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos; debug_id=&apos;0&apos;)
        # java.lang.StringLatin1::indexOf @ bci:90  L[0]=RBP L[1]=_ L[2]=rsp + #32 L[3]=rsp + #8 L[4]=_ L[5]=rsp + #12 L[6]=rsp + #16 L[7]=rsp + #20 L[8]=rsp + #24 L[9]=rsp + #28 L[10]=#1 STK[0]=rsp + #40 STK[1]=rsp + #32 STK[2]=#1
        # OopMap {rbp=Oop [32]=Oop off=740/0x2e4}
2e4     ud2	# ShouldNotReachHere

2f8     B39: #	out( N445 ) &lt;- in( B11 )  Freq: 4.69318e-06
2f8     movl    RSI, #-187	# int
2fd     movq    RBP, R11	# spill
300     movq    [rsp + #0], R10	# spill
304     movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #16]
	movl    [rsp + #8], rax
	movq    rax, [rsp - #8]
316     movl    [rsp + #12], R14	# spill
31b     movl    [rsp + #16], R13	# spill
320     movl    [rsp + #20], RBX	# spill
324     movl    [rsp + #28], R9	# spill
329     movl    [rsp + #36], R8	# spill
        nop 	# 1 bytes pad for loops and calls
32f     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.StringLatin1::indexOf @ bci:80  L[0]=RBP L[1]=_ L[2]=rsp + #0 L[3]=rsp + #8 L[4]=_ L[5]=rsp + #12 L[6]=rsp + #16 L[7]=rsp + #20 L[8]=rsp + #28 L[9]=rsp + #36 L[10]=#1 STK[0]=rsp + #28 STK[1]=rsp + #36
        # OopMap {rbp=Oop [0]=Oop off=820/0x334}
334     ud2	# ShouldNotReachHere

348     B40: #	out( N445 ) &lt;- in( B15 )  Freq: 4.69316e-06
348     movl    RSI, #-187	# int
34d     movq    [rsp + #0], R11	# spill
351     movq    [rsp + #8], R10	# spill
356     movl    [rsp + #20], R14	# spill
35b     movl    [rsp + #24], R13	# spill
360     movl    [rsp + #28], RBX	# spill
364     movl    [rsp + #32], R9	# spill
369     movl    [rsp + #36], R8	# spill
36e     movl    [rsp + #40], RDI	# spill
        nop 	# 1 bytes pad for loops and calls
373     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.StringLatin1::indexOf @ bci:91  L[0]=rsp + #0 L[1]=_ L[2]=rsp + #8 L[3]=rsp + #16 L[4]=_ L[5]=rsp + #20 L[6]=rsp + #24 L[7]=rsp + #28 L[8]=rsp + #32 L[9]=rsp + #36 L[10]=#1 STK[0]=rsp + #40 STK[1]=RBP
        # OopMap {[0]=Oop [8]=Oop off=888/0x378}
378     ud2	# ShouldNotReachHere

38c     B41: #	out( N445 ) &lt;- in( B16 )  Freq: 4.69316e-06
38c     movl    RSI, #-187	# int
391     movq    RBP, R11	# spill
394     movq    [rsp + #0], R10	# spill
398     movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #16]
	movl    [rsp + #8], rax
	movq    rax, [rsp - #8]
3aa     movl    [rsp + #12], R14	# spill
3af     movl    [rsp + #16], R13	# spill
3b4     movl    [rsp + #20], RBX	# spill
3b8     movl    [rsp + #24], R9	# spill
3bd     movl    [rsp + #28], R8	# spill
        nop 	# 1 bytes pad for loops and calls
3c3     call,static  wrapper for: uncommon_trap(reason=&apos;unstable_if&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.StringLatin1::indexOf @ bci:107  L[0]=RBP L[1]=_ L[2]=rsp + #0 L[3]=rsp + #8 L[4]=_ L[5]=rsp + #12 L[6]=rsp + #16 L[7]=rsp + #20 L[8]=_ L[9]=_ L[10]=_ STK[0]=rsp + #24 STK[1]=rsp + #28
        # OopMap {rbp=Oop [0]=Oop off=968/0x3c8}
3c8     ud2	# ShouldNotReachHere

3dc     B42: #	out( B43 ) &lt;- in( B2 )  Freq: 9.99e-07
3dc     movq    R10, [rsp + #0]	# spill

3e0     B43: #	out( N445 ) &lt;- in( B42 B5 )  Freq: 1.998e-06
3e0     movl    RSI, #-115	# int
3e5     movq    [rsp + #0], R10	# spill
3e9     movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #16]
	movl    [rsp + #8], rax
	movq    rax, [rsp - #8]
3fb     movl    [rsp + #12], R14	# spill
400     movl    [rsp + #16], R13	# spill
405     movl    [rsp + #20], RBX	# spill
        nop 	# 2 bytes pad for loops and calls
40b     call,static  wrapper for: uncommon_trap(reason=&apos;constraint&apos; action=&apos;reinterpret&apos; debug_id=&apos;0&apos;)
        # java.lang.StringLatin1::indexOf @ bci:30  L[0]=RBP L[1]=_ L[2]=rsp + #0 L[3]=rsp + #8 L[4]=_ L[5]=rsp + #12 L[6]=rsp + #16 L[7]=rsp + #20 L[8]=_ L[9]=_ L[10]=_
        # OopMap {rbp=Oop [0]=Oop off=1040/0x410}
410     ud2	# ShouldNotReachHere

424     B44: #	out( N445 ) &lt;- in( B13 )  Freq: 9.97298e-06
424     movl    RSI, #-10	# int
        nop 	# 2 bytes pad for loops and calls
42b     call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.StringLatin1::indexOf @ bci:90  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ STK[0]=_ STK[1]=#NULL STK[2]=#1
        # OopMap {off=1072/0x430}
430     ud2	# ShouldNotReachHere

444     B45: #	out( N445 ) &lt;- in( B7 )  Freq: 1.01328e-06
444     movl    RSI, #-66	# int
449     movq    RBP, R11	# spill
44c     movq    [rsp + #0], R10	# spill
450     movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #16]
	movl    [rsp + #8], rax
	movq    rax, [rsp - #8]
462     movl    [rsp + #12], R14	# spill
467     movl    [rsp + #16], R13	# spill
46c     movl    [rsp + #20], RBX	# spill
        nop 	# 3 bytes pad for loops and calls
473     call,static  wrapper for: uncommon_trap(reason=&apos;profile_predicate&apos; action=&apos;maybe_recompile&apos; debug_id=&apos;0&apos;)
        # java.lang.StringLatin1::indexOf @ bci:30  L[0]=RBP L[1]=_ L[2]=rsp + #0 L[3]=rsp + #8 L[4]=_ L[5]=rsp + #12 L[6]=rsp + #16 L[7]=rsp + #20 L[8]=_ L[9]=_ L[10]=_
        # OopMap {rbp=Oop [0]=Oop off=1144/0x478}
478     ud2	# ShouldNotReachHere

--------------------------------------------------------------------------------
</opto_assembly>
<writer thread='24067'/>
                     @ 13   java.lang.String::&lt;init&gt;
<writer thread='40195'/>
@ 27   java.lang.String::
<writer thread='24067'/>
 (15 bytes)
<writer thread='25091'/>
   1333  521 %     3       jvmLearning.chapter11.Test::doubleValue @ 2 (18 bytes)   made not entrant
<writer thread='24067'/>
             
<writer thread='40195'/>
length
<writer thread='25091'/>
<writer thread='24067'/>
                       @ 1   java.lang.Object::&lt;init&gt;
<writer thread='40195'/>
 (11 bytes)
<writer thread='24067'/>
 (1 bytes)
<writer thread='42499'/>
                                @ 6   java.lang.String::coder (15 bytes)
<writer thread='40195'/>
                                @ 6   java.lang.String::coder (15 bytes)
<writer thread='38147'/>
<writer thread='37379'/>
   1334  524       4       jvmLearning.chapter11.Test::doubleValue (18 bytes)
<writer thread='40195'/>
                              @ 43   java.lang.String::length (11 bytes)
<writer thread='42499'/>
                              @ 77   java.lang.StringLatin1::indexOf (121 bytes)   inlining prohibited by policy
<writer thread='40195'/>
                                @ 6   java.lang.String::coder (15 bytes)
<writer thread='24067'/>
                                @ 31   java.lang.StringUTF16::newString (50 bytes)   callee is too large
<writer thread='42499'/>
                              @ 91   java.lang.StringUTF16::indexOf (23 bytes)
<writer thread='24067'/>
                              @ 420  java/net/MalformedURLException::&lt;init&gt; (not loaded)   not inlineable
<writer thread='42499'/>
                                @ 4   java.lang.StringUTF16::checkBoundsBeginEnd (10 bytes)
<writer thread='24067'/>
             
<writer thread='42499'/>
             
<writer thread='24067'/>
        
<writer thread='42499'/>
             
<writer thread='40195'/>
             
<writer thread='42499'/>
        @ 3  
<writer thread='40195'/>
      
<writer thread='24067'/>
     
<writer thread='42499'/>
 java.lang.StringUTF16::
<writer thread='40195'/>
           
<writer thread='42499'/>
length (5 bytes)
<writer thread='40195'/>
@ 70   java.lang.String::coder (15 bytes)
<writer thread='24067'/>
    @ 434   java.lang.String::indexOf (29 bytes)
<writer thread='42499'/>
                          
<writer thread='24067'/>
                                @ 1  
<writer thread='42499'/>
        
<writer thread='24067'/>
 java.lang.String::
<writer thread='42499'/>
@ 6   java.lang.String::
<writer thread='40195'/>
                              @ 78   java.lang.String::coder (15 bytes)
<writer thread='42499'/>
checkBoundsBeginEnd (63 bytes)   callee is too large
<writer thread='24067'/>
isLatin1 (19 bytes)
<writer thread='42499'/>
                                @ 10   java.lang.StringUTF16::checkBoundsBeginEnd (10 bytes)
                                  @ 3   java.lang.StringUTF16::length (5 bytes)
<writer thread='37379'/>

============================= C2-compiled nmethod ==============================
<opto_assembly compile_id='524'>
----------------------- MetaData before Compile_id = 524 ------------------------
{method}
 - this oop:          0x0000000126ec4c80
 - method holder:     &apos;jvmLearning/chapter11/Test&apos;
 - constants:         0x0000000126ec4978 constant pool [39] {0x0000000126ec4978} for &apos;jvmLearning/chapter11/Test&apos; cache=0x0000000126ec3040
 - access:            0xc1000009  public static 
 - name:              &apos;doubleValue&apos;
 - signature:         &apos;(I)I&apos;
 - max stack:         3
 - max locals:        2
 - size of params:    1
 - method size:       13
 - vtable index:      -2
 - i2i entry:         0x000000010c0a1de0
 - adapters:          AHE@0x00007f99308e1750: 0xa0000000 i2c: 0x000000010c0e9460 c2i: 0x000000010c0e9542 c2iUV: 0x000000010c0e9509 c2iNCI: 0x000000010c0e957f
 - compiled entry     0x000000010c0e9542
 - code size:         18
 - code start:        0x0000000126ec4c48
 - code end (excl):   0x0000000126ec4c5a
 - method data:       0x0000000126ec3248
 - checked ex length: 0
 - linenumber start:  0x0000000126ec4c5a
 - localvar length:   2
 - localvar start:    0x0000000126ec4c66

------------------------ OptoAssembly for Compile_id = 524 -----------------------
#
#  int ( int )
#
#r018 rsi   : parm 0: int
# -- Old rsp -- Framesize: 32 --
#r583 rsp+28: in_preserve
#r582 rsp+24: return address
#r581 rsp+20: in_preserve
#r580 rsp+16: saved fp register
#r579 rsp+12: pad2, stack alignment
#r578 rsp+ 8: pad2, stack alignment
#r577 rsp+ 4: Fixed slot 1
#r576 rsp+ 0: Fixed slot 0
#
000     N1: #	out( B1 ) &lt;- in( B1 )  Freq: 1

000     B1: #	out( N1 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
000     # stack bang (96 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

00c     movl    RAX, RSI	# spill
00e     sall    RAX, #1
010     addq    rsp, 16	# Destroy frame
	popq    rbp
	movq    rscratch1, poll_offset[r15_thread] #polling_page_address
	testl   rax, [rscratch1]	# Safepoint: poll for GC

01f     ret

--------------------------------------------------------------------------------
</opto_assembly>
<writer thread='40195'/>
                          
<writer thread='24067'/>
                                @ 13   java.lang.StringLatin1::
<writer thread='40195'/>
    @ 98   java.lang.StringLatin1::
<writer thread='42499'/>
        
<writer thread='24067'/>
indexOf
<writer thread='40195'/>
regionMatchesCI
<writer thread='24067'/>
 (61 bytes)
<writer thread='40195'/>
 (98 bytes)   callee is too large
<writer thread='24067'/>
   callee is too large
<writer thread='42499'/>
                          @ 6   java.lang.String::checkBoundsBeginEnd (63 bytes)   callee is too large
<writer thread='37379'/>
<writer thread='40195'/>
                              @ 113   java.lang.StringUTF16::regionMatchesCI (156 bytes)   callee is too large
<writer thread='42499'/>
                                @ 19   java.lang.StringUTF16::indexOfUnsafe (209 bytes)   callee is too large
<writer thread='24067'/>
                                @ 25   java.lang.StringUTF16::indexOf (43 bytes)   callee is too large
<writer thread='40195'/>
                              @ 131   java.lang.StringLatin1::regionMatchesCI_UTF16 (93 bytes)   callee is too large
<writer thread='42499'/>
                              @ 109   java.lang.StringUTF16::indexOfLatin1 (24 bytes)
<writer thread='24067'/>
                              @ 452   java.lang.String::substring (58 bytes)   callee is too large
<writer thread='40195'/>
                              @ 146   java.lang.StringUTF16::regionMatchesCI_Latin1 (10 bytes)
<writer thread='42499'/>
             
<writer thread='40963'/>
   1337  525       3       jvmLearning.chapter11.Test::calcSum (26 bytes)
<writer thread='40195'/>
                                @ 6   java.lang.StringLatin1::regionMatchesCI_UTF16 (93 bytes)   callee is too large
<writer thread='42499'/>
                   @ 4   java.lang.StringUTF16::checkBoundsBeginEnd (10 bytes)
                                  @ 3   java.lang.StringUTF16::length (5 bytes)
<writer thread='40963'/>
                              @ 12   jvmLearning.chapter11.Test::doubleValue (18 bytes)   inlining prohibited by policy
<writer thread='24067'/>
                              @ 504   java.net.URLStreamHandler::parseURL (1201 bytes)   no static binding
<writer thread='42499'/>
                                  @ 6   java.lang.String::checkBoundsBeginEnd (63 bytes)   callee is too large
                                @ 11   java.lang.String::checkBoundsBeginEnd (63 bytes)   callee is too large
<writer thread='24067'/>
                              @ 523   java.lang.Throwable::getMessage (5 bytes)   no static binding
<writer thread='42499'/>
                                @ 20   java.lang.StringUTF16::indexOfLatin1Unsafe (212 bytes)   callee is too large
<writer thread='24067'/>
                              @ 526  java/net/MalformedURLException::&lt;init&gt; (not loaded)   not inlineable
                              @ 535  java/net/MalformedURLException::initCause (not loaded)   not inlineable
<writer thread='37379'/>
   1339  526 %     4       jvmLearning.chapter11.Test::calcSum @ 4 (26 bytes)
<writer thread='26883'/>
<dependency_failed type='unique_concrete_method' ctxk='java/util/concurrent/ConcurrentMap' x='java.util.concurrent.ConcurrentHashMap remove (Ljava/lang/Object;)Ljava/lang/Object;' witness='java/util/concurrent/ConcurrentMap' stamp='1.350'/>
<dependency_failed type='unique_concrete_method' ctxk='java/util/concurrent/ConcurrentMap' x='java.util.concurrent.ConcurrentHashMap get (Ljava/lang/Object;)Ljava/lang/Object;' witness='java/util/concurrent/ConcurrentMap' stamp='1.350'/>
<dependency_failed type='unique_concrete_method' ctxk='java/util/concurrent/ConcurrentMap' x='java.util.concurrent.ConcurrentHashMap remove (Ljava/lang/Object;)Ljava/lang/Object;' witness='java/util/concurrent/ConcurrentMap' stamp='1.350'/>
   1350   82       3       java.lang.invoke.MethodType$ConcurrentWeakInternSet::expungeStaleElements (27 bytes)   made not entrant
   1350  111       3       java.lang.invoke.MethodType$ConcurrentWeakInternSet::get (47 bytes)   made not entrant
<writer thread='9219'/>
C1 Runtime statistics:
 _resolve_invoke_virtual_cnt:     73
 _resolve_invoke_opt_virtual_cnt: 120
 _resolve_invoke_static_cnt:      43
 _handle_wrong_method_cnt:        1253
 _ic_miss_cnt:                    42
 _generic_arraycopy_cnt:          0
 _generic_arraycopystub_cnt:      0
 _byte_arraycopy_cnt:             0
 _short_arraycopy_cnt:            0
 _int_arraycopy_cnt:              0
 _long_arraycopy_cnt:             0
 _oop_arraycopy_cnt:              0
 _arraycopy_slowcase_cnt:         0
 _arraycopy_checkcast_cnt:        0
 _arraycopy_checkcast_attempt_cnt:0
 _new_type_array_slowcase_cnt:    2
 _new_object_array_slowcase_cnt:  1
 _new_instance_slowcase_cnt:      3
 _new_multi_array_slowcase_cnt:   0
 _monitorenter_slowcase_cnt:      0
 _monitorexit_slowcase_cnt:       0
 _patch_code_slowcase_cnt:        0
 _throw_range_check_exception_count:            0:
 _throw_index_exception_count:                  0:
 _throw_div0_exception_count:                   0:
 _throw_null_pointer_exception_count:           0:
 _throw_class_cast_exception_count:             0:
 _throw_incompatible_class_change_error_count:  0:
 _throw_array_store_exception_count:            0:
 _throw_count:                                  0:

<statistics type='deoptimization'>
Deoptimization traps recorded:
    36 (100.0%) total
  class_check/maybe_recompile/invokevirtual: 1 (2.8%)
                       constraint/none/nop: 34 (94.4%)
              unstable_if/reinterpret/ifeq: 1 (2.8%)
</statistics>
<statistics type='SharedRuntime'>
    1 new array requires GC
   42 inline cache miss in compiled
 1253 wrong method
   43 unresolved static call site
   73 unresolved virtual call site
  120 unresolved opt virtual call site
  383 slow partial subtype
12645 byte array copies
  188 short array copies
   68 int array copies
  100 long array copies
  629 unsafe array copies
AdapterHandlerTable: empty 136 longest 4 total 228 average 1.452229
AdapterHandlerTable: lookups 11471 buckets 11978 equals 10650 hits 10650 compact 10650
</statistics>
<statistics type='opto'>
--- Compiler Statistics ---
Methods seen: 206  Methods parsed: 206  Nodes created: 69552
Blocks parsed: 876  Blocks seen: 1036
802 original NULL checks - 638 elided (79%); optimizer leaves 200,
98 made implicit (49%)
CCP: 56  constants found: 0
Total frameslots = 444, Max frameslots = 28
Inserted 0 spill loads, 0 spill stores, 0 mem-mem moves and 0 copies.
Total load cost=      0, store cost =      0, mem-mem cost =  0.00, copy cost =     0.
Adjusted spill cost =       0.
Conservatively coalesced 237 copies, 0 pairs, 1100 post alloc.
Used cisc instruction  35,  remained in register 530
Average allocation trips 1.652174
High Pressure Blocks = 0, Low Pressure Blocks = 0
Nops added 0 bytes to total of 59389 bytes, for 0.00%
Peephole: peephole rules applied: 0
PhaseIdealLoop=284, sum _unique=212328
</statistics>
<statistics type='intrinsic'>
Compiler intrinsic usage:
     4 (15.4%) _hashCode (worked,virtual)
     4 (15.4%) _min (worked)
     3 (11.5%) _arraycopy (worked)
     2 ( 7.7%) _compressStringC (worked)
    13 (50.0%) _equalsL (worked)
    26 (100.0%) total (worked,virtual)
</statistics>
<writer thread='16899'/>
<destroy_vm stamp='1.354'/>
<writer thread='37379'/>

============================= C2-compiled nmethod ==============================
<tty_done stamp='1.823'/>
</tty>
<hotspot_log_done stamp='1.823'/>
</hotspot_log>
